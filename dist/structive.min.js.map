{"version":3,"file":"structive.min.js","sources":["../src/WebComponents/getGlobalConfig.ts","../src/Filter/errorMessages.ts","../src/Filter/builtinFilters.ts","../src/GlobalId/generateId.ts","../src/utils.ts","../src/StateClass/registerStateClass.ts","../src/StyleSheet/registerStyleSheet.ts","../src/StyleSheet/regsiterCss.ts","../src/BindingBuilder/createFilters.ts","../src/DataBinding/BindingNode/BindingNode.ts","../src/DataBinding/BindingNode/BindingNodeAttribute.ts","../src/DataBinding/BindingNode/BindingNodeCheckbox.ts","../src/DataBinding/BindingNode/BindingNodeClassList.ts","../src/DataBinding/BindingNode/BindingNodeClassName.ts","../src/StateProperty/getStructuredPathInfo.ts","../src/StateProperty/getResolvedPathInfo.ts","../src/StateClass/methods/getContextListIndex.ts","../src/StateClass/methods/getListIndex.ts","../src/StateClass/symbols.ts","../src/StateClass/methods/checkDependency.ts","../src/StateClass/methods/setStatePropertyRef.ts","../src/StateClass/methods/getByRefWritable.ts","../src/StateClass/methods/setByRef.ts","../src/StateClass/apis/resolveWritable.ts","../src/StateClass/apis/trackDependency.ts","../src/constants.ts","../src/StateClass/traps/indexByIndexName2.ts","../src/StateClass/traps/getWritable.ts","../src/StateClass/apis/getAllWritable.ts","../src/StateClass/apis/connectedCallback.ts","../src/StateClass/apis/disconnectedCallback.ts","../src/StateClass/useWritableStateProxy.ts","../src/StateClass/traps/set.ts","../src/StateClass/methods/setLoopContext.ts","../src/StateClass/methods/asyncSetStatePropertyRef.ts","../src/ListWalker/listWalker.ts","../src/StateClass/methods/getByRefReadonly.ts","../src/StateClass/apis/resolveReadonly.ts","../src/StateClass/traps/getReadonly.ts","../src/StateClass/apis/getAllReadonly.ts","../src/StateClass/methods/setCacheable.ts","../src/StateClass/createReadonlyStateProxy.ts","../src/StatePropertyRef/getStatePropertyRef.ts","../src/ListIndex2/ListIndex2.ts","../src/Updater2/getListDiffResults.ts","../src/Updater2/Renderer.ts","../src/Updater2/getElementsDiffResults.ts","../src/Updater2/Updater2.ts","../src/DataBinding/BindingNode/BindingNodeEvent.ts","../src/DataBinding/BindingNode/BindingNodeBlock.ts","../src/DataBinding/BindingNode/BindingNodeIf.ts","../src/DataBinding/BindingNode/BindingNodeFor.ts","../src/BindingBuilder/getDefaultName.ts","../src/DataBinding/BindingNode/BindingNodeProperty.ts","../src/DataBinding/BindingNode/BindingNodeRadio.ts","../src/DataBinding/BindingNode/BindingNodeStyle.ts","../src/ComponentStateInput/symbols.ts","../src/WebComponents/findStructiveParent.ts","../src/DataBinding/BindingNode/BindingNodeComponent.ts","../src/BindingBuilder/getBindingNodeCreator.ts","../src/DataBinding/BindingState/BindingState.ts","../src/DataBinding/BindingState/BindingStateIndex.ts","../src/BindingBuilder/getBindingStateCreator.ts","../src/BindingBuilder/getNodeType.ts","../src/BindingBuilder/parseBindText.ts","../src/BindingBuilder/removeDataBindAttribute.ts","../src/BindingBuilder/replaceTextNodeFromComment.ts","../src/BindingBuilder/createDataBindAttributes.ts","../src/BindingBuilder/getDataBindText.ts","../src/BindingBuilder/getAbsoluteNodePath.ts","../src/BindingBuilder/getNodesHavingDataBind.ts","../src/BindingBuilder/registerDataBindAttributes.ts","../src/Template/registerTemplate.ts","../src/Template/removeEmptyTextNodes.ts","../src/DataBinding/Binding.ts","../src/LoopContext/createLoopContext.ts","../src/DataBinding/BindContent.ts","../src/WebComponents/loadFromImportMap.ts","../src/BindingBuilder/resolveNodeFromPath.ts","../src/ComponentEngine/attachShadow.ts","../src/ComponentEngine/canHaveShadowRoot.ts","../src/ComponentStateBinding/createComponentStateBinding.ts","../src/ComponentStateInput/createComponentStateInput.ts","../src/ComponentStateOutput/createComponentStateOutput.ts","../src/ComponentEngine/ComponentEngine.ts","../src/Template/replaceMustacheWithTemplateTag.ts","../src/Template/replaceTemplateTagWithComment.ts","../src/Template/registerHtml.ts","../src/StateProperty/createAccessorFunctions.ts","../src/PathManager/PathManager.ts","../src/WebComponents/createComponentClass.ts","../src/WebComponents/getComponentConfig.ts","../src/WebComponents/getBaseClass.ts","../src/WebComponents/createSingleFileComponent.ts","../src/WebComponents/loadSingleFileComponent.ts","../src/WebComponents/registerComponentClass.ts","../src/WebComponents/loadImportmap.ts","../src/Router/Router.ts","../src/MainWrapper/MainWrapper.ts","../src/exports.ts","../src/WebComponents/registerSingleFIleComponents.ts","../src/bootstrap.ts"],"sourcesContent":["/**\r\n * getGlobalConfig.ts\r\n *\r\n * Structive全体で利用するグローバル設定（IConfig）を定義・取得するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - globalConfig: デフォルトのグローバル設定値（debug, locale, enableShadowDom等）を定義\r\n * - getGlobalConfig: グローバル設定オブジェクトを返す関数\r\n * - config: getGlobalConfig()のエイリアスとして即時取得用にエクスポート\r\n *\r\n * 設計ポイント:\r\n * - コンポーネント全体で共通利用する設定値を一元管理\r\n * - デフォルト値を明示し、拡張やカスタマイズにも対応しやすい設計\r\n */\r\nimport { IConfig } from \"./types\";\r\n\r\nconst globalConfig: IConfig = {\r\n  \"debug\"                : false,\r\n  \"locale\"               : \"en-US\", // The locale of the component, ex. \"en-US\", default is \"en-US\"\r\n  \"enableShadowDom\"      : true, // Whether to use Shadow DOM or not\r\n  \"enableMainWrapper\"    : true, // Whether to use the main wrapper or not\r\n  \"enableRouter\"         : true, // Whether to use the router or not\r\n  \"autoInsertMainWrapper\": false, // Whether to automatically insert the main wrapper or not\r\n  \"autoInit\"             : true, // Whether to automatically initialize the component or not\r\n  \"mainTagName\"          : \"app-main\", // The tag name of the main wrapper, default is \"app-main\"\r\n  \"routerTagName\"        : \"view-router\", // The tag name of the router, default is \"view-router\"\r\n  \"layoutPath\"           : \"\", // The path to the layout file, default is \"\"\r\n  \"autoLoadFromImportMap\": false, // Whether to automatically load the component from the import map or not\r\n  \"optimizeList\"         : true, // Whether to optimize the list or not\r\n  \"optimizeListElements\" : true, // Whether to optimize the list elements or not\r\n  \"optimizeAccessor\"     : true, // Whether to optimize the accessors or not\r\n};\r\n\r\n\r\nexport function getGlobalConfig():IConfig {\r\n  return globalConfig;\r\n}\r\n\r\nexport const config = getGlobalConfig();\r\n","/**\r\n * errorMessages.ts\r\n *\r\n * フィルタ関数などで利用するエラーメッセージ生成ユーティリティです。\r\n *\r\n * 主な役割:\r\n * - フィルタのオプションや値の型チェックで条件を満たさない場合に、分かりやすいエラーメッセージを投げる\r\n * - 関数名を引数に取り、どのフィルタでエラーが発生したかを明示\r\n *\r\n * 設計ポイント:\r\n * - optionsRequired: オプションが必須なフィルタで未指定時にエラー\r\n * - optionMustBeNumber: オプション値が数値でない場合にエラー\r\n * - valueMustBeNumber: 値が数値でない場合にエラー\r\n * - valueMustBeBoolean: 値がbooleanでない場合にエラー\r\n * - valueMustBeDate: 値がDateでない場合にエラー\r\n */\r\nexport function optionsRequired(fnName:string): never {\r\n  throw new Error(`${fnName} requires at least one option`);\r\n}\r\n\r\nexport function optionMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number as option`);\r\n}\r\n\r\nexport function valueMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number value`);\r\n}\r\n\r\nexport function valueMustBeBoolean(fnName:string): never {\r\n  throw new Error(`${fnName} requires a boolean value`);\r\n}\r\n\r\nexport function valueMustBeDate(fnName:string): never {\r\n  throw new Error(`${fnName} requires a date value`);\r\n}","/**\r\n * builtinFilters.ts\r\n *\r\n * Structiveで利用可能な組み込みフィルタ関数群の実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - 数値・文字列・日付・真偽値などの変換・比較・整形・判定用フィルタを提供\r\n * - フィルタ名ごとにオプション付きの関数を定義し、バインディング時に柔軟に利用可能\r\n * - input/output両方のフィルタとして共通利用できる設計\r\n *\r\n * 設計ポイント:\r\n * - eq, ne, lt, gt, inc, fix, locale, uc, lc, cap, trim, slice, pad, int, float, round, date, time, ymd, falsy, truthy, defaults, boolean, number, string, null など多彩なフィルタを網羅\r\n * - オプション値の型チェックやエラーハンドリングも充実\r\n * - FilterWithOptions型でフィルタ関数群を一元管理し、拡張も容易\r\n * - builtinFilterFnでフィルタ名・オプションからフィルタ関数を動的に取得可能\r\n */\r\nimport { getGlobalConfig } from \"../WebComponents/getGlobalConfig.js\";\r\nimport { optionMustBeNumber, optionsRequired, valueMustBeBoolean, valueMustBeDate, valueMustBeNumber } from \"./errorMessages.js\";\r\nimport { FilterWithOptions } from \"./types\";\r\n\r\nconst config = getGlobalConfig();\r\n\r\nconst eq = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('eq');\r\n  return (value: any) => {\r\n    // 型を揃えて比較\r\n    if (typeof value === 'number') {\r\n      const optValue = Number(opt);\r\n      if (isNaN(optValue)) optionMustBeNumber('eq');\r\n      return value === optValue;\r\n    }\r\n    if (typeof value === 'string') {\r\n      return value === opt;\r\n    }\r\n    // その他は厳密等価\r\n    return value === opt;\r\n  }\r\n}\r\n\r\nconst ne = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ne');\r\n  return (value: any) => {\r\n    // 型を揃えて比較\r\n    if (typeof value === 'number') {\r\n      const optValue = Number(opt);\r\n      if (isNaN(optValue)) optionMustBeNumber('eq');\r\n      return value !== optValue;\r\n    }\r\n    if (typeof value === 'string') {\r\n      return value !== opt;\r\n    }\r\n    // その他は厳密等価\r\n    return value !== opt;\r\n  }\r\n}\r\n\r\nconst not = (options?:string[]) => {\r\n  return (value: any) => {\r\n    if (typeof value !== 'boolean') valueMustBeBoolean('not');\r\n    return !value;\r\n  }\r\n}\r\n\r\nconst lt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('lt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('lt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('lt');\r\n    return value < optValue;\r\n  }\r\n}\r\n\r\nconst le = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('le');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('le');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('le');\r\n    return value <= optValue;\r\n  }\r\n}\r\n\r\nconst gt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('gt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('gt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('gt');\r\n    return value > optValue;\r\n  }\r\n}\r\n\r\nconst ge = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ge');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ge');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ge');\r\n    return value >= optValue;\r\n  }\r\n}\r\n\r\nconst inc = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('inc');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('inc');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('inc');\r\n    return value + optValue;\r\n  }\r\n}\r\n\r\nconst dec = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('dec');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('dec');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('dec');\r\n    return value - optValue;\r\n  }\r\n}\r\n\r\nconst mul = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('mul');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('mul');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('mul');\r\n    return value * optValue;\r\n  }\r\n}\r\n\r\nconst div = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('div');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value / optValue;\r\n  }\r\n}\r\n\r\nconst fix = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value.toFixed(optValue);\r\n  }\r\n}\r\n\r\nconst locale = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('locale');\r\n    return value.toLocaleString(opt);\r\n  }\r\n}\r\n\r\nconst uc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toUpperCase();\r\n  }\r\n}\r\n\r\nconst lc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toLowerCase();\r\n  }\r\n}\r\n\r\nconst cap = (options?:string[]) => {\r\n  return (value: any) => {\r\n    const v = value.toString();\r\n    if (v.length === 0) return v;\r\n    if (v.length === 1) return v.toUpperCase();\r\n    return v.charAt(0).toUpperCase() + v.slice(1);\r\n  }\r\n}\r\n\r\nconst trim = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().trim();\r\n  }\r\n}\r\n\r\nconst slice = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('slice');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('slice');\r\n  return (value: any) => {\r\n    return value.toString().slice(optValue);\r\n  }\r\n}\r\n\r\nconst substr = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('substr');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('substr');\r\n  const opt2 = options?.[1] ?? optionsRequired('substr');\r\n  const opt2Value = Number(opt2);\r\n  if (isNaN(opt2Value)) optionMustBeNumber('substr');\r\n  return (value: any) => {\r\n    return value.toString().substr(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst pad = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('pad');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('pad');\r\n  const opt2 = options?.[1] ?? '0';\r\n  const opt2Value = opt2;\r\n  return (value: any) => {\r\n    return value.toString().padStart(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst rep = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('rep');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('rep');\r\n  return (value: any) => {\r\n    return value.toString().repeat(optValue);\r\n  }\r\n}\r\n\r\nconst rev = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().split('').reverse().join('');\r\n  }\r\n}\r\n\r\nconst int = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseInt(value, 10);\r\n  }\r\n}\r\n\r\nconst float = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseFloat(value);\r\n  }\r\n}\r\n\r\nconst round = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('round');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('round');\r\n    return Math.round(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst floor = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('floor');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('floor');\r\n    return Math.floor(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst ceil = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('ceil');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ceil');\r\n    return Math.ceil(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst percent = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('percent');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('percent');\r\n    return value.toFixed(optValue) + '%';\r\n  }\r\n}\r\n\r\nconst date = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date))  valueMustBeDate('date');\r\n    return value.toLocaleDateString(opt);\r\n  }\r\n}\r\n\r\nconst time = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('time');\r\n    return value.toLocaleTimeString(opt);\r\n  }\r\n}\r\n\r\nconst datetime = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('datetime');\r\n    return value.toLocaleString(opt);\r\n  }\r\n}\r\n\r\nconst ymd = (options?:string[]) => {\r\n  const opt = options?.[0] ?? '-';\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('ymd');\r\n    const year = value.getFullYear().toString();\r\n    const month = (value.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = value.getDate().toString().padStart(2, '0');\r\n    return `${year}${opt}${month}${opt}${day}`;\r\n  }\r\n}\r\n\r\nconst falsy = (options?:string[]) => {\r\n  return (value: any) => value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value);\r\n}\r\n\r\nconst truthy = (options?:string[]) => {\r\n  return (value: any) =>value !== false && value !== null && value !== undefined && value !== 0 && value !== '' && !Number.isNaN(value);\r\n}\r\n\r\nconst defaults = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('defaults');\r\n  return (value: any) => {\r\n    if (value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value)) return opt;\r\n    return value;\r\n  }\r\n}\r\n\r\nconst boolean = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Boolean(value);\r\n  }\r\n}\r\n\r\nconst number = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Number(value);\r\n  }\r\n}\r\n\r\nconst string = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return String(value);\r\n  }\r\n}\r\n\r\nconst _null = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return (value === \"\") ? null : value;\r\n  } \r\n}\r\n\r\nconst builtinFilters: FilterWithOptions = {\r\n  \"eq\": eq,\r\n  \"ne\": ne,\r\n  \"not\": not,\r\n\r\n  \"lt\": lt,\r\n  \"le\": le,\r\n  \"gt\": gt,\r\n  \"ge\": ge,\r\n\r\n  \"inc\": inc,\r\n  \"dec\": dec,\r\n  \"mul\": mul,\r\n  \"div\": div,\r\n\r\n  \"fix\": fix,\r\n  \"locale\": locale,\r\n  \"uc\": uc,\r\n  \"lc\": lc,\r\n  \"cap\": cap,\r\n  \"trim\": trim,\r\n  \"slice\": slice,\r\n  \"substr\": substr,\r\n  \"pad\": pad,\r\n  \"rep\": rep,\r\n  \"rev\": rev,\r\n\r\n  \"int\": int,\r\n  \"float\": float,\r\n  \"round\": round,\r\n  \"floor\": floor,\r\n  \"ceil\": ceil,\r\n  \"percent\": percent,\r\n\r\n  \"date\": date,\r\n  \"time\": time,\r\n  \"datetime\": datetime,\r\n  \"ymd\": ymd,\r\n\r\n  \"falsy\": falsy,\r\n  \"truthy\": truthy,\r\n  \"defaults\": defaults,\r\n\r\n  \"boolean\": boolean,\r\n  \"number\": number,\r\n  \"string\": string,\r\n  \"null\": _null,\r\n};\r\n\r\nexport const outputBuiltinFilters = builtinFilters;\r\nexport const inputBuiltinFilters = builtinFilters;\r\n\r\nexport const builtinFilterFn = (name:string, options: string[]) => (filters: FilterWithOptions) => {\r\n  const filter = filters[name];\r\n  if (!filter) throw new Error(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(options);\r\n}\r\n\r\n","\r\nlet id = 0;\r\n\r\nexport function generateId(): number {\r\n  return ++id;\r\n}","\r\nexport function raiseError(message: string): never {\r\n  throw new Error(message);\r\n}\r\n","/**\r\n * registerStateClass.ts\r\n *\r\n * StateClassインスタンスをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - stateClassById: IDをキーにStateClassインスタンスを管理するレコード\r\n * - registerStateClass: 指定IDでStateClassインスタンスを登録\r\n * - getStateClassById: 指定IDのStateClassインスタンスを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - グローバルにStateClassインスタンスを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IStructiveState } from \"./types\";\r\n\r\nconst stateClassById: Record<number,IStructiveState> = {};\r\n\r\nexport function registerStateClass(id: number, stateClass: IStructiveState) {\r\n  stateClassById[id] = stateClass;\r\n}\r\n\r\nexport function getStateClassById(id: number): IStructiveState {\r\n  return stateClassById[id] ?? raiseError(`getStateClassById: stateClass not found: ${id}`);\r\n}\r\n","/**\r\n * registerStyleSheet.ts\r\n *\r\n * CSSStyleSheetインスタンスをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - styleSheetById: IDをキーにCSSStyleSheetインスタンスを管理するレコード\r\n * - registerStyleSheet: 指定IDでCSSStyleSheetインスタンスを登録\r\n * - getStyleSheetById: 指定IDのCSSStyleSheetインスタンスを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - グローバルにCSSStyleSheetインスタンスを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nconst styleSheetById: Record<number,CSSStyleSheet> = {};\r\n\r\nexport function registerStyleSheet(id: number, css: CSSStyleSheet) {\r\n  styleSheetById[id] = css;\r\n}\r\n\r\nexport function getStyleSheetById(id: number): CSSStyleSheet {\r\n  return styleSheetById[id] ?? raiseError(`getStyleSheetById: stylesheet not found: ${id}`);\r\n}","/**\r\n * regsiterCss.ts\r\n *\r\n * CSS文字列をCSSStyleSheetとして生成し、IDで登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - CSS文字列からCSSStyleSheetインスタンスを生成\r\n * - registerStyleSheetを利用して、指定IDでCSSStyleSheetを登録\r\n *\r\n * 設計ポイント:\r\n * - styleSheet.replaceSyncで同期的にCSSを適用\r\n * - グローバルなスタイル管理や動的スタイル適用に利用可能\r\n */\r\nimport { registerStyleSheet } from \"./registerStyleSheet.js\";\r\n\r\nexport function registerCss(id: number, css: string) {\r\n  const styleSheet = new CSSStyleSheet();\r\n  styleSheet.replaceSync(css);\r\n  registerStyleSheet(id, styleSheet);\r\n}","import { FilterFn, Filters, FilterWithOptions } from \"../Filter/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\n\r\n/**\r\n * フィルターテキスト（nameとoptionsを持つ）から、実際のフィルター関数（FilterFn）を生成する。\r\n * \r\n * - textToFilter: フィルターテキストから対応するフィルター関数を取得し、オプションを適用して返す。\r\n * - createFilters: フィルターテキスト配列からフィルター関数配列を生成し、同じ入力にはキャッシュを利用する。\r\n */\r\nfunction textToFilter(filters:FilterWithOptions, text: IFilterText): FilterFn {\r\n  const filter = filters[text.name];\r\n  if (!filter) raiseError(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(text.options);\r\n}\r\n\r\nconst cache : Map<IFilterText[], Filters> = new Map();\r\n\r\n/**\r\n * フィルターテキスト配列（texts）からフィルター関数配列（Filters）を生成する。\r\n * すでに同じtextsがキャッシュされていればそれを返す。\r\n * \r\n * @param filters フィルター名→関数の辞書\r\n * @param texts   フィルターテキスト配列\r\n * @returns       フィルター関数配列\r\n */\r\nexport function createFilters(filters:FilterWithOptions, texts: IFilterText[]): Filters {\r\n  let result = cache.get(texts);\r\n  if (typeof result === \"undefined\") {\r\n    result = [];\r\n    for(let i = 0; i < texts.length; i++) {\r\n      result.push(textToFilter(filters, texts[i]));\r\n    }\r\n    cache.set(texts, result);\r\n  }\r\n  return result;\r\n}\r\n","import { Filters } from \"../../Filter/types\";\r\nimport { IListIndex2 } from \"../../ListIndex2/types\";\r\nimport { IReadonlyStateProxy } from \"../../StateClass/types\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { IRenderer } from \"../../Updater2/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { IBindingNode } from \"./types\";\r\n\r\n/**\r\n * BindingNodeクラスは、1つのバインディング対象ノード（ElementやTextなど）に対する\r\n * バインディング処理の基底クラスです。\r\n *\r\n * 主な役割:\r\n * - ノード・プロパティ名・フィルタ・デコレータ・バインディング情報の保持\r\n * - バインディング値の更新（update）、値の割り当て（assignValue）のインターフェース提供\r\n * - 複数バインド内容（bindContents）の管理\r\n * - サブクラスでassignValueやupdateElementsを実装し、各種ノード・プロパティごとのバインディング処理を拡張\r\n *\r\n * 設計ポイント:\r\n * - assignValue, updateElementsは未実装（サブクラスでオーバーライド必須）\r\n * - isSelectElement, value, filteredValue, isForなどはサブクラスで用途に応じて拡張\r\n * - フィルタやデコレータ、バインド内容の管理も柔軟に対応\r\n */\r\nexport class BindingNode implements IBindingNode {\r\n  #binding: IBinding;\r\n  #node: Node;\r\n  #name: string;\r\n  #filters: Filters;\r\n  #decorates: string[];\r\n  #bindContents: Set<IBindContent> = new Set<IBindContent>();\r\n  get node(): Node {\r\n    return this.#node;\r\n  }\r\n  get name(): string {\r\n    return this.#name;\r\n  }\r\n  get subName(): string {\r\n    return this.#name;\r\n  }\r\n  get binding(): IBinding {\r\n    return this.#binding;\r\n  }\r\n  get decorates(): string[] {\r\n    return this.#decorates;\r\n  }\r\n  get filters(): Filters {\r\n    return this.#filters;\r\n  }\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#node = node;\r\n    this.#name = name;\r\n    this.#filters = filters;\r\n    this.#decorates = decorates;\r\n  }\r\n  init():void {\r\n    // サブクラスで初期化処理を実装可能\r\n  }\r\n  assignValue(value: any): void {\r\n    raiseError(`BindingNode: assignValue not implemented`);\r\n  }\r\n  updateElements(listIndexes: IListIndex2[], values: any[]) {\r\n    raiseError(`BindingNode: updateElements not implemented`);\r\n  }\r\n  notifyRedraw(refs: IStatePropertyRef[]): void {\r\n    // サブクラスで親子関係を考慮してバインディングの更新を通知する実装が可能\r\n  }\r\n  applyChange(renderer: IRenderer): void {\r\n    if (renderer.updatedBindings.has(this.binding)) return;\r\n    const filteredValue = this.binding.bindingState.getFilteredValue(renderer.readonlyState);\r\n    this.assignValue(filteredValue);\r\n    renderer.updatedBindings.add(this.binding);\r\n  }\r\n\r\n  get isSelectElement(): boolean {\r\n    return this.node instanceof HTMLSelectElement;\r\n  }\r\n  get value():any {\r\n    return null;\r\n  }\r\n  get filteredValue():any {\r\n    return null;\r\n  }\r\n  get isFor(): boolean {\r\n    return false;\r\n  }\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { GetByRefSymbol } from \"../../StateClass/symbols.js\";\r\nimport { IReadonlyStateProxy } from \"../../StateClass/types.js\";\r\nimport { IRenderer } from \"../../Updater2/types.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeAttributeクラスは、属性バインディング（例: attr.src, attr.alt など）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - ノード属性名（subName）を抽出し、値を属性としてElementにセット\r\n * - null/undefined/NaNの場合は空文字列に変換してセット\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameから属性名（subName）を抽出（例: \"attr.src\" → \"src\"）\r\n * - assignValueで属性値を常に文字列として設定\r\n * - createBindingNodeAttributeファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeAttribute extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as Element;\r\n    element.setAttribute(this.subName, value.toString());\r\n  }\r\n}\r\n\r\n/**\r\n * 属性バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeAttributeインスタンスを生成\r\n */\r\nexport const createBindingNodeAttribute: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeAttribute(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeCheckboxクラスは、チェックボックス（input[type=\"checkbox\"]）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（配列）に現在のvalueが含まれているかどうかでchecked状態を制御\r\n * - 値が配列でない場合はエラーを投げる\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで配列内にvalueが含まれていればchecked=true\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeCheckbox extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeCheckbox.update: value is not array`, );\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.map(_val => _val.toString()).includes(element.value);\r\n  }\r\n}\r\n\r\n/**\r\n * チェックボックス用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeCheckboxインスタンスを生成\r\n */\r\nexport const createBindingNodeCheckbox: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeCheckbox(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeClassListクラスは、class属性（classList）のバインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（配列）を空白区切りのclass属性値としてElementにセット\r\n * - 値が配列でない場合はエラーを投げる\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで配列を受け取り、join(\" \")でclassNameに反映\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeClassList extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeClassList.update: value is not array`);\r\n    }\r\n    const element = this.node as Element;\r\n    element.className = value.join(\" \");\r\n  }\r\n}\r\n\r\n/**\r\n * classList用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeClassListインスタンスを生成\r\n */\r\nexport const createBindingNodeClassList: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassList(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeClassNameクラスは、class属性の個別クラス名（例: class.active など）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（boolean）に応じて、指定クラス名（subName）をElementに追加・削除\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからクラス名（subName）を抽出（例: \"class.active\" → \"active\"）\r\n * - assignValueでboolean値のみ許容し、型が異なる場合はエラー\r\n * - trueならclassList.add、falseならclassList.removeでクラス操作\r\n * - ファクトリ関数でフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeClassName extends BindingNode {\r\n  #subName: string;\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeClassName.update: value is not boolean`);\r\n    }\r\n    const element = this.node as Element;\r\n    if (value) {\r\n      element.classList.add(this.subName);\r\n    } else {\r\n      element.classList.remove(this.subName);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * class名バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeClassNameインスタンスを生成\r\n */\r\nexport const createBindingNodeClassName: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassName(binding, node, name, filterFns, decorates);\r\n  }\r\n","/**\r\n * getStructuredPathInfo.ts\r\n *\r\n * Stateプロパティのパス文字列から、詳細な構造化パス情報（IStructuredPathInfo）を生成・キャッシュするユーティリティです。\r\n *\r\n * 主な役割:\r\n * - パス文字列を分割し、各セグメントやワイルドカード（*）の位置・親子関係などを解析\r\n * - cumulativePaths/wildcardPaths/parentPathなど、パス階層やワイルドカード階層の情報を構造化\r\n * - 解析結果をIStructuredPathInfoとしてキャッシュし、再利用性とパフォーマンスを両立\r\n * - reservedWords（予約語）チェックで安全性を担保\r\n *\r\n * 設計ポイント:\r\n * - パスごとにキャッシュし、同じパスへの複数回アクセスでも高速に取得可能\r\n * - ワイルドカードや親子関係、階層構造を厳密に解析し、バインディングや多重ループに最適化\r\n * - childrenプロパティでパス階層のツリー構造も構築\r\n * - 予約語や危険なパスはraiseErrorで例外を発生\r\n */\r\nimport { raiseError } from '../utils.js';\r\nimport { IStructuredPathInfo } from './types';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IStructuredPathInfo } = {};\r\n//const _cache: Map<string, IStructuredPathInfo> = new Map();\r\n\r\n/**\r\n * パターン情報を取得します\r\n * @param pattern パターン\r\n * @returns {IPatternInfo} パターン情報\r\n */\r\nclass StructuredPathInfo implements IStructuredPathInfo {\r\n  static id : number = 0;\r\n  id = ++StructuredPathInfo.id;\r\n  sid = this.id.toString();\r\n  pattern;\r\n  pathSegments;\r\n  lastSegment;\r\n  cumulativePaths;\r\n  cumulativePathSet;\r\n  cumulativeInfos;\r\n  cumulativeInfoSet;\r\n  wildcardPaths;\r\n  wildcardPathSet;\r\n  wildcardInfos;\r\n  indexByWildcardPath;\r\n  wildcardInfoSet;\r\n  wildcardParentPaths;\r\n  wildcardParentPathSet;\r\n  wildcardParentInfos;\r\n  wildcardParentInfoSet;\r\n  lastWildcardPath;\r\n  lastWildcardInfo;\r\n  parentPath;\r\n  parentInfo;\r\n  wildcardCount;\r\n  children = {};\r\n\r\n  constructor(pattern: string) {\r\n    const getPattern = (_pattern: string): IStructuredPathInfo => {\r\n      return (pattern === _pattern) ? this : getStructuredPathInfo(_pattern);\r\n    };\r\n    const pathSegments = pattern.split(\".\");\r\n    const cumulativePaths = [];\r\n    const cumulativeInfos: IStructuredPathInfo[] = [];\r\n    const wildcardPaths = [];\r\n    const indexByWildcardPath: Record<string, number> = {};\r\n    const wildcardInfos = [];\r\n    const wildcardParentPaths = [];\r\n    const wildcardParentInfos = [];\r\n    let currentPatternPath = \"\", prevPatternPath = \"\";\r\n    let wildcardCount = 0;\r\n    for(let i = 0; i < pathSegments.length; i++) {\r\n      currentPatternPath += pathSegments[i];\r\n      if (pathSegments[i] === \"*\") {\r\n        wildcardPaths.push(currentPatternPath);\r\n        indexByWildcardPath[currentPatternPath] = wildcardCount;\r\n        wildcardInfos.push(getPattern(currentPatternPath));\r\n        wildcardParentPaths.push(prevPatternPath);\r\n        wildcardParentInfos.push(getPattern(prevPatternPath));\r\n        wildcardCount++;\r\n      }\r\n      cumulativePaths.push(currentPatternPath);\r\n      cumulativeInfos.push(getPattern(currentPatternPath));\r\n      prevPatternPath = currentPatternPath;\r\n      currentPatternPath += \".\";\r\n    }\r\n    const lastWildcardPath = wildcardPaths.length > 0 ? wildcardPaths[wildcardPaths.length - 1] : null;\r\n    const parentPath = cumulativePaths.length > 1 ? cumulativePaths[cumulativePaths.length - 2] : null;\r\n    this.pattern = pattern;\r\n    this.pathSegments = pathSegments;\r\n    this.lastSegment = pathSegments[pathSegments.length - 1];\r\n    this.cumulativePaths = cumulativePaths;\r\n    this.cumulativePathSet = new Set(cumulativePaths);\r\n    this.cumulativeInfos = cumulativeInfos;\r\n    this.cumulativeInfoSet = new Set(cumulativeInfos);\r\n    this.wildcardPaths = wildcardPaths;\r\n    this.wildcardPathSet = new Set(wildcardPaths);\r\n    this.indexByWildcardPath = indexByWildcardPath;\r\n    this.wildcardInfos = wildcardInfos;\r\n    this.wildcardInfoSet = new Set(wildcardInfos);\r\n    this.wildcardParentPaths = wildcardParentPaths;\r\n    this.wildcardParentPathSet = new Set(wildcardParentPaths);\r\n    this.wildcardParentInfos = wildcardParentInfos;\r\n    this.wildcardParentInfoSet = new Set(wildcardParentInfos);\r\n    this.lastWildcardPath = lastWildcardPath;\r\n    this.lastWildcardInfo = lastWildcardPath ? getPattern(lastWildcardPath) : null;\r\n    this.parentPath = parentPath;\r\n    this.parentInfo = parentPath ? getPattern(parentPath) : null;\r\n    this.wildcardCount = wildcardCount;\r\n    if (this.parentInfo) {\r\n      this.parentInfo.children[this.lastSegment] = this;\r\n    }\r\n  }\r\n}\r\n\r\nexport const reservedWords = new Set([\r\n  \"constructor\", \"prototype\", \"__proto__\", \"toString\",\r\n  \"valueOf\", \"hasOwnProperty\", \"isPrototypeOf\",\r\n  \"watch\", \"unwatch\", \"eval\", \"arguments\",\r\n  \"let\", \"var\", \"const\", \"class\", \"function\",\r\n  \"null\", \"true\", \"false\", \"new\", \"return\",\r\n]);\r\n\r\nexport function getStructuredPathInfo(structuredPath: string): IStructuredPathInfo {\r\n  if (reservedWords.has(structuredPath)) {\r\n    raiseError(`getStructuredPathInfo: pattern is reserved word: ${structuredPath}`);\r\n  }\r\n  let info: IStructuredPathInfo | undefined;\r\n  info = _cache[structuredPath];\r\n  if (typeof info !== \"undefined\") {\r\n    return info;\r\n  }\r\n  return (_cache[structuredPath] = new StructuredPathInfo(structuredPath));\r\n}\r\n","/**\r\n * getResolvedPathInfo.ts\r\n *\r\n * Stateプロパティ名（パス文字列）から、ワイルドカードやインデックス情報を含む\r\n * 詳細なパス情報（IResolvedPathInfo）を解析・生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - プロパティ名を分解し、ワイルドカードやインデックスの有無・種別を判定\r\n * - context/all/partial/none のワイルドカード種別を自動判定\r\n * - パスごとにキャッシュし、再利用性とパフォーマンスを両立\r\n * - getStructuredPathInfoで構造化パス情報も取得\r\n *\r\n * 設計ポイント:\r\n * - \"constructor\"や\"toString\"などの予約語も扱えるよう、Mapではなくオブジェクトでキャッシュ\r\n * - ワイルドカード（*）や数値インデックスを柔軟に判定し、wildcardIndexesに格納\r\n * - context型は未確定インデックス、all型は全て確定インデックス、partial型は混在を示す\r\n * - ResolvedPathInfoクラスでパス解析・情報保持を一元化\r\n */\r\nimport { IResolvedPathInfo, WildcardType } from './types';\r\nimport { getStructuredPathInfo } from './getStructuredPathInfo.js';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IResolvedPathInfo } = {};\r\n//const _cache: Map<string, IResolvedPathInfo> = new Map();\r\n\r\nclass ResolvedPathInfo implements IResolvedPathInfo {\r\n  static id : number = 0;\r\n  id = ++ResolvedPathInfo.id;\r\n  name;\r\n  elements;\r\n  paths;\r\n  wildcardCount;\r\n  wildcardType;\r\n  wildcardIndexes;\r\n  info;\r\n  constructor(name: string) {\r\n    const elements = name.split(\".\");\r\n    const tmpPatternElements = elements.slice();\r\n    const paths = [];\r\n    let incompleteCount = 0;\r\n    let completeCount = 0;\r\n    let lastPath = \"\";\r\n    let wildcardCount = 0;\r\n    let wildcardType: WildcardType = \"none\";\r\n    let wildcardIndexes: (number | null)[] = [];\r\n    for(let i = 0; i < elements.length; i++) {\r\n      const element = elements[i];\r\n      if (element === \"*\") {\r\n        tmpPatternElements[i] = \"*\";\r\n        wildcardIndexes.push(null);\r\n        incompleteCount++;\r\n        wildcardCount++;\r\n      } else {\r\n        const number = Number(element);\r\n        if (!Number.isNaN(number)) {\r\n          tmpPatternElements[i] = \"*\";\r\n          wildcardIndexes.push(number);\r\n          completeCount++;\r\n          wildcardCount++;\r\n        }\r\n      }\r\n      lastPath += element;\r\n      paths.push(lastPath);\r\n      lastPath += (i < elements.length - 1 ? \".\" : \"\");\r\n    }\r\n    const pattern = tmpPatternElements.join(\".\");\r\n    const info = getStructuredPathInfo(pattern);\r\n    if (incompleteCount > 0 || completeCount > 0) {\r\n      if (incompleteCount === wildcardCount) {\r\n        wildcardType = \"context\";\r\n      } else if (completeCount === wildcardCount) {\r\n        wildcardType = \"all\";\r\n      } else {\r\n        wildcardType = \"partial\";\r\n      }\r\n    }\r\n    this.name = name;\r\n    this.elements = elements;\r\n    this.paths = paths;\r\n    this.wildcardCount = wildcardCount;\r\n    this.wildcardType = wildcardType;\r\n    this.wildcardIndexes = wildcardIndexes;\r\n    this.info = info;\r\n  }\r\n}\r\n\r\nexport function getResolvedPathInfo(name:string):IResolvedPathInfo {\r\n  let nameInfo: IResolvedPathInfo | undefined;\r\n//  return _cache.get(name) ?? (_cache.set(name, nameInfo = new ResolvedPathInfo(name)), nameInfo);\r\n  return _cache[name] ?? (_cache[name] = new ResolvedPathInfo(name));\r\n}","/**\r\n * getContextListIndex.ts\r\n *\r\n * StateClassの内部APIとして、現在のプロパティ参照スコープにおける\r\n * 指定したstructuredPath（ワイルドカード付きプロパティパス）に対応する\r\n * リストインデックス（IListIndex）を取得する関数です。\r\n *\r\n * 主な役割:\r\n * - handlerの最後にアクセスされたStatePropertyRefから、指定パスに対応するリストインデックスを取得\r\n * - ワイルドカード階層に対応し、多重ループやネストした配列バインディングにも利用可能\r\n *\r\n * 設計ポイント:\r\n * - 直近のプロパティ参照情報を取得\r\n * - info.wildcardPathsからstructuredPathのインデックスを特定\r\n * - listIndex.at(index)で該当階層のリストインデックスを取得\r\n * - パスが一致しない場合や参照が存在しない場合はnullを返す\r\n */\r\nimport { IListIndex2 } from \"../../ListIndex2/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function getContextListIndex(\r\n  handler: IStateHandler,\r\n  structuredPath: string\r\n): IListIndex2 | null {\r\n  const info = handler.structuredPathInfoStack[handler.refIndex];\r\n  if (typeof info === \"undefined\" || info === null) {\r\n    return null;\r\n  }\r\n  const index = info.indexByWildcardPath[structuredPath];\r\n  if (index >= 0) {\r\n    const listIndex = handler.listIndex2Stack[handler.refIndex];\r\n    if (typeof listIndex === \"undefined\") {\r\n      return null;\r\n    }\r\n    return listIndex?.at(index) ?? null;\r\n  }\r\n  return null;\r\n}\r\n","/**\r\n * getListIndex.ts\r\n *\r\n * StateClassの内部APIとして、パス情報（IResolvedPathInfo）から\r\n * 対応するリストインデックス（IListIndex）を取得する関数です。\r\n *\r\n * 主な役割:\r\n * - パスのワイルドカード種別（context/all/partial/none）に応じてリストインデックスを解決\r\n * - context型は現在のループコンテキストからリストインデックスを取得\r\n * - all型は各階層のリストインデックス集合からインデックスを辿って取得\r\n * - partial型やnone型は未実装またはnullを返す\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードや多重ループ、ネストした配列バインディングに柔軟に対応\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n * - エラー時はraiseErrorで詳細な例外を投げる\r\n */\r\nimport { IListIndex2 } from \"../../ListIndex2/types\";\r\nimport { IResolvedPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IReadonlyStateProxy, IStateProxy } from \"../types\";\r\nimport { getContextListIndex } from \"./getContextListIndex\";\r\n\r\nexport function getListIndex(\r\n  info: IResolvedPathInfo, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): IListIndex2 | null {\r\n  switch (info.wildcardType) {\r\n    case \"none\":\r\n      return null;\r\n    case \"context\":\r\n      const lastWildcardPath = info.info.lastWildcardPath ?? \r\n        raiseError(`lastWildcardPath is null`);\r\n      return getContextListIndex(handler, lastWildcardPath) ?? \r\n        raiseError(`ListIndex not found: ${info.info.pattern}`);\r\n    case \"all\":\r\n      let parentListIndex = null;\r\n      for(let i = 0; i < info.info.wildcardCount; i++) {\r\n        const wildcardParentPattern = info.info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPattern is null`);\r\n        const listIndexes: IListIndex2[] = Array.from(handler.engine.getListIndexesSet(wildcardParentPattern, parentListIndex) ?? []);\r\n        const wildcardIndex = info.wildcardIndexes[i] ?? raiseError(`wildcardIndex is null`);\r\n        parentListIndex = listIndexes[wildcardIndex] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n      }\r\n      return parentListIndex;\r\n    case \"partial\":\r\n      raiseError(`Partial wildcard type is not supported yet: ${info.info.pattern}`);\r\n  }\r\n}\r\n","\r\nconst symbolName = \"state\";\r\n\r\nexport const GetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.GetByRef`);\r\nexport const SetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.SetByRef`);\r\nexport const SetCacheableSymbol        : unique symbol = Symbol.for(`${symbolName}.SetCacheable`);\r\nexport const ConnectedCallbackSymbol   : unique symbol = Symbol.for(`${symbolName}.ConnectedCallback`);\r\nexport const DisconnectedCallbackSymbol: unique symbol = Symbol.for(`${symbolName}.DisconnectedCallback`);\r\n","import { IListIndex2 } from \"../../ListIndex2/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function checkDependency(\r\n  handler: IStateHandler,\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex2 | null,\r\n): void {\r\n  // 動的依存関係の登録\r\n  if (handler.refIndex >= 0) {\r\n    const lastInfo = handler.structuredPathInfoStack[handler.refIndex];\r\n    if (lastInfo !== null) {\r\n      if (handler.engine.pathManager.getters.has(lastInfo.pattern) &&\r\n        lastInfo.pattern !== info.pattern) {\r\n        handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, info.pattern);\r\n      }\r\n    }\r\n  }\r\n}","/**\r\n * setStatePropertyRef.ts\r\n *\r\n * StateClassの内部APIとして、状態プロパティ参照（IStructuredPathInfo, IListIndex）のスコープを\r\n * 一時的に設定し、指定したコールバックをそのスコープ内で実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.structuredPathInfoStackとhandler.listIndexStackにinfoとlistIndexをpushしてスコープを設定\r\n * - 指定したcallbackをそのスコープ内で実行\r\n * - finallyで必ずスタックからpopし、スコープ外への影響を防止\r\n *\r\n * 設計ポイント:\r\n * - コールバック実行中のみスコープを切り替え、例外発生時も状態復元を保証\r\n * - ネストしたスコープにも対応可能\r\n */\r\nimport { IListIndex2 } from \"../../ListIndex2/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function setStatePropertyRef(\r\n  handler: IStateHandler,\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex2 | null,\r\n  callback: () => void\r\n): void {\r\n  handler.refIndex++;\r\n  if (handler.refIndex >= handler.structuredPathInfoStack.length) {\r\n    handler.structuredPathInfoStack.push(null);\r\n    handler.listIndex2Stack.push(null);\r\n  }\r\n  handler.structuredPathInfoStack[handler.refIndex] = info;\r\n  handler.listIndex2Stack[handler.refIndex] = listIndex;\r\n  try {\r\n    return callback();\r\n  } finally {\r\n    handler.structuredPathInfoStack[handler.refIndex] = null;\r\n    handler.listIndex2Stack[handler.refIndex] = null;\r\n    handler.refIndex--;\r\n  }\r\n}\r\n","/**\r\n * getByRef.ts\r\n *\r\n * StateClassの内部APIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * 状態オブジェクト（target）から値を取得するための関数（getByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定されたパス・インデックスに対応するState値を取得（多重ループやワイルドカードにも対応）\r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyで値をキャッシュ）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * - 存在しない場合は親infoやlistIndexを辿って再帰的に値を取得\r\n *\r\n * 設計ポイント:\r\n * - handler.engine.trackedGettersに含まれる場合はsetTrackingで依存追跡を有効化\r\n * - キャッシュ有効時はrefKeyで値をキャッシュし、取得・再利用を最適化\r\n * - ワイルドカードや多重ループにも柔軟に対応し、再帰的な値取得を実現\r\n * - finallyでキャッシュへの格納を保証\r\n */\r\nimport { IListIndex2 } from \"../../ListIndex2/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IWritableStateHandler, IWritableStateProxy } from \"../types\";\r\nimport { checkDependency } from \"./checkDependency\";\r\nimport { setStatePropertyRef } from \"./setStatePropertyRef\";\r\n\r\n/**\r\n * 構造化パス情報(info, listIndex)をもとに、状態オブジェクト(target)から値を取得する。\r\n * \r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyでキャッシュ）\r\n * - ネスト・ワイルドカード対応（親infoやlistIndexを辿って再帰的に値を取得）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * \r\n * @param target    状態オブジェクト\r\n * @param info      構造化パス情報\r\n * @param listIndex リストインデックス（多重ループ対応）\r\n * @param receiver  プロキシ\r\n * @param handler   状態ハンドラ\r\n * @returns         対象プロパティの値\r\n */\r\nfunction _getByRef(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex2 | null,\r\n  receiver : IWritableStateProxy,\r\n  handler  : IWritableStateHandler\r\n): any {\r\n  // 親子関係のあるgetterが存在する場合は、外部依存から取得\r\n  // ToDo: stateにgetterが存在する（パスの先頭が一致する）場合はgetter経由で取得\r\n  if (handler.engine.stateOutput.startsWith(info) && handler.engine.pathManager.getters.intersection(info.cumulativePathSet).size === 0) {\r\n    return handler.engine.stateOutput.get(info, listIndex);\r\n  }\r\n\r\n  // パターンがtargetに存在する場合はgetter経由で取得\r\n  if (info.pattern in target) {\r\n    return setStatePropertyRef(handler, info, listIndex, () => {\r\n      return Reflect.get(target, info.pattern, receiver);\r\n    });\r\n  } else {\r\n    // 存在しない場合は親infoを辿って再帰的に取得\r\n    const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n    const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n    const parentValue = getByRefWritable(target, parentInfo, parentListIndex, receiver, handler);\r\n    const lastSegment = info.lastSegment;\r\n    if (lastSegment === \"*\") {\r\n      // ワイルドカードの場合はlistIndexのindexでアクセス\r\n      const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n      return Reflect.get(parentValue, index);\r\n    } else {\r\n      // 通常のプロパティアクセス\r\n      return Reflect.get(parentValue, lastSegment);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * それ以外は通常の_getByRefで取得。\r\n */\r\nexport function getByRefWritable(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex2 | null,\r\n  receiver : IWritableStateProxy,\r\n  handler  : IWritableStateHandler\r\n): any {\r\n  checkDependency(handler, info, listIndex);\r\n  return _getByRef(target, info, listIndex, receiver, handler);\r\n}\r\n","/**\r\n * setByRef.ts\r\n *\r\n * StateClassの内部APIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * 状態オブジェクト（target）に値を設定するための関数（setByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定されたパス・インデックスに対応するState値を設定（多重ループやワイルドカードにも対応）\r\n * - getter/setter経由で値設定時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * - 存在しない場合は親infoやlistIndexを辿って再帰的に値を設定\r\n * - 設定後はengine.updater.addUpdatedStatePropertyRefValueで更新情報を登録\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードや多重ループにも柔軟に対応し、再帰的な値設定を実現\r\n * - finallyで必ず更新情報を登録し、再描画や依存解決に利用\r\n * - getter/setter経由のスコープ切り替えも考慮した設計\r\n */\r\nimport { IListIndex2 } from \"../../ListIndex2/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IWritableStateProxy, IWritableStateHandler } from \"../types\";\r\nimport { getByRefWritable } from \"./getByRefWritable\";\r\nimport { setStatePropertyRef } from \"./setStatePropertyRef\";\r\n\r\nexport function setByRef(\r\n    target   : Object, \r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex2 | null, \r\n    value    : any, \r\n    receiver : IWritableStateProxy,\r\n    handler  : IWritableStateHandler\r\n): any {\r\n  try {\r\n    // 親子関係のあるgetterが存在する場合は、外部依存を通じて値を設定\r\n    // ToDo: stateにgetterが存在する（パスの先頭が一致する）場合はgetter経由で取得\r\n    if (handler.engine.stateOutput.startsWith(info) && handler.engine.pathManager.setters.intersection(info.cumulativePathSet).size === 0) {\r\n      return handler.engine.stateOutput.set(info, listIndex,value);\r\n    }\r\n    if (info.pattern in target) {\r\n      return setStatePropertyRef(handler, info, listIndex, () => {\r\n        return Reflect.set(target, info.pattern, value, receiver);\r\n      });\r\n    } else {\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRefWritable(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return Reflect.set(parentValue, index, value);\r\n      } else {\r\n        return Reflect.set(parentValue, lastSegment, value);\r\n      }\r\n    }\r\n  } finally {\r\n    handler.updater.enqueueRef(info, listIndex, value);\r\n  }\r\n}\r\n","/**\r\n * resolve.ts\r\n *\r\n * StateClassのAPIとして、パス（path）とインデックス（indexes）を指定して\r\n * Stateの値を取得・設定するための関数（resolve）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列パス（path）とインデックス配列（indexes）から、該当するState値の取得・設定を行う\r\n * - ワイルドカードや多重ループを含むパスにも対応\r\n * - value未指定時は取得（getByRef）、指定時は設定（setByRef）を実行\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパスを解析し、ワイルドカード階層ごとにリストインデックスを解決\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n * - getByRef/setByRefで値の取得・設定を一元的に処理\r\n * - 柔軟なバインディングやAPI経由での利用が可能\r\n */\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IWritableStateProxy, IWritableStateHandler } from \"../types\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { getByRefWritable } from \"../methods/getByRefWritable\";\r\nimport { IListIndex2 } from \"../../ListIndex2/types\";\r\n\r\nexport function resolveWritable(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IWritableStateProxy,\r\n  handler: IWritableStateHandler\r\n): Function {\r\n  return (path: string, indexes: number[], value?: any): any => {\r\n    const info = getStructuredPathInfo(path);\r\n    const lastInfo = handler.structuredPathInfoStack[handler.refIndex] ?? null;\r\n    if (lastInfo !== null && lastInfo.pattern !== info.pattern) {\r\n      // gettersに含まれる場合は依存関係を登録\r\n      if (handler.engine.pathManager.getters.has(lastInfo.pattern)) {\r\n        handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, info.pattern);\r\n      }\r\n    }\r\n\r\n    let listIndex: IListIndex2 | null = null;\r\n    for(let i = 0; i < info.wildcardParentInfos.length; i++) {\r\n      const wildcardParentPattern = info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPath is null`);\r\n      const listIndexes: IListIndex2[] = Array.from(handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? []);\r\n      const index = indexes[i] ?? raiseError(`index is null`);\r\n      listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    if (typeof value === \"undefined\") {\r\n      return getByRefWritable(target, info, listIndex, receiver, handler);\r\n    } else {\r\n      return setByRef(target, info, listIndex, value, receiver, handler);\r\n    }\r\n  };\r\n} ","import { raiseError } from \"../../utils\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nexport function trackDependency(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (path: string): void => {\r\n    const lastInfo = handler.structuredPathInfoStack[handler.refIndex] ?? raiseError(\"Internal error: structuredPathInfoStack is null.\");\r\n    if (handler.engine.pathManager.getters.has(lastInfo.pattern) &&\r\n      lastInfo.pattern !== path) {\r\n      handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, path);\r\n    }\r\n  };\r\n}\r\n","export const DATA_BIND_ATTRIBUTE = \"data-bind\";\r\nexport const COMMENT_EMBED_MARK = \"@@:\"; // 埋め込み変数のマーク\r\nexport const COMMENT_TEMPLATE_MARK = \"@@|\"; // テンプレートのマーク\r\nexport const MAX_WILDCARD_DEPTH = 32; // ワイルドカードの最大深度\r\n","import { MAX_WILDCARD_DEPTH } from \"../../constants\";\r\n\r\n/**\r\n * stackIndexByIndexName\r\n * インデックス名からスタックインデックスへのマッピング\r\n * $1 => 0\r\n * $2 => 1\r\n * :\r\n * ${i + 1} => i\r\n * i < MAX_WILDCARD_DEPTH\r\n */\r\nexport const indexByIndexName2: { [key: PropertyKey]: number } = {};\r\nfor (let i = 0; i < MAX_WILDCARD_DEPTH; i++) {\r\n  indexByIndexName2[`$${i+1}`] = i;\r\n}\r\n","/**\r\n * get.ts\r\n *\r\n * StateClassのProxyトラップとして、プロパティアクセス時の値取得処理を担う関数（get）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列プロパティの場合、特殊プロパティ（$1〜$9, $resolve, $getAll, $navigate）に応じた値やAPIを返却\r\n * - 通常のプロパティはgetResolvedPathInfoでパス情報を解決し、getListIndexでリストインデックスを取得\r\n * - getByRefで構造化パス・リストインデックスに対応した値を取得\r\n * - シンボルプロパティの場合はhandler.callableApi経由でAPIを呼び出し\r\n * - それ以外はReflect.getで通常のプロパティアクセスを実行\r\n *\r\n * 設計ポイント:\r\n * - $1〜$9は直近のStatePropertyRefのリストインデックス値を返す特殊プロパティ\r\n * - $resolve, $getAll, $navigateはAPI関数やルーターインスタンスを返す\r\n * - 通常のプロパティアクセスもバインディングや多重ループに対応\r\n * - シンボルAPIやReflect.getで拡張性・互換性も確保\r\n */\r\nimport { getRouter } from \"../../Router/Router.js\";\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { getListIndex } from \"../methods/getListIndex.js\";\r\nimport { IWritableStateHandler, IWritableStateProxy } from \"../types.js\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetByRefSymbol } from \"../symbols.js\";\r\nimport { getByRefWritable } from \"../methods/getByRefWritable.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { resolveWritable } from \"../apis/resolveWritable.js\";\r\nimport { getAllWritable } from \"../apis/getAllWritable.js\";\r\nimport { connectedCallback } from \"../apis/connectedCallback.js\";\r\nimport { disconnectedCallback } from \"../apis/disconnectedCallback.js\";\r\nimport { trackDependency } from \"../apis/trackDependency.js\";\r\nimport { IListIndex2 } from \"../../ListIndex2/types.js\";\r\nimport { indexByIndexName2 } from \"./indexByIndexName2.js\";\r\n\r\nexport function getWritable(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  receiver: IWritableStateProxy,\r\n  handler : IWritableStateHandler\r\n): any {\r\n  const index = indexByIndexName2[prop];\r\n  if (typeof index !== \"undefined\") {\r\n    const listIndex = handler.listIndex2Stack[handler.refIndex];\r\n    return listIndex?.indexes[index] ?? raiseError(`ListIndex not found: ${prop.toString()}`);\r\n  }\r\n  if (typeof prop === \"string\") {\r\n    if (prop[0] === \"$\") {\r\n      switch (prop) {\r\n        case \"$resolve\":\r\n          return resolveWritable(target, prop, receiver, handler);\r\n        case \"$getAll\":\r\n          return getAllWritable(target, prop, receiver, handler);\r\n        case \"$trackDependency\":\r\n          return trackDependency(target, prop, receiver, handler);\r\n        case \"$navigate\":\r\n          return (to:string) => getRouter()?.navigate(to);\r\n        case \"$component\":\r\n          return handler.engine.owner;\r\n      }\r\n    }\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, receiver, handler);\r\n    return getByRefWritable(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      receiver,\r\n      handler\r\n    );\r\n\r\n  } else if (typeof prop === \"symbol\") {\r\n    switch (prop) {\r\n      case GetByRefSymbol: \r\n        return (info: IStructuredPathInfo, listIndex: IListIndex2 | null) => \r\n          getByRefWritable(target, info, listIndex, receiver, handler);\r\n      case SetByRefSymbol: \r\n        return (info: IStructuredPathInfo, listIndex: IListIndex2 | null, value: any) => \r\n          setByRef(target, info, listIndex, value, receiver, handler);\r\n      case ConnectedCallbackSymbol:\r\n        return () => connectedCallback(target, prop, receiver, handler);\r\n      case DisconnectedCallbackSymbol: \r\n        return () => disconnectedCallback(target, prop, receiver, handler);\r\n      default:\r\n        return Reflect.get(\r\n          target, \r\n          prop, \r\n          receiver\r\n        );\r\n    }\r\n  }\r\n}\r\n","/**\r\n * getAll.ts\r\n *\r\n * StateClassのAPIとして、ワイルドカードを含むStateプロパティパスに対応した\r\n * 全要素取得関数（getAll）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定パス（path）に一致する全てのState要素を配列で取得\r\n * - 多重ループやワイルドカード（*）を含むパスにも対応\r\n * - indexes未指定時は現在のループコンテキストから自動でインデックスを解決\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパス情報を解析し、依存関係も自動で登録\r\n * - walkWildcardPatternでワイルドカード階層を再帰的に探索し、全インデックス組み合わせを列挙\r\n * - resolveで各インデックス組み合わせに対応する値を取得し、配列で返却\r\n * - getContextListIndexで現在のループインデックスを取得\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n */\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IWritableStateHandler, IWritableStateProxy } from \"../types\";\r\nimport { resolveWritable } from \"./resolveWritable.js\";\r\nimport { getContextListIndex } from \"../methods/getContextListIndex\";\r\nimport { IListIndex2 } from \"../../ListIndex2/types\";\r\n\r\nexport function getAllWritable(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IWritableStateProxy,\r\n  handler: IWritableStateHandler\r\n):Function {\r\n    const resolve = resolveWritable(target, prop, receiver, handler);\r\n    return (path: string, indexes?: number[]): any[] => {\r\n      const info = getStructuredPathInfo(path);\r\n      const lastInfo = handler.structuredPathInfoStack[handler.refIndex] ?? null;\r\n      if (lastInfo !== null && lastInfo.pattern !== info.pattern) {\r\n        // gettersに含まれる場合は依存関係を登録\r\n        if (handler.engine.pathManager.getters.has(lastInfo.pattern)) {\r\n          handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, info.pattern);\r\n        }\r\n      }\r\n  \r\n      if (typeof indexes === \"undefined\") {\r\n        for(let i = 0; i < info.wildcardInfos.length; i++) {\r\n          const wildcardPattern = info.wildcardInfos[i] ?? raiseError(`wildcardPattern is null`);\r\n          const listIndex = getContextListIndex(handler, wildcardPattern.pattern);\r\n          if (listIndex) {\r\n            indexes = listIndex.indexes;\r\n            break;\r\n          }\r\n        }\r\n        if (typeof indexes === \"undefined\") {\r\n          indexes = [];\r\n        }\r\n      }\r\n      const walkWildcardPattern = (\r\n        wildcardParentInfos: IStructuredPathInfo[],\r\n        wildardIndexPos: number,\r\n        listIndex: IListIndex2 | null,\r\n        indexes: number[],\r\n        indexPos: number,\r\n        parentIndexes: number[],\r\n        results: number[][]\r\n      ) => {\r\n        const wildcardParentPattern = wildcardParentInfos[wildardIndexPos] ?? null;\r\n        if (wildcardParentPattern === null) {\r\n          results.push(parentIndexes);\r\n          return;\r\n        }\r\n        const listIndexSet = handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n        const listIndexes = Array.from(listIndexSet);\r\n        const index = indexes[indexPos] ?? null;\r\n        if (index === null) {\r\n          for(let i = 0; i < listIndexes.length; i++) {\r\n            const listIndex = listIndexes[i];\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results);\r\n          }\r\n        } else {\r\n          const listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n          if ((wildardIndexPos + 1) < wildcardParentInfos.length) {\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results\r\n            );\r\n          }\r\n        }\r\n      }\r\n      const resultIndexes: number[][] = [];\r\n      walkWildcardPattern(\r\n        info.wildcardParentInfos, \r\n        0, \r\n        null, \r\n        indexes, \r\n        0, \r\n        [], \r\n        resultIndexes\r\n      );\r\n      const resultValues: any[] = [];\r\n      for(let i = 0; i < resultIndexes.length; i++) {\r\n        resultValues.push(resolve(\r\n          info.pattern,\r\n          resultIndexes[i]\r\n        ));\r\n      }\r\n      return resultValues;\r\n    }\r\n  }","/**\r\n * connectedCallback.ts\r\n *\r\n * StateClassのライフサイクルフック「$connectedCallback」を呼び出すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - オブジェクト（target）に$connectedCallbackメソッドが定義されていれば呼び出す\r\n * - コールバックはtargetのthisコンテキストで呼び出し、IReadonlyStateProxy（receiver）を引数として渡す\r\n * - 非同期関数として実行可能（await対応）\r\n *\r\n * 設計ポイント:\r\n * - Reflect.getで$connectedCallbackプロパティを安全に取得\r\n * - 存在しない場合は何もしない\r\n * - ライフサイクル管理やカスタム初期化処理に利用\r\n */\r\nimport { IWritableStateProxy, IWritableStateHandler } from \"../types\";\r\n\r\nconst CONNECTED_CALLBACK = \"$connectedCallback\";\r\n\r\nexport async function connectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IWritableStateProxy,\r\n  handler: IWritableStateHandler\r\n):Promise<void> {\r\n  const callback = Reflect.get(target, CONNECTED_CALLBACK);\r\n  if (typeof callback === \"function\") {\r\n    await callback.call(receiver);\r\n  }\r\n}","/**\r\n * disconnectedCallback.ts\r\n *\r\n * StateClassのライフサイクルフック「$disconnectedCallback」を呼び出すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - オブジェクト（target）に$disconnectedCallbackメソッドが定義されていれば呼び出す\r\n * - コールバックはtargetのthisコンテキストで呼び出し、IReadonlyStateProxy（receiver）を引数として渡す\r\n * - 非同期関数として実行可能（await対応）\r\n *\r\n * 設計ポイント:\r\n * - Reflect.getで$disconnectedCallbackプロパティを安全に取得\r\n * - 存在しない場合は何もしない\r\n * - ライフサイクル管理やクリーンアップ処理に利用\r\n */\r\nimport { IWritableStateProxy, IWritableStateHandler } from \"../types\";\r\n\r\nconst DISCONNECTED_CALLBACK = \"$disconnectedCallback\";\r\n\r\nexport async function disconnectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IWritableStateProxy,\r\n  handler: IWritableStateHandler\r\n):Promise<void> {\r\n  const callback = Reflect.get(target, DISCONNECTED_CALLBACK);\r\n  if (typeof callback === \"function\") {\r\n    await callback.call(receiver);\r\n  }\r\n}","/**\r\n * createWritableStateProxy.ts\r\n *\r\n * StateClassの「書き込み可能」プロキシを生成するための実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - Stateオブジェクトに対して、書き込み可能なProxyを作成\r\n * - StateHandlerクラスで各種APIやトラップ（get/set）を実装\r\n * - getトラップでバインディングやAPI呼び出し、依存解決などに対応\r\n * - setトラップで値の書き込みや副作用（依存解決・再描画）を一元管理\r\n *\r\n * 設計ポイント:\r\n * - StateHandlerはIWritableStateHandlerを実装し、状態管理やAPI呼び出しの基盤となる\r\n * - callableApiに各種APIシンボルと関数をマッピングし、柔軟なAPI拡張が可能\r\n * - createWritableStateProxyで一貫した生成・利用が可能\r\n * - 依存解決やキャッシュ、ループ・プロパティ参照スコープ管理など多機能な設計\r\n */\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IState, IWritableStateHandler, IWritableStateProxy } from \"./types\";\r\nimport { getWritable as trapGet } from \"./traps/getWritable.js\";\r\nimport { set as trapSet } from \"./traps/set.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { setLoopContext } from \"./methods/setLoopContext\";\r\nimport { IListIndex2 } from \"../ListIndex2/types\";\r\nimport { IUpdater2 } from \"../Updater2/types\";\r\n\r\nconst STACK_DEPTH = 32;\r\n\r\nclass StateHandler implements IWritableStateHandler {\r\n  engine   : IComponentEngine;\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: (IStructuredPathInfo | null)[] = Array(STACK_DEPTH).fill(null);\r\n  trackingIndex: number = -1;\r\n  structuredPathInfoStack: (IStructuredPathInfo | null)[] = Array(STACK_DEPTH).fill(null);\r\n  listIndex2Stack: (IListIndex2 | null)[] = Array(STACK_DEPTH).fill(null);\r\n  refIndex: number = -1;\r\n  loopContext: ILoopContext | null = null;\r\n  updater: IUpdater2;\r\n  \r\n  constructor(engine: IComponentEngine, updater: IUpdater2) {\r\n    this.engine = engine;\r\n    this.updater = updater;\r\n  }\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IWritableStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IWritableStateProxy\r\n  ): boolean {\r\n    return trapSet(target, prop, value, receiver, this);\r\n  }\r\n}\r\n\r\nexport async function useWritableStateProxy(\r\n  engine: IComponentEngine, \r\n  updater: IUpdater2,\r\n  state: Object,\r\n  loopContext: ILoopContext | null,\r\n  callback: (stateProxy: IWritableStateProxy) => Promise<void>\r\n): Promise<void> {\r\n  const handler = new StateHandler(engine, updater);\r\n  const stateProxy = new Proxy<IState>(state, handler) as IWritableStateProxy;\r\n  return setLoopContext(handler, loopContext, async () => {\r\n    await callback(stateProxy);\r\n  });\r\n}\r\n\r\n","/**\r\n * set.ts\r\n *\r\n * StateClassのProxyトラップとして、プロパティ設定時の値セット処理を担う関数（set）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列プロパティの場合、getResolvedPathInfoでパス情報を解決し、getListIndexでリストインデックスを取得\r\n * - setByRefで構造化パス・リストインデックスに対応した値設定を実行\r\n * - それ以外（シンボル等）の場合はReflect.setで通常のプロパティ設定を実行\r\n *\r\n * 設計ポイント:\r\n * - バインディングや多重ループ、ワイルドカードを含むパスにも柔軟に対応\r\n * - setByRefを利用することで、依存解決や再描画などの副作用も一元管理\r\n * - Reflect.setで標準的なプロパティ設定の互換性も確保\r\n */\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { getListIndex } from \"../methods/getListIndex.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { IStateHandler, IReadonlyStateProxy, IWritableStateProxy, IWritableStateHandler } from \"../types\";\r\n\r\nexport function set(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  value   : any, \r\n  receiver: IWritableStateProxy,\r\n  handler : IWritableStateHandler\r\n): boolean {\r\n  if (typeof prop === \"string\") {\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, receiver, handler);\r\n    return setByRef(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      value, \r\n      receiver,\r\n      handler\r\n    );\r\n  } else {\r\n    return Reflect.set(\r\n      target, \r\n      prop, \r\n      value, \r\n      receiver\r\n    );\r\n  }\r\n}\r\n","/**\r\n * setLoopContext.ts\r\n *\r\n * StateClassの内部APIとして、ループコンテキスト（ILoopContext）を一時的に設定し、\r\n * 指定した非同期コールバックをそのスコープ内で実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.loopContextにループコンテキストを一時的に設定\r\n * - 既にループコンテキストが設定されている場合はエラーを投げる\r\n * - loopContextが存在する場合はasyncSetStatePropertyRefでスコープを設定しコールバックを実行\r\n * - loopContextがnullの場合はそのままコールバックを実行\r\n * - finallyで必ずloopContextをnullに戻し、スコープ外への影響を防止\r\n *\r\n * 設計ポイント:\r\n * - ループバインディングや多重ループ時のスコープ管理を安全に行う\r\n * - finallyで状態復元を保証し、例外発生時も安全\r\n * - 非同期処理にも対応\r\n */\r\nimport { ILoopContext } from \"../../LoopContext/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IWritableStateHandler } from \"../types\";\r\nimport { asyncSetStatePropertyRef } from \"./asyncSetStatePropertyRef\";\r\n\r\nexport async function setLoopContext(\r\n  handler: IWritableStateHandler,\r\n  loopContext: ILoopContext | null,\r\n  callback: () => Promise<void>\r\n): Promise<void> {\r\n  if (handler.loopContext) {\r\n    raiseError('already in loop context');\r\n  }\r\n  handler.loopContext = loopContext;\r\n  try {\r\n    if (loopContext) {\r\n      await asyncSetStatePropertyRef(handler, loopContext.info, loopContext.listIndex, callback);\r\n    } else {\r\n      await callback();\r\n    }\r\n  } finally {\r\n    handler.loopContext = null;\r\n  }\r\n}\r\n","/**\r\n * asyncSetStatePropertyRef.ts\r\n *\r\n * 状態プロパティ参照のスコープを一時的に設定し、非同期コールバックを実行するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - handlerのstructuredPathInfoStackとlistIndexStackに、infoとlistIndexをpushしてスコープを設定\r\n * - 指定した非同期コールバック（callback）をそのスコープ内で実行\r\n * - callback実行後は必ずpopしてスコープを元に戻す（finallyで保証）\r\n *\r\n * 設計ポイント:\r\n * - 非同期処理中も正しいスコープ情報（パス・リストインデックス）が維持される\r\n * - ネストした非同期処理にも対応可能\r\n * - スコープのpush/popは例外発生時も確実に実行される\r\n */\r\nimport { IListIndex2 } from \"../../ListIndex2/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\n/**\r\n * 状態プロパティ参照のスコープを一時的に設定し、非同期コールバックを実行します。\r\n * \r\n * @param handler   スコープ管理用のハンドラ\r\n * @param info      現在の構造化パス情報\r\n * @param listIndex 現在のリストインデックス（ネスト対応用）\r\n * @param callback  スコープ内で実行する非同期処理\r\n * \r\n * スタックに info と listIndex をpushし、callback実行後に必ずpopします。\r\n * これにより、非同期処理中も正しいスコープ情報が維持されます。\r\n */\r\nexport async function asyncSetStatePropertyRef(\r\n  handler: IStateHandler,\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex2 | null,\r\n  callback: () => Promise<void>\r\n): Promise<void> {\r\n  handler.refIndex++;\r\n  if (handler.refIndex >= handler.structuredPathInfoStack.length) {\r\n    handler.structuredPathInfoStack.push(null);\r\n    handler.listIndex2Stack.push(null);\r\n  }\r\n  handler.structuredPathInfoStack[handler.refIndex] = info;\r\n  handler.listIndex2Stack[handler.refIndex] = listIndex;\r\n  try {\r\n    await callback();\r\n  } finally {\r\n    handler.structuredPathInfoStack[handler.refIndex] = null;\r\n    handler.listIndex2Stack[handler.refIndex] = null;\r\n    handler.refIndex--;\r\n  }\r\n}\r\n","/**\r\n * listWalker.ts\r\n *\r\n * Stateプロパティのワイルドカード（配列・多重ループ）に対応したリスト探索ユーティリティです。\r\n *\r\n * 主な役割:\r\n * - 指定したプロパティパス（IStructuredPathInfo）とリストインデックス（IListIndex）に対し、\r\n *   再帰的に全てのリスト要素（多重ループ含む）を探索し、コールバックを実行\r\n * - ワイルドカード階層が一致した場合のみコールバックを呼び出し、それ以外は親階層を辿って再帰探索\r\n *\r\n * 設計ポイント:\r\n * - listWalkerSubで再帰的にリストインデックスを探索し、全要素に対してコールバックを適用\r\n * - listWalkerでエントリポイントを提供し、外部から簡単に利用可能\r\n * - 多重ループやネストした配列バインディングにも柔軟に対応\r\n */\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex2 } from \"../ListIndex2/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\n\r\nfunction listWalkerSub(\r\n  engine: IComponentEngine,\r\n  info: IStructuredPathInfo, \r\n  listIndex: IListIndex2 | null, \r\n  callback:(info: IStructuredPathInfo, listIndex: IListIndex2 | null)=> void\r\n) {\r\n  const listIndexLen = listIndex?.length ?? 0;\r\n  if (info.wildcardCount === listIndexLen) {\r\n    callback(info, listIndex);\r\n  } else {\r\n    const parentInfo = info.wildcardParentInfos[listIndexLen] ?? raiseError(\"Invalid state property info\");\r\n    const listIndexes = engine.getListIndexesSet(parentInfo, listIndex);\r\n    for(const subListIndex of listIndexes ?? []) {\r\n      listWalkerSub(engine, info, subListIndex, callback);\r\n    }\r\n  }\r\n}\r\n\r\nexport function listWalker(\r\n  engine: IComponentEngine,\r\n  info:IStructuredPathInfo, \r\n  listIndex: IListIndex2 | null,\r\n  callback:(info: IStructuredPathInfo, listIndex: IListIndex2 | null)=> void\r\n) {\r\n  listWalkerSub(engine, info, listIndex, callback);\r\n}\r\n","/**\r\n * getByRef.ts\r\n *\r\n * StateClassの内部APIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * 状態オブジェクト（target）から値を取得するための関数（getByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定されたパス・インデックスに対応するState値を取得（多重ループやワイルドカードにも対応）\r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyで値をキャッシュ）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * - 存在しない場合は親infoやlistIndexを辿って再帰的に値を取得\r\n *\r\n * 設計ポイント:\r\n * - handler.engine.trackedGettersに含まれる場合はsetTrackingで依存追跡を有効化\r\n * - キャッシュ有効時はrefKeyで値をキャッシュし、取得・再利用を最適化\r\n * - ワイルドカードや多重ループにも柔軟に対応し、再帰的な値取得を実現\r\n * - finallyでキャッシュへの格納を保証\r\n */\r\nimport { IListIndex2 } from \"../../ListIndex2/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IReadonlyStateProxy, IReadonlyStateHandler } from \"../types\";\r\nimport { checkDependency } from \"./checkDependency\";\r\nimport { setStatePropertyRef } from \"./setStatePropertyRef\";\r\n\r\n/**\r\n * 構造化パス情報(info, listIndex)をもとに、状態オブジェクト(target)から値を取得する。\r\n * \r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyでキャッシュ）\r\n * - ネスト・ワイルドカード対応（親infoやlistIndexを辿って再帰的に値を取得）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * \r\n * @param target    状態オブジェクト\r\n * @param info      構造化パス情報\r\n * @param listIndex リストインデックス（多重ループ対応）\r\n * @param receiver  プロキシ\r\n * @param handler   状態ハンドラ\r\n * @returns         対象プロパティの値\r\n */\r\nfunction _getByRef(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex2 | null,\r\n  receiver : IReadonlyStateProxy,\r\n  handler  : IReadonlyStateHandler\r\n): any {\r\n  // キャッシュが有効な場合はrefKeyで値をキャッシュ\r\n  let refKey = '';\r\n  if (handler.cacheable) {\r\n    const key = (listIndex === null) ? info.sid : (info.sid + \"#\" + listIndex.sid);\r\n    const value = handler.cache[key];\r\n    if (typeof value !== \"undefined\") {\r\n      return value;\r\n    }\r\n    if (key in handler.cache) {\r\n      return undefined;\r\n    }\r\n    refKey = key;\r\n  }\r\n\r\n  let value;\r\n  try {\r\n    // 親子関係のあるgetterが存在する場合は、外部依存から取得\r\n    // ToDo: stateにgetterが存在する（パスの先頭が一致する）場合はgetter経由で取得\r\n    if (handler.engine.stateOutput.startsWith(info) && handler.engine.pathManager.getters.intersection(info.cumulativePathSet).size === 0) {\r\n      return value = handler.engine.stateOutput.get(info, listIndex);\r\n    }\r\n    // パターンがtargetに存在する場合はgetter経由で取得\r\n    if (info.pattern in target) {\r\n      return (value = setStatePropertyRef(handler, info, listIndex, () => {\r\n        return Reflect.get(target, info.pattern, receiver);\r\n      }));\r\n    } else {\r\n      // 存在しない場合は親infoを辿って再帰的に取得\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRefReadonly(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        // ワイルドカードの場合はlistIndexのindexでアクセス\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return (value = Reflect.get(parentValue, index));\r\n      } else {\r\n        // 通常のプロパティアクセス\r\n        return (value = Reflect.get(parentValue, lastSegment));\r\n      }\r\n    }\r\n  } finally {\r\n    // キャッシュが有効な場合は取得値をキャッシュ\r\n    if (handler.cacheable) {\r\n      handler.cache[refKey] = value;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * それ以外は通常の_getByRefで取得。\r\n */\r\nexport function getByRefReadonly(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex2 | null,\r\n  receiver : IReadonlyStateProxy,\r\n  handler  : IReadonlyStateHandler\r\n): any {\r\n  checkDependency(handler, info, listIndex);\r\n  return _getByRef(target, info, listIndex, receiver, handler);\r\n}\r\n","/**\r\n * resolve.ts\r\n *\r\n * StateClassのAPIとして、パス（path）とインデックス（indexes）を指定して\r\n * Stateの値を取得・設定するための関数（resolve）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列パス（path）とインデックス配列（indexes）から、該当するState値の取得・設定を行う\r\n * - ワイルドカードや多重ループを含むパスにも対応\r\n * - value未指定時は取得（getByRef）、指定時は設定（setByRef）を実行\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパスを解析し、ワイルドカード階層ごとにリストインデックスを解決\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n * - getByRef/setByRefで値の取得・設定を一元的に処理\r\n * - 柔軟なバインディングやAPI経由での利用が可能\r\n */\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IReadonlyStateProxy, IReadonlyStateHandler } from \"../types\";\r\nimport { getByRefReadonly } from \"../methods/getByRefReadonly\";\r\nimport { IListIndex2 } from \"../../ListIndex2/types\";\r\n\r\nexport function resolveReadonly(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IReadonlyStateProxy,\r\n  handler: IReadonlyStateHandler\r\n): Function {\r\n  return (path: string, indexes: number[], value?: any): any => {\r\n    const info = getStructuredPathInfo(path);\r\n    const lastInfo = handler.structuredPathInfoStack[handler.refIndex] ?? null;\r\n    if (lastInfo !== null && lastInfo.pattern !== info.pattern) {\r\n      // gettersに含まれる場合は依存関係を登録\r\n      if (handler.engine.pathManager.getters.has(lastInfo.pattern)) {\r\n        handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, info.pattern);\r\n      }\r\n    }\r\n\r\n    let listIndex: IListIndex2 | null = null;\r\n    for(let i = 0; i < info.wildcardParentInfos.length; i++) {\r\n      const wildcardParentPattern = info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPath is null`);\r\n      const listIndexes: IListIndex2[] = Array.from(handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? []);\r\n      const index = indexes[i] ?? raiseError(`index is null`);\r\n      listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    if (typeof value === \"undefined\") {\r\n      return getByRefReadonly(target, info, listIndex, receiver, handler);\r\n    } else {\r\n      raiseError(`Cannot set value on a readonly proxy: ${path}`);\r\n    }\r\n  };\r\n} ","/**\r\n * get.ts\r\n *\r\n * StateClassのProxyトラップとして、プロパティアクセス時の値取得処理を担う関数（get）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列プロパティの場合、特殊プロパティ（$1〜$9, $resolve, $getAll, $navigate）に応じた値やAPIを返却\r\n * - 通常のプロパティはgetResolvedPathInfoでパス情報を解決し、getListIndexでリストインデックスを取得\r\n * - getByRefで構造化パス・リストインデックスに対応した値を取得\r\n * - シンボルプロパティの場合はhandler.callableApi経由でAPIを呼び出し\r\n * - それ以外はReflect.getで通常のプロパティアクセスを実行\r\n *\r\n * 設計ポイント:\r\n * - $1〜$9は直近のStatePropertyRefのリストインデックス値を返す特殊プロパティ\r\n * - $resolve, $getAll, $navigateはAPI関数やルーターインスタンスを返す\r\n * - 通常のプロパティアクセスもバインディングや多重ループに対応\r\n * - シンボルAPIやReflect.getで拡張性・互換性も確保\r\n */\r\nimport { getRouter } from \"../../Router/Router.js\";\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { getListIndex } from \"../methods/getListIndex.js\";\r\nimport { IReadonlyStateHandler, IReadonlyStateProxy } from \"../types.js\";\r\nimport { resolveReadonly } from \"../apis/resolveReadonly.js\";\r\nimport { GetByRefSymbol, SetCacheableSymbol } from \"../symbols.js\";\r\nimport { getByRefReadonly } from \"../methods/getByRefReadonly.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types.js\";\r\nimport { setCacheable } from \"../methods/setCacheable.js\";\r\nimport { getAllReadonly } from \"../apis/getAllReadonly.js\";\r\nimport { trackDependency } from \"../apis/trackDependency.js\";\r\nimport { indexByIndexName2 } from \"./indexByIndexName2.js\";\r\nimport { IListIndex2 } from \"../../ListIndex2/types.js\";\r\n\r\n\r\nexport function getReadonly(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  receiver: IReadonlyStateProxy,\r\n  handler : IReadonlyStateHandler\r\n): any {\r\n  const index = indexByIndexName2[prop];\r\n  if (typeof index !== \"undefined\") {\r\n    const listIndex = handler.listIndex2Stack[handler.refIndex];\r\n    return listIndex?.indexes[index] ?? raiseError(`ListIndex not found: ${prop.toString()}`);\r\n  }\r\n  if (typeof prop === \"string\") {\r\n    if (prop[0] === \"$\") {\r\n      switch (prop) {\r\n        case \"$resolve\":\r\n          return resolveReadonly(target, prop, receiver, handler);\r\n        case \"$getAll\":\r\n          return getAllReadonly(target, prop, receiver, handler);\r\n        case \"$trackDependency\":\r\n          return trackDependency(target, prop, receiver, handler);\r\n        case \"$navigate\":\r\n          return (to:string) => getRouter()?.navigate(to);\r\n        case \"$component\":\r\n          return handler.engine.owner;\r\n      }\r\n    }\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, receiver, handler);\r\n    return getByRefReadonly(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      receiver,\r\n      handler\r\n    );\r\n\r\n  } else if (typeof prop === \"symbol\") {\r\n    switch (prop) {\r\n      case GetByRefSymbol: \r\n        return (info: IStructuredPathInfo, listIndex: IListIndex2 | null) => \r\n          getByRefReadonly(target, info, listIndex, receiver, handler);\r\n      case SetCacheableSymbol:\r\n        return (callback: () => void) => setCacheable(handler, callback)\r\n      default:\r\n        return Reflect.get(\r\n          target, \r\n          prop, \r\n          receiver\r\n        );\r\n    }\r\n  }\r\n}\r\n","/**\r\n * getAll.ts\r\n *\r\n * StateClassのAPIとして、ワイルドカードを含むStateプロパティパスに対応した\r\n * 全要素取得関数（getAll）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定パス（path）に一致する全てのState要素を配列で取得\r\n * - 多重ループやワイルドカード（*）を含むパスにも対応\r\n * - indexes未指定時は現在のループコンテキストから自動でインデックスを解決\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパス情報を解析し、依存関係も自動で登録\r\n * - walkWildcardPatternでワイルドカード階層を再帰的に探索し、全インデックス組み合わせを列挙\r\n * - resolveで各インデックス組み合わせに対応する値を取得し、配列で返却\r\n * - getContextListIndexで現在のループインデックスを取得\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n */\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IReadonlyStateProxy, IReadonlyStateHandler } from \"../types\";\r\nimport { resolveReadonly } from \"./resolveReadonly.js\";\r\nimport { getContextListIndex } from \"../methods/getContextListIndex\";\r\nimport { IListIndex2 } from \"../../ListIndex2/types\";\r\n\r\nexport function getAllReadonly(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IReadonlyStateProxy,\r\n  handler: IReadonlyStateHandler\r\n):Function {\r\n    const resolve = resolveReadonly(target, prop, receiver, handler);\r\n    return (path: string, indexes?: number[]): any[] => {\r\n      const info = getStructuredPathInfo(path);\r\n      const lastInfo = handler.structuredPathInfoStack[handler.refIndex] ?? null;\r\n      if (lastInfo !== null && lastInfo.pattern !== info.pattern) {\r\n        // gettersに含まれる場合は依存関係を登録\r\n        if (handler.engine.pathManager.getters.has(lastInfo.pattern)) {\r\n          handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, info.pattern);\r\n        }\r\n      }\r\n  \r\n      if (typeof indexes === \"undefined\") {\r\n        for(let i = 0; i < info.wildcardInfos.length; i++) {\r\n          const wildcardPattern = info.wildcardInfos[i] ?? raiseError(`wildcardPattern is null`);\r\n          const listIndex = getContextListIndex(handler, wildcardPattern.pattern);\r\n          if (listIndex) {\r\n            indexes = listIndex.indexes;\r\n            break;\r\n          }\r\n        }\r\n        if (typeof indexes === \"undefined\") {\r\n          indexes = [];\r\n        }\r\n      }\r\n      const walkWildcardPattern = (\r\n        wildcardParentInfos: IStructuredPathInfo[],\r\n        wildardIndexPos: number,\r\n        listIndex: IListIndex2 | null,\r\n        indexes: number[],\r\n        indexPos: number,\r\n        parentIndexes: number[],\r\n        results: number[][]\r\n      ) => {\r\n        const wildcardParentPattern = wildcardParentInfos[wildardIndexPos] ?? null;\r\n        if (wildcardParentPattern === null) {\r\n          results.push(parentIndexes);\r\n          return;\r\n        }\r\n        const listIndexSet = handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n        const listIndexes = Array.from(listIndexSet);\r\n        const index = indexes[indexPos] ?? null;\r\n        if (index === null) {\r\n          for(let i = 0; i < listIndexes.length; i++) {\r\n            const listIndex = listIndexes[i];\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results);\r\n          }\r\n        } else {\r\n          const listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n          if ((wildardIndexPos + 1) < wildcardParentInfos.length) {\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results\r\n            );\r\n          }\r\n        }\r\n      }\r\n      const resultIndexes: number[][] = [];\r\n      walkWildcardPattern(\r\n        info.wildcardParentInfos, \r\n        0, \r\n        null, \r\n        indexes, \r\n        0, \r\n        [], \r\n        resultIndexes\r\n      );\r\n      const resultValues: any[] = [];\r\n      for(let i = 0; i < resultIndexes.length; i++) {\r\n        resultValues.push(resolve(\r\n          info.pattern,\r\n          resultIndexes[i]\r\n        ));\r\n      }\r\n      return resultValues;\r\n    }\r\n  }","/**\r\n * setCacheable.ts\r\n *\r\n * StateClassの内部APIとして、キャッシュ可能なスコープを一時的に有効化し、\r\n * 指定したコールバック処理をキャッシュ付きで実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.cacheableをtrueに設定し、キャッシュ用オブジェクトを初期化\r\n * - 指定したcallbackをキャッシュ有効状態で実行\r\n * - finallyで必ずcacheableをfalseに戻し、スコープ外ではキャッシュを無効化\r\n *\r\n * 設計ポイント:\r\n * - コールバック実行中のみキャッシュを有効化し、スコープ外への影響を防止\r\n * - finallyで状態復元を保証し、例外発生時も安全\r\n */\r\nimport { IReadonlyStateHandler } from \"../types\";\r\n\r\nexport function setCacheable(handler: IReadonlyStateHandler, callback: () => void): void {\r\n  handler.cacheable = true;\r\n  handler.cache = {};\r\n  try {\r\n    callback();\r\n  } finally {\r\n    handler.cacheable = false;\r\n  }\r\n}\r\n","/**\r\n * createReadonlyStateProxy.ts\r\n *\r\n * StateClassの「読み取り専用」プロキシを生成するための実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - Stateオブジェクトに対して、読み取り専用のProxyを作成\r\n * - StateHandlerクラスで各種APIやトラップ（get/set）を実装\r\n * - getトラップでバインディングやAPI呼び出し、依存解決などに対応\r\n * - setトラップではエラーを投げて書き込みを禁止\r\n *\r\n * 設計ポイント:\r\n * - StateHandlerはIReadonlyStateHandlerを実装し、状態管理やAPI呼び出しの基盤となる\r\n * - callableApiに各種APIシンボルと関数をマッピングし、柔軟なAPI拡張が可能\r\n * - createReadonlyStateProxyで一貫した生成・利用が可能\r\n * - 依存解決やキャッシュ、ループ・プロパティ参照スコープ管理など多機能な設計\r\n */\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IReadonlyStateHandler, IState, IReadonlyStateProxy } from \"./types\";\r\nimport { getReadonly as trapGet } from \"./traps/getReadonly.js\";\r\nimport { raiseError } from \"../utils\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex2 } from \"../ListIndex2/types\";\r\n\r\nconst STACK_DEPTH = 32;\r\n\r\nclass StateHandler implements IReadonlyStateHandler {\r\n  engine   : IComponentEngine;\r\n  cacheable: boolean = false;\r\n  cache    : {[key: string]: any} = {};\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: (IStructuredPathInfo | null)[] = Array(STACK_DEPTH).fill(null);\r\n  trackingIndex: number = -1;\r\n  structuredPathInfoStack: (IStructuredPathInfo | null)[] = Array(STACK_DEPTH).fill(null);\r\n  listIndex2Stack: (IListIndex2 | null)[] = Array(STACK_DEPTH).fill(null);\r\n  refIndex: number = -1;\r\n  loopContext: ILoopContext | null = null;\r\n\r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IReadonlyStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IReadonlyStateProxy\r\n  ): boolean {\r\n    raiseError(`Cannot set property ${String(prop)} of readonly state.`);\r\n  }\r\n}\r\n\r\nexport function createReadonlyStateProxy(\r\n  engine: IComponentEngine, \r\n  state: Object\r\n): IReadonlyStateProxy {\r\n  return new Proxy<IState>(state, new StateHandler(engine)) as IReadonlyStateProxy;\r\n}\r\n","/**\r\n * getStatePropertyRef.ts\r\n *\r\n * StatePropertyRefのユーティリティとして、構造化パス情報（IStructuredPathInfo）と\r\n * リストインデックス（IListIndex）から一意な参照キー（refKey）を生成する関数です。\r\n *\r\n * 主な役割:\r\n * - info.idとlistIndex.idを組み合わせて、StatePropertyRefを一意に識別するキーを生成\r\n * - listIndexがnullの場合は0を利用し、全ての参照に対して一貫したキーを提供\r\n *\r\n * 設計ポイント:\r\n * - キャッシュや依存解決など、StatePropertyRefの識別・管理に利用\r\n * - シンプルな文字列連結で高速かつ衝突のないキー生成を実現\r\n */\r\nimport { IListIndex2 } from \"../ListIndex2/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\n\r\nexport function createRefKey(\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex2 | null,\r\n) {\r\n  return (listIndex == null) ? info.sid : (info.sid + \"#\" + listIndex.sid);\r\n}\r\n\r\n","import { IListIndex2 } from \"./types\";\r\n\r\n\r\nlet version = 0;\r\nlet id = 0;\r\nclass ListIndex2 implements IListIndex2 {\r\n  #parentListIndex: IListIndex2 | null = null;\r\n  #pos: number = 0;\r\n  #index: number = 0;\r\n  #version: number;\r\n  #id = ++id;\r\n  #sid = this.#id.toString();\r\n  constructor(parentListIndex: IListIndex2 | null, index: number) {\r\n    this.#parentListIndex = parentListIndex;\r\n    this.#pos = parentListIndex ? parentListIndex.position + 1 : 0;\r\n    this.#index = index;\r\n    this.#version = version;\r\n  }\r\n\r\n  get parentListIndex() {\r\n    return this.#parentListIndex;\r\n  }\r\n\r\n  get id() {\r\n    return this.#id;\r\n  }\r\n\r\n  get sid() {\r\n    return this.#sid;\r\n  }\r\n\r\n  get position() {\r\n    return this.#pos;\r\n  }\r\n\r\n  get length() {\r\n    return this.#pos + 1;\r\n  }\r\n\r\n  get index() {\r\n    return this.#index;\r\n  }\r\n  set index(value: number) {\r\n    this.#index = value;\r\n    this.#version = ++version;\r\n    this.indexes[this.#pos] = value;\r\n  }\r\n\r\n  get version(): number {\r\n    return this.#version;\r\n  }\r\n\r\n  get dirty(): boolean {\r\n    if (this.#parentListIndex === null) {\r\n      return false;\r\n    } else {\r\n      return this.#parentListIndex.dirty || this.#parentListIndex.version > this.#version;\r\n    }\r\n  }\r\n\r\n  #indexes: number[] | undefined;\r\n  get indexes(): number[] {\r\n    if (this.#parentListIndex === null) {\r\n      if (typeof this.#indexes === \"undefined\") {\r\n        this.#indexes = [this.#index];\r\n      }\r\n    } else {\r\n      if (typeof this.#indexes === \"undefined\" || this.dirty) {\r\n        this.#indexes = [...this.#parentListIndex.indexes, this.#index];\r\n        this.#version = version;\r\n      }\r\n    }\r\n    return this.#indexes;\r\n  }\r\n\r\n  #listIndexes: WeakRef<IListIndex2>[] | undefined;\r\n  get listIndexes(): WeakRef<IListIndex2>[] {\r\n    if (this.#parentListIndex === null) {\r\n      if (typeof this.#listIndexes === \"undefined\") {\r\n        this.#listIndexes = [new WeakRef(this)];\r\n      }\r\n    } else {\r\n      if (typeof this.#listIndexes === \"undefined\") {\r\n        this.#listIndexes = [...this.#parentListIndex.listIndexes, new WeakRef(this)];\r\n      }\r\n    }\r\n    return this.#listIndexes;\r\n  }\r\n\r\n  get varName(): string {\r\n    return `${this.position + 1}`;\r\n  }\r\n\r\n  at(pos: number): IListIndex2 | null {\r\n    if (pos >= 0) {\r\n      return this.listIndexes[pos]?.deref() || null;\r\n    } else {\r\n      return this.listIndexes[this.listIndexes.length + pos]?.deref() || null;\r\n    }\r\n  }\r\n}\r\n\r\nexport function createListIndex2(parentListIndex: IListIndex2 | null, index: number): IListIndex2 {\r\n  return new ListIndex2(parentListIndex, index);\r\n}\r\n","import { createListIndex2 } from \"../ListIndex2/ListIndex2\";\r\nimport { IListIndex2 } from \"../ListIndex2/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IListDiffResults } from \"./types\";\r\n\r\nfunction listDiffNew(\r\n  newValue: any[],\r\n  parentListIndex: IListIndex2 | null,\r\n): IListDiffResults {\r\n  const adds: Set<IListIndex2> = new Set();\r\n  const newListIndexesSet: Set<IListIndex2> = new Set();\r\n  for(let i = 0; i < newValue.length; i++) {\r\n    // リスト要素から古いリストインデックスを取得して、リストインデックスを更新する\r\n    // もし古いリストインデックスがなければ、新しいリストインデックスを作成する\r\n    const newListIndex = createListIndex2(parentListIndex, i);\r\n    adds.add(newListIndex);\r\n    newListIndexesSet.add(newListIndex);\r\n  }\r\n  return { adds, newListIndexesSet };\r\n}\r\n\r\nfunction listDiffUpdate(\r\n  oldValue: any[], \r\n  oldListIndexesSet: Set<IListIndex2>,\r\n  newValue: any[],\r\n  parentListIndex: IListIndex2 | null,\r\n): IListDiffResults {\r\n  const adds: Set<IListIndex2> = new Set();\r\n  const updates: Set<IListIndex2> = new Set();\r\n  // 新しいリスト要素に基づいて、リストインデックスを再構築する\r\n  const newListIndexesSet:Set<IListIndex2> = new Set();\r\n  const oldListIndexesByValue = Map.groupBy(oldListIndexesSet, listIndex => oldValue[listIndex.index]);\r\n  for(let i = 0; i < newValue.length; i++) {\r\n    // リスト要素から古いリストインデックスを取得して、リストインデックスを更新する\r\n    // もし古いリストインデックスがなければ、新しいリストインデックスを作成する\r\n    const lastListIndex = oldListIndexesByValue.get(newValue[i])?.shift();\r\n    if (lastListIndex) {\r\n      if (lastListIndex.index !== i) {\r\n        lastListIndex.index = i;\r\n        updates.add(lastListIndex);\r\n      }\r\n      newListIndexesSet.add(lastListIndex);\r\n    } else {\r\n      const newListIndex = createListIndex2(parentListIndex, i);\r\n      adds.add(newListIndex);\r\n      newListIndexesSet.add(newListIndex);\r\n    }\r\n  }\r\n  const removes: Set<IListIndex2> = oldListIndexesSet.difference(newListIndexesSet);\r\n  return { adds, updates, removes, newListIndexesSet}\r\n}\r\n\r\n/**\r\n * リストの差分結果を取得する\r\n * @param oldValue 古い値\r\n * @param oldListIndexesSet 古いリストインデックスセット\r\n * @param newValue 新しい値\r\n * @param parentListIndex 親リストインデックス\r\n * @returns リストの差分結果\r\n */\r\nexport function getListDiffResults(\r\n  oldValue: any[] | undefined | null,\r\n  oldListIndexesSet: Set<IListIndex2> | undefined | null,\r\n  newValue: any[] | undefined | null,\r\n  parentListIndex: IListIndex2 | null,\r\n): IListDiffResults {\r\n  if (oldValue != null && newValue != null) {\r\n    if (!oldListIndexesSet) raiseError(\"Old list indexes set is not provided for existing old value.\");\r\n    if (oldValue.length > 0 && newValue.length > 0) {\r\n      return listDiffUpdate(oldValue, oldListIndexesSet, newValue, parentListIndex);\r\n    } else if (newValue.length > 0) {\r\n      return listDiffNew(newValue, parentListIndex);\r\n    } else { // oldValue.length > 0\r\n      const removes: Set<IListIndex2> = oldListIndexesSet ? new Set(oldListIndexesSet) : new Set();\r\n      return { removes };\r\n    }\r\n  } else if (newValue != null) {\r\n    return listDiffNew(newValue, parentListIndex);\r\n  } else { // oldValue != null\r\n    const removes: Set<IListIndex2> = oldListIndexesSet ? new Set(oldListIndexesSet) : new Set();\r\n    return { removes };\r\n  }\r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { IListIndex2 } from \"../ListIndex2/types\";\r\nimport { listWalker } from \"../ListWalker/listWalker\";\r\nimport { createReadonlyStateProxy } from \"../StateClass/createReadonlyStateProxy\";\r\nimport { GetByRefSymbol, SetCacheableSymbol } from \"../StateClass/symbols\";\r\nimport { set } from \"../StateClass/traps/set\";\r\nimport { IReadonlyStateProxy } from \"../StateClass/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { createRefKey } from \"../StatePropertyRef/getStatePropertyRef\";\r\nimport { raiseError } from \"../utils\";\r\nimport { elementDiffUpdate } from \"./getElementsDiffResults\";\r\nimport { getListDiffResults } from \"./getListDiffResults\";\r\nimport { IListDiffResults, IRenderer, IUpdateInfo } from \"./types\";\r\n\r\nclass Renderer implements IRenderer {\r\n  #updatedBindings: Set<IBinding> = new Set();\r\n  #trackedRefKeys: Set<string> = new Set();\r\n  #listDiffResultsByRefKey: Map<string, IListDiffResults> = new Map();\r\n  #engine: IComponentEngine;\r\n  #readonlyState: IReadonlyStateProxy | null = null;\r\n\r\n  constructor(engine: IComponentEngine) {\r\n    this.#engine = engine;\r\n  }\r\n\r\n  get updatedBindings(): Set<IBinding> {\r\n    return this.#updatedBindings;\r\n  }\r\n\r\n  get trackedRefKeys(): Set<string> {\r\n    return this.#trackedRefKeys;\r\n  }\r\n\r\n  get readonlyState(): IReadonlyStateProxy {\r\n    if (!this.#readonlyState) {\r\n      raiseError(\"ReadonlyState is not initialized.\");\r\n    }\r\n    return this.#readonlyState;\r\n  }\r\n\r\n  get engine(): IComponentEngine {\r\n    if (!this.#engine) {\r\n      raiseError(\"Engine is not initialized.\");\r\n    }\r\n    return this.#engine;\r\n  }\r\n\r\n  render(items: IUpdateInfo[]): void {\r\n    // 実際のレンダリングロジックを実装\r\n    const readonlyState = this.#readonlyState = createReadonlyStateProxy(this.#engine, this.#engine.state);\r\n    try {\r\n      readonlyState[SetCacheableSymbol](() => {\r\n        // リストの差分計算実行\r\n        for(const item of items) {\r\n          if (this.engine.pathManager.lists.has(item.info.pattern)) {\r\n            this.updateListIndexes(item.info, item.listIndex);\r\n          }\r\n          if (this.engine.pathManager.elements.has(item.info.pattern)) {\r\n            if (!item.listIndex) {\r\n              raiseError(`Renderer.render: listIndex is null for element ${item.info.pattern}`);\r\n            }\r\n            this.updateElements(item.info, item.listIndex);\r\n          }\r\n        }\r\n        // 各Ref情報に対してレンダリングを実行\r\n        // trackedRefKeysに追加されているRef情報はスキップ\r\n        // updatedBindingsに追加されているバインディングはスキップ\r\n        for(const item of items) {\r\n          this.renderItem(item.info, item.listIndex, this.trackedRefKeys, this.updatedBindings, readonlyState);\r\n        }\r\n      });\r\n\r\n    } finally {\r\n      this.#readonlyState = null;\r\n      this.#listDiffResultsByRefKey.clear();\r\n      this.#trackedRefKeys.clear();\r\n      this.#updatedBindings.clear();\r\n    }\r\n  }\r\n\r\n  getListDiffResults(info: IStructuredPathInfo, listIndex: IListIndex2 | null): IListDiffResults {\r\n    if (this.isListValue(info) === false) {\r\n      raiseError(\"The specified info is not a list value.\");\r\n    }\r\n    const refKey = createRefKey(info, listIndex);\r\n    let listDiffResults = this.#listDiffResultsByRefKey.get(refKey);\r\n    if (!listDiffResults) {\r\n      const newValue = this.readonlyState[GetByRefSymbol](info, listIndex);\r\n      const oldValue = this.getOldValue(info, listIndex);\r\n      const oldListIndexesSet = this.getOldListIndexesSet(info, listIndex);\r\n      listDiffResults = getListDiffResults(oldValue, oldListIndexesSet, newValue, listIndex);\r\n      this.#listDiffResultsByRefKey.set(refKey, listDiffResults);\r\n      /**\r\n       * ToDo: undefinedの場合の扱いをどうするか検討\r\n       * - 現状はundefinedを空配列として扱う\r\n       */\r\n      this.setOldValue(info, listIndex, newValue ?? []);\r\n      /**\r\n       * ToDo: undefinedの扱いをどうするか検討\r\n       * - 現状はundefinedを空Setとして扱う\r\n       */\r\n      this.setOldListIndexesSet(info, listIndex, listDiffResults.newListIndexesSet ?? new Set());\r\n    }\r\n    return listDiffResults;\r\n  }\r\n\r\n  isListValue(info: IStructuredPathInfo): boolean {\r\n    return this.engine.pathManager.lists.has(info.pattern);\r\n  }\r\n\r\n  getOldListIndexesSet(info: IStructuredPathInfo, listIndex: IListIndex2 | null): Set<IListIndex2> | null {\r\n    // エンジンから古いリストインデックスセットを取得\r\n    return this.engine.getListIndexesSet(info, listIndex) ?? null;\r\n  }\r\n\r\n  setOldListIndexesSet(info: IStructuredPathInfo, listIndex: IListIndex2 | null, listIndexesSet: Set<IListIndex2>): void {\r\n    // エンジンに古いリストインデックスセットを保存\r\n    this.engine.saveListIndexesSet(info, listIndex, listIndexesSet);\r\n  }\r\n\r\n  getOldValue(info: IStructuredPathInfo, listIndex: IListIndex2 | null): any[] | null {\r\n    // エンジンから古い値を取得\r\n    return this.engine.getList(info, listIndex) ?? null;\r\n  }\r\n\r\n  setOldValue(info: IStructuredPathInfo, listIndex: IListIndex2 | null, value: any[]): void {\r\n    // エンジンに古い値を保存\r\n    this.engine.saveList(info, listIndex, value);\r\n  }\r\n\r\n  getBindings(info: IStructuredPathInfo, listIndex: IListIndex2 | null): IBinding[] {\r\n    // エンジンからバインディングを取得\r\n    return this.engine.getBindings(info, listIndex) ?? [];\r\n  }\r\n\r\n  updateListIndexes(\r\n    info: IStructuredPathInfo, \r\n    listIndex: IListIndex2 | null, \r\n  ) {\r\n    const diffResult = this.getListDiffResults(info, listIndex);\r\n    for(const path of this.engine.pathManager.lists) {\r\n      const pathInfo = getStructuredPathInfo(path);\r\n      const wildcardInfo = pathInfo.wildcardParentInfos.at(-2);\r\n      if (typeof wildcardInfo === \"undefined\" || wildcardInfo !== info) {\r\n        continue;\r\n      }\r\n      for(const subListIndex of diffResult.adds ?? []) {\r\n        this.updateListIndexes(pathInfo, subListIndex);\r\n      }\r\n    }\r\n  }\r\n  updateElements(\r\n    info: IStructuredPathInfo, \r\n    listIndex: IListIndex2,\r\n  ) {\r\n    const parentInfo = info.parentInfo;\r\n    if (!parentInfo) {\r\n      raiseError(`Renderer.render: parentInfo is not found for element ${info.pattern}`);\r\n    }\r\n    const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? listIndex?.at(-1) ?? null : listIndex;\r\n    const elementValue = this.readonlyState[GetByRefSymbol](info, listIndex);\r\n    const elementIndex = listIndex;\r\n    const oldValue = this.getOldValue(parentInfo, parentListIndex) ?? [];\r\n    const oldListIndexesSet = this.getOldListIndexesSet(parentInfo, parentListIndex) ?? new Set();\r\n\r\n    const elementResult = elementDiffUpdate(\r\n      elementValue,\r\n      elementIndex,\r\n      oldValue,\r\n      oldListIndexesSet,\r\n    );\r\n    const diffResult = this.getListDiffResults(parentInfo, parentListIndex);\r\n    // 差分結果をマージする\r\n    if (elementResult.replaces) {\r\n      diffResult.replaces = diffResult.replaces ? diffResult.replaces.union(elementResult.replaces) : elementResult.replaces;\r\n    }\r\n    if (elementResult.swapTargets && elementResult.swapSources) {\r\n      diffResult.swapTargets = diffResult.swapTargets ? diffResult.swapTargets.union(elementResult.swapTargets) : elementResult.swapTargets;\r\n      diffResult.swapSources = diffResult.swapSources ? diffResult.swapSources.union(elementResult.swapSources) : elementResult.swapSources;\r\n\r\n    }\r\n    if (elementResult.updates) {\r\n      diffResult.updates = diffResult.updates ? diffResult.updates.union(elementResult.updates) : elementResult.updates;\r\n    }\r\n  }\r\n  renderItem(\r\n    info: IStructuredPathInfo, \r\n    listIndex: IListIndex2 | null, \r\n    trackedRefKeys: Set<string>,\r\n    updatedBindings: Set<IBinding>, \r\n    readonlyState: IReadonlyStateProxy\r\n  ): void {\r\n    const refKey = createRefKey(info, listIndex);\r\n    if (trackedRefKeys.has(refKey)) {\r\n      return; // すでに処理済みのRef情報はスキップ\r\n    }\r\n    trackedRefKeys.add(refKey);\r\n\r\n    // バインディングに変更を適用する\r\n    // 変更があったバインディングはupdatedBindingsに追加する\r\n    const bindings = this.getBindings(info, listIndex);\r\n    for(const binding of bindings) {\r\n      if (updatedBindings.has(binding)) {\r\n        continue; // すでに更新済みのバインディングはスキップ\r\n      }\r\n      binding.applyChange(this);\r\n    }\r\n\r\n    // 静的・動的依存要素のレンダリング\r\n    const isList = this.isListValue(info);\r\n    const diffResults = isList ? this.#listDiffResultsByRefKey.get(refKey) : null;\r\n    const elementInfo = isList ? getStructuredPathInfo(info.pattern + \".*\") : null;\r\n    // インデックス更新があったバインディングに変更を適用する\r\n    for(const updateListIndex of diffResults?.updates ?? []) {\r\n      const info = getStructuredPathInfo(updateListIndex.varName);\r\n      const bindings = this.getBindings(info, updateListIndex);\r\n      for(const binding of bindings) {\r\n        if (updatedBindings.has(binding)) {\r\n          continue; // すでに更新済みのバインディングはスキップ\r\n        }\r\n        binding.applyChange(this);\r\n      }\r\n    }\r\n\r\n    // 静的依存要素のレンダリング\r\n    for(const subPath of this.#engine?.pathManager.staticDependencies.get(info.pattern) ?? []) {\r\n      const subInfo = getStructuredPathInfo(subPath);\r\n      if (elementInfo?.pattern && subInfo.wildcardPathSet.has(elementInfo.pattern)) {\r\n        // リストの依存要素の場合\r\n        for(const subListIndex of diffResults?.newListIndexesSet ?? []) {\r\n          this.renderItem(subInfo, subListIndex, trackedRefKeys, updatedBindings, readonlyState);\r\n        }\r\n      } else {\r\n        this.renderItem(subInfo, listIndex, trackedRefKeys, updatedBindings, readonlyState);\r\n      }\r\n    }\r\n\r\n    // 動的依存要素のレンダリング\r\n    for(const subPath of this.#engine?.pathManager.dynamicDependencies.get(info.pattern) ?? []) {\r\n      const subInfo = getStructuredPathInfo(subPath);\r\n      // リストの依存要素の場合は、静的依存で処理済み\r\n      if (subInfo.wildcardCount > 0) {\r\n        const parentMatchPaths = subInfo.wildcardPathSet.intersection(elementInfo?.wildcardPathSet ?? new Set());\r\n        if (parentMatchPaths.size > 0) {\r\n          if (diffResults?.newListIndexesSet?.size === parentMatchPaths.size) {\r\n            // リストパスが完全に一致する場合\r\n            for(const subListIndex of diffResults?.newListIndexesSet ?? []) {\r\n              listWalker(this.engine, subInfo, subListIndex, (_info, _listIndex) => {\r\n                this.renderItem(_info, _listIndex, trackedRefKeys, updatedBindings, readonlyState);\r\n              });\r\n            }\r\n          } else {\r\n            // リストパスが一部一致する場合\r\n            const lastMatchPath = Array.from(parentMatchPaths).at(-1) as string; // 共通パスを取得\r\n            const lastMatchInfo = getStructuredPathInfo(lastMatchPath); // ワイルドカードのパス情報を取得\r\n            // 共通パスのワイルドカードの深さまでlistIndexを辿る\r\n            const subListIndex = listIndex?.at(lastMatchInfo.wildcardCount - 1) ?? null;\r\n            listWalker(this.engine, subInfo, subListIndex, (_info, _listIndex) => {\r\n              this.renderItem(_info, _listIndex, trackedRefKeys, updatedBindings, readonlyState);\r\n            });\r\n          }\r\n        } else {\r\n          // まったく無関係なリストの場合リストを展開しながらレンダリング\r\n          listWalker(this.engine, subInfo, null, (subInfo, subListIndex) => {\r\n            this.renderItem(subInfo, subListIndex, trackedRefKeys, updatedBindings, readonlyState);\r\n          });\r\n        }\r\n\r\n      } else {\r\n        this.renderItem(subInfo, null, trackedRefKeys, updatedBindings, readonlyState);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function render(items: IUpdateInfo[], engine: IComponentEngine): void {\r\n  const renderer = new Renderer(engine);\r\n  renderer.render(items);\r\n}","\r\n/**\r\n * リスト要素への直接操作によるリスト差分結果\r\n * ex.\r\n * swap\r\n * [this[\"list.1\"], this[\"list.5\"]] = [this[\"list.5\"], this[\"list.1\"]];\r\n * \r\n * updateItemsには[\r\n * {info: IStructuredPathInfo(\"list.*\"), listIndex: IListIndex2(1)} // 置き換えられた要素の情報\r\n * {info: IStructuredPathInfo(\"list.*\"), listIndex: IListIndex2(5)} // 置き換えられた要素の情報\r\n * ]\r\n * \r\n * replace\r\n * this[\"list.1\"] = newValue;\r\n *\r\n * updateItemsには[\r\n * {info: IStructuredPathInfo(\"list.*\"), listIndex: IListIndex2(1)} // 置き換えられた要素の情報\r\n * ]\r\n *\r\n */\r\n\r\nimport { IListIndex2 } from \"../ListIndex2/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IListDiffResults } from \"./types\";\r\n\r\n/**\r\n * list[1]には旧list[5]の値が入る\r\n * list[5]には旧list[1]の値が入る\r\n * \r\n * newlist[0] -> oldlist[0] (oldIndex:0)\r\n * newlist[1] -> oldlist[5] (oldIndex:5) *\r\n * newlist[2] -> oldlist[2] (oldIndex:2)\r\n * newlist[3] -> oldlist[3] (oldIndex:3)\r\n * newlist[4] -> oldlist[4] (oldIndex:4)\r\n * newlist[5] -> oldlist[1] (oldIndex:1) *\r\n * newlist[6] -> oldlist[6] (oldIndex:6)\r\n */\r\n\r\nexport function elementDiffUpdate(\r\n  elementValue: any,\r\n  elementListIndex: IListIndex2,\r\n  oldValue: any[], \r\n  oldListIndexesSet: Set<IListIndex2>,\r\n): IListDiffResults {\r\n  const oldIndex = oldValue.indexOf(elementValue);\r\n  const setElement = new Set([elementListIndex]);\r\n  if (oldIndex === -1) {\r\n    return { replaces: setElement };\r\n  }\r\n  const oldListIndex = Array.from(oldListIndexesSet)[oldIndex];\r\n  if (!oldListIndex) {\r\n    raiseError(`elementDiffUpdate: oldListIndex is not found`);\r\n  }\r\n  return { swapTargets: setElement, swapSources: new Set([oldListIndex]), updates: setElement };\r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { createListIndex2 } from \"../ListIndex2/ListIndex2\";\r\nimport { IListIndex2 } from \"../ListIndex2/types\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { createReadonlyStateProxy } from \"../StateClass/createReadonlyStateProxy\";\r\nimport { GetByRefSymbol } from \"../StateClass/symbols\";\r\nimport { IReadonlyStateProxy, IWritableStateProxy } from \"../StateClass/types\";\r\nimport { useWritableStateProxy } from \"../StateClass/useWritableStateProxy\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { createRefKey } from \"../StatePropertyRef/getStatePropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { render } from \"./Renderer\";\r\nimport { IUpdateInfo, IUpdater2 } from \"./types\";\r\n\r\n\r\n/**\r\n * Updater2クラスは、状態管理と更新の中心的な役割を果たします。\r\n * 状態更新が必要な場合に、都度インスタンスを作成して使用します。\r\n * 主な機能は以下の通りです:\r\n */\r\nclass Updater2 implements IUpdater2 {\r\n  queue: Array<IUpdateInfo> = [];\r\n  #updating: boolean = false;\r\n  #rendering: boolean = false;\r\n  #engine: IComponentEngine | null = null;\r\n\r\n  // Ref情報をキューに追加\r\n  enqueueRef(info: IStructuredPathInfo, listIndex: IListIndex2 | null, value: any): void {\r\n    this.queue.push({ info, listIndex, value });\r\n    if (this.#rendering) return;\r\n    this.#rendering = true;\r\n    queueMicrotask(() => {\r\n      this.rendering();\r\n    });\r\n  }\r\n\r\n  // 状態更新開始\r\n  async beginUpdate(engine: IComponentEngine, loopContext: ILoopContext | null, callback: (state: IWritableStateProxy) => Promise<void>): Promise<void> {\r\n    try {\r\n      this.#updating = true;\r\n      this.#engine = engine;\r\n      await useWritableStateProxy(engine, this, engine.state, loopContext, async (state:IWritableStateProxy) => {\r\n        // 状態更新処理\r\n        await callback(state);\r\n      });\r\n    } finally {\r\n      this.#updating = false;\r\n    }\r\n  }\r\n\r\n  // レンダリング\r\n  rendering(): void {\r\n    try {\r\n      while( this.queue.length > 0 ) {\r\n        // キュー取得\r\n        const queue = this.queue;\r\n        this.queue = [];\r\n        if (!this.#engine) raiseError(\"Engine is not initialized.\");\r\n        // レンダリング実行\r\n        render(queue, this.#engine);\r\n      }\r\n    } finally {\r\n      this.#rendering = false;\r\n    }\r\n  }\r\n}\r\n\r\nexport async function update2(engine: IComponentEngine, loopContext: ILoopContext | null, callback: (updater: IUpdater2, state: IWritableStateProxy) => Promise<void>): Promise<void> {\r\n  const updater = new Updater2();\r\n  await updater.beginUpdate(engine, loopContext, async (state) => {\r\n    await callback(updater, state);\r\n  });\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IRenderer } from \"../../Updater2/types.js\";\r\nimport { update2 } from \"../../Updater2/Updater2.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeEventクラスは、イベントバインディング（onClick, onInputなど）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - 指定イベント（on～）に対して、バインディングされた関数をイベントリスナーとして登録\r\n * - デコレータ（preventDefault, stopPropagation）によるイベント制御に対応\r\n * - ループコンテキストやリストインデックスも引数としてイベントハンドラに渡す\r\n * - ハンドラ実行時はstateProxyを生成し、Updater経由で非同期的に状態を更新\r\n *\r\n * 設計ポイント:\r\n * - nameからイベント名（subName）を抽出し、addEventListenerで登録\r\n * - バインディング値が関数でない場合はエラー\r\n * - デコレータでpreventDefault/stopPropagationを柔軟に制御\r\n * - ループ内イベントにも対応し、リストインデックスを引数展開\r\n */\r\nclass BindingNodeEvent extends BindingNode {\r\n  #subName    : string;\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#subName = this.name.slice(2); // on～\r\n    const element = node as HTMLElement;\r\n    element.addEventListener(this.subName, (e:Event) => this.handler(e));\r\n  }\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  update() {\r\n    // 何もしない（イベントバインディングは初期化時のみ）\r\n  }\r\n\r\n  async handler(e: Event) {\r\n    const engine = this.binding.engine;\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n    const indexes = loopContext?.serialize().map((context) => context.listIndex.index) ?? [];\r\n    const options = this.decorates;\r\n    if (options.includes(\"preventDefault\")) {\r\n      e.preventDefault();\r\n    }\r\n    if (options.includes(\"stopPropagation\")) {\r\n      e.stopPropagation();\r\n    }\r\n    await update2(engine, loopContext, async (updater, state) => {\r\n      // stateProxyを生成し、バインディング値を実行\r\n      const func = this.binding.bindingState.getValue(state);\r\n      if (typeof func !== \"function\") {\r\n        raiseError(`BindingNodeEvent: ${this.name} is not a function.`);\r\n      }\r\n      await Reflect.apply(func, state, [e, ...indexes]);\r\n    });\r\n  }\r\n  applyChange(renderer: IRenderer): void {\r\n    // イベントバインディングは初期化時のみで、状態変更時に何もしない\r\n  }\r\n}\r\n\r\n/**\r\n * イベントバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeEventインスタンスを生成\r\n */\r\nexport const createBindingNodeEvent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeEvent(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { COMMENT_TEMPLATE_MARK } from \"../../constants.js\";\r\nimport { Filters } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\n\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\n/**\r\n * BindingNodeBlockクラスは、テンプレートブロック（コメントノードによるテンプレート挿入部）を\r\n * バインディング対象とするためのバインディングノード実装です。\r\n *\r\n * 主な役割:\r\n * - コメントノード内のテンプレートIDを抽出し、idプロパティとして保持\r\n * - テンプレートブロックのバインディング処理の基盤となる\r\n *\r\n * 設計ポイント:\r\n * - コメントノードのテキストからテンプレートIDを抽出（COMMENT_TEMPLATE_MARK以降を数値変換）\r\n * - IDが取得できない場合はエラーを投げる\r\n * - 他のBindingNode系クラスと同様、フィルタやデコレータにも対応\r\n */\r\nexport class BindingNodeBlock extends BindingNode {\r\n  #id: number;\r\n  get id(): number {\r\n    return this.#id;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const id = this.node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN) ?? raiseError(\"BindingNodeBlock.id: invalid node\");\r\n    this.#id = Number(id);\r\n  }\r\n    \r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IRenderer } from \"../../Updater2/types.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeIfクラスは、ifバインディング（条件付き描画）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（boolean）に応じて、BindContent（描画内容）のマウント・アンマウントを制御\r\n * - true/false時のBindContent集合を管理し、現在の描画状態をbindContentsで取得可能\r\n *\r\n * 設計ポイント:\r\n * - assignValueでboolean型以外が渡された場合はエラー\r\n * - trueならBindContentをrender・mount、falseならunmount\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeIf extends BindingNodeBlock {\r\n  #bindContent: IBindContent;\r\n  #trueBindContents: Set<IBindContent>;\r\n  #falseBindContents: Set<IBindContent> = new Set();\r\n  #bindContents: Set<IBindContent>;\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#bindContent = createBindContent(\r\n      this.binding, \r\n      this.id, \r\n      this.binding.engine, \r\n      \"\", \r\n      null\r\n    );\r\n    this.#trueBindContents = this.#bindContents = new Set([this.#bindContent]);\r\n  }\r\n\r\n  assignValue(value: any): void {\r\n    raiseError(`BindingNodeIf.assignValue: not implemented`);\r\n  }\r\n  \r\n  applyChange(renderer: IRenderer): void {\r\n    if (renderer.updatedBindings.has(this.binding)) return;\r\n    const filteredValue = this.binding.bindingState.getFilteredValue(renderer.readonlyState);\r\n    if (typeof filteredValue !== \"boolean\") {\r\n      raiseError(`BindingNodeIf.update: value is not boolean`);\r\n    }\r\n    const parentNode = this.node.parentNode;\r\n    if (parentNode == null) {\r\n      raiseError(`BindingNodeIf.update: parentNode is null`);\r\n    }\r\n    if (filteredValue) {\r\n      this.#bindContent.mountAfter(parentNode, this.node);\r\n      this.#bindContent.applyChange(renderer);\r\n      this.#bindContents = this.#trueBindContents;\r\n    } else {\r\n      this.#bindContent.unmount();\r\n      this.#bindContents = this.#falseBindContents;\r\n    }\r\n    renderer.updatedBindings.add(this.binding);\r\n  }\r\n}\r\n\r\n/**\r\n * ifバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeIfインスタンスを生成\r\n */\r\nexport const createBindingNodeIf: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeIf(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex2 } from \"../../ListIndex2/types.js\";\r\nimport { IRenderer } from \"../../Updater2/types.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeForクラスは、forバインディング（配列やリストの繰り返し描画）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - リストデータの各要素ごとにBindContent（バインディングコンテキスト）を生成・管理\r\n * - 配列の差分検出により、必要なBindContentの生成・再利用・削除・再描画を最適化\r\n * - DOM上での要素の並び替えや再利用、アンマウント・マウント処理を効率的に行う\r\n * - プール機構によりBindContentの再利用を促進し、パフォーマンスを向上\r\n *\r\n * 設計ポイント:\r\n * - assignValueでリストの差分を検出し、BindContentの生成・削除・再利用を管理\r\n * - updateElementsでリストの並び替えやSWAP処理にも対応\r\n * - BindContentのプール・インデックス管理でGCやDOM操作の最小化を図る\r\n * - バインディング状態やリストインデックス情報をエンジンに保存し、再描画や依存解決を容易にする\r\n *\r\n * ファクトリ関数 createBindingNodeFor でフィルタ・デコレータ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeFor extends BindingNodeBlock {\r\n  #bindContentsSet       : Set<IBindContent> = new Set<IBindContent>();\r\n  #bindContentByListIndex: WeakMap<IListIndex2, IBindContent> = new WeakMap();\r\n  #bindContentPool       : IBindContent[] = [];\r\n  #bindContentLastIndex  : number = 0;\r\n  #lastListIndexSet      : Set<IListIndex2> = new Set<IListIndex2>();\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContentsSet;\r\n  }\r\n\r\n  get isFor(): boolean {\r\n    return true;\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  createBindContent(listIndex: IListIndex2): IBindContent {\r\n    let bindContent: IBindContent;\r\n    if (this.#bindContentLastIndex >= 0) {\r\n      // プールの最後の要素を取得して、プールの長さをあとで縮減する\r\n      // 作るたびにプールを縮減すると、パフォーマンスが悪化するため\r\n      // プールの長さを縮減するのは、全ての要素を作った後に行う\r\n      bindContent = this.#bindContentPool[this.#bindContentLastIndex];\r\n      this.#bindContentLastIndex--;\r\n      bindContent.assignListIndex(listIndex);\r\n    } else {\r\n      bindContent = createBindContent(\r\n        this.binding, \r\n        this.id, \r\n        this.binding.engine, \r\n        this.binding.bindingState.pattern + \".*\", \r\n        listIndex);\r\n    }\r\n    // 登録\r\n    this.#bindContentByListIndex.set(listIndex, bindContent);\r\n    return bindContent;\r\n  }\r\n\r\n  deleteBindContent(bindContent: IBindContent): void {\r\n    bindContent.unmount();\r\n    bindContent.loopContext?.clearListIndex();\r\n  }\r\n\r\n  get bindContentLastIndex():number {\r\n    return this.#bindContentLastIndex;\r\n  }\r\n  set bindContentLastIndex(value:number) {\r\n    this.#bindContentLastIndex = value;\r\n  }\r\n\r\n  get poolLength():number {\r\n    return this.#bindContentPool.length;\r\n  }\r\n  set poolLength(length: number) {\r\n    if (length < 0) {\r\n      raiseError(`BindingNodeFor.setPoolLength: length is negative`);\r\n    }\r\n    this.#bindContentPool.length = length;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    raiseError(\"BindingNodeFor.assignValue: Not implemented. Use update or applyChange.\");\r\n  }\r\n\r\n  applyChange(renderer: IRenderer): void {\r\n    if (renderer.updatedBindings.has(this.binding)) return;\r\n    const newBindContentsSet = new Set<IBindContent>();\r\n    // 削除を先にする\r\n    const removeBindContentsSet = new Set<IBindContent>();\r\n    const info = this.binding.bindingState.info;\r\n    const listIndex = this.binding.bindingState.listIndex;\r\n    const listIndexResults = renderer.getListDiffResults(info, listIndex);\r\n    for(const listIndex of listIndexResults.removes ?? []) {\r\n      const bindContent = this.#bindContentByListIndex.get(listIndex);\r\n      if (bindContent) {\r\n        this.deleteBindContent(bindContent);\r\n        removeBindContentsSet.add(bindContent);\r\n      }\r\n    }\r\n    this.#bindContentPool.push(...removeBindContentsSet);\r\n\r\n    let lastBindContent = null;\r\n    const parentNode = this.node.parentNode ?? raiseError(`BindingNodeFor.update: parentNode is null`);\r\n    const firstNode = this.node;\r\n    this.bindContentLastIndex = this.poolLength - 1;\r\n    for(const listIndex of listIndexResults.newListIndexesSet ?? []) {\r\n      const lastNode = lastBindContent?.getLastNode(parentNode) ?? firstNode;\r\n      let bindContent;\r\n      if (listIndexResults.adds?.has(listIndex)) {\r\n        bindContent = this.createBindContent(listIndex);\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n        bindContent.applyChange(renderer);\r\n      } else {\r\n        bindContent = this.#bindContentByListIndex.get(listIndex);\r\n        if (typeof bindContent === \"undefined\") {\r\n          raiseError(`BindingNodeFor.assignValue2: bindContent is not found`);\r\n        }\r\n        if (lastNode?.nextSibling !== bindContent.firstChildNode) {\r\n          bindContent.mountAfter(parentNode, lastNode);\r\n        }\r\n      }\r\n      newBindContentsSet.add(bindContent);\r\n      lastBindContent = bindContent;\r\n    }\r\n    // リストインデックスの並び替え\r\n    // リストインデックスの並び替え時、インデックスの変更だけなので、要素の再描画はしたくない\r\n    // 並べ替えはするが、要素の内容は変わらないため\r\n    if (listIndexResults.swapTargets && listIndexResults.swapSources) {\r\n      const bindContents = Array.from(this.#bindContentsSet);\r\n      const targets = Array.from(listIndexResults.swapTargets);\r\n      const sources = Array.from(listIndexResults.swapSources);\r\n      for(let i = 0; i < targets.length; i++) {\r\n        const targetListIndex = targets[i];\r\n        const sourceListIndex = sources[i];\r\n        const sourceBindContent = this.#bindContentByListIndex.get(sourceListIndex);\r\n        if (typeof sourceBindContent === \"undefined\") {\r\n          raiseError(`BindingNodeFor.assignValue2: bindContent is not found`);\r\n        }\r\n        bindContents[targetListIndex.index] = sourceBindContent;\r\n        this.#bindContentByListIndex.set(targetListIndex, sourceBindContent);\r\n        const lastNode = bindContents[targetListIndex.index - 1]?.getLastNode(parentNode) ?? firstNode;\r\n        sourceBindContent.mountAfter(parentNode, lastNode);\r\n      }\r\n    }\r\n    // リスト要素の上書き\r\n    if (listIndexResults.replaces) {\r\n      for (const listIndex of listIndexResults.replaces) {\r\n        const bindContent = this.#bindContentByListIndex.get(listIndex);\r\n        if (typeof bindContent === \"undefined\") {\r\n          raiseError(`BindingNodeFor.assignValue2: bindContent is not found`);\r\n        }\r\n        bindContent.applyChange(renderer);\r\n      }\r\n    }\r\n    // プールの長さを更新する\r\n    // プールの長さは、プールの最後の要素のインデックス+1であるため、\r\n    this.poolLength = this.bindContentLastIndex + 1;\r\n    this.#bindContentsSet = newBindContentsSet;\r\n  }\r\n}\r\n\r\nexport const createBindingNodeFor: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeFor(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DEFAULT_PROPERTY = \"textContent\";\r\n\r\ntype DefaultPropertyByElementType = {\r\n  [key:string]: string;\r\n}\r\n\r\nconst defaultPropertyByElementType:DefaultPropertyByElementType = {\r\n  \"radio\"   : \"checked\",\r\n  \"checkbox\": \"checked\",\r\n  \"button\"  : \"onclick\",\r\n}\r\n\r\n/**\r\n * HTML要素のデフォルトプロパティを取得\r\n */\r\nconst getDefaultPropertyHTMLElement = (node:Node):string => \r\n  node instanceof HTMLSelectElement || node instanceof HTMLTextAreaElement || node instanceof HTMLOptionElement ? \"value\" : \r\n  node instanceof HTMLButtonElement ? \"onclick\" : \r\n  node instanceof HTMLAnchorElement ? \"onclick\" : \r\n  node instanceof HTMLFormElement ? \"onsubmit\" : \r\n  node instanceof HTMLInputElement ? (defaultPropertyByElementType[node.type] ?? \"value\") :\r\n  DEFAULT_PROPERTY;\r\n\r\ntype DefaultPropertyByKey = {\r\n  [key:string]: string | undefined;\r\n}\r\n\r\nconst _cache: DefaultPropertyByKey = {};\r\n\r\nconst textContentProperty = (node:Node):string => DEFAULT_PROPERTY;\r\n\r\ntype GetDefaultPropertyByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>string) | undefined;\r\n}\r\n\r\nconst getDefaultPropertyByNodeType: GetDefaultPropertyByNodeType = {\r\n  HTMLElement: getDefaultPropertyHTMLElement,\r\n  SVGElement : undefined,\r\n  Text       : textContentProperty,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * バインド情報でノードプロパティが省略された場合に、ノード種別・要素タイプごとに\r\n * 適切なデフォルトプロパティ名（例: textContent, value, checked, onclick など）を返すユーティリティ関数。\r\n *\r\n * - HTMLInputElementやHTMLSelectElementなど、要素ごとに最適なプロパティを判定\r\n * - input要素はtype属性（radio, checkboxなど）も考慮\r\n * - 一度判定した組み合わせはキャッシュし、パフォーマンス向上\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"HTMLElement\" | \"SVGElement\" | \"Text\" | \"Template\"）\r\n * @returns        デフォルトのプロパティ名（例: \"value\", \"checked\", \"textContent\" など）\r\n */\r\nexport function getDefaultName(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): string | undefined {\r\n  const key = node.constructor.name + \"\\t\" + ((node as HTMLInputElement).type ?? \"\"); // type attribute\r\n  return _cache[key] ?? (_cache[key] = getDefaultPropertyByNodeType[nodeType]?.(node));\r\n}\r\n  ","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { getDefaultName } from \"../../BindingBuilder/getDefaultName.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { update2 } from \"../../Updater2/Updater2.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nfunction isTwoWayBindable(element: HTMLElement): boolean {\r\n  return element instanceof HTMLInputElement || \r\n    element instanceof HTMLTextAreaElement || \r\n    element instanceof HTMLSelectElement;\r\n}\r\n\r\nconst defaultEventByName: {[key:string]: string} = {\r\n  \"value\"   : \"input\",\r\n  \"checked\" : \"change\",\r\n  \"selected\": \"change\",\r\n};\r\n\r\n/**\r\n * BindingNodePropertyクラスは、ノードのプロパティ（value, checked, selected など）への\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - ノードプロパティへの値の割り当て・取得\r\n * - 双方向バインディング（input, changeイベント等）に対応\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - デフォルトプロパティ名と一致し、かつ双方向バインディング可能な要素の場合のみイベントリスナーを登録\r\n * - デコレータでイベント名を指定可能（onInput, onChangeなど）\r\n * - イベント発火時はUpdater経由でstateを非同期的に更新\r\n * - assignValueでnull/undefined/NaNは空文字列に変換してセット\r\n */\r\nclass BindingNodeProperty extends BindingNode {\r\n  get value(): any {\r\n    // @ts-ignore\r\n    return this.node[this.name];\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.filters.length; i++) {\r\n      value = this.filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n\r\n    const isElement = this.node instanceof HTMLElement;\r\n    if (!isElement) return;\r\n    if (!isTwoWayBindable(this.node)) return;\r\n    const defaultName = getDefaultName(this.node, \"HTMLElement\");\r\n    if (defaultName !== this.name) return;\r\n    if (decorates.length > 1) raiseError(`BindingNodeProperty: ${this.name} has multiple decorators`);\r\n    const event = (decorates[0]?.startsWith(\"on\") ? decorates[0]?.slice(2) : decorates[0]) ?? null;\r\n    const eventName = event ?? defaultEventByName[this.name] ?? \"readonly\";\r\n    if (eventName === \"readonly\" || eventName === \"ro\") return;\r\n\r\n    // 双方向バインディング: イベント発火時にstateを更新\r\n    const engine = this.binding.engine;\r\n    this.node.addEventListener(eventName, async () => {\r\n      const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n      const value = this.filteredValue;\r\n      await update2(engine, loopContext, async (updater, state) => {\r\n        binding.updateStateValue(state, value);\r\n      });\r\n    });\r\n  }\r\n\r\n  init() {\r\n    // サブクラスで初期化処理を実装可能\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    // @ts-ignore\r\n    this.node[this.name] = value;\r\n  }\r\n}\r\n\r\n/**\r\n * プロパティバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodePropertyインスタンスを生成\r\n */\r\nexport const createBindingNodeProperty: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeProperty(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeRadioクラスは、ラジオボタン（input[type=\"radio\"]）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値とinput要素のvalueが一致していればchecked=trueにする\r\n * - null/undefined/NaNの場合は空文字列に変換して比較\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで値を文字列化し、input要素のvalueと比較してcheckedを制御\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeRadio extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.toString() === element.value.toString();\r\n  }\r\n}\r\n\r\n/**\r\n * ラジオボタン用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeRadioインスタンスを生成\r\n */\r\nexport const createBindingNodeRadio: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeRadio(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeStyleクラスは、style属性（インラインスタイル）のバインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値を指定のCSSプロパティ（subName）としてHTMLElementにセット\r\n * - null/undefined/NaNの場合は空文字列に変換してセット\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからCSSプロパティ名（subName）を抽出（例: \"style.color\" → \"color\"）\r\n * - assignValueで値を文字列化し、style.setPropertyで反映\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeStyle extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLElement;\r\n    element.style.setProperty(this.subName, value.toString());\r\n  }\r\n}\r\n\r\n/**\r\n * style属性バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeStyleインスタンスを生成\r\n */\r\nexport const createBindingNodeStyle: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeStyle(binding, node, name, filterFns, decorates);\r\n  }\r\n","const symbolName = \"component-state-input\";\r\n\r\nexport const AssignStateSymbol: unique symbol = Symbol.for(`${symbolName}.AssignState`);\r\nexport const NotifyRedrawSymbol: unique symbol = Symbol.for(`${symbolName}.NotifyRedraw`);","import { StructiveComponent } from \"./types\";\r\n\r\nconst parentStructiveComponentByStructiveComponent = new WeakMap<StructiveComponent, StructiveComponent>();\r\n\r\nexport function findStructiveParent(el:StructiveComponent): StructiveComponent | null {\r\n  return parentStructiveComponentByStructiveComponent.get(el) ?? null;\r\n}\r\n\r\nexport function registerStructiveComponent(parentComponent: StructiveComponent, component: StructiveComponent): void {\r\n  parentStructiveComponentByStructiveComponent.set(component, parentComponent);\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { NotifyRedrawSymbol } from \"../../ComponentStateInput/symbols.js\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types.js\";\r\nimport { registerStructiveComponent } from \"../../WebComponents/findStructiveParent.js\";\r\nimport { StructiveComponent } from \"../../WebComponents/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeComponentクラスは、StructiveComponent（カスタムコンポーネント）への\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング対象のコンポーネントのstateプロパティ（subName）に値を反映\r\n * - バインディング情報をコンポーネント単位で管理（bindingsByComponentに登録）\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからstateプロパティ名（subName）を抽出（例: \"state.foo\" → \"foo\"）\r\n * - assignValueでコンポーネントのstateに値をセット（RenderSymbol経由で反映）\r\n * - 初期化時にbindingsByComponentへバインディング情報を登録\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeComponent extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  init(): void {\r\n    const engine = this.binding.engine;\r\n    registerStructiveComponent(engine.owner, this.node as StructiveComponent);\r\n    let bindings = engine.bindingsByComponent.get(this.node as StructiveComponent);\r\n    if (typeof bindings === \"undefined\") {\r\n      engine.bindingsByComponent.set(this.node as StructiveComponent, bindings = new Set<IBinding>());\r\n    }\r\n    bindings.add(this.binding);\r\n  }\r\n\r\n  assignValue(value: any): void {\r\n  }\r\n\r\n  notifyRedraw(refs: IStatePropertyRef[]): void {\r\n    const notifyRefs = [];\r\n    const info = this.binding.bindingState.info;\r\n    const listIndex = this.binding.bindingState.listIndex?.at(info.wildcardCount - 1) ?? null;\r\n    const at = (listIndex?.length ?? 0) - 1;\r\n    for(const ref of refs) {\r\n      if (info.pathSegments.length > ref.info.pathSegments.length) {\r\n        // 親パスが更新された\r\n        // ex values, values.* valuesが更新された場合\r\n        if (info.cumulativePathSet.has(ref.info.pattern)) {\r\n          const thisAt = (ref.listIndex?.length ?? 0) - 1;\r\n          if (thisAt >= 0) {\r\n            if (listIndex === null) continue;\r\n            if (ref.listIndex !== listIndex?.at(thisAt)) continue;\r\n          }\r\n          notifyRefs.push({ info, listIndex });\r\n        }\r\n      } else {\r\n        // 子パスが更新された\r\n        // ex values.*.foo values.* values.*.fooが更新された\r\n        if (!ref.info.cumulativePathSet.has(info.pattern)) {\r\n          // リストインデックスが一致しない場合はスキップ\r\n          if (at >= 0) {\r\n            if (ref.listIndex?.at(at) !== listIndex) continue;\r\n          }\r\n          notifyRefs.push(ref);\r\n        }\r\n\r\n      }\r\n    }\r\n    if (notifyRefs.length === 0) {\r\n      return;\r\n    }\r\n    const component = this.node as StructiveComponent;\r\n    component.state[NotifyRedrawSymbol](notifyRefs);\r\n  }\r\n}\r\n\r\n/**\r\n * コンポーネント用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeComponentインスタンスを生成\r\n */\r\nexport const createBindingNodeComponent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeComponent(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createBindingNodeAttribute } from \"../DataBinding/BindingNode/BindingNodeAttribute.js\";\r\nimport { createBindingNodeCheckbox } from \"../DataBinding/BindingNode/BindingNodeCheckbox.js\";\r\nimport { createBindingNodeClassList } from \"../DataBinding/BindingNode/BindingNodeClassList.js\";\r\nimport { createBindingNodeClassName } from \"../DataBinding/BindingNode/BindingNodeClassName.js\";\r\nimport { createBindingNodeEvent } from \"../DataBinding/BindingNode/BindingNodeEvent.js\";\r\nimport { createBindingNodeIf } from \"../DataBinding/BindingNode/BindingNodeIf.js\";\r\nimport { createBindingNodeFor } from \"../DataBinding/BindingNode/BindingNodeFor.js\";\r\nimport { createBindingNodeProperty } from \"../DataBinding/BindingNode/BindingNodeProperty.js\";\r\nimport { createBindingNodeRadio } from \"../DataBinding/BindingNode/BindingNodeRadio.js\";\r\nimport { createBindingNodeStyle } from \"../DataBinding/BindingNode/BindingNodeStyle.js\";\r\nimport { CreateBindingNodeByNodeFn, CreateBindingNodeFn } from \"../DataBinding/BindingNode/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\nimport { createBindingNodeComponent } from \"../DataBinding/BindingNode/BindingNodeComponent.js\";\r\n\r\ntype NodePropertyConstructorByName = {[key:string]:CreateBindingNodeFn};\r\ntype NodePropertyConstructorByNameByIsComment = {[key:number]:NodePropertyConstructorByName};\r\n\r\nconst nodePropertyConstructorByNameByIsComment:NodePropertyConstructorByNameByIsComment = {\r\n  0: {\r\n    \"class\"   : createBindingNodeClassList,\r\n    \"checkbox\": createBindingNodeCheckbox,\r\n    \"radio\"   : createBindingNodeRadio,\r\n  },\r\n  1: {\r\n    \"if\" : createBindingNodeIf,\r\n  },\r\n};\r\n\r\ntype NodePropertyConstructorByFirstName = {[key:string]:CreateBindingNodeFn};\r\n\r\nconst nodePropertyConstructorByFirstName:NodePropertyConstructorByFirstName = {\r\n  \"class\": createBindingNodeClassName,\r\n  \"attr\" : createBindingNodeAttribute,\r\n  \"style\": createBindingNodeStyle,\r\n  \"state\": createBindingNodeComponent,\r\n//  \"popover\": PopoverTarget,\r\n//  \"commandfor\": CommandForTarget,\r\n};\r\n\r\n/**\r\n * バインディング対象ノードのプロパティ名やノード種別（Element/Comment）に応じて、\r\n * 適切なバインディングノード生成関数（CreateBindingNodeFn）を返すユーティリティ。\r\n *\r\n * - ノード種別やプロパティ名ごとに専用の生成関数をマッピング\r\n * - コメントノードや特殊プロパティ（for/if等）にも対応\r\n * - プロパティ名の先頭や\"on\"でイベントバインディングも判別\r\n * - 一度判定した組み合わせはキャッシュし、パフォーマンス向上\r\n *\r\n * これにより、テンプレートのdata-bindやコメントバインディングの各種ケースに柔軟に対応できる。\r\n */\r\nfunction _getBindingNodeCreator(isComment:boolean, isElement: boolean, propertyName: string): CreateBindingNodeFn {\r\n  // コメント/エレメント種別とプロパティ名で専用の生成関数を優先的に取得\r\n  const bindingNodeCreatorByName = nodePropertyConstructorByNameByIsComment[isComment ? 1 : 0][propertyName];\r\n  if (typeof bindingNodeCreatorByName !== \"undefined\") {\r\n    return bindingNodeCreatorByName;\r\n  }\r\n  // コメントノードでforの場合は専用関数\r\n  if (isComment && propertyName === \"for\") {\r\n    return createBindingNodeFor;\r\n  }\r\n  // コメントノードで未対応プロパティはエラー\r\n  if (isComment) {\r\n    raiseError(`getBindingNodeCreator: unknown node property ${propertyName}`);\r\n  }\r\n  // プロパティ名の先頭で判別（class.attr.style.state等）\r\n  const nameElements = propertyName.split(\".\");\r\n  const bindingNodeCreatorByFirstName = nodePropertyConstructorByFirstName[nameElements[0]];\r\n  if (typeof bindingNodeCreatorByFirstName !== \"undefined\") {\r\n    return bindingNodeCreatorByFirstName;\r\n  }\r\n  // エレメントノードでonから始まる場合はイベントバインディング\r\n  if (isElement) {\r\n    if (propertyName.startsWith(\"on\")) {\r\n      return createBindingNodeEvent;\r\n    } else {\r\n      return createBindingNodeProperty;\r\n    }\r\n  } else {\r\n    // それ以外は汎用プロパティバインディング\r\n    return createBindingNodeProperty;\r\n  }\r\n}\r\n\r\nconst _cache: {[key:string]:CreateBindingNodeFn} = {};\r\n\r\n/**\r\n * ノード・プロパティ名・フィルタ・デコレータ情報から\r\n * 適切なバインディングノード生成関数を取得し、呼び出すファクトリ関数。\r\n * \r\n * @param node         バインディング対象ノード\r\n * @param propertyName バインディングプロパティ名\r\n * @param filterTexts  フィルタ情報\r\n * @param decorates    デコレータ情報\r\n * @returns            バインディングノード生成関数の実行結果\r\n */\r\nexport function getBindingNodeCreator(\r\n  node        : Node, \r\n  propertyName: string,\r\n  filterTexts : IFilterText[],\r\n  decorates   : string[]\r\n): CreateBindingNodeByNodeFn {\r\n  const isComment = node instanceof Comment;\r\n  const isElement = node instanceof Element;\r\n  const key = isComment + \"\\t\" + isElement + \"\\t\" + propertyName;\r\n  // キャッシュを利用して生成関数を取得\r\n  const fn = _cache[key] ?? (_cache[key] = _getBindingNodeCreator(isComment, isElement, propertyName));\r\n  return fn(propertyName, filterTexts, decorates);\r\n}\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex2 } from \"../../ListIndex2/types.js\";\r\nimport { GetByRefSymbol, SetByRefSymbol } from \"../../StateClass/symbols.js\";\r\nimport { IReadonlyStateProxy, IWritableStateProxy } from \"../../StateClass/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\n/**\r\n * BindingStateクラスは、バインディング対象の状態（State）プロパティへのアクセス・更新・フィルタ適用を担当する実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング対象の状態プロパティ（pattern, info）やリストインデックス（listIndex）を管理\r\n * - get valueで現在の値を取得し、get filteredValueでフィルタ適用後の値を取得\r\n * - initでリストバインディング時のループコンテキストやインデックス参照を初期化\r\n * - assignValueで状態プロキシに値を書き込む（双方向バインディング対応）\r\n * - バインディング情報をエンジンに登録し、依存解決や再描画を効率化\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードパス（配列バインディング等）にも対応し、ループごとのインデックス管理が可能\r\n * - フィルタ適用は配列で柔軟に対応\r\n * - createBindingStateファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingState implements IBindingState {\r\n  #binding     : IBinding;\r\n  #pattern     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex2> | null = null;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return this.#pattern;\r\n  }\r\n  get info() {\r\n    return this.#info;\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#pattern = pattern;\r\n    this.#info = getStructuredPathInfo(pattern);\r\n    this.#filters = filters;\r\n  }\r\n  getValue(state:IReadonlyStateProxy | IWritableStateProxy): any {\r\n    return state[GetByRefSymbol](this.info, this.listIndex);\r\n  }\r\n  getFilteredValue(state:IReadonlyStateProxy | IWritableStateProxy): any {\r\n    let value = this.getValue(state);\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    if (this.info.wildcardCount > 0) {\r\n      const lastWildcardPath = this.info.lastWildcardPath ?? \r\n        raiseError(`BindingState.init: wildcardLastParentPath is null`);\r\n      const loopContext = this.binding.parentBindContent.currentLoopContext?.find(lastWildcardPath) ?? \r\n        raiseError(`BindingState.init: loopContext is null`);\r\n      this.#listIndexRef = loopContext.listIndexRef;\r\n    }\r\n    this.binding.engine.saveBinding(this.info, this.listIndex, this.binding);\r\n  }\r\n  assignValue(writeState: IWritableStateProxy, value: any) {\r\n    writeState[SetByRefSymbol](this.info, this.listIndex, value);\r\n  }\r\n}\r\n\r\nexport const createBindingState: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n    return new BindingState(binding, name, filterFns);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex2 } from \"../../ListIndex2/types.js\";\r\nimport { IReadonlyStateProxy, IWritableStateProxy } from \"../../StateClass/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\n/**\r\n * BindingStateIndexクラスは、forバインディング等のループ内で利用される\r\n * インデックス値（$1, $2, ...）のバインディング状態を管理する実装です。\r\n *\r\n * 主な役割:\r\n * - ループコンテキストからインデックス値を取得し、value/filteredValueで参照可能にする\r\n * - バインディング時にbindingsByListIndexへ自身を登録し、依存解決や再描画を効率化\r\n * - フィルタ適用にも対応\r\n *\r\n * 設計ポイント:\r\n * - pattern（例: \"$1\"）からインデックス番号を抽出し、ループコンテキストから該当インデックスを取得\r\n * - initでループコンテキストやlistIndexRefを初期化し、バインディング情報をエンジンに登録\r\n * - assignValueは未実装（インデックスは書き換え不可のため）\r\n * - createBindingStateIndexファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingStateIndex implements IBindingState {\r\n  #binding     : IBinding;\r\n  #indexNumber : number;\r\n  #listIndexRef: WeakRef<IListIndex2> | null = null;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get info() {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    const indexNumber = Number(pattern.slice(1));\r\n    if (isNaN(indexNumber)) {\r\n      raiseError(\"BindingStateIndex: pattern is not a number\");\r\n    }\r\n    this.#indexNumber = indexNumber;\r\n    this.#filters = filters;\r\n  }\r\n  getValue(state: IReadonlyStateProxy | IWritableStateProxy) {\r\n    return this.listIndex?.index ?? raiseError(\"listIndex is null\");\r\n  }\r\n  getFilteredValue(state: IReadonlyStateProxy | IWritableStateProxy) {\r\n    let value = this.getValue(state);\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext ??\r\n      raiseError(`BindingState.init: loopContext is null`);\r\n    const loopContexts = loopContext.serialize();\r\n    this.#listIndexRef = loopContexts[this.#indexNumber - 1].listIndexRef ??\r\n      raiseError(`BindingState.init: listIndexRef is null`);\r\n    const listIndex = this.listIndex ?? raiseError(\"listIndex is null\");\r\n    const bindings = this.binding.engine.bindingsByListIndex.get(listIndex);\r\n    if (bindings === undefined) {\r\n      this.binding.engine.bindingsByListIndex.set(listIndex, new Set([this.binding]));\r\n    } else {\r\n      bindings.add(this.binding);\r\n    }\r\n  }\r\n  assignValue(writeState:IWritableStateProxy, value:any): void {\r\n    raiseError(\"BindingStateIndex: assignValue is not implemented\");\r\n  }\r\n}\r\n\r\nexport const createBindingStateIndex: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n\r\n    return new BindingStateIndex(binding, name, filterFns);\r\n  }\r\n","import { createBindingState } from \"../DataBinding/BindingState/BindingState.js\";\r\nimport { createBindingStateIndex } from \"../DataBinding/BindingState/BindingStateIndex.js\";\r\nimport { CreateBindingStateByStateFn } from \"../DataBinding/BindingState/types\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nconst ereg = new RegExp(/^\\$\\d+$/);\r\n\r\n/**\r\n * バインディング対象の状態プロパティ名とフィルタ情報から、\r\n * 適切なバインディング状態生成関数（CreateBindingStateByStateFn）を返すユーティリティ。\r\n *\r\n * - プロパティ名が \"$数字\"（例: \"$1\"）の場合は createBindingStateIndex を使用（インデックスバインディング用）\r\n * - それ以外は通常の createBindingState を使用\r\n *\r\n * @param name        バインディング対象の状態プロパティ名\r\n * @param filterTexts フィルタ情報\r\n * @returns           バインディング状態生成関数\r\n */\r\nexport function getBindingStateCreator(\r\n  name       : string, \r\n  filterTexts: IFilterText[]\r\n): CreateBindingStateByStateFn {\r\n  if (ereg.test(name)) {\r\n    // \"$数字\"形式の場合はインデックスバインディング用の生成関数を返す\r\n    return createBindingStateIndex(name, filterTexts);\r\n  } else {\r\n    // 通常のプロパティ名の場合は標準の生成関数を返す\r\n    return createBindingState(name, filterTexts);\r\n  }\r\n}","import { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst createNodeKey = (node:Node):string => node.constructor.name + \"\\t\" + ((node instanceof Comment) ? (node.textContent?.[2] ?? \"\") : \"\");\r\n\r\ntype NodeTypeByNodeKey = {\r\n  [nodeKey:string]:NodeType;\r\n};\r\n\r\nconst nodeTypeByNodeKey:NodeTypeByNodeKey = {};\r\n\r\nconst getNodeTypeByNode = (node:Node):NodeType =>\r\n  (node instanceof Comment && node.textContent?.[2] === \":\") ? \"Text\" : \r\n  (node instanceof HTMLElement) ? \"HTMLElement\" :\r\n  (node instanceof Comment && node.textContent?.[2] === \"|\") ? \"Template\" : \r\n  (node instanceof SVGElement) ? \"SVGElement\" : raiseError(`Unknown NodeType: ${node.nodeType}`);\r\n\r\n/**\r\n * ノードのタイプ（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）を判定・キャッシュするユーティリティ関数。\r\n *\r\n * - コメントノードの場合、3文字目が \":\" なら \"Text\"、\"|\" なら \"Template\" と判定\r\n * - HTMLElement, SVGElement もそれぞれ判定\r\n * - 未知のノード型はエラー\r\n * - ノードごとに一意なキー（constructor名＋コメント種別）でキャッシュし、再判定を省略\r\n *\r\n * @param node    判定対象のノード\r\n * @param nodeKey キャッシュ用のノードキー（省略時は自動生成）\r\n * @returns       ノードタイプ（NodeType）\r\n */\r\nexport function getNodeType(\r\n  node   : Node, \r\n  nodeKey: string = createNodeKey(node)\r\n): NodeType {\r\n  return nodeTypeByNodeKey[nodeKey] ?? (nodeTypeByNodeKey[nodeKey] = getNodeTypeByNode(node));\r\n}\r\n","import { IFilterText, IBindText } from \"./types\";\r\n\r\nconst trim = (s:string):string => s.trim();\r\n\r\nconst has = (s:string):boolean => s.length > 0; // check length\r\n\r\nconst re = new RegExp(/^#(.*)#$/);\r\nconst decode = (s:string):string => {\r\n  const m = re.exec(s);\r\n  return m ? decodeURIComponent(m[1]) : s;\r\n};\r\n\r\n/**\r\n * parse filter part\r\n * \"eq,100|falsey\" ---> [Filter(eq, [100]), Filter(falsey)]\r\n */\r\nconst parseFilter = (text:string): IFilterText => {\r\n  const [name, ...options] = text.split(\",\").map(trim);\r\n  return {name, options:options.map(decode)};\r\n};\r\n\r\ntype ReturnParseStateProperty = {property:string,filters:IFilterText[]};\r\n/**\r\n * parse expression\r\n * \"value|eq,100|falsey\" ---> [\"value\", Filter[]]\r\n */\r\nconst parseProperty = (text:string): ReturnParseStateProperty => {\r\n  const [property, ...filterTexts] = text.split(\"|\").map(trim);\r\n  return {property, filters:filterTexts.map(parseFilter)};\r\n};\r\n\r\n/**\r\n * parse expressions\r\n * \"textContent:value|eq,100|falsey\" ---> [\"textContent\", \"value\", Filter[eq, falsey]]\r\n */\r\nconst parseExpression = (expression:string): IBindText => {\r\n  const [ bindExpression, decoratesExpression = null ] = expression.split(\"@\").map(trim);\r\n  const decorates = decoratesExpression ? decoratesExpression.split(\",\").map(trim) : [];\r\n  const [nodePropertyText, statePropertyText] = bindExpression.split(\":\").map(trim);\r\n  const { property:nodeProperty, filters:inputFilterTexts } = parseProperty(nodePropertyText);\r\n  const { property:stateProperty, filters:outputFilterTexts } = parseProperty(statePropertyText);\r\n  return { nodeProperty, stateProperty, inputFilterTexts, outputFilterTexts, decorates };\r\n};\r\n\r\n/**\r\n * parse bind text and return BindText[]\r\n */\r\nconst parseExpressions = (text:string): IBindText[] => {\r\n  return text.split(\";\").map(trim).filter(has).map(s => parseExpression(s));\r\n};\r\n\r\nconst cache:{[key:string]: IBindText[]} = {};\r\n\r\n/**\r\n * バインドテキスト（data-bind属性やコメント等から取得した文字列）を解析し、\r\n * バインディング情報（IBindText[]）に変換するユーティリティ関数群。\r\n *\r\n * - フィルターやデコレータ、プロパティ名などをパースし、構造化データとして返す\r\n * - \"textContent:value|eq,100|falsey@decorate1,decorate2\" のような複雑な記法にも対応\r\n * - セミコロン区切りで複数バインドもサポート\r\n * - パース結果はキャッシュし、同じ入力の再解析を防止\r\n *\r\n * @param text バインドテキスト\r\n * @returns    解析済みバインディング情報（IBindText[]）\r\n */\r\nexport function parseBindText(\r\n  text: string\r\n): IBindText[] {\r\n  if (text.trim() === \"\") {\r\n    return [];\r\n  }\r\n  return cache[text] ?? (cache[text] = parseExpressions(text));\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DATASET_BIND_PROPERTY = 'data-bind';\r\n\r\nconst removeAttributeFromElement = (node:Node):void => {\r\n  const element = node as Element;\r\n  element.removeAttribute(DATASET_BIND_PROPERTY);\r\n}\r\n\r\ntype RemoveAttributeByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>void) | undefined;\r\n}\r\n\r\nconst removeAttributeByNodeType:RemoveAttributeByNodeType = {\r\n  HTMLElement: removeAttributeFromElement,\r\n  SVGElement : removeAttributeFromElement,\r\n  Text       : undefined,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * 指定ノードから data-bind 属性を削除するユーティリティ関数。\r\n *\r\n * - ノードタイプ（HTMLElement, SVGElement）の場合のみ data-bind 属性を削除\r\n * - Text, Template ノードは対象外\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"HTMLElement\" | \"SVGElement\" | \"Text\" | \"Template\"）\r\n * @returns        なし\r\n */\r\nexport function removeDataBindAttribute(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n):void {\r\n  return removeAttributeByNodeType[nodeType]?.(node);\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst replaceTextNodeText = (node:Node):Node => {\r\n  const textNode = document.createTextNode(\"\");\r\n  node.parentNode?.replaceChild(textNode, node);\r\n  return textNode;\r\n}\r\n\r\ntype ReplaceTextNodeFn = {\r\n  [key in NodeType]: ((node:Node)=>Node) | undefined;\r\n}\r\n\r\nconst replaceTextNodeFn:ReplaceTextNodeFn = {\r\n  Text       : replaceTextNodeText,\r\n  HTMLElement: undefined,\r\n  Template   : undefined,\r\n  SVGElement : undefined\r\n}\r\n\r\n/**\r\n * コメントノードをテキストノードに置き換えるユーティリティ関数。\r\n *\r\n * - ノードタイプが \"Text\" の場合のみ、コメントノードを空のテキストノードに置換する\r\n * - それ以外のノードタイプ（HTMLElement, Template, SVGElement）は何もしない\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）\r\n * @returns        置換後のノード（または元のノード）\r\n */\r\nexport function replaceTextNodeFromComment(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): Node {\r\n  return replaceTextNodeFn[nodeType]?.(node) ?? node;\r\n}\r\n","import { getAbsoluteNodePath } from \"./getAbsoluteNodePath.js\";\r\nimport { getBindingNodeCreator } from \"./getBindingNodeCreator.js\";\r\nimport { getBindingStateCreator } from \"./getBindingStateCreator.js\";\r\nimport { getDataBindText } from \"./getDataBindText.js\";\r\nimport { getNodeType } from \"./getNodeType.js\";\r\nimport { parseBindText } from \"./parseBindText.js\";\r\nimport { removeDataBindAttribute } from \"./removeDataBindAttribute.js\";\r\nimport { replaceTextNodeFromComment } from \"./replaceTextNodeFromComment.js\";\r\nimport { IBindingCreator, IBindText, IDataBindAttributes, NodePath, NodeType } from \"./types\";\r\n\r\n/**\r\n * DataBindAttributesクラスは、DOMノードからバインディング情報を抽出・解析し、\r\n * バインディング生成に必要な情報（ノード種別・パス・バインドテキスト・クリエイター）を管理します。\r\n *\r\n * - ノード種別やパスを特定\r\n * - data-bind属性やコメントノードからバインドテキストを取得・解析\r\n * - バインドテキストごとにバインディング生成関数（ノード用・状態用）を用意\r\n * - data-bind属性やコメントノードはパース後に削除・置換\r\n *\r\n * これにより、テンプレート内のバインディング定義を一元的に管理し、後続のバインディング構築処理を効率化します。\r\n */\r\nclass DataBindAttributes implements IDataBindAttributes {\r\n  nodeType     : NodeType; // ノードの種別\r\n  nodePath     : NodePath; // ノードのルート\r\n  bindTexts    : IBindText[]; // BINDテキストの解析結果\r\n  creatorByText: Map<IBindText, IBindingCreator> = new Map(); // BINDテキストからバインディングクリエイターを取得\r\n  constructor(node: Node) {\r\n    this.nodeType = getNodeType(node);\r\n    const text = getDataBindText(this.nodeType, node);\r\n\r\n    // コメントノードの場合はTextノードに置換（template.contentが書き換わる点に注意）\r\n    node = replaceTextNodeFromComment(node, this.nodeType);\r\n\r\n    // data-bind属性を削除（パース後は不要なため）\r\n    removeDataBindAttribute(node, this.nodeType);\r\n\r\n    this.nodePath = getAbsoluteNodePath(node);\r\n    this.bindTexts = parseBindText(text);\r\n\r\n    // 各バインドテキストごとにバインディング生成関数を用意\r\n    for(let i = 0; i < this.bindTexts.length; i++) {\r\n      const bindText = this.bindTexts[i];\r\n      const creator: IBindingCreator = {\r\n        createBindingNode : getBindingNodeCreator(\r\n          node, \r\n          bindText.nodeProperty, \r\n          bindText.inputFilterTexts,\r\n          bindText.decorates\r\n        ),\r\n        createBindingState: getBindingStateCreator(\r\n          bindText.stateProperty, \r\n          bindText.outputFilterTexts\r\n        ),\r\n      }\r\n      this.creatorByText.set(bindText, creator);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * 指定ノードからDataBindAttributesインスタンスを生成するファクトリ関数。\r\n */\r\nexport function createDataBindAttributes(node: Node): IDataBindAttributes {\r\n  return new DataBindAttributes(node);\r\n}","import { COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst COMMENT_EMBED_MARK_LEN = COMMENT_EMBED_MARK.length;\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\n/**\r\n * ノード種別ごとにdata-bindテキスト（バインディング定義文字列）を取得するユーティリティ関数。\r\n *\r\n * - Textノード: コメントマーク以降のテキストを取得し、\"textContent:\"を付与\r\n * - HTMLElement: data-bind属性値を取得\r\n * - Templateノード: コメントマーク以降のIDからテンプレートを取得し、そのdata-bind属性値を取得\r\n * - SVGElement: data-bind属性値を取得\r\n *\r\n * @param nodeType ノード種別（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）\r\n * @param node     対象ノード\r\n * @returns        バインディング定義文字列\r\n */\r\nexport function getDataBindText(nodeType: NodeType, node: Node): string {\r\n  switch (nodeType) {\r\n    case \"Text\": {\r\n      const text = node.textContent?.slice(COMMENT_EMBED_MARK_LEN).trim() ?? \"\";\r\n      return \"textContent:\" + text;\r\n    }\r\n    case \"HTMLElement\": {\r\n      return (node as HTMLElement).getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n    }\r\n    case \"Template\": {\r\n      const text = node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN).trim();\r\n      const id = Number(text);\r\n      const template = getTemplateById(id) ?? raiseError(`Template not found: ${text}`);\r\n      return template.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n    }\r\n    case \"SVGElement\": {\r\n      return (node as SVGElement).getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n    }\r\n    default:\r\n      return \"\";\r\n  }\r\n}","import { NodePath } from \"./types\";\r\n\r\n/**\r\n * 指定ノードの「親からのインデックス」をルートまで辿り、絶対パス（NodePath）として返すユーティリティ関数。\r\n *\r\n * 例: ルートから見て [0, 2, 1] のような配列を返す。\r\n *     これは「親→子→孫…」とたどったときの各階層でのインデックスを表す。\r\n *\r\n * @param node 対象のDOMノード\r\n * @returns    ルートからこのノードまでのインデックス配列（NodePath）\r\n */\r\nexport function getAbsoluteNodePath(node: Node): NodePath {\r\n  let routeIndexes: NodePath = [];\r\n  while(node.parentNode !== null) {\r\n    const childNodes = Array.from(node.parentNode.childNodes) as Node[];\r\n    routeIndexes = [ childNodes.indexOf(node), ...routeIndexes ];\r\n    node = node.parentNode;\r\n  }\r\n  return routeIndexes;\r\n}","import { DATA_BIND_ATTRIBUTE, COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK } from \"../constants.js\";\r\n\r\n/**\r\n * \"@@:\"もしくは\"@@|\"で始まるコメントノードを取得する\r\n */\r\nfunction isCommentNode(node: Node): boolean {\r\n  return node instanceof Comment && (\r\n    (node.textContent?.indexOf(COMMENT_EMBED_MARK) === 0) || (node.textContent?.indexOf(COMMENT_TEMPLATE_MARK) === 0)\r\n  );\r\n} \r\n\r\n/**\r\n * 指定ノード以下のツリーから「data-bind属性を持つ要素」または\r\n * 「特定のマーク（@@: または @@|）で始まるコメントノード」をすべて取得するユーティリティ関数。\r\n *\r\n * - Elementノードの場合: data-bind属性があるものだけを抽出\r\n * - Commentノードの場合: COMMENT_EMBED_MARK または COMMENT_TEMPLATE_MARK で始まるものだけを抽出\r\n * - DOMツリー全体をTreeWalkerで効率的に走査\r\n *\r\n * @param root 探索の起点となるノード\r\n * @returns    条件に合致したノードの配列\r\n */\r\nexport function getNodesHavingDataBind(root: Node): Node[] {\r\n  const nodes: Node[] = [];\r\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT, {\r\n    acceptNode(node:Node) {\r\n      return (node instanceof Element) ? \r\n        (node.hasAttribute(DATA_BIND_ATTRIBUTE) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP)\r\n        : (isCommentNode(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP);\r\n    }\r\n  });\r\n  while (walker.nextNode()) {\r\n    nodes.push(walker.currentNode);\r\n  }\r\n  return nodes;\r\n}\r\n\r\n","import { createDataBindAttributes } from \"./createDataBindAttributes.js\";\r\nimport { getNodesHavingDataBind } from \"./getNodesHavingDataBind.js\";\r\nimport { IDataBindAttributes } from \"./types\";\r\n\r\nconst listDataBindAttributesById: {[key:number]:IDataBindAttributes[]} = {};\r\n\r\nconst listPathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nconst pathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nfunction getDataBindAttributesFromTemplate(content: DocumentFragment): IDataBindAttributes[] {\r\n  const nodes = getNodesHavingDataBind(content);\r\n  return nodes.map(node => createDataBindAttributes(node));\r\n}\r\n\r\n/**\r\n * テンプレート（DocumentFragment）内のバインディング情報（data-bind属性やコメント）を解析・登録し、\r\n * 各テンプレートIDごとにバインディング属性情報・状態パス集合を管理するユーティリティ。\r\n *\r\n * - getNodesHavingDataBindで対象ノードを抽出し、createDataBindAttributesで解析\r\n * - 各テンプレートIDごとにバインディング属性リスト・状態パス集合・リストパス集合をキャッシュ\r\n * - forバインディング（ループ）のstatePropertyはlistPathsにも登録\r\n *\r\n * @param id      テンプレートID\r\n * @param content テンプレートのDocumentFragment\r\n * @param rootId  ルートテンプレートID（省略時はidと同じ）\r\n * @returns       解析済みバインディング属性リスト\r\n */\r\nexport function registerDataBindAttributes(\r\n  id     : number, \r\n  content: DocumentFragment,\r\n  rootId : number = id\r\n): IDataBindAttributes[] {\r\n  const dataBindAttributes = getDataBindAttributesFromTemplate(content);\r\n  const paths = pathsSetById[rootId] ?? (pathsSetById[rootId] = new Set<string>());\r\n  const listPaths = listPathsSetById[rootId] ?? (listPathsSetById[rootId] = new Set<string>());\r\n  for(let i = 0; i < dataBindAttributes.length; i++) {\r\n    const attribute = dataBindAttributes[i];\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      paths.add(bindText.stateProperty);\r\n      if (bindText.nodeProperty === \"for\") {\r\n        listPaths.add(bindText.stateProperty);\r\n      }\r\n    }\r\n  }\r\n  return listDataBindAttributesById[id] = dataBindAttributes;\r\n}\r\n\r\n/**\r\n * テンプレートIDからバインディング属性リストを取得\r\n */\r\nexport const getDataBindAttributesById = (id: number): IDataBindAttributes[] => {\r\n  return listDataBindAttributesById[id];\r\n}\r\n\r\n/**\r\n * テンプレートIDからforバインディングのstateProperty集合を取得\r\n */\r\nexport const getListPathsSetById = (id: number): Set<string> => {\r\n  return listPathsSetById[id] ?? [];\r\n};\r\n\r\n/**\r\n * テンプレートIDから全バインディングのstateProperty集合を取得\r\n */\r\nexport const getPathsSetById = (id: number): Set<string> => {\r\n  return pathsSetById[id] ?? [];\r\n};","/**\r\n * registerTemplate.ts\r\n *\r\n * HTMLTemplateElementをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - templateById: IDをキーにHTMLTemplateElementを管理するレコード\r\n * - registerTemplate: 指定IDでテンプレートを登録し、空テキストノード除去やデータバインド属性の登録も実行\r\n * - getTemplateById: 指定IDのテンプレートを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - テンプレート登録時にremoveEmptyTextNodesで空テキストノードを除去し、クリーンなDOMを維持\r\n * - registerDataBindAttributesでデータバインド属性を自動付与\r\n * - グローバルにテンプレートを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { registerDataBindAttributes } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { removeEmptyTextNodes } from \"./removeEmptyTextNodes.js\";\r\n\r\nconst templateById:Record<number, HTMLTemplateElement> = {};\r\n\r\nexport function registerTemplate(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number\r\n): number {\r\n  removeEmptyTextNodes(template.content);\r\n  registerDataBindAttributes(id, template.content, rootId);  \r\n  templateById[id] = template;\r\n  return id;\r\n}\r\n\r\nexport function getTemplateById(id: number): HTMLTemplateElement {\r\n  return templateById[id] ?? raiseError(`getTemplateById: template not found: ${id}`);\r\n}","/**\r\n * removeEmptyTextNodes.ts\r\n *\r\n * DocumentFragment内の空テキストノードを削除するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - content（DocumentFragment）の直下にある空白のみのテキストノードを検出し、削除する\r\n *\r\n * 設計ポイント:\r\n * - childNodesをArray.fromで配列化し、forEachで全ノードを走査\r\n * - nodeTypeがTEXT_NODEかつ、nodeValueが空白のみの場合にremoveChildで削除\r\n * - テンプレート処理やクリーンなDOM生成時に利用\r\n */\r\nexport function removeEmptyTextNodes(content:DocumentFragment):void {\r\n  Array.from(content.childNodes).forEach(node => {\r\n    if (node.nodeType === Node.TEXT_NODE && !(node.nodeValue ?? \"\").trim()) {\r\n      content.removeChild(node);\r\n    }\r\n  });  \r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IReadonlyStateProxy, IWritableStateProxy } from \"../StateClass/types\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { IRenderer } from \"../Updater2/types\";\r\nimport { CreateBindingNodeByNodeFn, IBindingNode } from \"./BindingNode/types\";\r\nimport { CreateBindingStateByStateFn, IBindingState } from \"./BindingState/types\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\n\r\n/**\r\n * Bindingクラスは、1つのバインディング（ノードと状態の対応）を管理する中核的な実装です。\r\n *\r\n * 主な役割:\r\n * - DOMノードと状態（State）を結びつけるバインディングノード（bindingNode）とバインディング状態（bindingState）の生成・管理\r\n * - バインディングの初期化（init）、再描画（render）、状態値の更新（updateStateValue）などの処理を提供\r\n * - バージョン管理により、不要な再描画を防止\r\n *\r\n * 設計ポイント:\r\n * - createBindingNode, createBindingStateファクトリで柔軟なバインディング構造に対応\r\n * - renderでバージョン差分がある場合のみバインディングノードを更新\r\n * - 双方向バインディング時はupdateStateValueで状態プロキシに値を反映\r\n * - createBinding関数で一貫したバインディング生成を提供\r\n */\r\nclass Binding implements IBinding {\r\n  parentBindContent: IBindContent;\r\n  node             : Node;\r\n  engine           : IComponentEngine;\r\n  bindingNode      : IBindingNode;\r\n  bindingState     : IBindingState;\r\n  version          : number | undefined;\r\n  constructor(\r\n    parentBindContent : IBindContent,\r\n    node              : Node,\r\n    engine            : IComponentEngine,\r\n    createBindingNode : CreateBindingNodeByNodeFn, \r\n    createBindingState: CreateBindingStateByStateFn,\r\n  ) {\r\n    this.parentBindContent = parentBindContent\r\n    this.node = node;\r\n    this.engine = engine\r\n    this.bindingNode = createBindingNode(this, node, engine.inputFilters);\r\n    this.bindingState = createBindingState(this, engine.outputFilters);\r\n  }\r\n\r\n  get bindContents() {\r\n    return this.bindingNode.bindContents;\r\n  }\r\n\r\n  init() {\r\n    this.bindingNode.init();\r\n    this.bindingState.init();\r\n  }\r\n\r\n  updateStateValue(writeState:IWritableStateProxy, value: any) {\r\n    return this.bindingState.assignValue(writeState, value);\r\n  }\r\n\r\n  notifyRedraw(refs: IStatePropertyRef[]) {\r\n    this.bindingNode.notifyRedraw(refs);\r\n  }\r\n\r\n  applyChange(renderer: IRenderer): void {\r\n    if (renderer.updatedBindings.has(this)) return;\r\n    this.bindingNode.applyChange(renderer);\r\n  }\r\n}\r\n\r\n/**\r\n * バインディング生成用ファクトリ関数\r\n * - 各種ファクトリ・エンジン・ノード情報からBindingインスタンスを生成\r\n */\r\nexport function createBinding(\r\n  parentBindContent : IBindContent,\r\n  node              : Node, \r\n  engine            : IComponentEngine, \r\n  createBindingNode : CreateBindingNodeByNodeFn, \r\n  createBindingState: CreateBindingStateByStateFn\r\n): IBinding {\r\n  return new Binding(\r\n    parentBindContent, \r\n    node, \r\n    engine, \r\n    createBindingNode, \r\n    createBindingState\r\n  );\r\n}","/**\r\n * createLoopContext.ts\r\n *\r\n * ループバインディング（for等）で利用するLoopContext（ループコンテキスト）管理クラスとファクトリ関数の実装です。\r\n *\r\n * 主な役割:\r\n * - ループごとのプロパティパス・インデックス・BindContentを紐付けて管理\r\n * - 親ループコンテキストの探索やキャッシュ、インデックスの再割り当て・クリアなどを提供\r\n * - ループ階層をたどるwalk/serializeや、名前でのfind検索も可能\r\n *\r\n * 設計ポイント:\r\n * - WeakRefでlistIndexを保持し、GCフレンドリーな設計\r\n * - parentLoopContextで親ループを遅延探索・キャッシュし、効率的な親子関係管理を実現\r\n * - findで名前からループコンテキストを高速検索（キャッシュ付き）\r\n * - walk/serializeでループ階層をたどる処理を簡潔に記述可能\r\n * - createLoopContextファクトリで一貫した生成・管理が可能\r\n */\r\nimport { IBindContent } from \"../DataBinding/types\";\r\nimport { IListIndex2 } from \"../ListIndex2/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { ILoopContext } from \"./types\";\r\n\r\nclass LoopContext implements ILoopContext {\r\n  #path     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex2> | null;\r\n  #bindContent : IBindContent;\r\n  constructor(\r\n    path    : string | null,\r\n    listIndex  : IListIndex2,\r\n    bindContent: IBindContent\r\n  ) {\r\n    this.#path = path ?? raiseError(\"name is required\");\r\n    this.#info = getStructuredPathInfo(this.#path);\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    this.#bindContent = bindContent;\r\n  }\r\n  get path(): string {\r\n    return this.#path;\r\n  }\r\n  get info(): IStructuredPathInfo {\r\n    return this.#info;\r\n  }\r\n  get listIndex(): IListIndex2 {\r\n    return this.#listIndexRef?.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get listIndexRef(): WeakRef<IListIndex2> {\r\n    return this.#listIndexRef ?? raiseError(\"listIndexRef is null\");\r\n  }\r\n  assignListIndex(listIndex: IListIndex2): void {\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    // 構造は変わらないので、#parentLoopContext、#cacheはクリアする必要はない\r\n  }\r\n  clearListIndex():void {\r\n    this.#listIndexRef = null;\r\n  }\r\n  get bindContent(): IBindContent {\r\n    return this.#bindContent;\r\n  }\r\n\r\n  #parentLoopContext: ILoopContext | null | undefined;\r\n  get parentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#parentLoopContext === \"undefined\") {\r\n      let currentBinding: IBindContent | null = this.bindContent;\r\n      while(currentBinding !== null) {\r\n        if (currentBinding.loopContext !== null && currentBinding.loopContext !== this) {\r\n          this.#parentLoopContext = currentBinding.loopContext;\r\n          break;\r\n        }\r\n        currentBinding = currentBinding.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      if (typeof this.#parentLoopContext === \"undefined\") this.#parentLoopContext = null;\r\n    }\r\n    return this.#parentLoopContext;\r\n  }\r\n\r\n  #cache:Record<string, ILoopContext | null> = {};\r\n  find(name: string): ILoopContext | null {\r\n    let loopContext = this.#cache[name];\r\n    if (typeof loopContext === \"undefined\") {\r\n      let currentLoopContext: ILoopContext | null = this;\r\n      while(currentLoopContext !== null) {\r\n        if (currentLoopContext.path === name) break;\r\n        currentLoopContext = currentLoopContext.parentLoopContext;\r\n      }\r\n      loopContext = this.#cache[name] = currentLoopContext;\r\n    }\r\n    return loopContext;\r\n  }\r\n\r\n  walk(callback: (loopContext: ILoopContext) => void): void {\r\n    let currentLoopContext: ILoopContext | null = this;\r\n    while(currentLoopContext !== null) {\r\n      callback(currentLoopContext);\r\n      currentLoopContext = currentLoopContext.parentLoopContext;\r\n    }\r\n  }\r\n\r\n  serialize(): ILoopContext[] {\r\n    const results: ILoopContext[] = [];\r\n    this.walk((loopContext) => {\r\n      results.unshift(loopContext);\r\n    });\r\n    return results;\r\n  }\r\n\r\n}\r\n\r\n// 生成されたあと、IBindContentのloopContextに登録される\r\n// IBindContentにずっと保持される\r\nexport function createLoopContext(\r\n  pattern: string | null,\r\n  listIndex: IListIndex2,\r\n  bindContent: IBindContent\r\n): ILoopContext {\r\n  return new LoopContext(pattern, listIndex, bindContent);\r\n}","import { resolveNodeFromPath } from \"../BindingBuilder/resolveNodeFromPath.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { createBinding } from \"./Binding.js\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\nimport { createLoopContext } from \"../LoopContext/createLoopContext.js\";\r\nimport { getDataBindAttributesById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { hasLazyLoadComponents, loadLazyLoadComponent } from \"../WebComponents/loadFromImportMap.js\";\r\nimport { IListIndex2 } from \"../ListIndex2/types.js\";\r\nimport { IRenderer } from \"../Updater2/types.js\";\r\n\r\nfunction createContent(id: number): DocumentFragment {\r\n  const template = getTemplateById(id) ?? \r\n    raiseError(`BindContent: template is not found: ${id}`);\r\n  const fragment = document.importNode(template.content, true);\r\n  if (hasLazyLoadComponents()) {\r\n    const lazyLoadElements = fragment.querySelectorAll(\":not(:defined)\");\r\n    for(let i = 0; i < lazyLoadElements.length; i++) {\r\n      const tagName = lazyLoadElements[i].tagName.toLowerCase();\r\n      loadLazyLoadComponent(tagName);\r\n    }\r\n  }\r\n  return fragment;\r\n}\r\n\r\nfunction createBindings(\r\n  bindContent: IBindContent, \r\n  id         : number, \r\n  engine     : IComponentEngine, \r\n  content    : DocumentFragment\r\n): IBinding[] {\r\n  const attributes = getDataBindAttributesById(id) ?? \r\n    raiseError(`BindContent: data-bind is not set`);\r\n  const bindings: IBinding[] = [];\r\n  for(let i = 0; i < attributes.length; i++) {\r\n    const attribute = attributes[i];\r\n    const node = resolveNodeFromPath(content, attribute.nodePath) ?? \r\n      raiseError(`BindContent: node is not found: ${attribute.nodePath}`);\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      const creator = attribute.creatorByText.get(bindText) ?? \r\n        raiseError(`BindContent: creator is not found: ${bindText}`);\r\n      const binding = createBinding(\r\n        bindContent, \r\n        node, \r\n        engine, \r\n        creator.createBindingNode, \r\n        creator.createBindingState\r\n      );\r\n      bindings.push(binding);\r\n    }\r\n  }\r\n  return bindings;\r\n}\r\n\r\n/**\r\n * BindContentクラスは、テンプレートから生成されたDOM断片（DocumentFragment）と\r\n * そのバインディング情報（IBinding配列）を管理するための実装です。\r\n *\r\n * 主な役割:\r\n * - テンプレートIDからDOM断片を生成し、バインディング情報を構築\r\n * - mount/mountBefore/mountAfter/unmountでDOMへの挿入・削除を制御\r\n * - renderでバインディングの再描画、initで初期化処理を実行\r\n * - ループバインディング時のLoopContextやリストインデックス管理にも対応\r\n * - getLastNodeで再帰的に最後のノードを取得し、リスト描画や差し替えに利用\r\n * - assignListIndexでループ内のリストインデックスを再割り当てし、再初期化\r\n *\r\n * 設計ポイント:\r\n * - fragmentとchildNodesの両方を管理し、効率的なDOM操作を実現\r\n * - バインディング情報はテンプレートごとに動的に生成され、各ノードに紐付く\r\n * - ループや条件分岐など複雑なバインディング構造にも柔軟に対応\r\n * - createBindContentファクトリ関数で一貫した生成・初期化を提供\r\n */\r\nclass BindContent implements IBindContent {\r\n  loopContext  : ILoopContext | null;\r\n  parentBinding: IBinding | null;\r\n  childNodes   : Node[];\r\n  fragment     : DocumentFragment;\r\n  engine       : IComponentEngine | undefined;\r\n  #id;\r\n  get id() {\r\n    return this.#id;\r\n  }\r\n  get isMounted() {\r\n    return this.childNodes.length > 0 && this.childNodes[0].parentNode !== this.fragment;\r\n  }\r\n  get firstChildNode() {\r\n    return this.childNodes[0] ?? null;\r\n  }\r\n  get lastChildNode() {\r\n    return this.childNodes[this.childNodes.length - 1] ?? null;\r\n  }\r\n  getLastNode(parentNode: Node): Node | null {\r\n    const lastBinding = this.bindings[this.bindings.length - 1];\r\n    const lastChildNode = this.lastChildNode;\r\n    if (typeof lastBinding !== \"undefined\" && lastBinding.node === lastChildNode) {\r\n      if (lastBinding.bindContents.size > 0) {\r\n        const childBindContent = Array.from(lastBinding.bindContents).at(-1) ?? raiseError(`BindContent: childBindContent is not found`);\r\n        const lastNode = childBindContent.getLastNode(parentNode);\r\n        if (lastNode !== null) {\r\n          return lastNode;\r\n        }\r\n      }\r\n    }\r\n    if (parentNode !== lastChildNode?.parentNode) {\r\n      return null;\r\n    }\r\n    return lastChildNode;\r\n  }\r\n  #currentLoopContext: ILoopContext | null | undefined;\r\n  get currentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#currentLoopContext === \"undefined\") {\r\n      let bindContent: IBindContent | null = this;\r\n      while(bindContent !== null) {\r\n        if (bindContent.loopContext !== null) break; ;\r\n        bindContent = bindContent.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      this.#currentLoopContext = bindContent?.loopContext ?? null;\r\n    }\r\n    return this.#currentLoopContext;\r\n  }\r\n  constructor(\r\n    parentBinding: IBinding | null,\r\n    id           : number, \r\n    engine       : IComponentEngine, \r\n    loopContext  : string | null,\r\n    listIndex    : IListIndex2 | null\r\n  ) {\r\n    this.parentBinding = parentBinding;\r\n    this.#id = id;\r\n    this.fragment = createContent(id);\r\n    this.childNodes = Array.from(this.fragment.childNodes);\r\n    this.engine = engine;\r\n    this.loopContext = (listIndex !== null) ? createLoopContext(loopContext, listIndex, this) : null;\r\n    this.bindings = createBindings(\r\n      this, \r\n      id, \r\n      engine, \r\n      this.fragment\r\n    );\r\n  }\r\n  mount(parentNode: Node) {\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      parentNode.appendChild(this.childNodes[i]);\r\n    }\r\n  }\r\n  mountBefore(parentNode: Node, beforeNode: Node | null) {\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n    }\r\n  }\r\n  mountAfter(parentNode: Node, afterNode: Node | null) {\r\n    const beforeNode = afterNode?.nextSibling ?? null;\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n    }\r\n  }\r\n  unmount() {\r\n    const parentElement = this.childNodes[0]?.parentElement ?? null;\r\n    if (parentElement === null) {\r\n      return; // すでにDOMから削除されている場合は何もしない\r\n    }\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      parentElement.removeChild(this.childNodes[i]);\r\n    }\r\n  }\r\n  bindings: IBinding[] = [];\r\n  init() {\r\n    this.bindings.forEach(binding => binding.init());\r\n  }\r\n  assignListIndex(listIndex: IListIndex2): void {\r\n    if (this.loopContext == null) raiseError(`BindContent: loopContext is null`);\r\n    this.loopContext.assignListIndex(listIndex);\r\n    this.init();\r\n  }\r\n  applyChange(renderer: IRenderer): void {\r\n    for(const binding of this.bindings) {\r\n      if (renderer.updatedBindings.has(binding)) continue;\r\n      binding.applyChange(renderer);\r\n    }\r\n  }\r\n}\r\n\r\nexport function createBindContent(\r\n  parentBinding: IBinding | null,\r\n  id           : number, \r\n  engine       :IComponentEngine, \r\n  loopContext  : string | null, \r\n  listIndex    :IListIndex2 | null\r\n):IBindContent {\r\n  const bindContent = new BindContent(\r\n    parentBinding, \r\n    id, \r\n    engine, \r\n    loopContext, \r\n    listIndex\r\n  );\r\n  bindContent.init();\r\n  return bindContent;\r\n}","/**\r\n * loadFromImportMap.ts\r\n *\r\n * importmapの情報をもとに、Structiveのルートやコンポーネントを動的にロード・登録するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - importmap.imports内のエイリアスを走査し、@routes/や@components/のプレフィックスで判定\r\n * - @routes/の場合はルーティング情報をentryRouteで登録\r\n * - @components/の場合はloadSingleFileComponentでSFCをロードし、createComponentClassでクラス化してregisterComponentClassで登録\r\n *\r\n * 設計ポイント:\r\n * - importmapのエイリアスを利用して、ルーティングやコンポーネントの自動登録を実現\r\n * - パスやタグ名の正規化、パラメータ除去なども自動で処理\r\n * - 非同期でSFCをロードし、動的なWeb Components登録に対応\r\n */\r\nimport { entryRoute } from \"../Router/Router\";\r\nimport { raiseError } from \"../utils\";\r\nimport { createComponentClass } from \"./createComponentClass\";\r\nimport { loadImportmap } from \"./loadImportmap\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent\";\r\nimport { registerComponentClass } from \"./registerComponentClass\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nconst ROUTES_KEY = \"@routes/\";\r\nconst COMPONENTS_KEY = \"@components/\";\r\nconst LAZY_LOAD_SUFFIX = \"#lazy\";\r\nconst LAZY_LOAD_SUFFIX_LEN = LAZY_LOAD_SUFFIX.length;\r\n\r\nconst lazyLoadComponentAliasByTagName: Record<string, string> = {};\r\n\r\nexport async function loadFromImportMap(): Promise<void> {\r\n  const importmap = loadImportmap();\r\n  if (importmap.imports) {\r\n    const loadAliasByTagName: Map<string, string> = new Map();\r\n    for (const [alias, value] of Object.entries(importmap.imports)) {\r\n      let tagName, isLazyLoad;\r\n      if (alias.startsWith(ROUTES_KEY)) {\r\n        isLazyLoad = alias.endsWith(LAZY_LOAD_SUFFIX);\r\n        // remove the prefix '@routes' and the suffix '#lazy' if it exists\r\n        const path = alias.slice(ROUTES_KEY.length - 1, isLazyLoad ? -LAZY_LOAD_SUFFIX_LEN : undefined); \r\n        const pathWithoutParams = path.replace(/:[^\\s/]+/g, \"\"); // remove the params\r\n        tagName = \"routes\" + pathWithoutParams.replace(/\\//g, \"-\"); // replace '/' with '-'\r\n        entryRoute(tagName, path === \"/root\" ? \"/\" : path); // routing\r\n      } if (alias.startsWith(COMPONENTS_KEY)) {\r\n        isLazyLoad = alias.endsWith(LAZY_LOAD_SUFFIX);\r\n        // remove the prefix '@components/' and the suffix '#lazy' if it exists\r\n        tagName = alias.slice(COMPONENTS_KEY.length, isLazyLoad ? -LAZY_LOAD_SUFFIX_LEN : undefined);\r\n      }\r\n      if (!tagName) {\r\n        continue;\r\n      }\r\n      if (isLazyLoad) {\r\n        // Lazy Load用のコンポーネントのエイリアスを格納\r\n        lazyLoadComponentAliasByTagName[tagName] = alias;\r\n        continue; // Lazy Loadの場合はここでスキップ\r\n      }\r\n      loadAliasByTagName.set(tagName, alias);\r\n    }\r\n    for (const [tagName, alias] of loadAliasByTagName.entries()) {\r\n      // 非Lazy Loadのコンポーネントはここで登録\r\n      const componentData = await loadSingleFileComponent(alias);\r\n      const componentClass = createComponentClass(componentData);\r\n      registerComponentClass(tagName, componentClass);\r\n    }\r\n  }\r\n}\r\n\r\nexport function hasLazyLoadComponents(): boolean {\r\n  return Object.keys(lazyLoadComponentAliasByTagName).length > 0;\r\n}\r\n\r\nexport function isLazyLoadComponent(tagName: string): boolean {\r\n  return lazyLoadComponentAliasByTagName.hasOwnProperty(tagName);\r\n}\r\n\r\nexport function loadLazyLoadComponent(tagName: string): void {\r\n  const alias = lazyLoadComponentAliasByTagName[tagName];\r\n  if (!alias) {\r\n    console.warn(`loadLazyLoadComponent: alias not found for tagName: ${tagName}`);\r\n    return;\r\n  }\r\n  delete lazyLoadComponentAliasByTagName[tagName]; // 一度ロードしたら削除\r\n  queueMicrotask(async () => {\r\n    const componentData = await loadSingleFileComponent(alias);\r\n    const componentClass = createComponentClass(componentData);\r\n    registerComponentClass(tagName, componentClass);\r\n  });\r\n}\r\n","import { NodePath } from \"./types\";\r\n\r\n/**\r\n * ルートノードとノードパス（インデックス配列）から、該当するノードを辿って取得するユーティリティ関数。\r\n *\r\n * - NodePathは各階層でのchildNodesのインデックスを表す配列\r\n * - ルートから順にchildNodes[index]を辿り、該当ノードを返す\r\n * - パスが不正な場合やノードが存在しない場合はnullを返す\r\n *\r\n * @param root  探索の起点となるルートノード\r\n * @param path  各階層のインデックス配列（NodePath）\r\n * @returns     パスで指定されたノード、またはnull\r\n */\r\nexport function resolveNodeFromPath(root: Node, path: NodePath): Node | null {\r\n  return path.reduce((node, index) => node?.childNodes[index] ?? null, root);\r\n}","import { raiseError } from \"../utils.js\";\r\nimport { IComponentConfig } from \"../WebComponents/types\";\r\nimport { canHaveShadowRoot } from \"./canHaveShadowRoot.js\";\r\n\r\nfunction getParentShadowRoot(parentNode: Node | null): ShadowRoot|undefined{\r\n  let node: Node | null = parentNode;\r\n  while(node) {\r\n    if (node instanceof ShadowRoot) {\r\n      return node;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n}\r\n\r\n/**\r\n * 指定したHTMLElementにShadow DOMをアタッチし、スタイルシートを適用するユーティリティ関数。\r\n *\r\n * - config.enableShadowDomがtrueの場合は、ShadowRootを生成し、adoptedStyleSheetsでスタイルを適用\r\n * - extends指定がある場合はcanHaveShadowRootで拡張可能かチェック\r\n * - Shadow DOMを使わない場合は、親のShadowRootまたはdocumentにスタイルシートを追加\r\n * - すでに同じスタイルシートが含まれていれば重複追加しない\r\n *\r\n * @param element    対象のHTMLElement\r\n * @param config     コンポーネント設定\r\n * @param styleSheet 適用するCSSStyleSheet\r\n * @throws           Shadow DOM非対応の組み込み要素を拡張しようとした場合はエラー\r\n */\r\nexport function attachShadow(element: HTMLElement, config: IComponentConfig, styleSheet: CSSStyleSheet): void {\r\n    if (config.enableShadowDom) {\r\n      if (config.extends === null || canHaveShadowRoot(config.extends)) {\r\n        if (!element.shadowRoot) {\r\n          const shadowRoot = element.attachShadow({ mode: 'open' });\r\n          shadowRoot.adoptedStyleSheets = [styleSheet];\r\n        }\r\n      } else {\r\n        raiseError(`ComponentEngine: Shadow DOM not supported for builtin components that extend ${config.extends}`);\r\n      }\r\n    } else {\r\n      const shadowRootOrDocument = getParentShadowRoot(element.parentNode) || document;\r\n      const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n      if (!styleSheets.includes(styleSheet)) {\r\n        shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, styleSheet];\r\n      }\r\n    }\r\n\r\n}","/**\r\n * 指定したタグ名の要素がShadowRootを持てるかどうかを判定するユーティリティ関数。\r\n *\r\n * - 指定タグ名で要素を生成し、attachShadowメソッドが存在するかどうかで判定\r\n * - 無効なタグ名やattachShadow未対応の場合はfalseを返す\r\n *\r\n * @param tagName 判定したい要素のタグ名（例: \"div\", \"span\", \"input\" など）\r\n * @returns       ShadowRootを持てる場合はtrue、持てない場合はfalse\r\n */\r\nexport function canHaveShadowRoot(tagName: string): boolean {\r\n  try {\r\n    // 一時的に要素を作成\r\n    const element = document.createElement(tagName);\r\n    // `attachShadow` メソッドが存在し、実行可能かを確認\r\n    if (typeof element.attachShadow !== \"function\") {\r\n      return false;\r\n    }\r\n    // 一時的にShadowRootをアタッチしてみる\r\n    const shadowRoot = element.attachShadow({ mode: 'open' });\r\n    return true;\r\n  } catch {\r\n    // 無効なタグ名などが渡された場合は false を返す\r\n    return false;\r\n  }\r\n}\r\n","import { IBinding } from \"../DataBinding/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { StructiveComponent } from \"../WebComponents/types\";\r\nimport { IComponentStateBinding } from \"./types\";\r\n\r\nclass ComponentStateBinding implements IComponentStateBinding {\r\n  parentPaths: Set<string> = new Set<string>();\r\n  childPaths: Set<string> = new Set<string>();\r\n  childPathByParentPath: Map<string, string> = new Map();\r\n  parentPathByChildPath: Map<string, string> = new Map();\r\n  bindingByParentPath: Map<string, IBinding> = new Map();\r\n  bindingByChildPath: Map<string, IBinding> = new Map();\r\n  bindings: WeakSet<IBinding> = new WeakSet();\r\n\r\n  addBinding(binding: IBinding): void {\r\n    if (this.bindings.has(binding)) {\r\n      return; // 既にバインディングが追加されている場合は何もしない\r\n    }\r\n    const parentPath = binding.bindingState.pattern;\r\n    const childPath = binding.bindingNode.subName;\r\n    if (this.childPathByParentPath.has(parentPath)) {\r\n      throw new Error(`Parent path \"${parentPath}\" already has a child path.`);\r\n    }\r\n    if (this.parentPathByChildPath.has(childPath)) {\r\n      throw new Error(`Child path \"${childPath}\" already has a parent path.`);\r\n    }\r\n    this.childPathByParentPath.set(parentPath, childPath);\r\n    this.parentPathByChildPath.set(childPath, parentPath);\r\n    this.parentPaths.add(parentPath);\r\n    this.childPaths.add(childPath);\r\n    this.bindingByParentPath.set(parentPath, binding);\r\n    this.bindingByChildPath.set(childPath, binding);\r\n    this.bindings.add(binding);\r\n  }\r\n  \r\n  getChildPath(parentPath: string): string | undefined {\r\n    return this.childPathByParentPath.get(parentPath);\r\n  }\r\n\r\n  getParentPath(childPath: string): string | undefined {\r\n    return this.parentPathByChildPath.get(childPath);\r\n  }\r\n\r\n  toParentPathFromChildPath(childPath: string): string {\r\n    const childPathInfo = getStructuredPathInfo(childPath);\r\n    const matchPaths = childPathInfo.cumulativePathSet.intersection(this.childPaths);\r\n    if (matchPaths.size === 0) {\r\n      raiseError(`No parent path found for child path \"${childPath}\".`);\r\n    }\r\n    const matchPathArray = Array.from(matchPaths);\r\n    const longestMatchPath = matchPathArray[matchPathArray.length - 1];\r\n    const remainPath = childPath.slice(longestMatchPath.length); // include the dot\r\n    const matchParentPath = this.parentPathByChildPath.get(longestMatchPath);\r\n    if (typeof matchParentPath === \"undefined\") {\r\n      raiseError(`No parent path found for child path \"${childPath}\".`);\r\n    }\r\n    return matchParentPath + remainPath;\r\n  }\r\n\r\n  toChildPathFromParentPath(parentPath: string): string {\r\n     const parentPathInfo = getStructuredPathInfo(parentPath);\r\n    const matchPaths = parentPathInfo.cumulativePathSet.intersection(this.parentPaths);\r\n    if (matchPaths.size === 0) {\r\n      raiseError(`No child path found for parent path \"${parentPath}\".`);\r\n    }\r\n    const matchPathArray = Array.from(matchPaths);\r\n    const longestMatchPath = matchPathArray[matchPathArray.length - 1];\r\n    const remainPath = parentPath.slice(longestMatchPath.length); // include the dot\r\n    const matchChildPath = this.childPathByParentPath.get(longestMatchPath);\r\n    if (typeof matchChildPath === \"undefined\") {\r\n      raiseError(`No child path found for parent path \"${parentPath}\".`);\r\n    }\r\n    return matchChildPath + remainPath;\r\n  }\r\n\r\n  startsWithByChildPath(childPathInfo: IStructuredPathInfo): string | null {\r\n    if (this.childPaths.size === 0) {\r\n      return null;\r\n    }\r\n    const matchPaths = childPathInfo.cumulativePathSet.intersection(this.childPaths);\r\n    if (matchPaths.size === 0) {\r\n      return null;\r\n    } else {\r\n      const matches = Array.from(matchPaths);\r\n      const longestMatchPath = matches[matches.length - 1];\r\n      return longestMatchPath;\r\n    }\r\n  }\r\n\r\n  bind(parentComponent: StructiveComponent, childComponent: StructiveComponent): void {\r\n    // bindParentComponent\r\n    const bindings = parentComponent.getBindingsFromChild(childComponent);\r\n    for (const binding of bindings ?? []) {\r\n      this.addBinding(binding);\r\n    }\r\n  }\r\n}\r\n\r\nexport function createComponentStateBinding(): IComponentStateBinding {\r\n  return new ComponentStateBinding();\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IComponentStateBinding } from \"../ComponentStateBinding/types\";\r\nimport { SetByRefSymbol } from \"../StateClass/symbols\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { update2 } from \"../Updater2/Updater2\";\r\nimport { raiseError } from \"../utils\";\r\nimport { AssignStateSymbol, NotifyRedrawSymbol } from \"./symbols\";\r\nimport { IComponentStateInput, IComponentStateInputHandler } from \"./types\";\r\n\r\nclass ComponentStateInputHandler implements IComponentStateInputHandler {\r\n  private componentStateBinding: IComponentStateBinding;\r\n  private engine: IComponentEngine;\r\n  constructor(engine:IComponentEngine, componentStateBinding: IComponentStateBinding) {\r\n    this.componentStateBinding = componentStateBinding;\r\n    this.engine = engine;\r\n  }\r\n\r\n  assignState(object: any): void {\r\n    update2(this.engine, null, async (updater, stateProxy) => {\r\n      for(const [key, value] of Object.entries(object)) {\r\n        const childPathInfo = getStructuredPathInfo(key);\r\n        stateProxy[SetByRefSymbol](childPathInfo, null, value);\r\n      }     \r\n    });\r\n  }\r\n\r\n  /**\r\n   * listindexに一致するかどうかは事前にスクリーニングしておく\r\n   * @param refs \r\n   */\r\n  notifyRedraw(refs: IStatePropertyRef[]): void {\r\n    for(const parentPathRef of refs) {\r\n      try {\r\n        const childPath = this.componentStateBinding.toChildPathFromParentPath(parentPathRef.info.pattern);\r\n        const childPathInfo = getStructuredPathInfo(childPath);\r\n        const childListIndex = parentPathRef.listIndex;\r\n        const value = this.engine.getPropertyValue(childPathInfo, childListIndex);\r\n        // Ref情報をもとに状態更新キューに追加\r\n        update2(this.engine, null, async (updater, stateProxy) => {\r\n          updater.enqueueRef(childPathInfo, childListIndex, value);\r\n        });\r\n      } catch(e) {\r\n        // 対象でないものは何もしない\r\n      }\r\n    }\r\n  }\r\n\r\n  get(target:any, prop:PropertyKey, receiver:IComponentStateInput) {\r\n    if (prop === AssignStateSymbol) {\r\n      return this.assignState.bind(this);\r\n    } else if (prop === NotifyRedrawSymbol) {\r\n      return this.notifyRedraw.bind(this);\r\n    } else if (typeof prop === \"string\") {\r\n      return this.engine.getPropertyValue(getStructuredPathInfo(prop), null);\r\n    }\r\n    raiseError(`Property \"${String(prop)}\" is not supported in ComponentStateInput.`);\r\n  }\r\n\r\n  set(target:any, prop:PropertyKey, value:any, receiver:IComponentStateInput): boolean {\r\n    if (typeof prop === \"string\") {\r\n      this.engine.setPropertyValue(getStructuredPathInfo(prop), null, value);\r\n      return true;\r\n    }\r\n    raiseError(`Property \"${String(prop)}\" is not supported in ComponentStateInput.`);\r\n  }\r\n}\r\n\r\nexport function createComponentStateInput(\r\n  engine: IComponentEngine,\r\n  componentStateBinding: IComponentStateBinding\r\n): IComponentStateInput {\r\n  const handler = new ComponentStateInputHandler(engine, componentStateBinding);\r\n  return new Proxy({}, handler) as IComponentStateInput;\r\n}","import { IComponentStateBinding } from \"../ComponentStateBinding/types\";\r\nimport { IListIndex2 } from \"../ListIndex2/types\";\r\nimport { GetByRefSymbol, SetByRefSymbol } from \"../StateClass/symbols\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { update2 } from \"../Updater2/Updater2\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IComponentStateOutput } from \"./types\";\r\n\r\nclass ComponentStateOutput implements IComponentStateOutput {\r\n  binding: IComponentStateBinding;\r\n  constructor(binding: IComponentStateBinding) {\r\n    this.binding = binding;\r\n  }\r\n\r\n  get(pathInfo: IStructuredPathInfo, listIndex: IListIndex2 | null): any {\r\n    const childPath = this.binding.startsWithByChildPath(pathInfo);\r\n    if (childPath === null) {\r\n      raiseError(`No child path found for path \"${pathInfo.toString()}\".`);\r\n    }\r\n    const binding = this.binding.bindingByChildPath.get(childPath);\r\n    if (typeof binding === \"undefined\") {\r\n      raiseError(`No binding found for child path \"${childPath}\".`);\r\n    }\r\n    const parentPathInfo = getStructuredPathInfo(this.binding.toParentPathFromChildPath(pathInfo.pattern));\r\n    return binding.engine.getPropertyValue(parentPathInfo, listIndex ?? binding.bindingState.listIndex);\r\n  }\r\n\r\n  set(pathInfo: IStructuredPathInfo, listIndex: IListIndex2 | null, value: any): boolean {\r\n    const childPath = this.binding.startsWithByChildPath(pathInfo);\r\n    if (childPath === null) {\r\n      raiseError(`No child path found for path \"${pathInfo.toString()}\".`);\r\n    }\r\n    const binding = this.binding.bindingByChildPath.get(childPath);\r\n    if (typeof binding === \"undefined\") {\r\n      raiseError(`No binding found for child path \"${childPath}\".`);\r\n    }\r\n    const parentPathInfo = getStructuredPathInfo(this.binding.toParentPathFromChildPath(pathInfo.pattern));\r\n    const engine = binding.engine;\r\n    update2(engine, null, async (updater, stateProxy) => {\r\n      stateProxy[SetByRefSymbol](parentPathInfo, listIndex ?? binding.bindingState.listIndex, value);\r\n    });\r\n    return true;\r\n  }\r\n\r\n  startsWith(pathInfo: IStructuredPathInfo): boolean {\r\n    return this.binding.startsWithByChildPath(pathInfo) !== null;\r\n  }\r\n\r\n  getListIndexesSet(pathInfo:IStructuredPathInfo, listIndex:IListIndex2 | null): Set<IListIndex2> | null {\r\n    const childPath = this.binding.startsWithByChildPath(pathInfo);\r\n    if (childPath === null) {\r\n      raiseError(`No child path found for path \"${pathInfo.toString()}\".`);\r\n    }\r\n    const binding = this.binding.bindingByChildPath.get(childPath);\r\n    if (typeof binding === \"undefined\") {\r\n      raiseError(`No binding found for child path \"${childPath}\".`);\r\n    }\r\n    const parentPathInfo = getStructuredPathInfo(this.binding.toParentPathFromChildPath(pathInfo.pattern));\r\n    return binding.engine.getListIndexesSet(parentPathInfo, listIndex);\r\n  }\r\n}\r\n\r\nexport function createComponentStateOutput(binding: IComponentStateBinding): IComponentStateOutput {\r\n  return new ComponentStateOutput(binding);\r\n}","import { createBindContent } from \"../DataBinding/BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../DataBinding/types\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { IState, IStructiveState } from \"../StateClass/types\";\r\nimport { ComponentType, IComponentConfig, IComponentStatic, StructiveComponent } from \"../WebComponents/types\";\r\nimport { attachShadow } from \"./attachShadow.js\";\r\nimport { ISaveInfoByResolvedPathInfo, IComponentEngine } from \"./types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetByRefSymbol, SetCacheableSymbol } from \"../StateClass/symbols.js\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { createReadonlyStateProxy } from \"../StateClass/createReadonlyStateProxy.js\";\r\nimport { IComponentStateBinding } from \"../ComponentStateBinding/types.js\";\r\nimport { createComponentStateBinding } from \"../ComponentStateBinding/createComponentStateBinding.js\";\r\nimport { createComponentStateInput } from \"../ComponentStateInput/createComponentStateInput.js\";\r\nimport { createComponentStateOutput } from \"../ComponentStateOutput/createComponentStateOutput.js\";\r\nimport { IComponentStateInput } from \"../ComponentStateInput/types.js\";\r\nimport { IComponentStateOutput } from \"../ComponentStateOutput/types.js\";\r\nimport { AssignStateSymbol } from \"../ComponentStateInput/symbols.js\";\r\nimport { IListIndex2 } from \"../ListIndex2/types.js\";\r\nimport { IPathManager } from \"../PathManager/types.js\";\r\nimport { update2 } from \"../Updater2/Updater2.js\";\r\n\r\n/**\r\n * ComponentEngineクラスは、Structiveコンポーネントの状態管理・依存関係管理・\r\n * バインディング・ライフサイクル・レンダリングなどの中核的な処理を担うエンジンです。\r\n *\r\n * 主な役割:\r\n * - 状態インスタンスやプロキシの生成・管理\r\n * - テンプレート・スタイルシート・フィルター・バインディング情報の管理\r\n * - 依存関係グラフ（dependentTree）の構築と管理\r\n * - バインディング情報やリスト情報の保存・取得\r\n * - ライフサイクル（connectedCallback/disconnectedCallback）処理\r\n * - Shadow DOMやスタイルシートの適用\r\n * - 状態プロパティの取得・設定\r\n * - バインディングの追加・存在判定・リスト管理\r\n *\r\n * 構造・設計上の特徴:\r\n * - 状態や依存関係、バインディング情報を効率的に管理するためのキャッシュやマップを多用\r\n * - テンプレートやリスト構造の多重管理に対応\r\n * - 非同期初期化やUpdaterによるバッチ的な状態更新設計\r\n * - 疎結合な設計で、各種ユーティリティやファクトリ関数と連携\r\n *\r\n * 典型的なWeb Componentsのライフサイクルやリアクティブな状態管理を、Structive独自の構造で実現しています。\r\n */\r\nexport class ComponentEngine implements IComponentEngine {\r\n  type          : ComponentType = 'autonomous';\r\n  config        : IComponentConfig;\r\n  template      : HTMLTemplateElement;\r\n  styleSheet    : CSSStyleSheet;\r\n  stateClass    : IStructiveState;\r\n  state         : IState;\r\n  inputFilters  : FilterWithOptions;\r\n  outputFilters : FilterWithOptions;\r\n  #bindContent  :IBindContent | null = null;\r\n  get bindContent(): IBindContent {\r\n    if (this.#bindContent === null) {\r\n      raiseError(\"bindContent is not initialized yet\");\r\n    }\r\n    return this.#bindContent;\r\n  }\r\n  baseClass     : typeof HTMLElement = HTMLElement;\r\n  owner         : StructiveComponent;\r\n\r\n  bindingsByListIndex : WeakMap<IListIndex2, Set<IBinding>> = new WeakMap();\r\n\r\n  bindingsByComponent: WeakMap<StructiveComponent, Set<IBinding>> = new WeakMap();\r\n  structiveChildComponents: Set<StructiveComponent> = new Set();\r\n\r\n  #waitForInitialize : PromiseWithResolvers<void> = Promise.withResolvers<void>();\r\n  #waitForDisconnected: PromiseWithResolvers<void> | null = null;\r\n  \r\n  #stateBinding: IComponentStateBinding = createComponentStateBinding();\r\n  stateInput: IComponentStateInput;\r\n  stateOutput: IComponentStateOutput;\r\n  #blockPlaceholder: Comment | null = null; // ブロックプレースホルダー\r\n  #blockParentNode: Node | null = null; // ブロックプレースホルダーの親ノード\r\n  #ignoreDissconnectedCallback: boolean = false; // disconnectedCallbackを無視するフラグ\r\n\r\n  constructor(config: IComponentConfig, owner: StructiveComponent) {\r\n    this.config = config;\r\n    if (this.config.extends) {\r\n      this.type = 'builtin';\r\n    }\r\n    const componentClass = owner.constructor as IComponentStatic;\r\n    this.template = componentClass.template;\r\n    this.styleSheet = componentClass.styleSheet;\r\n    this.stateClass = componentClass.stateClass;\r\n    this.state = new this.stateClass();\r\n    this.inputFilters = componentClass.inputFilters;\r\n    this.outputFilters = componentClass.outputFilters;\r\n    this.owner =  owner;\r\n    this.stateInput = createComponentStateInput(this, this.#stateBinding);\r\n    this.stateOutput = createComponentStateOutput(this.#stateBinding);\r\n  }\r\n\r\n  get pathManager(): IPathManager {\r\n    return (this.owner.constructor as IComponentStatic).pathManager;\r\n  }\r\n\r\n  setup(): void {\r\n    const componentClass = this.owner.constructor as IComponentStatic;\r\n    this.#bindContent = createBindContent(null, componentClass.id, this, null, null); // this.stateArrayPropertyNamePatternsが変更になる可能性がある\r\n  }\r\n\r\n  get waitForInitialize(): PromiseWithResolvers<void> {\r\n    return this.#waitForInitialize;\r\n  }\r\n\r\n  async connectedCallback(): Promise<void> {\r\n    await this.#waitForDisconnected?.promise; // disconnectedCallbackが呼ばれている場合は待つ\r\n    await this.owner.parentStructiveComponent?.waitForInitialize.promise;\r\n    // コンポーネントの状態を初期化する\r\n    if (this.owner.dataset.state) {\r\n      // data-state属性から状態を取得する\r\n      try {\r\n        const json = JSON.parse(this.owner.dataset.state);\r\n        this.stateInput[AssignStateSymbol](json);\r\n      } catch(e) {\r\n        raiseError(\"Failed to parse state from dataset\");\r\n      }\r\n    }\r\n    const parentComponent = this.owner.parentStructiveComponent;\r\n    if (parentComponent) {\r\n      // 親コンポーネントの状態をバインドする\r\n      parentComponent.registerChildComponent(this.owner);\r\n      // 親コンポーネントの状態を子コンポーネントにバインドする\r\n      this.#stateBinding.bind(parentComponent, this.owner);\r\n    }\r\n    if (this.config.enableWebComponents) {\r\n      attachShadow(this.owner, this.config, this.styleSheet);\r\n    } else {\r\n      this.#blockParentNode = this.owner.parentNode;\r\n      this.#blockPlaceholder = document.createComment(\"Structive block placeholder\");\r\n      try {\r\n        this.#ignoreDissconnectedCallback = true; // disconnectedCallbackを無視するフラグを立てる\r\n        this.owner.replaceWith(this.#blockPlaceholder); // disconnectCallbackが呼ばれてしまう\r\n      } finally {\r\n        this.#ignoreDissconnectedCallback = false;\r\n      }\r\n    }\r\n\r\n    if (this.config.enableWebComponents) {\r\n      // Shadow DOMにバインドコンテンツをマウントする\r\n      this.bindContent.mount(this.owner.shadowRoot ?? this.owner);\r\n    } else {\r\n      // ブロックプレースホルダーの親ノードにバインドコンテンツをマウントする\r\n      const parentNode = this.#blockParentNode ?? raiseError(\"Block parent node is not set\");\r\n      this.bindContent.mountAfter(parentNode, this.#blockPlaceholder);\r\n    }\r\n\r\n    await update2(this, null, async (updater, stateProxy) => {\r\n      // 状態のリスト構造を構築する\r\n      for(const path of this.pathManager.alls) {\r\n        const info = getStructuredPathInfo(path);\r\n        if (info.pathSegments.length !== 1) continue; // ルートプロパティのみ\r\n        if (this.pathManager.funcs.has(path)) continue; // 関数は除外\r\n        updater.enqueueRef(info, null, null); \r\n      }\r\n      await stateProxy[ConnectedCallbackSymbol]();\r\n    });\r\n\r\n    // レンダリングが終わってから実行する\r\n    queueMicrotask(() => {\r\n      this.#waitForInitialize.resolve();\r\n    });\r\n  }\r\n\r\n  async disconnectedCallback(): Promise<void> {\r\n    this.#waitForDisconnected = Promise.withResolvers<void>();\r\n    try {\r\n      if (this.#ignoreDissconnectedCallback) return; // disconnectedCallbackを無視するフラグが立っている場合は何もしない\r\n      await update2(this, null, async (updater, stateProxy) => {\r\n        await stateProxy[DisconnectedCallbackSymbol]();\r\n      });\r\n      // 親コンポーネントから登録を解除する\r\n      this.owner.parentStructiveComponent?.unregisterChildComponent(this.owner);\r\n      if (!this.config.enableWebComponents) {\r\n        this.#blockPlaceholder?.remove();\r\n        this.#blockPlaceholder = null;\r\n        this.#blockParentNode = null;\r\n      }\r\n    } finally {\r\n      this.#waitForDisconnected.resolve(); // disconnectedCallbackが呼ばれたことを通知   \r\n    }\r\n  }\r\n\r\n  #saveInfoByStructuredPathId: { [id:number]: ISaveInfoByResolvedPathInfo } = {};\r\n  #saveInfoByResolvedPathInfoIdByListIndex: WeakMap<IListIndex2, { [id:number]: ISaveInfoByResolvedPathInfo }> = new WeakMap();\r\n\r\n  createSaveInfo():ISaveInfoByResolvedPathInfo {\r\n    return {\r\n      list          : null,\r\n      listIndexesSet: null,\r\n      bindings      : [],\r\n    }\r\n  }\r\n\r\n  getSaveInfoByStatePropertyRef(info:IStructuredPathInfo, listIndex:IListIndex2 | null): ISaveInfoByResolvedPathInfo {\r\n    if (listIndex === null) {\r\n      let saveInfo = this.#saveInfoByStructuredPathId[info.id];\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        this.#saveInfoByStructuredPathId[info.id] = saveInfo;\r\n      }\r\n      return saveInfo;\r\n    } else {\r\n      let saveInfoByResolvedPathInfoId = this.#saveInfoByResolvedPathInfoIdByListIndex.get(listIndex);\r\n      if (typeof saveInfoByResolvedPathInfoId === \"undefined\") {\r\n        saveInfoByResolvedPathInfoId = {};\r\n        this.#saveInfoByResolvedPathInfoIdByListIndex.set(listIndex, saveInfoByResolvedPathInfoId);\r\n      }\r\n      let saveInfo = saveInfoByResolvedPathInfoId[info.id];\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        saveInfoByResolvedPathInfoId[info.id] = saveInfo;\r\n      }\r\n      return saveInfo;\r\n    }\r\n  }\r\n  \r\n  saveBinding(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex2 | null, \r\n    binding  : IBinding\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.bindings.push(binding);\r\n  }\r\n\r\n  saveListIndexesSet(\r\n    info              :IStructuredPathInfo, \r\n    listIndex         :IListIndex2 | null, \r\n    saveListIndexesSet:Set<IListIndex2>\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.listIndexesSet = saveListIndexesSet;\r\n  }\r\n\r\n  saveList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex2 | null, \r\n    list     :any[]\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.list = list;\r\n  }\r\n\r\n  getBindings(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex2 | null\r\n  ): IBinding[] {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.bindings;\r\n  }\r\n\r\n  getListIndexesSet(info:IStructuredPathInfo, listIndex:IListIndex2 | null): Set<IListIndex2> | null {\r\n    if (this.stateOutput.startsWith(info)) {\r\n      return this.stateOutput.getListIndexesSet(info, listIndex);\r\n    }\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.listIndexesSet;\r\n  }\r\n    \r\n  getList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex2 | null\r\n  ): any[] | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.list;\r\n  }\r\n\r\n  getPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex2 | null): any {\r\n    // プロパティの値を取得する\r\n    const stateProxy = createReadonlyStateProxy(this, this.state);\r\n    return stateProxy[GetByRefSymbol](info, listIndex);\r\n  }\r\n  setPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex2 | null, value: any): void {\r\n    // プロパティの値を設定する\r\n    update2(this, null, async (updater, stateProxy) => {\r\n      stateProxy[SetByRefSymbol](info, listIndex, value);\r\n    });\r\n  }\r\n  // Structive子コンポーネントを登録する\r\n  registerChildComponent(component: StructiveComponent): void {\r\n    this.structiveChildComponents.add(component);\r\n  }\r\n  unregisterChildComponent(component: StructiveComponent): void {\r\n    this.structiveChildComponents.delete(component);\r\n  }\r\n  \r\n}\r\n\r\nexport function createComponentEngine(config: IComponentConfig, component: StructiveComponent): IComponentEngine {\r\n  return new ComponentEngine(config, component);\r\n}","/**\r\n * replaceMustacheWithTemplateTag.ts\r\n *\r\n * Mustache構文（{{if:条件}}, {{for:式}}, {{endif}}, {{endfor}}, {{elseif:条件}}, {{else}} など）を\r\n * <template>タグやコメントノードに変換するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - HTML文字列内のMustache構文を正規表現で検出し、<template data-bind=\"...\">やコメントノードに変換\r\n * - if/for/endif/endfor/elseif/elseなどの制御構文をネスト対応で<template>タグに変換\r\n * - 通常の埋め込み式（{{expr}}）はコメントノード（<!--embed:expr-->）に変換\r\n *\r\n * 設計ポイント:\r\n * - stackでネスト構造を管理し、endif/endfor/elseif/elseの対応関係を厳密にチェック\r\n * - 不正なネストや対応しない構文にはraiseErrorで例外を発生\r\n * - elseif/elseはnot条件のtemplateを自動生成し、条件分岐を表現\r\n * - コメントノードへの変換で埋め込み式の安全なDOM挿入を実現\r\n */\r\nimport { COMMENT_EMBED_MARK } from \"../constants.js\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nconst MUSTACHE_REGEXP = /\\{\\{([^\\}]+)\\}\\}/g;\r\nconst MUSTACHE_TYPES:Set<string> = new Set(['if', 'for', 'endif', 'endfor', 'elseif', 'else']);\r\n\r\ntype MustacheType = 'if' | 'for' | 'endif' | 'endfor' | 'elseif' | 'else';\r\ntype MustacheInfo = {\r\n  type: MustacheType;\r\n  remain: string; // after first ':'\r\n  expr: string;\r\n}\r\n\r\nexport function replaceMustacheWithTemplateTag(html: string): string {\r\n  const stack:MustacheInfo[] = [];\r\n  return html.replaceAll(MUSTACHE_REGEXP, (match, expr) => {\r\n    expr = expr.trim();\r\n    const [ type ] = expr.split(':');\r\n    if (!MUSTACHE_TYPES.has(type)) {\r\n      // embed\r\n      return `<!--${COMMENT_EMBED_MARK}${expr}-->`;\r\n    }\r\n    const remain = expr.slice(type.length + 1).trim();\r\n    const currentInfo:MustacheInfo = { type, expr, remain };\r\n    if (type === 'if' || type === 'for') {\r\n      stack.push(currentInfo);\r\n      return `<template data-bind=\"${expr}\">`;\r\n    } else if (type === 'endif') {\r\n      const endTags = [];\r\n      do {\r\n        const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        if (info.type === 'if') {\r\n          endTags.push('</template>');\r\n          break;\r\n        } else if (info.type === 'elseif') {\r\n          endTags.push('</template>');\r\n        } else {\r\n          raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        }\r\n      } while(true);\r\n      return endTags.join('');\r\n    } else if (type === 'endfor') {\r\n      const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n      if (info.type === 'for') {\r\n        return '</template>';\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: endfor without for');\r\n      }\r\n    } else if (type === 'elseif') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      if (lastInfo.type === 'if' || lastInfo.type === 'elseif') {\r\n        stack.push(currentInfo);\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\"><template data-bind=\"if:${remain}\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      }\r\n    } else if (type === 'else') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      if (lastInfo.type === 'if') {\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      }\r\n    } else {\r\n      raiseError('replaceMustacheToTemplateOrEmbed: unknown type');\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n","/**\r\n * replaceTemplateTagWithComment.ts\r\n *\r\n * <template>タグをコメントノードに置換し、テンプレートを再帰的に登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 指定したHTMLTemplateElementをコメントノード（<!--template:id-->）に置換\r\n * - SVG内のtemplateタグは通常のtemplate要素に変換し、属性や子ノードを引き継ぐ\r\n * - テンプレート内の入れ子templateも再帰的に置換・登録\r\n * - registerTemplateでテンプレートをID付きで管理\r\n *\r\n * 設計ポイント:\r\n * - テンプレートの階層構造を維持しつつ、DOM上はコメントノードでマーク\r\n * - SVG対応や属性引き継ぎなど、汎用的なテンプレート処理に対応\r\n * - generateIdでユニークIDを割り当て、テンプレート管理を一元化\r\n */\r\nimport { COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { registerTemplate } from \"./registerTemplate.js\";\r\n\r\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport function replaceTemplateTagWithComment(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number = id\r\n):number {\r\n  // テンプレートの親ノードが存在する場合は、テンプレートをコメントノードに置き換える\r\n  template.parentNode?.replaceChild(document.createComment(`${COMMENT_TEMPLATE_MARK}${id}`), template);\r\n  if (template.namespaceURI === SVG_NS) {\r\n    // SVGタグ内のtemplateタグを想定\r\n    const newTemplate = document.createElement(\"template\");\r\n    for(let childNode of Array.from(template.childNodes)) {\r\n      newTemplate.content.appendChild(childNode);\r\n    }\r\n    const bindText = template.getAttribute(DATA_BIND_ATTRIBUTE);\r\n    newTemplate.setAttribute(DATA_BIND_ATTRIBUTE, bindText ?? \"\");\r\n    template = newTemplate;\r\n  }\r\n  template.content.querySelectorAll(\"template\").forEach(template => {\r\n    replaceTemplateTagWithComment(generateId(), template, rootId);\r\n  });\r\n  registerTemplate(id, template, rootId);\r\n  return id;\r\n}\r\n","/**\r\n * registerHtml.ts\r\n *\r\n * HTML文字列をテンプレートとして登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 指定IDでHTMLテンプレートを生成し、data-id属性を付与\r\n * - Mustache構文（{{ }})をテンプレートタグに変換（replaceMustacheWithTemplateTagを利用）\r\n * - テンプレートタグをコメントに置換（replaceTemplateTagWithCommentを利用）\r\n *\r\n * 設計ポイント:\r\n * - テンプレートの動的生成・管理や、構文変換による柔軟なテンプレート処理に対応\r\n * - テンプレートはdocument.createElement(\"template\")で生成し、data-idで識別\r\n */\r\nimport { replaceMustacheWithTemplateTag } from \"./replaceMustacheWithTemplateTag.js\";\r\nimport { replaceTemplateTagWithComment } from \"./replaceTemplateTagWithComment.js\";\r\n\r\nexport function registerHtml(id: number, html:string) {\r\n  const template = document.createElement(\"template\");\r\n  template.dataset.id = id.toString();\r\n  template.innerHTML = replaceMustacheWithTemplateTag(html);\r\n  replaceTemplateTagWithComment(id, template);\r\n}","/**\r\n * createAccessorFunctions.ts\r\n *\r\n * Stateプロパティのパス情報（IStructuredPathInfo）から、動的なgetter/setter関数を生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - パス情報とgetter集合から、最適なアクセサ関数（get/set）を動的に生成\r\n * - ワイルドカード（*）やネストしたプロパティパスにも対応\r\n * - パスやセグメントのバリデーションも実施\r\n *\r\n * 設計ポイント:\r\n * - matchPathsから最長一致のgetterパスを探索し、そこからの相対パスでアクセサを構築\r\n * - パスが一致しない場合はinfo.pathSegmentsから直接アクセサを生成\r\n * - new Functionで高速なgetter/setterを動的生成\r\n * - パスやセグメント名は正規表現で厳密にチェックし、安全性を担保\r\n */\r\nimport { getStructuredPathInfo } from \"./getStructuredPathInfo\";\r\nimport { IAccessorFunctions, IStructuredPathInfo } from \"./types\";\r\n\r\nconst checkSegmentRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\r\nconst checkPathRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*(\\.[a-zA-Z_$][0-9a-zA-Z_$]*|\\.\\*)*$/;\r\n\r\nexport function createAccessorFunctions(info: IStructuredPathInfo, getters: Set<string>): IAccessorFunctions {\r\n  const matchPaths = new Set(info.cumulativePaths).intersection(getters);\r\n  let len = -1;\r\n  let matchPath = '';\r\n  for(const curPath of matchPaths) {\r\n    const pathSegments = curPath.split('.');\r\n    if (pathSegments.length === 1) {\r\n      continue;\r\n    }\r\n    if (pathSegments.length > len) {\r\n      len = pathSegments.length;\r\n      matchPath = curPath;\r\n    }\r\n  }\r\n  if (matchPath.length > 0) {\r\n    if (!checkPathRegexp.test(matchPath)) {\r\n      throw new Error(`Invalid path: ${matchPath}`);\r\n    }\r\n    const matchInfo = getStructuredPathInfo(matchPath);\r\n    const segments = [];\r\n    let count = matchInfo.wildcardCount;\r\n    for(let i = matchInfo.pathSegments.length; i < info.pathSegments.length; i++) {\r\n      const segment = info.pathSegments[i];\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          throw new Error(`Invalid segment name: ${segment}`);\r\n        }\r\n        segments.push(\".\" + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this[\"${matchPath}\"]${path};`) as ()=> any,\r\n      set : new Function('value', `this[\"${matchPath}\"]${path} = value;`) as (value: any) => void,\r\n    }\r\n  } else {\r\n    const segments = [];\r\n    let count = 0;\r\n    for(const segment of info.pathSegments) {\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          throw new Error(`Invalid segment name: ${segment}`);\r\n        }\r\n        segments.push((segments.length > 0 ? \".\" : \"\") + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this.${path};`) as ()=> any,\r\n      set : new Function('value', `this.${path} = value;`) as (value: any) => void,\r\n    }\r\n  }\r\n\r\n}\r\n","import { getListPathsSetById, getPathsSetById } from \"../BindingBuilder/registerDataBindAttributes\";\r\nimport { createAccessorFunctions } from \"../StateProperty/createAccessorFunctions\";\r\nimport { getStructuredPathInfo, reservedWords } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { Constructor } from \"../types\";\r\nimport { StructiveComponentClass } from \"../WebComponents/types\";\r\nimport { Dependencies, IPathManager } from \"./types\";\r\n\r\nclass PathManager implements IPathManager {\r\n  alls: Set<string> = new Set<string>();\r\n  lists: Set<string> = new Set<string>();\r\n  elements: Set<string> = new Set<string>();\r\n  funcs: Set<string> = new Set<string>();\r\n  getters: Set<string> = new Set<string>();\r\n  setters: Set<string> = new Set<string>();\r\n  optimizes: Set<string> = new Set<string>();\r\n  staticDependencies: Dependencies<string> = new Map<string, Set<string>>();\r\n  dynamicDependencies: Dependencies<string> = new Map<string, Set<string>>();\r\n  #id: number;\r\n  #stateClass: Constructor<any>;\r\n\r\n  constructor(componentClass: StructiveComponentClass) {\r\n    this.#id = componentClass.id;\r\n    this.#stateClass = componentClass.stateClass;\r\n    const alls = getPathsSetById(this.#id);\r\n    for(const path of alls) {\r\n      const info = getStructuredPathInfo(path);\r\n      this.alls = this.alls.union(info.cumulativePathSet);\r\n    }\r\n    const lists = getListPathsSetById(this.#id);\r\n    this.lists = this.lists.union(lists);\r\n    for(const listPath of lists) {\r\n      const elementPath = listPath + \".*\";\r\n      this.elements.add(elementPath);\r\n    }\r\n    let currentProto = this.#stateClass.prototype;\r\n    while (currentProto && currentProto !== Object.prototype) {\r\n      const getters = Object.getOwnPropertyDescriptors(currentProto);\r\n      if (getters) {\r\n        for (const [key, desc] of Object.entries(getters)) {\r\n          if (reservedWords.has(key)) {\r\n            continue;\r\n          }\r\n          if (typeof desc.value === \"function\") {\r\n            this.funcs.add(key);\r\n            continue;\r\n          }\r\n          const hasGetter = (desc as PropertyDescriptor).get !== undefined;\r\n          const hasSetter = (desc as PropertyDescriptor).set !== undefined;\r\n          const info = getStructuredPathInfo(key);\r\n          this.alls = this.alls.union(info.cumulativePathSet);\r\n          if (hasGetter) {\r\n            this.getters.add(key);\r\n          }\r\n          if (hasSetter) {\r\n            this.setters.add(key);\r\n          }\r\n        }\r\n      }\r\n      currentProto = Object.getPrototypeOf(currentProto);\r\n    }\r\n    // 最適化対象のパスを決定し、最適化する\r\n    for(const path of this.alls) {\r\n      if (this.getters.has(path)) {\r\n        continue;\r\n      }\r\n      if (this.setters.has(path)) {\r\n        continue;\r\n      }\r\n      const info = getStructuredPathInfo(path);\r\n      if (info.pathSegments.length === 1) {\r\n        continue;\r\n      }\r\n      const funcs = createAccessorFunctions(info, this.getters);\r\n      Object.defineProperty(this.#stateClass.prototype, path, {\r\n        get: funcs.get,\r\n        set: funcs.set,\r\n        enumerable: true,\r\n        configurable: true,\r\n      });\r\n      this.optimizes.add(path);\r\n    }\r\n    // 静的依存関係の設定\r\n    for(const path of this.alls) {\r\n      const info = getStructuredPathInfo(path);\r\n      if (info.parentPath) {\r\n        this.staticDependencies.get(info.parentPath)?.add(path) ?? \r\n          this.staticDependencies.set(info.parentPath, new Set());\r\n      }\r\n    }\r\n  }\r\n\r\n  addDynamicDependency(target: string, source: string) {\r\n    this.dynamicDependencies.get(source)?.add(target) ?? \r\n      this.dynamicDependencies.set(source, new Set([target]));\r\n  }\r\n}\r\n\r\nexport function createPathManager(componentClass: StructiveComponentClass): IPathManager {\r\n  return new PathManager(componentClass);\r\n}","/**\r\n * createComponentClass.ts\r\n *\r\n * StructiveのWeb Components用カスタム要素クラスを動的に生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - ユーザー定義のcomponentData（stateClass, html, css等）からWeb Componentsクラスを生成\r\n * - StateClass/テンプレート/CSS/バインディング情報などをIDで一元管理・登録\r\n * - 独自のget/setトラップやバインディング、親子コンポーネント探索、フィルター拡張など多機能な基盤を提供\r\n * - 静的プロパティでテンプレート・スタイル・StateClass・フィルター・getter情報などにアクセス可能\r\n * - defineメソッドでカスタム要素として登録\r\n *\r\n * 設計ポイント:\r\n * - findStructiveParentで親Structiveコンポーネントを探索し、階層的な状態管理を実現\r\n * - getter/setter/バインディング最適化やアクセサ自動生成（optimizeAccessor）に対応\r\n * - テンプレート・CSS・StateClass・バインディング情報をIDで一元管理し、再利用性・拡張性を確保\r\n * - フィルターやバインディング情報も静的プロパティで柔軟に拡張可能\r\n */\r\nimport { inputBuiltinFilters, outputBuiltinFilters } from \"../Filter/builtinFilters.js\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { getStateClassById, registerStateClass } from \"../StateClass/registerStateClass.js\";\r\nimport { getStyleSheetById } from \"../StyleSheet/registerStyleSheet.js\";\r\nimport { registerCss } from \"../StyleSheet/regsiterCss.js\";\r\nimport { createComponentEngine } from \"../ComponentEngine/ComponentEngine.js\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types.js\";\r\nimport { registerHtml } from \"../Template/registerHtml.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { getBaseClass } from \"./getBaseClass.js\";\r\nimport { getComponentConfig } from \"./getComponentConfig.js\";\r\nimport { IComponent, IUserComponentData, IUserConfig, StructiveComponentClass, StructiveComponent } from \"./types\";\r\nimport { getListPathsSetById, getPathsSetById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { IStructiveState } from \"../StateClass/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { createAccessorFunctions } from \"../StateProperty/createAccessorFunctions.js\";\r\nimport { config as globalConfig } from \"./getGlobalConfig.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IComponentStateInput } from \"../ComponentStateInput/types.js\";\r\nimport { findStructiveParent } from \"./findStructiveParent.js\";\r\nimport { IPathManager } from \"../PathManager/types.js\";\r\nimport { createPathManager } from \"../PathManager/PathManager.js\";\r\n\r\n\r\nexport function createComponentClass(componentData: IUserComponentData): StructiveComponentClass {\r\n  const config = (componentData.stateClass.$config ?? {})as IUserConfig;\r\n  const componentConfig = getComponentConfig(config);\r\n  const id = generateId();\r\n  const { html, css, stateClass } = componentData;\r\n  const inputFilters:FilterWithOptions = Object.assign({}, inputBuiltinFilters);\r\n  const outputFilters:FilterWithOptions = Object.assign({}, outputBuiltinFilters);\r\n  stateClass.$isStructive = true;\r\n  registerHtml(id, html);\r\n  registerCss(id, css);\r\n  registerStateClass(id, stateClass);\r\n  const baseClass = getBaseClass(componentConfig.extends);\r\n  const extendTagName = componentConfig.extends;\r\n  return class extends baseClass implements IComponent {\r\n    #engine: IComponentEngine;\r\n\r\n    constructor() {\r\n      super();\r\n      this.#engine = createComponentEngine(componentConfig, this as StructiveComponent);\r\n      this.#engine.setup();\r\n    }\r\n\r\n    connectedCallback() {\r\n      this.#engine.connectedCallback();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n      this.#engine.disconnectedCallback();\r\n    }\r\n\r\n    #parentStructiveComponent: StructiveComponent | null | undefined;\r\n    get parentStructiveComponent(): StructiveComponent | null {\r\n      if (typeof this.#parentStructiveComponent === \"undefined\") {\r\n        this.#parentStructiveComponent = findStructiveParent(this as StructiveComponent);\r\n      }\r\n      return this.#parentStructiveComponent;\r\n    }\r\n\r\n    get state(): IComponentStateInput {\r\n      return this.#engine.stateInput;\r\n    }\r\n\r\n    get isStructive(): boolean {\r\n      return this.#engine.stateClass.$isStructive ?? false;\r\n    }\r\n\r\n    get waitForInitialize(): PromiseWithResolvers<void> {\r\n      return this.#engine.waitForInitialize;\r\n    }\r\n\r\n    getBindingsFromChild(component: IComponent): Set<IBinding> | null {\r\n      return this.#engine.bindingsByComponent.get(component as StructiveComponent) ?? null;\r\n    }\r\n\r\n    registerChildComponent(component:StructiveComponent): void {\r\n      this.#engine.registerChildComponent(component);\r\n    }\r\n    unregisterChildComponent(component:StructiveComponent): void {\r\n      this.#engine.unregisterChildComponent(component);\r\n    }\r\n    static define(tagName:string) {\r\n      if (extendTagName) {\r\n        customElements.define(tagName, this, { extends: extendTagName });\r\n      } else {\r\n        customElements.define(tagName, this);\r\n      }\r\n    }\r\n\r\n    static get id():number {\r\n      return id;\r\n    }\r\n    static #html:string = html;\r\n    static get html():string {\r\n      return this.#html;\r\n    }\r\n    static set html(value:string) {\r\n      this.#html = value;\r\n      registerHtml(this.id, value);\r\n      this.#template = null;\r\n      this.#pathManager = null; // パス情報をリセット\r\n    }\r\n\r\n    static #css:string = css;\r\n    static get css() {\r\n      return this.#css;\r\n    }\r\n    static set css(value:string) {\r\n      this.#css = value;\r\n      registerCss(this.id, value);\r\n      this.#styleSheet = null;\r\n    }\r\n    static #template: HTMLTemplateElement | null = null;\r\n    static get template():HTMLTemplateElement {\r\n      if (!this.#template) {\r\n        this.#template = getTemplateById(this.id);\r\n      }\r\n      return this.#template;\r\n    }\r\n    static #styleSheet: CSSStyleSheet | null = null;\r\n    static get styleSheet():CSSStyleSheet {\r\n      if (!this.#styleSheet) {\r\n        this.#styleSheet = getStyleSheetById(this.id);\r\n      }\r\n      return this.#styleSheet;\r\n    }\r\n    static #stateClass: IStructiveState | null = null;\r\n    static get stateClass():IStructiveState {\r\n      if (!this.#stateClass) {\r\n        this.#stateClass = getStateClassById(this.id) as IStructiveState;\r\n      }\r\n      return this.#stateClass;\r\n    }\r\n    static #inputFilters:FilterWithOptions = inputFilters;\r\n    static get inputFilters():FilterWithOptions {\r\n      return this.#inputFilters;\r\n    }\r\n    static #outputFilters:FilterWithOptions = outputFilters;\r\n    static get outputFilters():FilterWithOptions {\r\n      return this.#outputFilters;\r\n    }\r\n    static #pathManager: IPathManager | null = null;\r\n    static get pathManager(): IPathManager {\r\n      if (!this.#pathManager) {\r\n        this.#pathManager = createPathManager(this as StructiveComponentClass);\r\n      }\r\n      return this.#pathManager;\r\n    }\r\n\r\n  } as StructiveComponentClass;\r\n}\r\n","/**\r\n * getComponentConfig.ts\r\n *\r\n * ユーザー設定（IUserConfig）とグローバル設定を統合し、コンポーネントの設定（IComponentConfig）を生成するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - getGlobalConfigでグローバル設定を取得\r\n * - ユーザー設定が優先され、未指定の場合はグローバル設定値を利用\r\n * - enableShadowDomやextendsなどの設定値を一元的に返却\r\n *\r\n * 設計ポイント:\r\n * - ユーザーごとの個別設定と全体のデフォルト設定を柔軟に統合\r\n * - 設定値のデフォルト化や拡張性を考慮した設計\r\n */\r\nimport { getGlobalConfig } from \"./getGlobalConfig.js\";\r\nimport { IUserConfig, IComponentConfig } from \"./types\";\r\n\r\nexport function getComponentConfig(userConfig: IUserConfig): IComponentConfig {\r\n  const globalConfig = getGlobalConfig();\r\n  return {\r\n    enableWebComponents: typeof userConfig.enableWebComponents === \"undefined\" ? true : userConfig.enableWebComponents,\r\n    enableShadowDom    : userConfig.enableShadowDom ?? globalConfig.enableShadowDom,\r\n    extends            : userConfig.extends ?? null,\r\n  };\r\n}","/**\r\n * getBaseClass.ts\r\n *\r\n * 指定したタグ名（extendTagName）から、その要素のコンストラクタ（基底クラス）を取得するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - extendTagNameが指定されていれば、そのタグのHTMLElementコンストラクタを返す\r\n * - 指定がなければHTMLElementを返す\r\n *\r\n * 設計ポイント:\r\n * - カスタム要素の継承元クラスを動的に取得し、柔軟なWeb Components拡張に対応\r\n */\r\nimport { Constructor } from \"../types\";\r\n\r\nexport function getBaseClass(extendTagName: string | null):Constructor<HTMLElement> {\r\n  return extendTagName ? (document.createElement(extendTagName).constructor as Constructor<HTMLElement>) : HTMLElement;\r\n}","/**\r\n * createSingleFileComponent.ts\r\n *\r\n * Structive用のシングルファイルコンポーネント（SFC）をパースし、各要素（HTML, CSS, StateClass）を抽出・生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - テキストから<template>・<script type=\"module\">・<style>を抽出し、それぞれを分離\r\n * - <script type=\"module\">はBase64エンコードして動的importし、StateClassとして利用\r\n * - {{...}}埋め込み式は一時的にコメントノード化してHTMLパース時の消失を防止し、復元\r\n * - 各要素（html, css, stateClass, text）をIUserComponentDataとして返却\r\n *\r\n * 設計ポイント:\r\n * - escapeEmbed/unescapeEmbedでMustache構文の安全なパースを実現\r\n * - scriptはdata:URL経由で安全に動的import\r\n * - テンプレート・スクリプト・スタイルを柔軟に分離・管理できる設計\r\n */\r\nimport { IStructiveState } from \"../StateClass/types\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nfunction escapeEmbed(html: string): string {\r\n  return html.replaceAll(/\\{\\{([^\\}]+)\\}\\}/g, (match, expr) => {\r\n    return `<!--{{${expr}}}-->`;\r\n  });\r\n}\r\n\r\nfunction unescapeEmbed(html:string):string {\r\n  return html.replaceAll(/<!--\\{\\{([^\\}]+)\\}\\}-->/g, (match, expr) => {\r\n    return `{{${expr}}}`;\r\n  });\r\n}\r\n\r\nexport async function createSingleFileComponent(text: string): Promise<IUserComponentData> {\r\n  const template = document.createElement(\"template\");\r\n  template.innerHTML = escapeEmbed(text);\r\n\r\n  const html = template.content.querySelector(\"template\");\r\n  html?.remove();\r\n\r\n  const script = template.content.querySelector(\"script[type=module]\") as HTMLScriptElement;\r\n  const b64 = btoa(String.fromCodePoint(...new TextEncoder().encode(script.text)));\r\n  const scriptModule = script ? await import(\"data:application/javascript;base64,\" + b64) : {};\r\n//  const scriptModule = script ? await import(\"data:text/javascript;charset=utf-8,\" + script.text) : {};\r\n  script?.remove();\r\n\r\n  const style = template.content.querySelector(\"style\");\r\n  style?.remove();\r\n\r\n  const stateClass = (scriptModule.default ?? class {}) as IStructiveState;\r\n  \r\n  return {\r\n    text,\r\n    html      : unescapeEmbed(html?.innerHTML ?? \"\").trim(),\r\n    css       : style?.textContent ?? \"\",\r\n    stateClass,\r\n  }\r\n}","/**\r\n * loadSingleFileComponent.ts\r\n *\r\n * 指定パスのシングルファイルコンポーネント（SFC）をfetchし、パースしてIUserComponentDataとして返すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - fetchで指定パスのSFCファイルを取得\r\n * - テキストとして読み込み、createSingleFileComponentでパース\r\n * - パース結果（IUserComponentData）を返却\r\n *\r\n * 設計ポイント:\r\n * - import.meta.resolveを利用し、パス解決の柔軟性を確保\r\n * - 非同期処理で動的なコンポーネントロードに対応\r\n */\r\nimport { createSingleFileComponent } from \"./createSingleFileComponent.js\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nexport async function loadSingleFileComponent(path: string): Promise<IUserComponentData> {\r\n  const response = await fetch(import.meta.resolve(path));\r\n  const text = await response.text();\r\n  return createSingleFileComponent(text);\r\n}\r\n","/**\r\n * registerComponentClass.ts\r\n *\r\n * StructiveのWeb Componentsクラスを指定したタグ名でカスタム要素として登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - registerComponentClass: 渡されたcomponentClassをtagNameでdefineメソッドを使って登録\r\n *\r\n * 設計ポイント:\r\n * - Web Componentsのカスタム要素登録を簡潔にラップし、再利用性を高める設計\r\n */\r\nimport { StructiveComponentClass } from \"./types\";\r\n\r\nexport function registerComponentClass(tagName: string, componentClass: StructiveComponentClass) {\r\n  componentClass.define(tagName);\r\n}","/**\r\n * loadImportmap.ts\r\n *\r\n * HTML内の<script type=\"importmap\">タグからimportmap情報を取得・統合するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 複数のimportmapスクリプトタグを走査し、全てのimportsをマージしてIImportMap型で返却\r\n *\r\n * 設計ポイント:\r\n * - scriptタグのinnerHTMLをJSON.parseでパースし、importsプロパティを統合\r\n * - importmap.importsが複数存在する場合もObject.assignでマージ\r\n * - importmap仕様に準拠し、柔軟なimportエイリアス管理を実現\r\n */\r\nimport { IImportMap } from \"./types\";\r\n\r\nexport function loadImportmap():IImportMap {\r\n  const importmap: IImportMap = {};\r\n  document.querySelectorAll(\"script[type='importmap']\").forEach(script => {\r\n    const scriptImportmap = JSON.parse(script.innerHTML);\r\n    if (scriptImportmap.imports) {\r\n      importmap.imports = Object.assign(importmap.imports || {}, scriptImportmap.imports);\r\n    }\r\n  });\r\n  return importmap;\r\n}\r\n\r\n","/**\r\n * Router.ts\r\n *\r\n * シングルページアプリケーション（SPA）向けのカスタムエレメント Router の実装です。\r\n *\r\n * 主な役割:\r\n * - ルート定義（entryRoute）に基づき、URLパスに応じてカスタム要素を動的に生成・表示\r\n * - pushState/popstateイベントを利用した履歴管理とルーティング制御\r\n * - ルートパラメータの抽出とカスタム要素への受け渡し\r\n * - 404ページ（未定義ルート時）の表示\r\n *\r\n * 設計ポイント:\r\n * - entryRouteでルートパスとカスタム要素タグ名のペアを登録\r\n * - popstateイベントでURL変更時に自動で再描画\r\n * - ルートパスのパラメータ（:id等）も正規表現で抽出し、data-state属性で渡す\r\n * - getRouterでグローバルなRouterインスタンスを取得可能\r\n */\r\nimport { isLazyLoadComponent, loadLazyLoadComponent } from \"../WebComponents/loadFromImportMap\";\r\nimport { IRouter } from \"./types\";\r\n\r\nconst DEFAULT_ROUTE_PATH = '/'; // Default route path\r\nconst ROUTE_PATH_PREFIX = 'routes:'; // Prefix for route paths\r\n/**\r\n * example:\r\n * ```ts\r\n * entryRoute('my-view', '/my-view/:id');\r\n */\r\nconst routeEntries: Array<[string, string]> = [];\r\n\r\nlet globalRouter : Router | null = null;\r\n\r\nexport class Router extends HTMLElement implements IRouter {\r\n  originalPathName = window.location.pathname; // Store the original path name\r\n  originalFileName = window.location.pathname.split('/').pop() || ''; // Store the original file name\r\n  basePath = document.querySelector('base')?.href.replace(window.location.origin, \"\") || DEFAULT_ROUTE_PATH;\r\n\r\n  _popstateHandler: (event: PopStateEvent) => void;\r\n  constructor() {\r\n    super();\r\n    this._popstateHandler = this.popstateHandler.bind(this);\r\n  }\r\n\r\n  connectedCallback() {\r\n    globalRouter = this;\r\n    this.innerHTML = '<slot name=\"content\"></slot>';\r\n    window.addEventListener('popstate', this._popstateHandler);\r\n    window.dispatchEvent(new Event(\"popstate\")); // Dispatch popstate event to trigger the initial render\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('popstate', this._popstateHandler);\r\n    globalRouter = null;\r\n  }\r\n\r\n  popstateHandler(event: PopStateEvent) {\r\n    event.preventDefault();\r\n    this.render();\r\n  }\r\n\r\n  navigate(to: string) {\r\n    const toPath = to[0] === '/' ? (this.basePath + to.slice(1)) : to; // Ensure the path starts with '/'\r\n    history.pushState({}, '', toPath);\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    // スロットコンテントをクリア\r\n    const slotChildren = Array.from(this.childNodes).filter(\r\n      n => (n as HTMLElement).getAttribute?.('slot') === 'content'\r\n    );\r\n    slotChildren.forEach(n => this.removeChild(n));\r\n\r\n    const paths = window.location.pathname.split('/');\r\n    if (paths.at(-1) === this.originalFileName) {\r\n      paths[paths.length - 1] = ''; // Ensure the last path is empty for root\r\n    }\r\n    const pathName = paths.join('/');\r\n    const replacedPath = pathName.replace(this.basePath, ''); // Remove base path and ensure default route\r\n    const currentPath = replacedPath[0] !== '/' ? '/' + replacedPath : replacedPath; // Ensure the path starts with '/'\r\n    let tagName: string | undefined = undefined;\r\n    let params: Record<string, string> = {};\r\n    // Check if the routePath matches any of the defined routes\r\n    for (const [path, tag] of routeEntries) {\r\n      const regex = new RegExp(\"^\" + path.replace(/:[^\\s/]+/g, '([^/]+)') + \"$\");\r\n      if (regex.test(currentPath)) {\r\n        tagName = tag;\r\n        // Extract the parameters from the routePath\r\n        const matches = currentPath.match(regex);\r\n        if (matches) {\r\n          const keys = path.match(/:[^\\s/]+/g) || [];\r\n          keys.forEach((key, index) => {\r\n            params[key.substring(1)] = matches[index + 1]; // +1 to skip the full match\r\n          });\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (tagName) {\r\n      // If a route matches, create the custom element and set its state\r\n      // Create the custom element with the tag name\r\n      // project the custom element into the router slot\r\n      const customElement = document.createElement(tagName) as HTMLElement;\r\n      customElement.setAttribute('data-state', JSON.stringify(params));\r\n      customElement.setAttribute('slot', 'content');\r\n      this.appendChild(customElement);\r\n      if (isLazyLoadComponent(tagName)) {\r\n        loadLazyLoadComponent(tagName); // Load lazy load component if necessary\r\n      }\r\n    } else {\r\n      // If no route matches, show 404 content\r\n      const messageElement = document.createElement('h1') as HTMLElement;\r\n      messageElement.setAttribute('slot', 'content');\r\n      messageElement.textContent = '404 Not Found';\r\n      this.appendChild(messageElement);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function entryRoute(tagName: string, routePath: string): void {\r\n  if (routePath.startsWith(ROUTE_PATH_PREFIX)) {\r\n    routePath = routePath.substring(ROUTE_PATH_PREFIX.length); // Remove 'routes:' prefix\r\n  }\r\n  routeEntries.push([routePath, tagName]);\r\n}\r\n\r\nexport function getRouter(): Router | null {\r\n  return globalRouter;\r\n}\r\n\r\n","/**\r\n * MainWrapper.ts\r\n *\r\n * アプリ全体のレイアウトやルーティングを管理するカスタムエレメント MainWrapper の実装です。\r\n *\r\n * 主な役割:\r\n * - Shadow DOMの有効化やレイアウトテンプレートの動的読み込み\r\n * - レイアウトテンプレートやスタイルの適用\r\n * - ルーター要素（routerTagName）の動的追加\r\n *\r\n * 設計ポイント:\r\n * - config.enableShadowDom でShadow DOMの有効/無効を切り替え\r\n * - config.layoutPath が指定されていればfetchでレイアウトHTMLを取得し、テンプレート・スタイルを適用\r\n * - スタイルはadoptedStyleSheetsでShadowRootまたはdocumentに適用\r\n * - レイアウトが指定されていない場合はデフォルトのslotを挿入\r\n * - config.enableRouter が有効な場合はrouter要素をslotに追加\r\n */\r\nimport { raiseError } from \"../utils\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst SLOT_KEY = \"router\";\r\nconst DEFAULT_LAYOUT = `<slot name=\"${SLOT_KEY}\"></slot>`;\r\n\r\nexport class MainWrapper extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n    if (config.enableShadowDom) {\r\n      this.attachShadow({ mode: 'open' });\r\n    }\r\n  }\r\n\r\n  async connectedCallback() {\r\n    await this.loadLayout();\r\n    this.render();\r\n  }\r\n\r\n  get root(): ShadowRoot | HTMLElement {\r\n    return this.shadowRoot ?? this;\r\n  }\r\n\r\n  async loadLayout() {\r\n    if (config.layoutPath) {\r\n      const response = await fetch(config.layoutPath);\r\n      if (response.ok) {\r\n        const layoutText = await response.text();\r\n        const workTemplate = document.createElement(\"template\");\r\n        workTemplate.innerHTML = layoutText;\r\n      \r\n        const template = workTemplate.content.querySelector(\"template\");\r\n        const style = workTemplate.content.querySelector(\"style\") as CSSStyleSheet | null;\r\n      \r\n        this.root.appendChild(template?.content ?? document.createDocumentFragment());\r\n        if (style) {\r\n          const shadowRootOrDocument = this.shadowRoot ?? document;\r\n          const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n          if (!styleSheets.includes(style)) {\r\n            shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, style];\r\n          }\r\n        }\r\n      } else {\r\n        raiseError(`Failed to load layout from ${config.layoutPath}`);\r\n      }\r\n    } else {\r\n      this.root.innerHTML = DEFAULT_LAYOUT;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // add router\r\n    if (config.enableRouter) {\r\n      const router = document.createElement(config.routerTagName);\r\n      router.setAttribute('slot', SLOT_KEY);\r\n      this.root.appendChild(router);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * exports.ts\r\n *\r\n * Structiveの主要なエントリーポイント・APIを外部公開するモジュールです。\r\n *\r\n * 主な役割:\r\n * - registerSingleFileComponents, bootstrap, config などの主要APIをエクスポート\r\n * - defineComponents: SFC群をまとめて登録し、autoInitが有効なら自動で初期化\r\n * - bootstrapStructive: 初期化処理を一度だけ実行\r\n *\r\n * 設計ポイント:\r\n * - グローバル設定(config)を外部から参照・変更可能\r\n * - 初期化処理の多重実行を防止し、安全な起動を保証\r\n */\r\nimport { registerSingleFileComponents } from \"./WebComponents/registerSingleFIleComponents.js\";\r\nimport { bootstrap } from \"./bootstrap.js\";\r\nimport { config as _config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { IConfig } from \"./WebComponents/types\";\r\n\r\nexport const config: IConfig = _config;\r\n\r\nlet initialized = false;\r\nexport async function defineComponents(singleFileComponents: Record<string, string>):Promise<void> {\r\n  await registerSingleFileComponents(singleFileComponents);\r\n  if (config.autoInit) {\r\n    await bootstrapStructive();\r\n  }\r\n}\r\n\r\nexport async function bootstrapStructive():Promise<void> {\r\n  if (!initialized) {\r\n    await bootstrap();\r\n    initialized = true;\r\n  }\r\n}\r\n\r\n","/**\r\n * registerSingleFileComponents.ts\r\n *\r\n * 複数のシングルファイルコンポーネント（SFC）をまとめてStructiveのWeb Componentsとして登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - singleFileComponents（tagNameとパスのマップ）を走査し、各SFCを非同期で取得・パース\r\n * - enableRouterが有効な場合はentryRouteでルーティング情報も登録\r\n * - createComponentClassでWeb Componentsクラスを生成し、registerComponentClassでカスタム要素として登録\r\n *\r\n * 設計ポイント:\r\n * - SFCのロードからWeb Components登録、ルーティング登録までを一括で自動化\r\n * - 非同期処理で複数コンポーネントの動的登録に対応\r\n * - ルートパス\"/root\"の正規化や、@routesプレフィックスの除去など柔軟なパス処理\r\n */\r\nimport { entryRoute } from \"../Router/Router.js\";\r\nimport { createComponentClass } from \"./createComponentClass.js\";\r\nimport { config } from \"./getGlobalConfig.js\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent.js\";\r\nimport { registerComponentClass } from \"./registerComponentClass.js\";\r\nimport { IUserComponentData, SingleFileComponents } from \"./types\";\r\n\r\nexport async function registerSingleFileComponents(singleFileComponents:SingleFileComponents):Promise<void> {\r\n  for(const [ tagName, path ] of Object.entries(singleFileComponents)) {\r\n    let componentData : IUserComponentData | null = null;\r\n    if (config.enableRouter) {\r\n      const routePath = path.startsWith(\"@routes\") ? path.slice(7) : path; // remove the prefix 'routes:'\r\n      entryRoute(tagName, routePath === \"/root\" ? \"/\" : routePath); // routing\r\n    }\r\n    componentData = await loadSingleFileComponent(path);\r\n    const componentClass = createComponentClass(componentData);\r\n    registerComponentClass(tagName, componentClass);\r\n  }\r\n}","/**\r\n * bootstrap.ts\r\n *\r\n * Structiveアプリケーションの初期化処理を行うエントリーポイントです。\r\n *\r\n * 主な役割:\r\n * - グローバル設定(config)に従い、必要なコンポーネントやルーター、メインラッパーを登録・初期化\r\n * - autoLoadFromImportMapが有効な場合はimportmapからルートやコンポーネントを動的ロード\r\n * - enableRouterが有効な場合はRouterコンポーネントをカスタム要素として登録\r\n * - enableMainWrapperが有効な場合はMainWrapperをカスタム要素として登録し、autoInsertMainWrapperが有効ならbodyに自動挿入\r\n *\r\n * 設計ポイント:\r\n * - 設定値に応じて初期化処理を柔軟に制御\r\n * - importmapやカスタム要素の登録、DOMへの自動挿入など、Structiveの起動に必要な処理を一元化\r\n */\r\nimport { MainWrapper } from \"./MainWrapper/MainWrapper.js\";\r\nimport { Router } from \"./Router/Router.js\";\r\nimport { config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { loadFromImportMap } from \"./WebComponents/loadFromImportMap.js\";\r\n\r\nexport async function bootstrap(): Promise<void> {\r\n  if (config.autoLoadFromImportMap) {\r\n    await loadFromImportMap();\r\n  }\r\n\r\n  if (config.enableRouter) {\r\n    customElements.define(config.routerTagName, Router);\r\n  }\r\n\r\n  if (config.enableMainWrapper) {\r\n    customElements.define(config.mainTagName, MainWrapper);\r\n    if (config.autoInsertMainWrapper) {\r\n      const mainWrapper = document.createElement(config.mainTagName);\r\n      document.body.appendChild(mainWrapper);\r\n    }\r\n  }\r\n}"],"names":["globalConfig","debug","locale","enableShadowDom","enableMainWrapper","enableRouter","autoInsertMainWrapper","autoInit","mainTagName","routerTagName","layoutPath","autoLoadFromImportMap","optimizeList","optimizeListElements","optimizeAccessor","getGlobalConfig","config","optionsRequired","fnName","Error","optionMustBeNumber","valueMustBeNumber","valueMustBeDate","builtinFilters","eq","options","opt","value","optValue","Number","isNaN","ne","not","valueMustBeBoolean","lt","le","gt","ge","inc","dec","mul","div","fix","toFixed","toLocaleString","uc","toString","toUpperCase","lc","toLowerCase","cap","v","length","charAt","slice","trim","substr","opt1","opt1Value","opt2","opt2Value","pad","padStart","rep","repeat","rev","split","reverse","join","int","parseInt","float","parseFloat","round","Math","pow","floor","ceil","percent","date","Date","toLocaleDateString","time","toLocaleTimeString","datetime","ymd","year","getFullYear","month","getMonth","day","getDate","falsy","truthy","defaults","boolean","Boolean","number","string","String","null","outputBuiltinFilters","inputBuiltinFilters","id","generateId","raiseError","message","stateClassById","styleSheetById","registerCss","css","styleSheet","CSSStyleSheet","replaceSync","registerStyleSheet","textToFilter","filters","text","filter","name","cache","Map","createFilters","texts","result","get","i","push","set","BindingNode","binding","node","decorates","bindContents","Set","this","subName","constructor","init","assignValue","updateElements","listIndexes","values","notifyRedraw","refs","applyChange","renderer","updatedBindings","has","filteredValue","bindingState","getFilteredValue","readonlyState","add","isSelectElement","HTMLSelectElement","isFor","BindingNodeAttribute","super","setAttribute","BindingNodeCheckbox","Array","isArray","element","checked","map","_val","includes","BindingNodeClassList","className","BindingNodeClassName","classList","remove","_cache","StructuredPathInfo","static","sid","pattern","pathSegments","lastSegment","cumulativePaths","cumulativePathSet","cumulativeInfos","cumulativeInfoSet","wildcardPaths","wildcardPathSet","wildcardInfos","indexByWildcardPath","wildcardInfoSet","wildcardParentPaths","wildcardParentPathSet","wildcardParentInfos","wildcardParentInfoSet","lastWildcardPath","lastWildcardInfo","parentPath","parentInfo","wildcardCount","children","getPattern","_pattern","getStructuredPathInfo","currentPatternPath","prevPatternPath","reservedWords","structuredPath","info","ResolvedPathInfo","elements","paths","wildcardType","wildcardIndexes","tmpPatternElements","incompleteCount","completeCount","lastPath","getResolvedPathInfo","getContextListIndex","handler","structuredPathInfoStack","refIndex","index","listIndex","listIndex2Stack","at","getListIndex","receiver","parentListIndex","wildcardParentPattern","from","engine","getListIndexesSet","symbolName","GetByRefSymbol","Symbol","for","SetByRefSymbol","SetCacheableSymbol","ConnectedCallbackSymbol","DisconnectedCallbackSymbol","checkDependency","lastInfo","pathManager","getters","addDynamicDependency","setStatePropertyRef","callback","getByRefWritable","target","stateOutput","startsWith","intersection","size","Reflect","parentValue","_getByRef","setByRef","setters","updater","enqueueRef","resolveWritable","prop","path","indexes","trackDependency","DATA_BIND_ATTRIBUTE","COMMENT_EMBED_MARK","COMMENT_TEMPLATE_MARK","indexByIndexName2","getWritable","resolve","wildcardPattern","walkWildcardPattern","wildardIndexPos","indexPos","parentIndexes","results","listIndexSet","concat","resultIndexes","resultValues","getAllWritable","to","getRouter","navigate","owner","resolvedInfo","async","call","connectedCallback","disconnectedCallback","StateHandler$1","lastTrackingStack","trackingStack","fill","trackingIndex","loopContext","trapGet","trapSet","useWritableStateProxy","state","StateHandler","stateProxy","Proxy","asyncSetStatePropertyRef","setLoopContext","listWalkerSub","listIndexLen","subListIndex","listWalker","getByRefReadonly","refKey","cacheable","key","resolveReadonly","getReadonly","getAllReadonly","setCacheable","createReadonlyStateProxy","createRefKey","version","ListIndex2","pos","position","dirty","WeakRef","varName","deref","createListIndex2","listDiffNew","newValue","adds","newListIndexesSet","newListIndex","getListDiffResults","oldValue","oldListIndexesSet","updates","oldListIndexesByValue","groupBy","lastListIndex","shift","removes","difference","listDiffUpdate","Renderer","trackedRefKeys","listDiffResultsByRefKey","render","items","item","lists","updateListIndexes","renderItem","clear","isListValue","listDiffResults","getOldValue","getOldListIndexesSet","setOldValue","setOldListIndexesSet","listIndexesSet","saveListIndexesSet","getList","saveList","getBindings","diffResult","pathInfo","wildcardInfo","elementResult","elementValue","elementListIndex","oldIndex","indexOf","setElement","replaces","oldListIndex","swapTargets","swapSources","elementDiffUpdate","union","bindings","isList","diffResults","elementInfo","updateListIndex","subPath","staticDependencies","subInfo","dynamicDependencies","parentMatchPaths","_info","_listIndex","lastMatchInfo","Updater2","queue","updating","rendering","queueMicrotask","beginUpdate","update2","BindingNodeEvent","addEventListener","e","update","parentBindContent","currentLoopContext","serialize","context","preventDefault","stopPropagation","func","getValue","apply","createBindingNodeEvent","filterTexts","filterFns","BindingNodeBlock","textContent","BindingNodeIf","bindContent","trueBindContents","falseBindContents","createBindContent","parentNode","mountAfter","unmount","BindingNodeFor","bindContentsSet","bindContentByListIndex","WeakMap","bindContentPool","bindContentLastIndex","lastListIndexSet","assignListIndex","deleteBindContent","clearListIndex","poolLength","newBindContentsSet","removeBindContentsSet","listIndexResults","lastBindContent","firstNode","lastNode","getLastNode","nextSibling","firstChildNode","targets","sources","targetListIndex","sourceListIndex","sourceBindContent","createBindingNodeFor","DEFAULT_PROPERTY","defaultPropertyByElementType","radio","checkbox","button","getDefaultPropertyByNodeType","HTMLElement","HTMLTextAreaElement","HTMLOptionElement","HTMLButtonElement","HTMLAnchorElement","HTMLFormElement","HTMLInputElement","type","SVGElement","undefined","Text","Template","defaultEventByName","selected","BindingNodeProperty","defaultName","nodeType","getDefaultName","eventName","updateStateValue","createBindingNodeProperty","BindingNodeRadio","BindingNodeStyle","style","setProperty","AssignStateSymbol","NotifyRedrawSymbol","parentStructiveComponentByStructiveComponent","BindingNodeComponent","parentComponent","component","bindingsByComponent","notifyRefs","ref","thisAt","nodePropertyConstructorByNameByIsComment","class","if","nodePropertyConstructorByFirstName","attr","getBindingNodeCreator","propertyName","isComment","Comment","isElement","Element","fn","bindingNodeCreatorByName","nameElements","bindingNodeCreatorByFirstName","_getBindingNodeCreator","BindingState","listIndexRef","find","saveBinding","writeState","BindingStateIndex","indexNumber","loopContexts","bindingsByListIndex","ereg","RegExp","getBindingStateCreator","test","createBindingStateIndex","createBindingState","nodeTypeByNodeKey","getNodeType","nodeKey","createNodeKey","getNodeTypeByNode","s","re","decode","m","exec","decodeURIComponent","parseFilter","parseProperty","property","parseExpressions","expression","bindExpression","decoratesExpression","nodePropertyText","statePropertyText","nodeProperty","inputFilterTexts","stateProperty","outputFilterTexts","parseExpression","removeAttributeFromElement","removeAttribute","removeAttributeByNodeType","replaceTextNodeFn","textNode","document","createTextNode","replaceChild","DataBindAttributes","nodePath","bindTexts","creatorByText","getAttribute","getTemplateById","getDataBindText","removeDataBindAttribute","replaceTextNodeFromComment","routeIndexes","childNodes","getAbsoluteNodePath","parseBindText","bindText","creator","createBindingNode","getNodesHavingDataBind","root","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","acceptNode","hasAttribute","FILTER_ACCEPT","FILTER_SKIP","isCommentNode","nextNode","currentNode","listDataBindAttributesById","listPathsSetById","pathsSetById","getDataBindAttributesFromTemplate","content","createDataBindAttributes","templateById","registerTemplate","template","rootId","forEach","Node","TEXT_NODE","nodeValue","removeChild","dataBindAttributes","listPaths","attribute","j","registerDataBindAttributes","Binding","bindingNode","inputFilters","outputFilters","createBinding","LoopContext","parentLoopContext","currentBinding","parentBinding","walk","unshift","createContent","fragment","importNode","Object","keys","lazyLoadComponentAliasByTagName","lazyLoadElements","querySelectorAll","loadLazyLoadComponent","tagName","createBindings","attributes","getDataBindAttributesById","reduce","BindContent","isMounted","lastChildNode","lastBinding","createLoopContext","mount","appendChild","mountBefore","beforeNode","insertBefore","afterNode","parentElement","attachShadow","extends","createElement","mode","canHaveShadowRoot","shadowRoot","adoptedStyleSheets","shadowRootOrDocument","ShadowRoot","getParentShadowRoot","styleSheets","ComponentStateBinding","parentPaths","childPaths","childPathByParentPath","parentPathByChildPath","bindingByParentPath","bindingByChildPath","WeakSet","addBinding","childPath","getChildPath","getParentPath","toParentPathFromChildPath","matchPaths","matchPathArray","longestMatchPath","remainPath","matchParentPath","toChildPathFromParentPath","matchChildPath","startsWithByChildPath","childPathInfo","matches","bind","childComponent","getBindingsFromChild","ComponentStateInputHandler","componentStateBinding","assignState","object","entries","parentPathRef","childListIndex","getPropertyValue","setPropertyValue","ComponentStateOutput","parentPathInfo","ComponentEngine","stateClass","baseClass","structiveChildComponents","waitForInitialize","Promise","withResolvers","waitForDisconnected","stateBinding","createComponentStateBinding","stateInput","blockPlaceholder","blockParentNode","ignoreDissconnectedCallback","componentClass","createComponentStateInput","setup","promise","parentStructiveComponent","dataset","json","JSON","parse","registerChildComponent","enableWebComponents","createComment","replaceWith","alls","funcs","unregisterChildComponent","saveInfoByStructuredPathId","saveInfoByResolvedPathInfoIdByListIndex","createSaveInfo","list","getSaveInfoByStatePropertyRef","saveInfo","saveInfoByResolvedPathInfoId","delete","MUSTACHE_REGEXP","MUSTACHE_TYPES","SVG_NS","replaceTemplateTagWithComment","namespaceURI","newTemplate","childNode","registerHtml","html","innerHTML","stack","replaceAll","match","expr","remain","currentInfo","endTags","pop","replaceMustacheWithTemplateTag","checkSegmentRegexp","checkPathRegexp","createAccessorFunctions","len","matchPath","curPath","matchInfo","segments","count","segment","Function","PathManager","optimizes","getPathsSetById","getListPathsSetById","listPath","elementPath","currentProto","prototype","getOwnPropertyDescriptors","desc","hasGetter","hasSetter","getPrototypeOf","defineProperty","enumerable","configurable","source","createComponentClass","componentData","componentConfig","userConfig","jn","getComponentConfig","$config","Ee","Te","ce","assign","$isStructive","registerStateClass","extendTagName","getBaseClass","createComponentEngine","el","isStructive","define","customElements","getStyleSheetById","getStateClassById","unescapeEmbed","loadSingleFileComponent","response","fetch","escapeEmbed","querySelector","script","b64","btoa","fromCodePoint","TextEncoder","encode","scriptModule","import","default","createSingleFileComponent","registerComponentClass","ROUTES_KEY","COMPONENTS_KEY","LAZY_LOAD_SUFFIX","loadFromImportMap","importmap","scriptImportmap","imports","loadImportmap","loadAliasByTagName","alias","isLazyLoad","endsWith","replace","entryRoute","console","warn","ROUTE_PATH_PREFIX","routeEntries","globalRouter","Router","originalPathName","window","location","pathname","originalFileName","basePath","href","origin","_popstateHandler","popstateHandler","dispatchEvent","Event","removeEventListener","event","toPath","history","pushState","n","replacedPath","currentPath","params","tag","regex","substring","customElement","stringify","hasOwnProperty","isLazyLoadComponent","messageElement","routePath","SLOT_KEY","DEFAULT_LAYOUT","MainWrapper","loadLayout","ok","layoutText","workTemplate","createDocumentFragment","router","_config","initialized","defineComponents","singleFileComponents","registerSingleFileComponents","bootstrapStructive","mainWrapper","body","bootstrap"],"mappings":"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"}
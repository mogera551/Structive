{"version":3,"file":"structive.min.js","sources":["../src/WebComponents/getGlobalConfig.ts","../src/utils.ts","../src/Filter/errorMessages.ts","../src/Filter/builtinFilters.ts","../src/GlobalId/generateId.ts","../src/StateClass/registerStateClass.ts","../src/StyleSheet/registerStyleSheet.ts","../src/StyleSheet/regsiterCss.ts","../src/BindingBuilder/resolveNodeFromPath.ts","../src/BindingBuilder/createFilters.ts","../src/DataBinding/BindingNode/BindingNode.ts","../src/DataBinding/BindingNode/BindingNodeAttribute.ts","../src/DataBinding/BindingNode/BindingNodeCheckbox.ts","../src/DataBinding/BindingNode/BindingNodeClassList.ts","../src/DataBinding/BindingNode/BindingNodeClassName.ts","../src/ListIndex/ListIndex.ts","../src/ListDiff/ListDiff.ts","../src/constants.ts","../src/StateProperty/getStructuredPathInfo.ts","../src/PathTree/PathNode.ts","../src/StateClass/symbols.ts","../src/StateProperty/getResolvedPathInfo.ts","../src/StatePropertyRef/StatepropertyRef.ts","../src/StateClass/methods/getContextListIndex.ts","../src/StateClass/methods/getListIndex.ts","../src/StateClass/traps/indexByIndexName.ts","../src/StateClass/methods/getByRef.ts","../src/StateClass/methods/checkDependency.ts","../src/StateClass/methods/setByRef.ts","../src/StateClass/apis/resolve.ts","../src/StateClass/traps/get.ts","../src/StateClass/apis/getAll.ts","../src/StateClass/apis/trackDependency.ts","../src/Router/Router.ts","../src/StateClass/apis/connectedCallback.ts","../src/StateClass/apis/disconnectedCallback.ts","../src/StateClass/createReadonlyStateProxy.ts","../src/StateClass/useWritableStateProxy.ts","../src/StateClass/traps/set.ts","../src/StateClass/methods/setLoopContext.ts","../src/StateClass/methods/asyncSetStatePropertyRef.ts","../src/Updater/Renderer.ts","../src/Updater/Updater.ts","../src/DataBinding/BindingNode/BindingNodeEvent.ts","../src/DataBinding/BindingNode/BindingNodeBlock.ts","../src/DataBinding/BindingNode/BindingNodeIf.ts","../src/DataBinding/BindingNode/BindingNodeFor.ts","../src/BindingBuilder/getDefaultName.ts","../src/DataBinding/BindingNode/BindingNodeProperty.ts","../src/DataBinding/BindingNode/BindingNodeRadio.ts","../src/DataBinding/BindingNode/BindingNodeStyle.ts","../src/ComponentStateInput/symbols.ts","../src/WebComponents/findStructiveParent.ts","../src/DataBinding/BindingNode/BindingNodeComponent.ts","../src/BindingBuilder/getBindingNodeCreator.ts","../src/DataBinding/BindingState/BindingState.ts","../src/DataBinding/BindingState/BindingStateIndex.ts","../src/BindingBuilder/getBindingStateCreator.ts","../src/BindingBuilder/getNodeType.ts","../src/BindingBuilder/parseBindText.ts","../src/BindingBuilder/removeDataBindAttribute.ts","../src/BindingBuilder/replaceTextNodeFromComment.ts","../src/BindingBuilder/createDataBindAttributes.ts","../src/BindingBuilder/getDataBindText.ts","../src/BindingBuilder/getAbsoluteNodePath.ts","../src/BindingBuilder/getNodesHavingDataBind.ts","../src/BindingBuilder/registerDataBindAttributes.ts","../src/Template/registerTemplate.ts","../src/Template/removeEmptyTextNodes.ts","../src/DataBinding/Binding.ts","../src/LoopContext/createLoopContext.ts","../src/DataBinding/BindContent.ts","../src/WebComponents/loadFromImportMap.ts","../src/ComponentEngine/attachShadow.ts","../src/ComponentEngine/canHaveShadowRoot.ts","../src/ComponentStateBinding/createComponentStateBinding.ts","../src/ComponentStateInput/createComponentStateInput.ts","../src/ComponentStateOutput/createComponentStateOutput.ts","../src/ComponentEngine/ComponentEngine.ts","../src/Template/replaceMustacheWithTemplateTag.ts","../src/Template/replaceTemplateTagWithComment.ts","../src/Template/registerHtml.ts","../src/StateProperty/createAccessorFunctions.ts","../src/PathManager/PathManager.ts","../src/WebComponents/createComponentClass.ts","../src/WebComponents/getComponentConfig.ts","../src/WebComponents/getBaseClass.ts","../src/WebComponents/createSingleFileComponent.ts","../src/WebComponents/loadSingleFileComponent.ts","../src/WebComponents/registerComponentClass.ts","../src/WebComponents/loadImportmap.ts","../src/MainWrapper/MainWrapper.ts","../src/exports.ts","../src/WebComponents/registerSingleFIleComponents.ts","../src/bootstrap.ts"],"sourcesContent":["/**\r\n * getGlobalConfig.ts\r\n *\r\n * Structive全体で利用するグローバル設定（IConfig）を定義・取得するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - globalConfig: デフォルトのグローバル設定値（debug, locale, enableShadowDom等）を定義\r\n * - getGlobalConfig: グローバル設定オブジェクトを返す関数\r\n * - config: getGlobalConfig()のエイリアスとして即時取得用にエクスポート\r\n *\r\n * 設計ポイント:\r\n * - コンポーネント全体で共通利用する設定値を一元管理\r\n * - デフォルト値を明示し、拡張やカスタマイズにも対応しやすい設計\r\n */\r\nimport { IConfig } from \"./types\";\r\n\r\nconst globalConfig: IConfig = {\r\n  \"debug\"                : false,\r\n  \"locale\"               : \"en-US\", // The locale of the component, ex. \"en-US\", default is \"en-US\"\r\n  \"enableShadowDom\"      : true, // Whether to use Shadow DOM or not\r\n  \"enableMainWrapper\"    : true, // Whether to use the main wrapper or not\r\n  \"enableRouter\"         : true, // Whether to use the router or not\r\n  \"autoInsertMainWrapper\": false, // Whether to automatically insert the main wrapper or not\r\n  \"autoInit\"             : true, // Whether to automatically initialize the component or not\r\n  \"mainTagName\"          : \"app-main\", // The tag name of the main wrapper, default is \"app-main\"\r\n  \"routerTagName\"        : \"view-router\", // The tag name of the router, default is \"view-router\"\r\n  \"layoutPath\"           : \"\", // The path to the layout file, default is \"\"\r\n  \"autoLoadFromImportMap\": false, // Whether to automatically load the component from the import map or not\r\n  \"optimizeList\"         : true, // Whether to optimize the list or not\r\n  \"optimizeListElements\" : true, // Whether to optimize the list elements or not\r\n  \"optimizeAccessor\"     : true, // Whether to optimize the accessors or not\r\n};\r\n\r\n\r\nexport function getGlobalConfig():IConfig {\r\n  return globalConfig;\r\n}\r\n\r\nexport const config = getGlobalConfig();\r\n","/**\r\n * エラー生成ユーティリティ\r\n *\r\n * 目的:\r\n * - 例外を構造化メタ情報付きで投げる（コード、コンテキスト、ヒント、ドキュメントURL、重大度、原因）\r\n * - 既存の Error を踏襲しつつ、プロパティに追加情報を付与してデバッグ性を高める\r\n *\r\n * 使用例:\r\n * raiseError({\r\n *   code: 'UPD-001',\r\n *   message: 'Engine not initialized',\r\n *   context: { where: 'Renderer.render' },\r\n *   docsUrl: './docs/error-codes.md#upd'\r\n * });\r\n */\r\nexport type StructiveErrorPayload = {\r\n  code: string;\r\n  message: string;\r\n  context?: Record<string, unknown>;\r\n  hint?: string;\r\n  docsUrl?: string;\r\n  severity?: \"error\" | \"warn\";\r\n  cause?: unknown;\r\n};\r\n\r\nexport function raiseError(message: string): never;\r\nexport function raiseError(payload: StructiveErrorPayload): never;\r\nexport function raiseError(messageOrPayload: string | StructiveErrorPayload): never {\r\n  if (typeof messageOrPayload === \"string\") {\r\n    throw new Error(messageOrPayload);\r\n  }\r\n  const { message, code, context, hint, docsUrl, severity, cause } = messageOrPayload;\r\n  const err = new Error(message);\r\n  // 追加情報はプロパティとして付与（メッセージは既存互換のまま）\r\n  (err as any).code = code;\r\n  if (context) (err as any).context = context;\r\n  if (hint) (err as any).hint = hint;\r\n  if (docsUrl) (err as any).docsUrl = docsUrl;\r\n  if (severity) (err as any).severity = severity;\r\n  if (cause) (err as any).cause = cause;\r\n  throw err;\r\n}\r\n","/**\r\n * errorMessages.ts\r\n *\r\n * フィルタ関数などで利用するエラーメッセージ生成ユーティリティです。\r\n *\r\n * 主な役割:\r\n * - フィルタのオプションや値の型チェックで条件を満たさない場合に、分かりやすいエラーメッセージを投げる\r\n * - 関数名を引数に取り、どのフィルタでエラーが発生したかを明示\r\n *\r\n * 設計ポイント:\r\n * - optionsRequired: オプションが必須なフィルタで未指定時にエラー\r\n * - optionMustBeNumber: オプション値が数値でない場合にエラー\r\n * - valueMustBeNumber: 値が数値でない場合にエラー\r\n * - valueMustBeBoolean: 値がbooleanでない場合にエラー\r\n * - valueMustBeDate: 値がDateでない場合にエラー\r\n */\r\nimport { raiseError } from \"../utils\";\r\n\r\nexport function optionsRequired(fnName:string): never {\r\n  raiseError({\r\n    code: \"FLT-202\",\r\n    message: `${fnName} requires at least one option`,\r\n    context: { fnName },\r\n    docsUrl: \"./docs/error-codes.md#flt\",\r\n  });\r\n}\r\n\r\nexport function optionMustBeNumber(fnName:string): never {\r\n  raiseError({\r\n    code: \"FLT-202\",\r\n    message: `${fnName} requires a number as option`,\r\n    context: { fnName },\r\n    docsUrl: \"./docs/error-codes.md#flt\",\r\n  });\r\n}\r\n\r\nexport function valueMustBeNumber(fnName:string): never {\r\n  raiseError({\r\n    code: \"FLT-202\",\r\n    message: `${fnName} requires a number value`,\r\n    context: { fnName },\r\n    docsUrl: \"./docs/error-codes.md#flt\",\r\n  });\r\n}\r\n\r\nexport function valueMustBeBoolean(fnName:string): never {\r\n  raiseError({\r\n    code: \"FLT-202\",\r\n    message: `${fnName} requires a boolean value`,\r\n    context: { fnName },\r\n    docsUrl: \"./docs/error-codes.md#flt\",\r\n  });\r\n}\r\n\r\nexport function valueMustBeDate(fnName:string): never {\r\n  raiseError({\r\n    code: \"FLT-202\",\r\n    message: `${fnName} requires a date value`,\r\n    context: { fnName },\r\n    docsUrl: \"./docs/error-codes.md#flt\",\r\n  });\r\n}","/**\r\n * builtinFilters.ts\r\n *\r\n * Structiveで利用可能な組み込みフィルタ関数群の実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - 数値・文字列・日付・真偽値などの変換・比較・整形・判定用フィルタを提供\r\n * - フィルタ名ごとにオプション付きの関数を定義し、バインディング時に柔軟に利用可能\r\n * - input/output両方のフィルタとして共通利用できる設計\r\n *\r\n * 設計ポイント:\r\n * - eq, ne, lt, gt, inc, fix, locale, uc, lc, cap, trim, slice, pad, int, float, round, date, time, ymd, falsy, truthy, defaults, boolean, number, string, null など多彩なフィルタを網羅\r\n * - オプション値の型チェックやエラーハンドリングも充実\r\n * - FilterWithOptions型でフィルタ関数群を一元管理し、拡張も容易\r\n * - builtinFilterFnでフィルタ名・オプションからフィルタ関数を動的に取得可能\r\n */\r\nimport { getGlobalConfig } from \"../WebComponents/getGlobalConfig.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { optionMustBeNumber, optionsRequired, valueMustBeBoolean, valueMustBeDate, valueMustBeNumber } from \"./errorMessages.js\";\r\nimport { FilterWithOptions } from \"./types\";\r\n\r\nconst config = getGlobalConfig();\r\n\r\nconst eq = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('eq');\r\n  return (value: any) => {\r\n    // 型を揃えて比較\r\n    if (typeof value === 'number') {\r\n      const optValue = Number(opt);\r\n      if (isNaN(optValue)) optionMustBeNumber('eq');\r\n      return value === optValue;\r\n    }\r\n    if (typeof value === 'string') {\r\n      return value === opt;\r\n    }\r\n    // その他は厳密等価\r\n    return value === opt;\r\n  }\r\n}\r\n\r\nconst ne = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ne');\r\n  return (value: any) => {\r\n    // 型を揃えて比較\r\n    if (typeof value === 'number') {\r\n      const optValue = Number(opt);\r\n      if (isNaN(optValue)) optionMustBeNumber('eq');\r\n      return value !== optValue;\r\n    }\r\n    if (typeof value === 'string') {\r\n      return value !== opt;\r\n    }\r\n    // その他は厳密等価\r\n    return value !== opt;\r\n  }\r\n}\r\n\r\nconst not = (options?:string[]) => {\r\n  return (value: any) => {\r\n    if (typeof value !== 'boolean') valueMustBeBoolean('not');\r\n    return !value;\r\n  }\r\n}\r\n\r\nconst lt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('lt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('lt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('lt');\r\n    return value < optValue;\r\n  }\r\n}\r\n\r\nconst le = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('le');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('le');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('le');\r\n    return value <= optValue;\r\n  }\r\n}\r\n\r\nconst gt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('gt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('gt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('gt');\r\n    return value > optValue;\r\n  }\r\n}\r\n\r\nconst ge = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ge');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ge');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ge');\r\n    return value >= optValue;\r\n  }\r\n}\r\n\r\nconst inc = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('inc');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('inc');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('inc');\r\n    return value + optValue;\r\n  }\r\n}\r\n\r\nconst dec = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('dec');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('dec');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('dec');\r\n    return value - optValue;\r\n  }\r\n}\r\n\r\nconst mul = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('mul');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('mul');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('mul');\r\n    return value * optValue;\r\n  }\r\n}\r\n\r\nconst div = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('div');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value / optValue;\r\n  }\r\n}\r\n\r\nconst fix = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value.toFixed(optValue);\r\n  }\r\n}\r\n\r\nconst locale = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('locale');\r\n    return value.toLocaleString(opt);\r\n  }\r\n}\r\n\r\nconst uc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toUpperCase();\r\n  }\r\n}\r\n\r\nconst lc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toLowerCase();\r\n  }\r\n}\r\n\r\nconst cap = (options?:string[]) => {\r\n  return (value: any) => {\r\n    const v = value.toString();\r\n    if (v.length === 0) return v;\r\n    if (v.length === 1) return v.toUpperCase();\r\n    return v.charAt(0).toUpperCase() + v.slice(1);\r\n  }\r\n}\r\n\r\nconst trim = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().trim();\r\n  }\r\n}\r\n\r\nconst slice = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('slice');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('slice');\r\n  return (value: any) => {\r\n    return value.toString().slice(optValue);\r\n  }\r\n}\r\n\r\nconst substr = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('substr');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('substr');\r\n  const opt2 = options?.[1] ?? optionsRequired('substr');\r\n  const opt2Value = Number(opt2);\r\n  if (isNaN(opt2Value)) optionMustBeNumber('substr');\r\n  return (value: any) => {\r\n    return value.toString().substr(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst pad = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('pad');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('pad');\r\n  const opt2 = options?.[1] ?? '0';\r\n  const opt2Value = opt2;\r\n  return (value: any) => {\r\n    return value.toString().padStart(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst rep = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('rep');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('rep');\r\n  return (value: any) => {\r\n    return value.toString().repeat(optValue);\r\n  }\r\n}\r\n\r\nconst rev = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().split('').reverse().join('');\r\n  }\r\n}\r\n\r\nconst int = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseInt(value, 10);\r\n  }\r\n}\r\n\r\nconst float = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseFloat(value);\r\n  }\r\n}\r\n\r\nconst round = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('round');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('round');\r\n    return Math.round(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst floor = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('floor');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('floor');\r\n    return Math.floor(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst ceil = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('ceil');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ceil');\r\n    return Math.ceil(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst percent = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('percent');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('percent');\r\n    return value.toFixed(optValue) + '%';\r\n  }\r\n}\r\n\r\nconst date = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date))  valueMustBeDate('date');\r\n    return value.toLocaleDateString(opt);\r\n  }\r\n}\r\n\r\nconst time = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('time');\r\n    return value.toLocaleTimeString(opt);\r\n  }\r\n}\r\n\r\nconst datetime = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('datetime');\r\n    return value.toLocaleString(opt);\r\n  }\r\n}\r\n\r\nconst ymd = (options?:string[]) => {\r\n  const opt = options?.[0] ?? '-';\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('ymd');\r\n    const year = value.getFullYear().toString();\r\n    const month = (value.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = value.getDate().toString().padStart(2, '0');\r\n    return `${year}${opt}${month}${opt}${day}`;\r\n  }\r\n}\r\n\r\nconst falsy = (options?:string[]) => {\r\n  return (value: any) => value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value);\r\n}\r\n\r\nconst truthy = (options?:string[]) => {\r\n  return (value: any) =>value !== false && value !== null && value !== undefined && value !== 0 && value !== '' && !Number.isNaN(value);\r\n}\r\n\r\nconst defaults = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('defaults');\r\n  return (value: any) => {\r\n    if (value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value)) return opt;\r\n    return value;\r\n  }\r\n}\r\n\r\nconst boolean = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Boolean(value);\r\n  }\r\n}\r\n\r\nconst number = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Number(value);\r\n  }\r\n}\r\n\r\nconst string = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return String(value);\r\n  }\r\n}\r\n\r\nconst _null = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return (value === \"\") ? null : value;\r\n  } \r\n}\r\n\r\nconst builtinFilters: FilterWithOptions = {\r\n  \"eq\": eq,\r\n  \"ne\": ne,\r\n  \"not\": not,\r\n\r\n  \"lt\": lt,\r\n  \"le\": le,\r\n  \"gt\": gt,\r\n  \"ge\": ge,\r\n\r\n  \"inc\": inc,\r\n  \"dec\": dec,\r\n  \"mul\": mul,\r\n  \"div\": div,\r\n\r\n  \"fix\": fix,\r\n  \"locale\": locale,\r\n  \"uc\": uc,\r\n  \"lc\": lc,\r\n  \"cap\": cap,\r\n  \"trim\": trim,\r\n  \"slice\": slice,\r\n  \"substr\": substr,\r\n  \"pad\": pad,\r\n  \"rep\": rep,\r\n  \"rev\": rev,\r\n\r\n  \"int\": int,\r\n  \"float\": float,\r\n  \"round\": round,\r\n  \"floor\": floor,\r\n  \"ceil\": ceil,\r\n  \"percent\": percent,\r\n\r\n  \"date\": date,\r\n  \"time\": time,\r\n  \"datetime\": datetime,\r\n  \"ymd\": ymd,\r\n\r\n  \"falsy\": falsy,\r\n  \"truthy\": truthy,\r\n  \"defaults\": defaults,\r\n\r\n  \"boolean\": boolean,\r\n  \"number\": number,\r\n  \"string\": string,\r\n  \"null\": _null,\r\n};\r\n\r\nexport const outputBuiltinFilters = builtinFilters;\r\nexport const inputBuiltinFilters = builtinFilters;\r\n\r\nexport const builtinFilterFn = (name:string, options: string[]) => (filters: FilterWithOptions) => {\r\n  const filter = filters[name];\r\n  if (!filter) {\r\n    raiseError({\r\n      code: \"FLT-201\",\r\n      message: `Filter not found: ${name}`,\r\n      context: { where: 'builtinFilterFn', name },\r\n      docsUrl: \"./docs/error-codes.md#flt\",\r\n    });\r\n  }\r\n  return filter(options);\r\n}\r\n\r\n","\r\nlet id = 0;\r\n\r\nexport function generateId(): number {\r\n  return ++id;\r\n}","/**\r\n * registerStateClass.ts\r\n *\r\n * StateClassインスタンスをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - stateClassById: IDをキーにStateClassインスタンスを管理するレコード\r\n * - registerStateClass: 指定IDでStateClassインスタンスを登録\r\n * - getStateClassById: 指定IDのStateClassインスタンスを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - グローバルにStateClassインスタンスを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IStructiveState } from \"./types\";\r\n\r\nconst stateClassById: Record<number,IStructiveState> = {};\r\n\r\nexport function registerStateClass(id: number, stateClass: IStructiveState) {\r\n  stateClassById[id] = stateClass;\r\n}\r\n\r\nexport function getStateClassById(id: number): IStructiveState {\r\n  return stateClassById[id] ?? raiseError({\r\n    code: \"STATE-101\",\r\n    message: `StateClass not found: ${id}`,\r\n    context: { where: 'registerStateClass.getStateClassById', stateClassId: id },\r\n    docsUrl: \"./docs/error-codes.md#state\",\r\n  });\r\n}\r\n","/**\r\n * registerStyleSheet.ts\r\n *\r\n * CSSStyleSheetインスタンスをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - styleSheetById: IDをキーにCSSStyleSheetインスタンスを管理するレコード\r\n * - registerStyleSheet: 指定IDでCSSStyleSheetインスタンスを登録\r\n * - getStyleSheetById: 指定IDのCSSStyleSheetインスタンスを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - グローバルにCSSStyleSheetインスタンスを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nconst styleSheetById: Record<number,CSSStyleSheet> = {};\r\n\r\nexport function registerStyleSheet(id: number, css: CSSStyleSheet) {\r\n  styleSheetById[id] = css;\r\n}\r\n\r\nexport function getStyleSheetById(id: number): CSSStyleSheet {\r\n  return styleSheetById[id] ?? raiseError({\r\n    code: \"CSS-001\",\r\n    message: `Stylesheet not found: ${id}`,\r\n    context: { where: 'registerStyleSheet.getStyleSheetById', styleSheetId: id },\r\n    docsUrl: \"./docs/error-codes.md#css\",\r\n  });\r\n}","/**\r\n * regsiterCss.ts\r\n *\r\n * CSS文字列をCSSStyleSheetとして生成し、IDで登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - CSS文字列からCSSStyleSheetインスタンスを生成\r\n * - registerStyleSheetを利用して、指定IDでCSSStyleSheetを登録\r\n *\r\n * 設計ポイント:\r\n * - styleSheet.replaceSyncで同期的にCSSを適用\r\n * - グローバルなスタイル管理や動的スタイル適用に利用可能\r\n */\r\nimport { registerStyleSheet } from \"./registerStyleSheet.js\";\r\n\r\nexport function registerCss(id: number, css: string) {\r\n  const styleSheet = new CSSStyleSheet();\r\n  styleSheet.replaceSync(css);\r\n  registerStyleSheet(id, styleSheet);\r\n}","import { NodePath } from \"./types\";\r\n\r\n/**\r\n * ルートノードとノードパス（インデックス配列）から、該当するノードを辿って取得するユーティリティ関数。\r\n *\r\n * - NodePathは各階層でのchildNodesのインデックスを表す配列\r\n * - ルートから順にchildNodes[index]を辿り、該当ノードを返す\r\n * - パスが不正な場合やノードが存在しない場合はnullを返す\r\n *\r\n * @param root  探索の起点となるルートノード\r\n * @param path  各階層のインデックス配列（NodePath）\r\n * @returns     パスで指定されたノード、またはnull\r\n */\r\nexport function resolveNodeFromPath(root: Node, path: NodePath): Node | null {\r\n  let node = root;\r\n  if (path.length === 0) return node;\r\n  // path.reduce()だと途中でnullになる可能性があるので、\r\n  for(let i = 0; i < path.length; i++) {\r\n    node = node?.childNodes[path[i]] ?? null;\r\n    if (node === null) break;\r\n  }\r\n  return node;\r\n}","import { FilterFn, Filters, FilterWithOptions } from \"../Filter/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\n\r\n/**\r\n * フィルターテキスト（nameとoptionsを持つ）から、実際のフィルター関数（FilterFn）を生成する。\r\n * \r\n * - textToFilter: フィルターテキストから対応するフィルター関数を取得し、オプションを適用して返す。\r\n * - createFilters: フィルターテキスト配列からフィルター関数配列を生成し、同じ入力にはキャッシュを利用する。\r\n */\r\nfunction textToFilter(filters:FilterWithOptions, text: IFilterText): FilterFn {\r\n  const filter = filters[text.name];\r\n  if (!filter) {\r\n    raiseError({\r\n      code: 'FLT-201',\r\n      message: `Filter not found: ${text.name}`,\r\n      context: { where: 'createFilters.textToFilter', name: text.name },\r\n      docsUrl: './docs/error-codes.md#flt',\r\n    });\r\n  }\r\n  return filter(text.options);\r\n}\r\n\r\nconst cache : Map<IFilterText[], Filters> = new Map();\r\n\r\n/**\r\n * フィルターテキスト配列（texts）からフィルター関数配列（Filters）を生成する。\r\n * すでに同じtextsがキャッシュされていればそれを返す。\r\n * \r\n * @param filters フィルター名→関数の辞書\r\n * @param texts   フィルターテキスト配列\r\n * @returns       フィルター関数配列\r\n */\r\nexport function createFilters(filters:FilterWithOptions, texts: IFilterText[]): Filters {\r\n  let result = cache.get(texts);\r\n  if (typeof result === \"undefined\") {\r\n    result = [];\r\n    for(let i = 0; i < texts.length; i++) {\r\n      result.push(textToFilter(filters, texts[i]));\r\n    }\r\n    cache.set(texts, result);\r\n  }\r\n  return result;\r\n}\r\n","import { Filters } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IReadonlyStateProxy } from \"../../StateClass/types\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { IRenderer } from \"../../Updater/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { IBindingNode } from \"./types\";\r\n\r\n/**\r\n * BindingNodeクラスは、1つのバインディング対象ノード（ElementやTextなど）に対する\r\n * バインディング処理の基底クラスです。\r\n *\r\n * 主な役割:\r\n * - ノード・プロパティ名・フィルタ・デコレータ・バインディング情報の保持\r\n * - バインディング値の更新（update）、値の割り当て（assignValue）のインターフェース提供\r\n * - 複数バインド内容（bindContents）の管理\r\n * - サブクラスでassignValueやupdateElementsを実装し、各種ノード・プロパティごとのバインディング処理を拡張\r\n *\r\n * 設計ポイント:\r\n * - assignValue, updateElementsは未実装（サブクラスでオーバーライド必須）\r\n * - isSelectElement, value, filteredValue, isForなどはサブクラスで用途に応じて拡張\r\n * - フィルタやデコレータ、バインド内容の管理も柔軟に対応\r\n */\r\nexport class BindingNode implements IBindingNode {\r\n  #binding: IBinding;\r\n  #node: Node;\r\n  #name: string;\r\n  #filters: Filters;\r\n  #decorates: string[];\r\n  #bindContents: IBindContent[] = [];\r\n  get node(): Node {\r\n    return this.#node;\r\n  }\r\n  get name(): string {\r\n    return this.#name;\r\n  }\r\n  get subName(): string {\r\n    return this.#name;\r\n  }\r\n  get binding(): IBinding {\r\n    return this.#binding;\r\n  }\r\n  get decorates(): string[] {\r\n    return this.#decorates;\r\n  }\r\n  get filters(): Filters {\r\n    return this.#filters;\r\n  }\r\n  get bindContents(): IBindContent[] {\r\n    return this.#bindContents;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#node = node;\r\n    this.#name = name;\r\n    this.#filters = filters;\r\n    this.#decorates = decorates;\r\n  }\r\n  init():void {\r\n    // サブクラスで初期化処理を実装可能\r\n  }\r\n  assignValue(value: any): void {\r\n    raiseError({\r\n      code: 'BIND-301',\r\n      message: 'Not implemented',\r\n      context: { where: 'BindingNode.assignValue', name: this.name },\r\n      docsUrl: '/docs/error-codes.md#bind',\r\n    });\r\n  }\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    raiseError({\r\n      code: 'BIND-301',\r\n      message: 'Not implemented',\r\n      context: { where: 'BindingNode.updateElements', name: this.name },\r\n      docsUrl: '/docs/error-codes.md#bind',\r\n    });\r\n  }\r\n  notifyRedraw(refs: IStatePropertyRef[]): void {\r\n    // サブクラスで親子関係を考慮してバインディングの更新を通知する実装が可能\r\n  }\r\n  applyChange(renderer: IRenderer): void {\r\n    if (renderer.updatedBindings.has(this.binding)) return;\r\n    const filteredValue = this.binding.bindingState.getFilteredValue(renderer.readonlyState, renderer.readonlyHandler);\r\n    this.assignValue(filteredValue);\r\n    renderer.updatedBindings.add(this.binding);\r\n  }\r\n\r\n  get isSelectElement(): boolean {\r\n    return this.node instanceof HTMLSelectElement;\r\n  }\r\n  get value():any {\r\n    return null;\r\n  }\r\n  get filteredValue():any {\r\n    return null;\r\n  }\r\n  get isFor(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isBlock(): boolean {\r\n    return false;\r\n  }\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeAttributeクラスは、属性バインディング（例: attr.src, attr.alt など）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - ノード属性名（subName）を抽出し、値を属性としてElementにセット\r\n * - null/undefined/NaNの場合は空文字列に変換してセット\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameから属性名（subName）を抽出（例: \"attr.src\" → \"src\"）\r\n * - assignValueで属性値を常に文字列として設定\r\n * - createBindingNodeAttributeファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeAttribute extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as Element;\r\n    element.setAttribute(this.subName, value.toString());\r\n  }\r\n}\r\n\r\n/**\r\n * 属性バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeAttributeインスタンスを生成\r\n */\r\nexport const createBindingNodeAttribute: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeAttribute(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * チェックボックス（input[type=\"checkbox\"]）のバインディング。\r\n *\r\n * - 値（配列）に input.value が含まれるかで checked を制御\r\n *\r\n * Throws:\r\n * - BIND-201 Value is not array: 配列以外が渡された\r\n */\r\nclass BindingNodeCheckbox extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError({\r\n        code: 'BIND-201',\r\n        message: 'Value is not array',\r\n        context: { where: 'BindingNodeCheckbox.update', receivedType: typeof value },\r\n        docsUrl: '/docs/error-codes.md#bind',\r\n        severity: 'error',\r\n      });\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.map(_val => _val.toString()).includes(element.value);\r\n  }\r\n}\r\n\r\n/**\r\n * チェックボックス用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeCheckboxインスタンスを生成\r\n */\r\nexport const createBindingNodeCheckbox: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeCheckbox(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * class 属性（classList）バインディング。\r\n *\r\n * - 値（配列）を空白区切りで結合して className へ反映\r\n *\r\n * Throws:\r\n * - BIND-201 Value is not array: 配列以外が渡された\r\n */\r\nclass BindingNodeClassList extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError({\r\n        code: 'BIND-201',\r\n        message: 'Value is not array',\r\n        context: { where: 'BindingNodeClassList.update', receivedType: typeof value },\r\n        docsUrl: '/docs/error-codes.md#bind',\r\n        severity: 'error',\r\n      });\r\n    }\r\n    const element = this.node as Element;\r\n    element.className = value.join(\" \");\r\n  }\r\n}\r\n\r\n/**\r\n * classList用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeClassListインスタンスを生成\r\n */\r\nexport const createBindingNodeClassList: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassList(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * class の個別クラス名（例: class.active）に対するバインディング。\r\n *\r\n * - name から subName を抽出し、boolean 値で add/remove を切り替え\r\n *\r\n * Throws:\r\n * - BIND-201 Value is not boolean: boolean 以外が渡された\r\n */\r\nclass BindingNodeClassName extends BindingNode {\r\n  #subName: string;\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError({\r\n        code: 'BIND-201',\r\n        message: 'Value is not boolean',\r\n        context: { where: 'BindingNodeClassName.update', receivedType: typeof value },\r\n        docsUrl: '/docs/error-codes.md#bind',\r\n        severity: 'error',\r\n      });\r\n    }\r\n    const element = this.node as Element;\r\n    if (value) {\r\n      element.classList.add(this.subName);\r\n    } else {\r\n      element.classList.remove(this.subName);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * class名バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeClassNameインスタンスを生成\r\n */\r\nexport const createBindingNodeClassName: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassName(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { IListIndex } from \"./types\";\r\n\r\n\r\nlet version = 0;\r\nlet id = 0;\r\nclass ListIndex implements IListIndex {\r\n  #parentListIndex: IListIndex | null = null;\r\n  #pos: number = 0;\r\n  #index: number = 0;\r\n  #version: number;\r\n  #id = ++id;\r\n  #sid = this.#id.toString();\r\n  constructor(parentListIndex: IListIndex | null, index: number) {\r\n    this.#parentListIndex = parentListIndex;\r\n    this.#pos = parentListIndex ? parentListIndex.position + 1 : 0;\r\n    this.#index = index;\r\n    this.#version = version;\r\n  }\r\n\r\n  get parentListIndex() {\r\n    return this.#parentListIndex;\r\n  }\r\n\r\n  get id() {\r\n    return this.#id;\r\n  }\r\n\r\n  get sid() {\r\n    return this.#sid;\r\n  }\r\n\r\n  get position() {\r\n    return this.#pos;\r\n  }\r\n\r\n  get length() {\r\n    return this.#pos + 1;\r\n  }\r\n\r\n  get index() {\r\n    return this.#index;\r\n  }\r\n  set index(value: number) {\r\n    this.#index = value;\r\n    this.#version = ++version;\r\n    this.indexes[this.#pos] = value;\r\n  }\r\n\r\n  get version(): number {\r\n    return this.#version;\r\n  }\r\n\r\n  get dirty(): boolean {\r\n    if (this.#parentListIndex === null) {\r\n      return false;\r\n    } else {\r\n      return this.#parentListIndex.dirty || this.#parentListIndex.version > this.#version;\r\n    }\r\n  }\r\n\r\n  #indexes: number[] | undefined;\r\n  get indexes(): number[] {\r\n    if (this.#parentListIndex === null) {\r\n      if (typeof this.#indexes === \"undefined\") {\r\n        this.#indexes = [this.#index];\r\n      }\r\n    } else {\r\n      if (typeof this.#indexes === \"undefined\" || this.dirty) {\r\n        this.#indexes = [...this.#parentListIndex.indexes, this.#index];\r\n        this.#version = version;\r\n      }\r\n    }\r\n    return this.#indexes;\r\n  }\r\n\r\n  #listIndexes: WeakRef<IListIndex>[] | undefined;\r\n  get listIndexes(): WeakRef<IListIndex>[] {\r\n    if (this.#parentListIndex === null) {\r\n      if (typeof this.#listIndexes === \"undefined\") {\r\n        this.#listIndexes = [new WeakRef(this)];\r\n      }\r\n    } else {\r\n      if (typeof this.#listIndexes === \"undefined\") {\r\n        this.#listIndexes = [...this.#parentListIndex.listIndexes, new WeakRef(this)];\r\n      }\r\n    }\r\n    return this.#listIndexes;\r\n  }\r\n\r\n  get varName(): string {\r\n    return `${this.position + 1}`;\r\n  }\r\n\r\n  at(pos: number): IListIndex | null {\r\n    if (pos >= 0) {\r\n      return this.listIndexes[pos]?.deref() || null;\r\n    } else {\r\n      return this.listIndexes[this.listIndexes.length + pos]?.deref() || null;\r\n    }\r\n  }\r\n}\r\n\r\nexport function createListIndex(parentListIndex: IListIndex | null, index: number): IListIndex {\r\n  return new ListIndex(parentListIndex, index);\r\n}\r\n","import { createListIndex } from \"../ListIndex/ListIndex\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IListDiff } from \"./types\";\r\n\r\n/**\r\n * 旧配列/新配列と旧インデックス配列から、追加・削除・位置変更・上書きの差分を計算します。\r\n *\r\n * 仕様ノート:\r\n * - adds: 新規に現れた要素のインデックス（新規 ListIndex を割り当て）\r\n * - removes: 旧配列で使用され、新配列で使われなくなったインデックス\r\n * - changeIndexes: 値を再利用しつつ位置が変わったインデックス（DOMの並べ替え対象）\r\n * - overwrites: 同じ位置に別の値が入った場合（再描画対象）\r\n *\r\n * 最適化ノート:\r\n * - 双方空や参照同一は早期return\r\n * - 片側空は全追加/全削除として扱う\r\n */\r\nexport function calcListDiff(\r\n  parentListIndex: IListIndex | null,\r\n  oldListValue: any[] | undefined | null,\r\n  newListValue: any[] | undefined | null,\r\n  oldIndexes: IListIndex[] | undefined | null,\r\n): IListDiff {\r\n  const _newListValue = newListValue || [];\r\n  const _oldListValue = oldListValue || [];\r\n  const _oldIndexes = oldIndexes || [];\r\n  \r\n  // 参照の同一性、または両方とも空の場合の早期リターン\r\n  if (_newListValue === _oldListValue || (_newListValue.length === 0 && _oldListValue.length === 0)) {\r\n    return {\r\n      oldListValue,\r\n      newListValue,\r\n      oldIndexes: _oldIndexes,\r\n      newIndexes: _oldIndexes,\r\n      same: true,\r\n    };\r\n  }\r\n  if (_newListValue.length === 0) {\r\n    return {\r\n      oldListValue,\r\n      newListValue,\r\n      oldIndexes: _oldIndexes,\r\n      newIndexes: [],\r\n      removes: new Set(_oldIndexes),\r\n      same: false,\r\n    };\r\n  } else if (_oldListValue.length === 0) {\r\n    const newIndexes = [];\r\n    for(let i = 0; i< _newListValue.length; i++) {\r\n      newIndexes.push(createListIndex(parentListIndex, i));\r\n    }\r\n    return {\r\n      oldListValue,\r\n      newListValue,\r\n      oldIndexes: _oldIndexes,\r\n      newIndexes,\r\n      adds: new Set(newIndexes),\r\n      same: false,\r\n    };\r\n  } else {\r\n    // インデックスベースのマップを使用して効率化\r\n    const indexByValue = new Map<any, number>();\r\n    for(let i = 0; i < _oldListValue.length; i++) {\r\n      // 重複値の場合は最後のインデックスが優先される（既存動作を維持）\r\n      indexByValue.set(_oldListValue[i], i);\r\n    }\r\n    \r\n    const adds = new Set<IListIndex>();\r\n    const removes = new Set<IListIndex>();\r\n    const changeIndexes = new Set<IListIndex>();\r\n    let newIndexes: IListIndex[] = [];\r\n    let usedOldIndexes = new Set<IListIndex>();\r\n    let maybeSame = _oldListValue.length === _newListValue.length;\r\n    \r\n    // 新しい配列を走査し、追加・再利用・位置変更を判定\r\n   \r\n    for(let i = 0; i < _newListValue.length; i++) {\r\n      const newValue = _newListValue[i];\r\n      if (maybeSame) {\r\n        if (newValue === _oldListValue[i]) {\r\n          continue;\r\n        }\r\n        newIndexes = _oldIndexes.slice(0, i);\r\n        usedOldIndexes = new Set(newIndexes);\r\n        maybeSame = false;\r\n      }\r\n      const oldIndex = indexByValue.get(newValue);\r\n      \r\n      if (oldIndex === undefined) {\r\n        // 新しい要素\r\n        const newListIndex = createListIndex(parentListIndex, i);\r\n        adds.add(newListIndex);\r\n        newIndexes.push(newListIndex);\r\n      } else {\r\n        // 既存要素の再利用\r\n        const existingListIndex = _oldIndexes[oldIndex];\r\n        if (existingListIndex.index !== i) {\r\n          existingListIndex.index = i;\r\n          changeIndexes.add(existingListIndex);\r\n        }\r\n        usedOldIndexes.add(existingListIndex);\r\n        newIndexes.push(existingListIndex);\r\n      }\r\n    }\r\n    if (maybeSame) {\r\n      // 参照同一だった場合\r\n      return {\r\n        oldListValue,\r\n        newListValue,\r\n        oldIndexes: _oldIndexes,\r\n        newIndexes: _oldIndexes,\r\n        same: true,\r\n      };\r\n    }\r\n    \r\n    // 使用されなかった古いインデックスを削除対象に追加\r\n    for(let i = 0; i < _oldIndexes.length; i++) {\r\n      const oldIndex = _oldIndexes[i];\r\n      if (!usedOldIndexes.has(oldIndex)) {\r\n        removes.add(oldIndex);\r\n      }\r\n    }\r\n    return {\r\n      oldListValue,\r\n      newListValue,\r\n      oldIndexes: _oldIndexes,\r\n      newIndexes,\r\n      adds,\r\n      removes,\r\n      changeIndexes,\r\n      same: false,\r\n    };\r\n  }\r\n}\r\n","export const DATA_BIND_ATTRIBUTE = \"data-bind\";\r\nexport const COMMENT_EMBED_MARK = \"@@:\"; // 埋め込み変数のマーク\r\nexport const COMMENT_TEMPLATE_MARK = \"@@|\"; // テンプレートのマーク\r\nexport const MAX_WILDCARD_DEPTH = 32; // ワイルドカードの最大深度\r\nexport const WILDCARD = \"*\"; // ワイルドカード\r\nexport const RESERVED_WORD_SET = new Set([\r\n  \"constructor\", \"prototype\", \"__proto__\", \"toString\",\r\n  \"valueOf\", \"hasOwnProperty\", \"isPrototypeOf\",\r\n  \"watch\", \"unwatch\", \"eval\", \"arguments\",\r\n  \"let\", \"var\", \"const\", \"class\", \"function\",\r\n  \"null\", \"true\", \"false\", \"new\", \"return\",\r\n]);\r\n\r\n","/**\r\n * getStructuredPathInfo.ts\r\n *\r\n * Stateプロパティのパス文字列から、詳細な構造化パス情報（IStructuredPathInfo）を生成・キャッシュするユーティリティです。\r\n *\r\n * 主な役割:\r\n * - パス文字列を分割し、各セグメントやワイルドカード（*）の位置・親子関係などを解析\r\n * - cumulativePaths/wildcardPaths/parentPathなど、パス階層やワイルドカード階層の情報を構造化\r\n * - 解析結果をIStructuredPathInfoとしてキャッシュし、再利用性とパフォーマンスを両立\r\n * - reservedWords（予約語）チェックで安全性を担保\r\n *\r\n * 設計ポイント:\r\n * - パスごとにキャッシュし、同じパスへの複数回アクセスでも高速に取得可能\r\n * - ワイルドカードや親子関係、階層構造を厳密に解析し、バインディングや多重ループに最適化\r\n * - childrenプロパティでパス階層のツリー構造も構築\r\n * - 予約語や危険なパスはraiseErrorで例外を発生\r\n */\r\nimport { RESERVED_WORD_SET } from '../constants.js';\r\nimport { raiseError } from '../utils.js';\r\nimport { IStructuredPathInfo } from './types';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IStructuredPathInfo } = {};\r\n\r\n/**\r\n * パターン情報を取得します\r\n * @param pattern パターン\r\n * @returns {IPatternInfo} パターン情報\r\n */\r\nclass StructuredPathInfo implements IStructuredPathInfo {\r\n  static id : number = 0;\r\n  id = ++StructuredPathInfo.id;\r\n  sid = this.id.toString();\r\n  pattern;\r\n  pathSegments;\r\n  lastSegment;\r\n  cumulativePaths;\r\n  cumulativePathSet;\r\n  cumulativeInfos;\r\n  cumulativeInfoSet;\r\n  wildcardPaths;\r\n  wildcardPathSet;\r\n  wildcardInfos;\r\n  indexByWildcardPath;\r\n  wildcardInfoSet;\r\n  wildcardParentPaths;\r\n  wildcardParentPathSet;\r\n  wildcardParentInfos;\r\n  wildcardParentInfoSet;\r\n  lastWildcardPath;\r\n  lastWildcardInfo;\r\n  parentPath;\r\n  parentInfo;\r\n  wildcardCount;\r\n  children = {};\r\n\r\n  constructor(pattern: string) {\r\n    const getPattern = (_pattern: string): IStructuredPathInfo => {\r\n      return (pattern === _pattern) ? this : getStructuredPathInfo(_pattern);\r\n    };\r\n    const pathSegments = pattern.split(\".\");\r\n    const cumulativePaths = [];\r\n    const cumulativeInfos: IStructuredPathInfo[] = [];\r\n    const wildcardPaths = [];\r\n    const indexByWildcardPath: Record<string, number> = {};\r\n    const wildcardInfos = [];\r\n    const wildcardParentPaths = [];\r\n    const wildcardParentInfos = [];\r\n    let currentPatternPath = \"\", prevPatternPath = \"\";\r\n    let wildcardCount = 0;\r\n    for(let i = 0; i < pathSegments.length; i++) {\r\n      currentPatternPath += pathSegments[i];\r\n      if (pathSegments[i] === \"*\") {\r\n        wildcardPaths.push(currentPatternPath);\r\n        indexByWildcardPath[currentPatternPath] = wildcardCount;\r\n        wildcardInfos.push(getPattern(currentPatternPath));\r\n        wildcardParentPaths.push(prevPatternPath);\r\n        wildcardParentInfos.push(getPattern(prevPatternPath));\r\n        wildcardCount++;\r\n      }\r\n      cumulativePaths.push(currentPatternPath);\r\n      cumulativeInfos.push(getPattern(currentPatternPath));\r\n      prevPatternPath = currentPatternPath;\r\n      currentPatternPath += \".\";\r\n    }\r\n    const lastWildcardPath = wildcardPaths.length > 0 ? wildcardPaths[wildcardPaths.length - 1] : null;\r\n    const parentPath = cumulativePaths.length > 1 ? cumulativePaths[cumulativePaths.length - 2] : null;\r\n    this.pattern = pattern;\r\n    this.pathSegments = pathSegments;\r\n    this.lastSegment = pathSegments[pathSegments.length - 1];\r\n    this.cumulativePaths = cumulativePaths;\r\n    this.cumulativePathSet = new Set(cumulativePaths);\r\n    this.cumulativeInfos = cumulativeInfos;\r\n    this.cumulativeInfoSet = new Set(cumulativeInfos);\r\n    this.wildcardPaths = wildcardPaths;\r\n    this.wildcardPathSet = new Set(wildcardPaths);\r\n    this.indexByWildcardPath = indexByWildcardPath;\r\n    this.wildcardInfos = wildcardInfos;\r\n    this.wildcardInfoSet = new Set(wildcardInfos);\r\n    this.wildcardParentPaths = wildcardParentPaths;\r\n    this.wildcardParentPathSet = new Set(wildcardParentPaths);\r\n    this.wildcardParentInfos = wildcardParentInfos;\r\n    this.wildcardParentInfoSet = new Set(wildcardParentInfos);\r\n    this.lastWildcardPath = lastWildcardPath;\r\n    this.lastWildcardInfo = lastWildcardPath ? getPattern(lastWildcardPath) : null;\r\n    this.parentPath = parentPath;\r\n    this.parentInfo = parentPath ? getPattern(parentPath) : null;\r\n    this.wildcardCount = wildcardCount;\r\n    if (this.parentInfo) {\r\n      this.parentInfo.children[this.lastSegment] = this;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function getStructuredPathInfo(structuredPath: string): IStructuredPathInfo {\r\n  if (RESERVED_WORD_SET.has(structuredPath)) {\r\n    raiseError({\r\n      code: 'STATE-202',\r\n      message: `Pattern is reserved word: ${structuredPath}`,\r\n      context: { where: 'getStructuredPathInfo', structuredPath },\r\n      docsUrl: './docs/error-codes.md#state',\r\n    });\r\n  }\r\n  const info = _cache[structuredPath];\r\n  if (typeof info !== \"undefined\") {\r\n    return info;\r\n  }\r\n  return (_cache[structuredPath] = new StructuredPathInfo(structuredPath));\r\n}\r\n","import { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IPathNode } from \"./types\";\r\n\r\nclass NodePath implements IPathNode {\r\n  parentPath: string;\r\n  currentPath: string;\r\n  name: string;\r\n  childNodeByName: Map<string, IPathNode>;\r\n  level: number;\r\n\r\n  constructor(parentPath: string, name: string, level: number) {\r\n    this.parentPath = parentPath;\r\n    this.currentPath = parentPath ? parentPath + \".\" + name : name;\r\n    this.name = name;\r\n    this.level = level;\r\n    this.childNodeByName = new Map<string, IPathNode>();\r\n  }\r\n\r\n  find(segments: string[], segIndex: number = 0): IPathNode | null {\r\n    if (segIndex >= segments.length) {\r\n      return null;\r\n    }\r\n\r\n    const currentSegment = segments[segIndex];\r\n    const childNode = this.childNodeByName.get(currentSegment);\r\n\r\n    if (childNode) {\r\n      if (segIndex === segments.length - 1) {\r\n        return childNode;\r\n      }\r\n      return childNode.find(segments, segIndex + 1);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  appendChild(childName: string): IPathNode {\r\n    let childNode = this.childNodeByName.get(childName);\r\n    if (!childNode) {\r\n      const currentPath = this.parentPath ? this.parentPath + \".\" + this.name : this.name;\r\n      childNode = new NodePath(currentPath, childName, this.level + 1);\r\n      this.childNodeByName.set(childName, childNode);\r\n    }\r\n    return childNode;\r\n  }\r\n}\r\n\r\nexport function createRootNode(): IPathNode {\r\n  return new NodePath(\"\", \"\", 0);\r\n}\r\n\r\nconst cache = new Map<IPathNode, Map<string, IPathNode | null>>();\r\nexport function findPathNodeByPath(rootNode: IPathNode, path: string): IPathNode | null {\r\n  let nodeCache = cache.get(rootNode);\r\n  if (!nodeCache) {\r\n    nodeCache = new Map<string, IPathNode>();\r\n    cache.set(rootNode, nodeCache);\r\n  }\r\n  let cachedNode = nodeCache.get(path) ?? null;\r\n  if (cachedNode) {\r\n    return cachedNode;\r\n  }\r\n  const info = getStructuredPathInfo(path);\r\n  cachedNode = rootNode.find(info.pathSegments);\r\n  nodeCache.set(path, cachedNode);\r\n  return cachedNode;\r\n}\r\n\r\nexport function addPathNode(rootNode: IPathNode, path: string): IPathNode {\r\n  const info = getStructuredPathInfo(path);\r\n  if (info.parentPath === null) {\r\n    return rootNode.appendChild(path);\r\n  } else {\r\n    let parentNode = findPathNodeByPath(rootNode, info.parentPath);\r\n    if (parentNode === null) {\r\n      parentNode = addPathNode(rootNode, info.parentPath);\r\n    }\r\n    return parentNode.appendChild(info.lastSegment);\r\n  }\r\n}\r\n","\r\nconst symbolName = \"state\";\r\n\r\nexport const GetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.GetByRef`);\r\nexport const SetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.SetByRef`);\r\nexport const SetCacheableSymbol        : unique symbol = Symbol.for(`${symbolName}.SetCacheable`);\r\nexport const ConnectedCallbackSymbol   : unique symbol = Symbol.for(`${symbolName}.ConnectedCallback`);\r\nexport const DisconnectedCallbackSymbol: unique symbol = Symbol.for(`${symbolName}.DisconnectedCallback`);\r\n","/**\r\n * getResolvedPathInfo.ts\r\n *\r\n * Stateプロパティ名（パス文字列）から、ワイルドカードやインデックス情報を含む\r\n * 詳細なパス情報（IResolvedPathInfo）を解析・生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - プロパティ名を分解し、ワイルドカードやインデックスの有無・種別を判定\r\n * - context/all/partial/none のワイルドカード種別を自動判定\r\n * - パスごとにキャッシュし、再利用性とパフォーマンスを両立\r\n * - getStructuredPathInfoで構造化パス情報も取得\r\n *\r\n * 設計ポイント:\r\n * - \"constructor\"や\"toString\"などの予約語も扱えるよう、Mapではなくオブジェクトでキャッシュ\r\n * - ワイルドカード（*）や数値インデックスを柔軟に判定し、wildcardIndexesに格納\r\n * - context型は未確定インデックス、all型は全て確定インデックス、partial型は混在を示す\r\n * - ResolvedPathInfoクラスでパス解析・情報保持を一元化\r\n */\r\nimport { IResolvedPathInfo, WildcardType } from './types';\r\nimport { getStructuredPathInfo } from './getStructuredPathInfo.js';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: Map<string, IResolvedPathInfo> = new Map();\r\n\r\nclass ResolvedPathInfo implements IResolvedPathInfo {\r\n  static id : number = 0;\r\n  id = ++ResolvedPathInfo.id;\r\n  name;\r\n  elements;\r\n  paths;\r\n  wildcardCount;\r\n  wildcardType;\r\n  wildcardIndexes;\r\n  info;\r\n  constructor(name: string) {\r\n    const elements = name.split(\".\");\r\n    const tmpPatternElements = elements.slice();\r\n    const paths = [];\r\n    let incompleteCount = 0;\r\n    let completeCount = 0;\r\n    let lastPath = \"\";\r\n    let wildcardCount = 0;\r\n    let wildcardType: WildcardType = \"none\";\r\n    let wildcardIndexes: (number | null)[] = [];\r\n    for(let i = 0; i < elements.length; i++) {\r\n      const element = elements[i];\r\n      if (element === \"*\") {\r\n        tmpPatternElements[i] = \"*\";\r\n        wildcardIndexes.push(null);\r\n        incompleteCount++;\r\n        wildcardCount++;\r\n      } else {\r\n        const number = Number(element);\r\n        if (!Number.isNaN(number)) {\r\n          tmpPatternElements[i] = \"*\";\r\n          wildcardIndexes.push(number);\r\n          completeCount++;\r\n          wildcardCount++;\r\n        }\r\n      }\r\n      lastPath += element;\r\n      paths.push(lastPath);\r\n      lastPath += (i < elements.length - 1 ? \".\" : \"\");\r\n    }\r\n    const pattern = tmpPatternElements.join(\".\");\r\n    const info = getStructuredPathInfo(pattern);\r\n    if (incompleteCount > 0 || completeCount > 0) {\r\n      if (incompleteCount === wildcardCount) {\r\n        wildcardType = \"context\";\r\n      } else if (completeCount === wildcardCount) {\r\n        wildcardType = \"all\";\r\n      } else {\r\n        wildcardType = \"partial\";\r\n      }\r\n    }\r\n    this.name = name;\r\n    this.elements = elements;\r\n    this.paths = paths;\r\n    this.wildcardCount = wildcardCount;\r\n    this.wildcardType = wildcardType;\r\n    this.wildcardIndexes = wildcardIndexes;\r\n    this.info = info;\r\n  }\r\n}\r\n\r\nexport function getResolvedPathInfo(name:string):IResolvedPathInfo {\r\n  let nameInfo: IResolvedPathInfo | undefined;\r\n  return _cache.get(name) ?? (_cache.set(name, nameInfo = new ResolvedPathInfo(name)), nameInfo);\r\n}","/**\r\n * StatePropertyRef\r\n *\r\n * 目的:\r\n * - State の構造化パス情報(IStructuredPathInfo)と、任意のリストインデックス(IListIndex)から\r\n *   一意な参照オブジェクト(IStatePropertyRef)を生成・キャッシュする。\r\n * - 同一(info,listIndex)組み合わせに対しては同一インスタンスを返し、比較やMapキーとして安定運用できるようにする。\r\n *\r\n * 実装メモ:\r\n * - key は info.sid と listIndex.sid から合成（listIndex が null の場合は info.sid のみ）\r\n * - listIndex は WeakRef で保持し、GC で消えた場合は LIST-201 を送出\r\n * - キャッシュは listIndex 非 null の場合は WeakMap(listIndex) 配下に、null の場合は Map(info) に保持\r\n */\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IStatePropertyRef } from \"./types\";\r\n\r\nfunction createRefKey(\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n) {\r\n  return (listIndex == null) ? info.sid : (info.sid + \"#\" + listIndex.sid);\r\n}\r\n\r\nclass StatePropertyRef implements IStatePropertyRef {\r\n  info: IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null;\r\n  get listIndex(): IListIndex | null {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError({\r\n      code: \"LIST-201\",\r\n      message: \"listIndex is null\",\r\n      context: { sid: this.info.sid, key: this.key },\r\n      docsUrl: \"./docs/error-codes.md#list\",\r\n    });\r\n  }\r\n  key: string;\r\n  constructor(\r\n    info: IStructuredPathInfo,\r\n    listIndex: IListIndex | null,\r\n  ) {\r\n    this.info = info;\r\n    this.#listIndexRef = listIndex !== null ? new WeakRef(listIndex) : null;\r\n    this.key = createRefKey(info, listIndex);\r\n  }\r\n}\r\n\r\nconst refByInfoByListIndex = new WeakMap<IListIndex, Record<string, IStatePropertyRef>>();\r\nconst refByInfoByNull: Record<string, IStatePropertyRef> = {};\r\n\r\nexport function getStatePropertyRef(\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n): IStatePropertyRef {\r\n  let ref = null;\r\n  if (listIndex !== null) {\r\n    let refByInfo = refByInfoByListIndex.get(listIndex);\r\n    if (typeof refByInfo === \"undefined\") {\r\n      refByInfo = {};\r\n      refByInfoByListIndex.set(listIndex, refByInfo);\r\n    }\r\n    ref = refByInfo[info.pattern];\r\n    if (typeof ref === \"undefined\") {\r\n      ref = new StatePropertyRef(info, listIndex);\r\n      refByInfo[info.pattern] = ref;\r\n    }\r\n    return ref;\r\n  } else {\r\n    ref = refByInfoByNull[info.pattern];\r\n    if (typeof ref === \"undefined\") {\r\n      ref = new StatePropertyRef(info, null);\r\n      refByInfoByNull[info.pattern] = ref;\r\n    }\r\n    return ref;\r\n  }\r\n}\r\n","/**\r\n * getContextListIndex.ts\r\n *\r\n * StateClassの内部APIとして、現在のプロパティ参照スコープにおける\r\n * 指定したstructuredPath（ワイルドカード付きプロパティパス）に対応する\r\n * リストインデックス（IListIndex）を取得する関数です。\r\n *\r\n * 主な役割:\r\n * - handlerの最後にアクセスされたStatePropertyRefから、指定パスに対応するリストインデックスを取得\r\n * - ワイルドカード階層に対応し、多重ループやネストした配列バインディングにも利用可能\r\n *\r\n * 設計ポイント:\r\n * - 直近のプロパティ参照情報を取得\r\n * - info.wildcardPathsからstructuredPathのインデックスを特定\r\n * - listIndex.at(index)で該当階層のリストインデックスを取得\r\n * - パスが一致しない場合や参照が存在しない場合はnullを返す\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function getContextListIndex(\r\n  handler: IStateHandler,\r\n  structuredPath: string\r\n): IListIndex | null {\r\n  const ref = handler.lastRefStack;\r\n  if (ref == null) {\r\n    return null;\r\n  }\r\n  if (ref.info == null) {\r\n    return null;\r\n  }\r\n  if (ref.listIndex == null) {\r\n    return null;\r\n  }\r\n  const index = ref.info.indexByWildcardPath[structuredPath];\r\n  if (typeof index !== \"undefined\") {\r\n    return ref.listIndex.at(index);\r\n  }\r\n  return null;\r\n}\r\n","/**\r\n * getListIndex.ts\r\n *\r\n * StateClassの内部APIとして、パス情報（IResolvedPathInfo）から\r\n * 対応するリストインデックス（IListIndex）を取得する関数です。\r\n *\r\n * 主な役割:\r\n * - パスのワイルドカード種別（context/all/partial/none）に応じてリストインデックスを解決\r\n * - context型は現在のループコンテキストからリストインデックスを取得\r\n * - all型は各階層のリストインデックス集合からインデックスを辿って取得\r\n * - partial型やnone型は未実装またはnullを返す\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードや多重ループ、ネストした配列バインディングに柔軟に対応\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n * - エラー時はraiseErrorで詳細な例外を投げる\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IResolvedPathInfo } from \"../../StateProperty/types\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IReadonlyStateProxy, IStateProxy } from \"../types\";\r\nimport { getContextListIndex } from \"./getContextListIndex\";\r\n\r\nexport function getListIndex(\r\n  resolvedPath: IResolvedPathInfo, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): IListIndex | null {\r\n  switch (resolvedPath.wildcardType) {\r\n    case \"none\":\r\n      return null;\r\n    case \"context\":\r\n      const lastWildcardPath = resolvedPath.info.lastWildcardPath ?? \r\n        raiseError({\r\n          code: 'STATE-202',\r\n          message: 'lastWildcardPath is null',\r\n          context: { where: 'getListIndex', pattern: resolvedPath.info.pattern },\r\n          docsUrl: '/docs/error-codes.md#state',\r\n        });\r\n      return getContextListIndex(handler, lastWildcardPath) ?? \r\n        raiseError({\r\n          code: 'LIST-201',\r\n          message: `ListIndex not found: ${resolvedPath.info.pattern}`,\r\n          context: { where: 'getListIndex', pattern: resolvedPath.info.pattern },\r\n          docsUrl: '/docs/error-codes.md#list',\r\n        });\r\n    case \"all\":\r\n      let parentListIndex: IListIndex | null = null;\r\n      for(let i = 0; i < resolvedPath.info.wildcardCount; i++) {\r\n        const wildcardParentPattern = resolvedPath.info.wildcardParentInfos[i] ?? \r\n          raiseError({\r\n            code: 'STATE-202',\r\n            message: 'wildcardParentPattern is null',\r\n            context: { where: 'getListIndex', pattern: resolvedPath.info.pattern, index: i },\r\n            docsUrl: '/docs/error-codes.md#state',\r\n          });\r\n        const wildcardRef = getStatePropertyRef(wildcardParentPattern, parentListIndex);\r\n        const listIndexes: IListIndex[] = handler.engine.getListIndexes(wildcardRef) ?? \r\n          raiseError({\r\n            code: 'LIST-201',\r\n            message: `ListIndex not found: ${wildcardParentPattern.pattern}`,\r\n            context: { where: 'getListIndex', wildcardParent: wildcardParentPattern.pattern },\r\n            docsUrl: '/docs/error-codes.md#list',\r\n          });\r\n        const wildcardIndex = resolvedPath.wildcardIndexes[i] ?? \r\n          raiseError({\r\n            code: 'STATE-202',\r\n            message: 'wildcardIndex is null',\r\n            context: { where: 'getListIndex', pattern: resolvedPath.info.pattern, index: i },\r\n            docsUrl: '/docs/error-codes.md#state',\r\n          });\r\n        parentListIndex = listIndexes[wildcardIndex] ?? \r\n          raiseError({\r\n            code: 'LIST-201',\r\n            message: `ListIndex not found: ${wildcardParentPattern.pattern}`,\r\n            context: { where: 'getListIndex', wildcardParent: wildcardParentPattern.pattern, wildcardIndex },\r\n            docsUrl: '/docs/error-codes.md#list',\r\n          });\r\n      }\r\n      return parentListIndex;\r\n    case \"partial\":\r\n      raiseError({\r\n        code: 'STATE-202',\r\n        message: `Partial wildcard type is not supported yet: ${resolvedPath.info.pattern}`,\r\n        context: { where: 'getListIndex', pattern: resolvedPath.info.pattern },\r\n        docsUrl: '/docs/error-codes.md#state',\r\n      });\r\n  }\r\n}\r\n","import { MAX_WILDCARD_DEPTH } from \"../../constants\";\r\n\r\n/**\r\n * stackIndexByIndexName\r\n * インデックス名からスタックインデックスへのマッピング\r\n * $1 => 0\r\n * $2 => 1\r\n * :\r\n * ${i + 1} => i\r\n * i < MAX_WILDCARD_DEPTH\r\n */\r\nexport const indexByIndexName: { [key: PropertyKey]: number } = {};\r\nfor (let i = 0; i < MAX_WILDCARD_DEPTH; i++) {\r\n  indexByIndexName[`$${i+1}`] = i;\r\n}\r\n","/**\r\n * getByRef.ts\r\n *\r\n * StateClassの内部APIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * 状態オブジェクト（target）から値を取得するための関数（getByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定されたパス・インデックスに対応するState値を取得（多重ループやワイルドカードにも対応）\r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyで値をキャッシュ）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * - 存在しない場合は親infoやlistIndexを辿って再帰的に値を取得\r\n *\r\n * 設計ポイント:\r\n * - handler.engine.trackedGettersに含まれる場合はsetTrackingで依存追跡を有効化\r\n * - キャッシュ有効時はrefKeyで値をキャッシュし、取得・再利用を最適化\r\n * - ワイルドカードや多重ループにも柔軟に対応し、再帰的な値取得を実現\r\n * - finallyでキャッシュへの格納を保証\r\n */\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IReadonlyStateProxy, IReadonlyStateHandler, IStateProxy, IStateHandler } from \"../types\";\r\nimport { checkDependency } from \"./checkDependency\";\r\nimport { setStatePropertyRef } from \"./setStatePropertyRef\";\r\n\r\n/**\r\n * 構造化パス情報(info, listIndex)をもとに、状態オブジェクト(target)から値を取得する。\r\n * \r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyでキャッシュ）\r\n * - ネスト・ワイルドカード対応（親infoやlistIndexを辿って再帰的に値を取得）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * \r\n * @param target    状態オブジェクト\r\n * @param info      構造化パス情報\r\n * @param listIndex リストインデックス（多重ループ対応）\r\n * @param receiver  プロキシ\r\n * @param handler   状態ハンドラ\r\n * @returns         対象プロパティの値\r\n */\r\nexport function getByRef(\r\n  target   : Object, \r\n  ref      : IStatePropertyRef,\r\n  receiver : IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  let value: any;\r\n  const cacheable = ref.info.wildcardCount > 0 || handler.engine.pathManager.getters.has(ref.info.pattern);\r\n  if (cacheable) {\r\n    const cacheEntry = handler.engine.cache.get(ref);\r\n    const revision = handler.updater.revisionByUpdatedPath.get(ref.info.pattern);\r\n    if (typeof cacheEntry !== \"undefined\") {\r\n      if (typeof revision === \"undefined\") {\r\n        // 更新なし\r\n        return cacheEntry.value;\r\n      } else {\r\n        if (cacheEntry.version > handler.updater.version) {\r\n          // これは非同期更新が発生した場合にありえる\r\n          return cacheEntry.value;\r\n        }\r\n        if (cacheEntry.version < handler.updater.version || cacheEntry.revision < revision) {\r\n          // 更新あり\r\n        } else {\r\n          return cacheEntry.value;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  checkDependency(handler, ref);\r\n\r\n  // 親子関係のあるgetterが存在する場合は、外部依存から取得\r\n  // ToDo: stateにgetterが存在する（パスの先頭が一致する）場合はgetter経由で取得\r\n  if (handler.engine.stateOutput.startsWith(ref.info) && handler.engine.pathManager.getters.intersection(ref.info.cumulativePathSet).size === 0) {\r\n    return handler.engine.stateOutput.get(ref);\r\n  }\r\n\r\n  // パターンがtargetに存在する場合はgetter経由で取得\r\n  if (ref.info.pattern in target) {\r\n    handler.refIndex++;\r\n    if (handler.refIndex >= handler.refStack.length) {\r\n      handler.refStack.push(null);\r\n    }\r\n    handler.refStack[handler.refIndex] = handler.lastRefStack = ref;\r\n    try {\r\n      return value = Reflect.get(target, ref.info.pattern, receiver);\r\n    } finally {\r\n      handler.refStack[handler.refIndex] = null;\r\n      handler.refIndex--;\r\n      handler.lastRefStack = handler.refIndex >= 0 ? handler.refStack[handler.refIndex] : null;\r\n      // キャッシュへ格納\r\n      if (cacheable) {\r\n        handler.engine.cache.set(ref, { value, version: handler.updater.version, revision: handler.updater.revision });\r\n      }\r\n      // リストの場合、差分計算する\r\n      if (handler.engine.pathManager.lists.has(ref.info.pattern)) {\r\n        handler.updater.calcListDiff(ref, value);\r\n      }\r\n    }\r\n  } else {\r\n    // 存在しない場合エラー\r\n    raiseError({\r\n      code: \"STC-001\",\r\n      message: `Property \"${ref.info.pattern}\" does not exist in state.`,\r\n      docsUrl: \"./docs/error-codes.md#stc\",\r\n    })\r\n  }\r\n}\r\n","import { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function checkDependency(\r\n  handler: IStateHandler,\r\n  ref: IStatePropertyRef,\r\n): void {\r\n  // 動的依存関係の登録\r\n  if (handler.refIndex >= 0) {\r\n    const lastInfo = handler.lastRefStack?.info ?? null;\r\n    if (lastInfo !== null) {\r\n      if (handler.engine.pathManager.onlyGetters.has(lastInfo.pattern) &&\r\n        lastInfo.pattern !== ref.info.pattern) {\r\n        handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, ref.info.pattern);\r\n      }\r\n    }\r\n  }\r\n}","/**\r\n * setByRef.ts\r\n *\r\n * StateClassの内部APIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * 状態オブジェクト（target）に値を設定するための関数（setByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定されたパス・インデックスに対応するState値を設定（多重ループやワイルドカードにも対応）\r\n * - getter/setter経由で値設定時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * - 存在しない場合は親infoやlistIndexを辿って再帰的に値を設定\r\n * - 設定後はengine.updater.addUpdatedStatePropertyRefValueで更新情報を登録\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードや多重ループにも柔軟に対応し、再帰的な値設定を実現\r\n * - finallyで必ず更新情報を登録し、再描画や依存解決に利用\r\n * - getter/setter経由のスコープ切り替えも考慮した設計\r\n */\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateProxy, IStateHandler } from \"../types\";\r\nimport { getByRef } from \"./getByRef\";\r\n\r\nexport function setByRef(\r\n    target   : Object, \r\n    ref      : IStatePropertyRef,\r\n    value    : any, \r\n    receiver : IStateProxy,\r\n    handler  : IStateHandler\r\n): any {\r\n  try {\r\n    // 親子関係のあるgetterが存在する場合は、外部依存を通じて値を設定\r\n    // ToDo: stateにgetterが存在する（パスの先頭が一致する）場合はgetter経由で取得\r\n    if (handler.engine.stateOutput.startsWith(ref.info) && handler.engine.pathManager.setters.intersection(ref.info.cumulativePathSet).size === 0) {\r\n      return handler.engine.stateOutput.set(ref, value);\r\n    }\r\n    if (ref.info.pattern in target) {\r\n      handler.refIndex++;\r\n      if (handler.refIndex >= handler.refStack.length) {\r\n        handler.refStack.push(null);\r\n      }\r\n      handler.refStack[handler.refIndex] = handler.lastRefStack = ref;\r\n      try {\r\n        return Reflect.set(target, ref.info.pattern, value, receiver);\r\n      } finally {\r\n        handler.refStack[handler.refIndex] = null;\r\n        handler.refIndex--;\r\n        handler.lastRefStack = handler.refIndex >= 0 ? handler.refStack[handler.refIndex] : null;\r\n      }\r\n/*\r\n      return setStatePropertyRef(handler, ref, () => {\r\n        return Reflect.set(target, ref.info.pattern, value, receiver);\r\n      });\r\n*/\r\n    } else {\r\n      const parentInfo = ref.info.parentInfo ?? raiseError({\r\n        code: 'STATE-202',\r\n        message: 'propRef.stateProp.parentInfo is undefined',\r\n        context: { where: 'setByRef', refPath: ref.info.pattern },\r\n        docsUrl: '/docs/error-codes.md#state',\r\n      });\r\n      const parentListIndex = parentInfo.wildcardCount < ref.info.wildcardCount ? (ref.listIndex?.parentListIndex ?? null) : ref.listIndex;\r\n      const parentRef = getStatePropertyRef(parentInfo, parentListIndex);\r\n      const parentValue = getByRef(target, parentRef, receiver, handler);\r\n      const lastSegment = ref.info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = ref.listIndex?.index ?? raiseError({\r\n          code: 'STATE-202',\r\n          message: 'propRef.listIndex?.index is undefined',\r\n          context: { where: 'setByRef', refPath: ref.info.pattern },\r\n          docsUrl: '/docs/error-codes.md#state',\r\n        });\r\n        return Reflect.set(parentValue, index, value);\r\n      } else {\r\n        return Reflect.set(parentValue, lastSegment, value);\r\n      }\r\n    }\r\n  } finally {\r\n    handler.updater.enqueueRef(ref);\r\n  }\r\n}\r\n","/**\r\n * resolve.ts\r\n *\r\n * StateClassのAPIとして、パス（path）とインデックス（indexes）を指定して\r\n * Stateの値を取得・設定するための関数（resolve）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列パス（path）とインデックス配列（indexes）から、該当するState値の取得・設定を行う\r\n * - ワイルドカードや多重ループを含むパスにも対応\r\n * - value未指定時は取得（getByRef）、指定時は設定（setByRef）を実行\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパスを解析し、ワイルドカード階層ごとにリストインデックスを解決\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n * - getByRef/setByRefで値の取得・設定を一元的に処理\r\n * - 柔軟なバインディングやAPI経由での利用が可能\r\n */\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { IListIndex } from \"../../ListIndex/types.js\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\nimport { SetByRefSymbol } from \"../symbols.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { getByRef } from \"../methods/getByRef.js\";\r\n\r\nexport function resolve(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): Function {\r\n  return (path: string, indexes: number[], value?: any): any => {\r\n    const info = getStructuredPathInfo(path);\r\n    const lastInfo = handler.lastRefStack?.info ?? null;\r\n    if (lastInfo !== null && lastInfo.pattern !== info.pattern) {\r\n      // gettersに含まれる場合は依存関係を登録\r\n      if (handler.engine.pathManager.onlyGetters.has(lastInfo.pattern)) {\r\n        handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, info.pattern);\r\n      }\r\n    }\r\n\r\n    if (info.wildcardParentInfos.length > indexes.length) {\r\n      raiseError({\r\n        code: 'STATE-202',\r\n        message: `indexes length is insufficient: ${path}`,\r\n        context: { path, expected: info.wildcardParentInfos.length, received: indexes.length },\r\n        docsUrl: '/docs/error-codes.md#state',\r\n        severity: 'error',\r\n      });\r\n    }\r\n    // ワイルドカード階層ごとにListIndexを解決していく\r\n    let listIndex: IListIndex | null = null;\r\n    for(let i = 0; i < info.wildcardParentInfos.length; i++) {\r\n      const wildcardParentPattern = info.wildcardParentInfos[i];\r\n      const wildcardRef = getStatePropertyRef(wildcardParentPattern, listIndex);\r\n      const tmpValue = getByRef(target, wildcardRef, receiver, handler);\r\n      const listIndexes = handler.engine.getListIndexes(wildcardRef);\r\n      if (listIndexes === null) {\r\n        raiseError({\r\n          code: 'LIST-201',\r\n          message: `ListIndexes not found: ${wildcardParentPattern.pattern}`,\r\n          context: { pattern: wildcardParentPattern.pattern },\r\n          docsUrl: '/docs/error-codes.md#list',\r\n          severity: 'error',\r\n        });\r\n      }\r\n      const index = indexes[i];\r\n      listIndex = listIndexes[index] ?? raiseError({\r\n        code: 'LIST-201',\r\n        message: `ListIndex not found: ${wildcardParentPattern.pattern}`,\r\n        context: { pattern: wildcardParentPattern.pattern, index },\r\n        docsUrl: '/docs/error-codes.md#list',\r\n        severity: 'error',\r\n      });\r\n    }\r\n\r\n    // WritableかReadonlyかを判定して適切なメソッドを呼び出す\r\n    const ref = getStatePropertyRef(info, listIndex);\r\n    const hasSetValue = typeof value !== \"undefined\";\r\n    if (SetByRefSymbol in receiver) {\r\n      if (!hasSetValue) {\r\n        return getByRef(target, ref, receiver, handler);\r\n      } else {\r\n        setByRef(target, ref, value, receiver, handler);\r\n      }\r\n    } else {\r\n      if (!hasSetValue) {\r\n        return getByRef(target, ref, receiver, handler);\r\n      } else {\r\n        // readonlyなので、setはできない\r\n        raiseError({\r\n          code: 'STATE-202',\r\n          message: `Cannot set value on a readonly proxy: ${path}`,\r\n          context: { path },\r\n          docsUrl: '/docs/error-codes.md#state',\r\n          severity: 'error',\r\n        });\r\n      }\r\n    }\r\n  };\r\n} ","/**\r\n * get.ts\r\n *\r\n * StateClassのProxyトラップとして、プロパティアクセス時の値取得処理を担う関数（get）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列プロパティの場合、特殊プロパティ（$1〜$9, $resolve, $getAll, $navigate）に応じた値やAPIを返却\r\n * - 通常のプロパティはgetResolvedPathInfoでパス情報を解決し、getListIndexでリストインデックスを取得\r\n * - getByRefで構造化パス・リストインデックスに対応した値を取得\r\n * - シンボルプロパティの場合はhandler.callableApi経由でAPIを呼び出し\r\n * - それ以外はReflect.getで通常のプロパティアクセスを実行\r\n *\r\n * 設計ポイント:\r\n * - $1〜$9は直近のStatePropertyRefのリストインデックス値を返す特殊プロパティ\r\n * - $resolve, $getAll, $navigateはAPI関数やルーターインスタンスを返す\r\n * - 通常のプロパティアクセスもバインディングや多重ループに対応\r\n * - シンボルAPIやReflect.getで拡張性・互換性も確保\r\n */\r\nimport { getRouter } from \"../../Router/Router.js\";\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { getListIndex } from \"../methods/getListIndex.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types.js\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetByRefSymbol } from \"../symbols.js\";\r\nimport { trackDependency } from \"../apis/trackDependency.js\";\r\nimport { indexByIndexName } from \"./indexByIndexName.js\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types.js\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\nimport { resolve } from \"../apis/resolve.js\";\r\nimport { getByRef } from \"../methods/getByRef.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { connectedCallback } from \"../apis/connectedCallback.js\";\r\nimport { disconnectedCallback } from \"../apis/disconnectedCallback.js\";\r\nimport { getAll } from \"../apis/getAll.js\";\r\n\r\n\r\nexport function get(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler : IStateHandler\r\n): any {\r\n  const index = indexByIndexName[prop];\r\n  if (typeof index !== \"undefined\") {\r\n    const listIndex = handler.lastRefStack?.listIndex;\r\n    return listIndex?.indexes[index] ?? raiseError({\r\n      code: 'LIST-201',\r\n      message: `ListIndex not found: ${prop.toString()}`,\r\n      context: { prop: String(prop), indexes: listIndex?.indexes ?? null, index },\r\n      docsUrl: '/docs/error-codes.md#list',\r\n      severity: 'error',\r\n    });\r\n  }\r\n  if (typeof prop === \"string\") {\r\n    if (prop[0] === \"$\") {\r\n      switch (prop) {\r\n        case \"$resolve\":\r\n          return resolve(target, prop, receiver, handler);\r\n        case \"$getAll\":\r\n          return getAll(target, prop, receiver, handler);\r\n        case \"$trackDependency\":\r\n          return trackDependency(target, prop, receiver, handler);\r\n        case \"$navigate\":\r\n          return (to:string) => getRouter()?.navigate(to);\r\n        case \"$component\":\r\n          return handler.engine.owner;\r\n      }\r\n    }\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, receiver, handler);\r\n    const ref = getStatePropertyRef(resolvedInfo.info, listIndex);\r\n    return getByRef(\r\n      target, \r\n      ref,\r\n      receiver,\r\n      handler\r\n    );\r\n\r\n  } else if (typeof prop === \"symbol\") {\r\n    if (handler.symbols.has(prop)) {\r\n      switch (prop) {\r\n        case GetByRefSymbol: \r\n          return (ref: IStatePropertyRef) => \r\n            getByRef(target, ref, receiver, handler);\r\n        case SetByRefSymbol: \r\n          return (ref: IStatePropertyRef, value: any) => \r\n            setByRef(target, ref, value, receiver, handler);\r\n        case ConnectedCallbackSymbol:\r\n          return () => connectedCallback(target, prop, receiver, handler);\r\n        case DisconnectedCallbackSymbol: \r\n          return () => disconnectedCallback(target, prop, receiver, handler);\r\n      }\r\n    } else {\r\n      return Reflect.get(\r\n        target, \r\n        prop, \r\n        receiver\r\n      );\r\n    }\r\n  }\r\n}\r\n","/**\r\n * getAllReadonly\r\n *\r\n * ワイルドカードを含む State パスから、対象となる全要素を配列で取得する。\r\n * Throws: LIST-201（インデックス未解決）、BIND-201（ワイルドカード情報不整合）\r\n */\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateProxy, IStateHandler } from \"../types\";\r\nimport { getContextListIndex } from \"../methods/getContextListIndex\";\r\nimport { IListIndex } from \"../../ListIndex/types.js\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\nimport { resolve } from \"./resolve.js\";\r\nimport { getByRef } from \"../methods/getByRef.js\";\r\n\r\nexport function getAll(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n    const resolveFn = resolve(target, prop, receiver, handler);\r\n    return (path: string, indexes?: number[]): any[] => {\r\n      const info = getStructuredPathInfo(path);\r\n      const lastInfo = handler.lastRefStack?.info ?? null;\r\n      if (lastInfo !== null && lastInfo.pattern !== info.pattern) {\r\n        // gettersに含まれる場合は依存関係を登録\r\n        if (handler.engine.pathManager.onlyGetters.has(lastInfo.pattern)) {\r\n          handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, info.pattern);\r\n        }\r\n      }\r\n  \r\n      if (typeof indexes === \"undefined\") {\r\n        for(let i = 0; i < info.wildcardInfos.length; i++) {\r\n          const wildcardPattern = info.wildcardInfos[i] ?? raiseError({\r\n            code: 'BIND-201',\r\n            message: 'wildcardPattern is null',\r\n            context: { index: i, infoPattern: info.pattern },\r\n            docsUrl: '/docs/error-codes.md#bind',\r\n            severity: 'error',\r\n          });\r\n          const listIndex = getContextListIndex(handler, wildcardPattern.pattern);\r\n          if (listIndex) {\r\n            indexes = listIndex.indexes;\r\n            break;\r\n          }\r\n        }\r\n        if (typeof indexes === \"undefined\") {\r\n          indexes = [];\r\n        }\r\n      }\r\n      const walkWildcardPattern = (\r\n        wildcardParentInfos: IStructuredPathInfo[],\r\n        wildardIndexPos: number,\r\n        listIndex: IListIndex | null,\r\n        indexes: number[],\r\n        indexPos: number,\r\n        parentIndexes: number[],\r\n        results: number[][]\r\n      ) => {\r\n        const wildcardParentPattern = wildcardParentInfos[wildardIndexPos] ?? null;\r\n        if (wildcardParentPattern === null) {\r\n          results.push(parentIndexes);\r\n          return;\r\n        }\r\n        const wildcardRef = getStatePropertyRef(wildcardParentPattern, listIndex);\r\n        const tmpValue = getByRef(target, wildcardRef, receiver, handler);\r\n        const listIndexes = handler.engine.getListIndexes(wildcardRef);\r\n        if (listIndexes === null) {\r\n          raiseError({\r\n            code: 'LIST-201',\r\n            message: `ListIndex not found: ${wildcardParentPattern.pattern}`,\r\n            context: { pattern: wildcardParentPattern.pattern },\r\n            docsUrl: '/docs/error-codes.md#list',\r\n            severity: 'error',\r\n          });\r\n        }\r\n        const index = indexes[indexPos] ?? null;\r\n        if (index === null) {\r\n          for(let i = 0; i < listIndexes.length; i++) {\r\n            const listIndex = listIndexes[i];\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results);\r\n          }\r\n        } else {\r\n          const listIndex = listIndexes[index] ?? raiseError({\r\n            code: 'LIST-201',\r\n            message: `ListIndex not found: ${wildcardParentPattern.pattern}`,\r\n            context: { pattern: wildcardParentPattern.pattern, index },\r\n            docsUrl: '/docs/error-codes.md#list',\r\n            severity: 'error',\r\n          });\r\n          if ((wildardIndexPos + 1) < wildcardParentInfos.length) {\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results\r\n            );\r\n          } else {\r\n            // 最終ワイルドカード層まで到達しているので、結果を確定\r\n            results.push(parentIndexes.concat(listIndex.index));\r\n          }\r\n        }\r\n      }\r\n      const resultIndexes: number[][] = [];\r\n      walkWildcardPattern(\r\n        info.wildcardParentInfos, \r\n        0, \r\n        null, \r\n        indexes, \r\n        0, \r\n        [], \r\n        resultIndexes\r\n      );\r\n      const resultValues: any[] = [];\r\n      for(let i = 0; i < resultIndexes.length; i++) {\r\n        resultValues.push(resolveFn(\r\n          info.pattern,\r\n          resultIndexes[i]\r\n        ));\r\n      }\r\n      return resultValues;\r\n    }\r\n  }","/**\r\n * trackDependency.ts\r\n *\r\n * StateClassのAPIとして、getterチェーン中に参照されたパス間の\r\n * 依存関係を動的に登録するための関数（trackDependency）の実装です。\r\n *\r\n * 主な役割:\r\n * - 現在解決中のStatePropertyRef（lastRefStack）を取得\r\n * - pathManager.gettersに登録されているgetterの場合のみ依存を追跡\r\n * - 自身と同一パターンでない参照に対してaddDynamicDependencyを呼び出す\r\n *\r\n * 設計ポイント:\r\n * - lastRefStackが存在しない場合はSTATE-202エラーを発生させる\r\n * - getter同士の再帰（自己依存）は登録しない\r\n * - 動的依存はpathManagerに集約し、キャッシュの無効化に利用する\r\n */\r\nimport { raiseError } from \"../../utils\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\n/**\r\n * 現在解決中のgetterから、指定されたパスへの動的依存を登録する関数を返します。\r\n *\r\n * - pathManager.gettersに登録されているgetterのみ依存追跡を行う\r\n * - 自己参照は除外し、異なるパターン間の依存だけを記録\r\n * - 動的依存はpathManager.addDynamicDependencyで集中管理される\r\n *\r\n * @param target   プロキシ対象オブジェクト\r\n * @param prop     アクセスされたプロパティキー\r\n * @param receiver プロキシレシーバ\r\n * @param handler  StateClassハンドラ\r\n * @returns        引数pathで指定されたパターンへの依存を登録する無名関数\r\n */\r\nexport function trackDependency(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): Function {\r\n  return (path: string): void => {\r\n    const lastInfo = handler.lastRefStack?.info ?? raiseError({\r\n      code: 'STATE-202',\r\n      message: 'Internal error: lastRefStack is null',\r\n      context: { where: 'trackDependency', path },\r\n      docsUrl: '/docs/error-codes.md#state',\r\n    });\r\n    if (handler.engine.pathManager.getters.has(lastInfo.pattern) &&\r\n      lastInfo.pattern !== path) {\r\n      handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, path);\r\n    }\r\n  };\r\n}\r\n","/**\r\n * Router.ts\r\n *\r\n * シングルページアプリケーション（SPA）向けのカスタムエレメント Router の実装です。\r\n *\r\n * 主な役割:\r\n * - ルート定義（entryRoute）に基づき、URLパスに応じてカスタム要素を動的に生成・表示\r\n * - pushState/popstateイベントを利用した履歴管理とルーティング制御\r\n * - ルートパラメータの抽出とカスタム要素への受け渡し\r\n * - 404ページ（未定義ルート時）の表示\r\n *\r\n * 設計ポイント:\r\n * - entryRouteでルートパスとカスタム要素タグ名のペアを登録\r\n * - popstateイベントでURL変更時に自動で再描画\r\n * - ルートパスのパラメータ（:id等）も正規表現で抽出し、data-state属性で渡す\r\n * - getRouterでグローバルなRouterインスタンスを取得可能\r\n */\r\nimport { isLazyLoadComponent, loadLazyLoadComponent } from \"../WebComponents/loadFromImportMap\";\r\nimport { IRouter } from \"./types\";\r\n\r\nconst DEFAULT_ROUTE_PATH = '/'; // Default route path\r\nconst ROUTE_PATH_PREFIX = 'routes:'; // Prefix for route paths\r\n/**\r\n * example:\r\n * ```ts\r\n * entryRoute('my-view', '/my-view/:id');\r\n */\r\nconst routeEntries: Array<[string, string]> = [];\r\n\r\nlet globalRouter : Router | null = null;\r\n\r\nexport class Router extends HTMLElement implements IRouter {\r\n  originalPathName = window.location.pathname; // Store the original path name\r\n  originalFileName = window.location.pathname.split('/').pop() || ''; // Store the original file name\r\n  basePath = document.querySelector('base')?.href.replace(window.location.origin, \"\") || DEFAULT_ROUTE_PATH;\r\n\r\n  _popstateHandler: (event: PopStateEvent) => void;\r\n  constructor() {\r\n    super();\r\n    this._popstateHandler = this.popstateHandler.bind(this);\r\n  }\r\n\r\n  connectedCallback() {\r\n    globalRouter = this;\r\n    this.innerHTML = '<slot name=\"content\"></slot>';\r\n    window.addEventListener('popstate', this._popstateHandler);\r\n    window.dispatchEvent(new Event(\"popstate\")); // Dispatch popstate event to trigger the initial render\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('popstate', this._popstateHandler);\r\n    globalRouter = null;\r\n  }\r\n\r\n  popstateHandler(event: PopStateEvent) {\r\n    event.preventDefault();\r\n    this.render();\r\n  }\r\n\r\n  navigate(to: string) {\r\n    const toPath = to[0] === '/' ? (this.basePath + to.slice(1)) : to; // Ensure the path starts with '/'\r\n    history.pushState({}, '', toPath);\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    // スロットコンテントをクリア\r\n    const slotChildren = Array.from(this.childNodes).filter(\r\n      n => (n as HTMLElement).getAttribute?.('slot') === 'content'\r\n    );\r\n    slotChildren.forEach(n => this.removeChild(n));\r\n\r\n    const paths = window.location.pathname.split('/');\r\n    if (paths.at(-1) === this.originalFileName) {\r\n      paths[paths.length - 1] = ''; // Ensure the last path is empty for root\r\n    }\r\n    const pathName = paths.join('/');\r\n    const replacedPath = pathName.replace(this.basePath, ''); // Remove base path and ensure default route\r\n    const currentPath = replacedPath[0] !== '/' ? '/' + replacedPath : replacedPath; // Ensure the path starts with '/'\r\n    let tagName: string | undefined = undefined;\r\n    let params: Record<string, string> = {};\r\n    // Check if the routePath matches any of the defined routes\r\n    for (const [path, tag] of routeEntries) {\r\n      const regex = new RegExp(\"^\" + path.replace(/:[^\\s/]+/g, '([^/]+)') + \"$\");\r\n      if (regex.test(currentPath)) {\r\n        tagName = tag;\r\n        // Extract the parameters from the routePath\r\n        const matches = currentPath.match(regex);\r\n        if (matches) {\r\n          const keys = path.match(/:[^\\s/]+/g) || [];\r\n          keys.forEach((key, index) => {\r\n            params[key.substring(1)] = matches[index + 1]; // +1 to skip the full match\r\n          });\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (tagName) {\r\n      // If a route matches, create the custom element and set its state\r\n      // Create the custom element with the tag name\r\n      // project the custom element into the router slot\r\n      const customElement = document.createElement(tagName) as HTMLElement;\r\n      customElement.setAttribute('data-state', JSON.stringify(params));\r\n      customElement.setAttribute('slot', 'content');\r\n      this.appendChild(customElement);\r\n      if (isLazyLoadComponent(tagName)) {\r\n        loadLazyLoadComponent(tagName); // Load lazy load component if necessary\r\n      }\r\n    } else {\r\n      // If no route matches, show 404 content\r\n      const messageElement = document.createElement('h1') as HTMLElement;\r\n      messageElement.setAttribute('slot', 'content');\r\n      messageElement.textContent = '404 Not Found';\r\n      this.appendChild(messageElement);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function entryRoute(tagName: string, routePath: string): void {\r\n  if (routePath.startsWith(ROUTE_PATH_PREFIX)) {\r\n    routePath = routePath.substring(ROUTE_PATH_PREFIX.length); // Remove 'routes:' prefix\r\n  }\r\n  routeEntries.push([routePath, tagName]);\r\n}\r\n\r\nexport function getRouter(): Router | null {\r\n  return globalRouter;\r\n}\r\n\r\n","/**\r\n * connectedCallback.ts\r\n *\r\n * StateClassのライフサイクルフック「$connectedCallback」を呼び出すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - オブジェクト（target）に$connectedCallbackメソッドが定義されていれば呼び出す\r\n * - コールバックはtargetのthisコンテキストで呼び出し、IReadonlyStateProxy（receiver）を引数として渡す\r\n * - 非同期関数として実行可能（await対応）\r\n *\r\n * 設計ポイント:\r\n * - Reflect.getで$connectedCallbackプロパティを安全に取得\r\n * - 存在しない場合は何もしない\r\n * - ライフサイクル管理やカスタム初期化処理に利用\r\n */\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst CONNECTED_CALLBACK = \"$connectedCallback\";\r\n\r\nexport async function connectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Promise<void> {\r\n  const callback = Reflect.get(target, CONNECTED_CALLBACK);\r\n  if (typeof callback === \"function\") {\r\n    await callback.call(receiver);\r\n  }\r\n}","/**\r\n * disconnectedCallback.ts\r\n *\r\n * StateClassのライフサイクルフック「$disconnectedCallback」を呼び出すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - オブジェクト（target）に$disconnectedCallbackメソッドが定義されていれば呼び出す\r\n * - コールバックはtargetのthisコンテキストで呼び出し、IReadonlyStateProxy（receiver）を引数として渡す\r\n * - 非同期関数として実行可能（await対応）\r\n *\r\n * 設計ポイント:\r\n * - Reflect.getで$disconnectedCallbackプロパティを安全に取得\r\n * - 存在しない場合は何もしない\r\n * - ライフサイクル管理やクリーンアップ処理に利用\r\n */\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst DISCONNECTED_CALLBACK = \"$disconnectedCallback\";\r\n\r\nexport async function disconnectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Promise<void> {\r\n  const callback = Reflect.get(target, DISCONNECTED_CALLBACK);\r\n  if (typeof callback === \"function\") {\r\n    await callback.call(receiver);\r\n  }\r\n}","/**\r\n * createReadonlyStateProxy.ts\r\n *\r\n * StateClass の「読み取り専用」プロキシを生成します。\r\n *\r\n * 主な役割:\r\n * - State オブジェクトに対する読み取り専用の Proxy を作成\r\n * - get トラップでバインディング/API呼び出し/依存解決/レンダラー連携に対応\r\n * - set トラップは常に例外を投げて書き込みを禁止\r\n * - has トラップで内部APIシンボル（GetByRefSymbol 等）を公開\r\n *\r\n * Throws:\r\n * - STATE-202 Cannot set property ... of readonly state（set トラップ）\r\n */\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IReadonlyStateHandler, IState, IReadonlyStateProxy } from \"./types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IUpdater } from \"../Updater/types\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { GetByRefSymbol } from \"./symbols\";\r\nimport { get as trapGet } from \"./traps/get.js\";\r\n\r\nconst STACK_DEPTH = 32;\r\n\r\nclass StateHandler implements IReadonlyStateHandler {\r\n  engine: IComponentEngine;\r\n  updater: IUpdater;\r\n  refStack: (IStatePropertyRef | null)[] = Array(STACK_DEPTH).fill(null);\r\n  refIndex: number = -1;\r\n  lastRefStack: IStatePropertyRef | null = null;\r\n  loopContext: ILoopContext | null = null;\r\n  symbols: Set<PropertyKey> = new Set<PropertyKey>([ GetByRefSymbol ]);\r\n  apis: Set<PropertyKey> = new Set<PropertyKey>([ \"$resolve\", \"$getAll\", \"$trackDependency\", \"$navigate\", \"$component\" ]);\r\n\r\n  constructor(engine: IComponentEngine, updater: IUpdater) {\r\n    this.engine = engine;\r\n    this.updater = updater;\r\n  }\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IReadonlyStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IReadonlyStateProxy\r\n  ): boolean {\r\n    raiseError({\r\n      code: 'STATE-202',\r\n      message: `Cannot set property ${String(prop)} of readonly state`,\r\n      context: { where: 'createReadonlyStateProxy.set', prop: String(prop) },\r\n  docsUrl: './docs/error-codes.md#state',\r\n    });\r\n  }\r\n\r\n  has(\r\n    target: Object, \r\n    prop  : PropertyKey\r\n  ): boolean {\r\n    return Reflect.has(target, prop) || this.symbols.has(prop) || this.apis.has(prop);\r\n  }\r\n}\r\n\r\nexport function createReadonlyStateHandler(engine: IComponentEngine, updater: IUpdater): IReadonlyStateHandler {\r\n  return new StateHandler(engine, updater);\r\n}\r\n\r\nexport function createReadonlyStateProxy(\r\n  state: Object,\r\n  handler: IReadonlyStateHandler,\r\n): IReadonlyStateProxy {\r\n  return new Proxy<IState>(state, handler) as IReadonlyStateProxy;\r\n}\r\n","/**\r\n * createWritableStateProxy.ts\r\n *\r\n * StateClassの「書き込み可能」プロキシを生成するための実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - Stateオブジェクトに対して、書き込み可能なProxyを作成\r\n * - StateHandlerクラスで各種APIやトラップ（get/set）を実装\r\n * - getトラップでバインディングやAPI呼び出し、依存解決などに対応\r\n * - setトラップで値の書き込みや副作用（依存解決・再描画）を一元管理\r\n *\r\n * 設計ポイント:\r\n * - StateHandlerはIWritableStateHandlerを実装し、状態管理やAPI呼び出しの基盤となる\r\n * - callableApiに各種APIシンボルと関数をマッピングし、柔軟なAPI拡張が可能\r\n * - createWritableStateProxyで一貫した生成・利用が可能\r\n * - 依存解決やキャッシュ、ループ・プロパティ参照スコープ管理など多機能な設計\r\n */\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IState, IWritableStateHandler, IWritableStateProxy } from \"./types\";\r\nimport { set as trapSet } from \"./traps/set.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { setLoopContext } from \"./methods/setLoopContext\";\r\nimport { IUpdater } from \"../Updater/types\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetByRefSymbol } from \"./symbols\";\r\nimport { get as trapGet } from \"./traps/get.js\";\r\n\r\nconst STACK_DEPTH = 32;\r\n\r\nclass StateHandler implements IWritableStateHandler {\r\n  engine: IComponentEngine;\r\n  refStack: (IStatePropertyRef | null)[] = Array(STACK_DEPTH).fill(null);\r\n  refIndex: number = -1;\r\n  lastRefStack: IStatePropertyRef | null = null;\r\n  loopContext: ILoopContext | null = null;\r\n  updater: IUpdater;\r\n  symbols: Set<PropertyKey> = new Set<PropertyKey>([ GetByRefSymbol, SetByRefSymbol, ConnectedCallbackSymbol, DisconnectedCallbackSymbol ]);\r\n  apis: Set<PropertyKey> = new Set<PropertyKey>([ \"$resolve\", \"$getAll\", \"$trackDependency\", \"$navigate\", \"$component\" ]);\r\n  \r\n  constructor(engine: IComponentEngine, updater: IUpdater) {\r\n    this.engine = engine;\r\n    this.updater = updater;\r\n  }\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IWritableStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IWritableStateProxy\r\n  ): boolean {\r\n    return trapSet(target, prop, value, receiver, this);\r\n  }\r\n\r\n  has(\r\n    target: Object, \r\n    prop  : PropertyKey\r\n  ): boolean {\r\n    return Reflect.has(target, prop) || this.symbols.has(prop) || this.apis.has(prop);\r\n  }\r\n}\r\n\r\nexport async function useWritableStateProxy(\r\n  engine: IComponentEngine, \r\n  updater: IUpdater,\r\n  state: Object,\r\n  loopContext: ILoopContext | null,\r\n  callback: (stateProxy: IWritableStateProxy, handler: IWritableStateHandler) => Promise<void>\r\n): Promise<void> {\r\n  const handler = new StateHandler(engine, updater);\r\n  const stateProxy = new Proxy<IState>(state, handler) as IWritableStateProxy;\r\n  return setLoopContext(handler, loopContext, async () => {\r\n    await callback(stateProxy, handler);\r\n  });\r\n}\r\n\r\n","/**\r\n * set.ts\r\n *\r\n * StateClassのProxyトラップとして、プロパティ設定時の値セット処理を担う関数（set）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列プロパティの場合、getResolvedPathInfoでパス情報を解決し、getListIndexでリストインデックスを取得\r\n * - setByRefで構造化パス・リストインデックスに対応した値設定を実行\r\n * - それ以外（シンボル等）の場合はReflect.setで通常のプロパティ設定を実行\r\n *\r\n * 設計ポイント:\r\n * - バインディングや多重ループ、ワイルドカードを含むパスにも柔軟に対応\r\n * - setByRefを利用することで、依存解決や再描画などの副作用も一元管理\r\n * - Reflect.setで標準的なプロパティ設定の互換性も確保\r\n */\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\nimport { getListIndex } from \"../methods/getListIndex.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { IStateProxy, IStateHandler } from \"../types\";\r\n\r\nexport function set(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  value   : any, \r\n  receiver: IStateProxy,\r\n  handler : IStateHandler\r\n): boolean {\r\n  if (typeof prop === \"string\") {\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, receiver, handler);\r\n    const ref = getStatePropertyRef(resolvedInfo.info, listIndex);\r\n    return setByRef(\r\n      target, \r\n      ref,\r\n      value, \r\n      receiver,\r\n      handler\r\n    );\r\n  } else {\r\n    return Reflect.set(\r\n      target, \r\n      prop, \r\n      value, \r\n      receiver\r\n    );\r\n  }\r\n}\r\n","/**\r\n * setLoopContext.ts\r\n *\r\n * StateClassの内部APIとして、ループコンテキスト（ILoopContext）を一時的に設定し、\r\n * 指定した非同期コールバックをそのスコープ内で実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.loopContextにループコンテキストを一時的に設定\r\n * - 既にループコンテキストが設定されている場合はエラーを投げる\r\n * - loopContextが存在する場合はasyncSetStatePropertyRefでスコープを設定しコールバックを実行\r\n * - loopContextがnullの場合はそのままコールバックを実行\r\n * - finallyで必ずloopContextをnullに戻し、スコープ外への影響を防止\r\n *\r\n * 設計ポイント:\r\n * - ループバインディングや多重ループ時のスコープ管理を安全に行う\r\n * - finallyで状態復元を保証し、例外発生時も安全\r\n * - 非同期処理にも対応\r\n */\r\nimport { ILoopContext } from \"../../LoopContext/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IWritableStateHandler } from \"../types\";\r\nimport { asyncSetStatePropertyRef } from \"./asyncSetStatePropertyRef\";\r\n\r\nexport async function setLoopContext(\r\n  handler: IWritableStateHandler,\r\n  loopContext: ILoopContext | null,\r\n  callback: () => Promise<void>\r\n): Promise<void> {\r\n  if (handler.loopContext) {\r\n    raiseError({\r\n      code: 'STATE-301',\r\n      message: 'already in loop context',\r\n      context: { where: 'setLoopContext' },\r\n      docsUrl: '/docs/error-codes.md#state',\r\n    });\r\n  }\r\n  handler.loopContext = loopContext;\r\n  try {\r\n    if (loopContext) {\r\n      await asyncSetStatePropertyRef(handler, loopContext.ref, callback);\r\n    } else {\r\n      await callback();\r\n    }\r\n  } finally {\r\n    handler.loopContext = null;\r\n  }\r\n}\r\n","/**\r\n * asyncSetStatePropertyRef.ts\r\n *\r\n * 状態プロパティ参照のスコープを一時的に設定し、非同期コールバックを実行するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - handlerのstructuredPathInfoStackとlistIndexStackに、infoとlistIndexをpushしてスコープを設定\r\n * - 指定した非同期コールバック（callback）をそのスコープ内で実行\r\n * - callback実行後は必ずpopしてスコープを元に戻す（finallyで保証）\r\n *\r\n * 設計ポイント:\r\n * - 非同期処理中も正しいスコープ情報（パス・リストインデックス）が維持される\r\n * - ネストした非同期処理にも対応可能\r\n * - スコープのpush/popは例外発生時も確実に実行される\r\n */\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\n/**\r\n * 状態プロパティ参照のスコープを一時的に設定し、非同期コールバックを実行します。\r\n * \r\n * @param handler   スコープ管理用のハンドラ\r\n * @param info      現在の構造化パス情報\r\n * @param listIndex 現在のリストインデックス（ネスト対応用）\r\n * @param callback  スコープ内で実行する非同期処理\r\n * \r\n * スタックに info と listIndex をpushし、callback実行後に必ずpopします。\r\n * これにより、非同期処理中も正しいスコープ情報が維持されます。\r\n */\r\nexport async function asyncSetStatePropertyRef(\r\n  handler: IStateHandler,\r\n  ref: IStatePropertyRef,\r\n  callback: () => Promise<void>\r\n): Promise<void> {\r\n  handler.refIndex++;\r\n  if (handler.refIndex >= handler.refStack.length) {\r\n    handler.refStack.push(null);\r\n  }\r\n  handler.refStack[handler.refIndex] = handler.lastRefStack = ref;\r\n  try {\r\n    await callback();\r\n  } finally {\r\n    handler.refStack[handler.refIndex] = null;\r\n    handler.refIndex--;\r\n    handler.lastRefStack = handler.refIndex >= 0 ? handler.refStack[handler.refIndex] : null;\r\n  }\r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { WILDCARD } from \"../constants\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { calcListDiff } from \"../ListDiff/ListDiff\";\r\nimport { IListDiff } from \"../ListDiff/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { findPathNodeByPath } from \"../PathTree/PathNode\";\r\nimport { IPathNode } from \"../PathTree/types\";\r\nimport { GetByRefSymbol, SetCacheableSymbol } from \"../StateClass/symbols\";\r\nimport { IReadonlyStateHandler, IReadonlyStateProxy } from \"../StateClass/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { getStatePropertyRef } from \"../StatePropertyRef/StatepropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IRenderer, IUpdater } from \"./types\";\r\n\r\n/**\r\n * Renderer は、State の変更（参照 IStatePropertyRef の集合）に対応して、\r\n * PathTree を辿りつつ各 Binding（IBinding）へ applyChange を委譲するコーディネータです。\r\n *\r\n * 主な役割\r\n * - reorderList: 要素単位の並べ替え要求を収集し、親リスト単位の差分（IListDiff）へ変換して適用\r\n * - render: エントリポイント。ReadonlyState を生成し、reorder → 各 ref の描画（renderItem）の順で実行\r\n * - renderItem: 指定 ref に紐づく Binding を更新し、静的依存（子 PathNode）と動的依存を再帰的に辿る\r\n * - calcListDiff: リスト参照に対し旧値/新値/旧インデックスから差分を計算し、必要であれば保存\r\n *\r\n * コントラクト\r\n * - Binding#applyChange(renderer): 変更があった場合は renderer.updatedBindings に自分自身を追加すること\r\n * - engine.saveListAndListIndexes(ref, newValue, newIndexes): リストの論理的状態を最新に保持すること\r\n * - readonlyState[GetByRefSymbol](ref): ref の新しい値（読み取り専用ビュー）を返すこと\r\n *\r\n * スレッド/再入\r\n * - 同期実行前提。\r\n *\r\n * 代表的な例外\r\n * - UPD-001/002: Engine/ReadonlyState の未初期化\r\n * - UPD-003/004/005/006: ListIndex/ParentInfo/OldList* の不整合や ListDiff 未生成\r\n * - PATH-101: PathNode が見つからない\r\n */\r\nclass Renderer implements IRenderer {\r\n  /**\r\n   * このレンダリングサイクルで「変更あり」となった Binding の集合。\r\n   * 注意: 実際に追加するのは各 binding.applyChange 実装側の責務。\r\n   */\r\n  #updatedBindings: Set<IBinding> = new Set();\r\n  /**\r\n   * 二重適用を避けるために処理済みとした参照。\r\n   * renderItem の再帰や依存関係の横断時に循環/重複を防ぐ。\r\n   */\r\n  #processedRefs: Set<IStatePropertyRef> = new Set();\r\n  /**\r\n   * レンダリング対象のエンジン。state, pathManager, bindings などのファサード。\r\n   */\r\n  #engine: IComponentEngine;\r\n  #readonlyState: IReadonlyStateProxy | null = null;\r\n\r\n  #readonlyHandler : IReadonlyStateHandler | null = null;\r\n\r\n  /**\r\n   * 親リスト参照ごとに「要素の新しい並び位置」を記録するためのインデックス配列。\r\n   * reorderList で収集し、後段で仮の IListDiff を生成するために用いる。\r\n   */\r\n  #reorderIndexesByRef: Map<IStatePropertyRef, number[]> = new Map();\r\n\r\n  #updater: IUpdater;\r\n\r\n  constructor(engine: IComponentEngine, updater: IUpdater) {\r\n    this.#engine = engine;\r\n    this.#updater = updater;\r\n  }\r\n\r\n  /**\r\n   * このサイクル中に更新された Binding の集合を返す（読み取り専用的に使用）。\r\n   */\r\n  get updatedBindings(): Set<IBinding> {\r\n    return this.#updatedBindings;\r\n  }\r\n\r\n  /**\r\n   * 既に処理済みの参照集合を返す。二重適用の防止に利用する。\r\n   */\r\n  get processedRefs(): Set<IStatePropertyRef> {\r\n    return this.#processedRefs;\r\n  }\r\n\r\n  /**\r\n   * 読み取り専用 State ビューを取得する。render 実行中でなければ例外。\r\n   * Throws: UPD-002\r\n   */\r\n  get readonlyState(): IReadonlyStateProxy {\r\n    if (!this.#readonlyState) {\r\n      raiseError({\r\n        code: \"UPD-002\",\r\n        message: \"ReadonlyState not initialized\",\r\n        docsUrl: \"./docs/error-codes.md#upd\",\r\n      });\r\n    }\r\n    return this.#readonlyState;\r\n  }\r\n\r\n  get readonlyHandler(): IReadonlyStateHandler {\r\n    if (!this.#readonlyHandler) {\r\n      raiseError({\r\n        code: \"UPD-002\",\r\n        message: \"ReadonlyHandler not initialized\",\r\n        docsUrl: \"./docs/error-codes.md#upd\",\r\n      });\r\n    }\r\n    return this.#readonlyHandler;\r\n  }\r\n\r\n  /**\r\n   * バッキングエンジンを取得する。未初期化の場合は例外。\r\n   * Throws: UPD-001\r\n   */\r\n  get engine(): IComponentEngine {\r\n    if (!this.#engine) {\r\n      raiseError({\r\n        code: \"UPD-001\",\r\n        message: \"Engine not initialized\",\r\n        docsUrl: \"./docs/error-codes.md#upd\",\r\n      });\r\n    }\r\n    return this.#engine;\r\n  }\r\n\r\n  /**\r\n   * リスト要素の並び替え要求（要素単位）を収集し、対応するリスト（親Ref）に対して\r\n   * 位置変更（changeIndexes）や上書き（overwrites）を含む仮の ListDiff を生成して描画します。\r\n   *\r\n   * ポリシー\r\n   * - 受け取った items は「リスト要素の ref」。親リストの ref を導出して集約する。\r\n   * - 仮の IListDiff を構築し engine.saveListAndListIndexes に保存した後、親リストの PathNode から描画を再入する。\r\n   * - 既に lists に登録されているパターンは親リストとして扱い、要素→親の導出は行わない。\r\n   *\r\n   * Throws:\r\n   * - UPD-003: listIndex の不足\r\n   * - UPD-004: parentInfo 不整合 / 値に対応する旧インデックスが見つからない\r\n   * - UPD-005: oldListValue / oldListIndexes 欠落\r\n   * - PATH-101: 親リストの PathNode 未検出\r\n   */\r\n  reorderList(items: IStatePropertyRef[]): void {\r\n    const listRefs = new Set<IStatePropertyRef>();\r\n    for(let i = 0; i < items.length; i++) {\r\n      const ref = items[i];\r\n      if( this.#engine.pathManager.lists.has(ref.info.pattern) ) {\r\n        listRefs.add(ref);\r\n        continue;\r\n      }\r\n      if (!this.#engine.pathManager.elements.has(ref.info.pattern)) {\r\n        continue; // elements に登録されていないパスはスキップ\r\n      }\r\n      // リスト要素を処理済みに追加\r\n      this.#processedRefs.add(ref);\r\n      if (ref.info.parentInfo === null) {\r\n        raiseError({\r\n          code: \"UPD-004\",\r\n          message: `ParentInfo is null for ref: ${ref.key}`,\r\n          context: { refKey: ref.key, pattern: ref.info.pattern },\r\n          docsUrl: \"./docs/error-codes.md#upd\",\r\n        });\r\n      }\r\n      const listRef = getStatePropertyRef(ref.info.parentInfo, ref.listIndex?.at(-2) || null);\r\n      if (listRefs.has(listRef)) {\r\n        // リストの差分計算は後続のcalcListDiffで行うので、リオーダーのための計算はスキップ\r\n        continue;\r\n      }\r\n      let indexes = this.#reorderIndexesByRef.get(listRef);\r\n      if (typeof indexes === \"undefined\") {\r\n        indexes = [];\r\n        this.#reorderIndexesByRef.set(listRef, indexes);\r\n      }\r\n      const listIndex = ref.listIndex ?? raiseError({\r\n        code: \"UPD-003\",\r\n        message: `ListIndex is null for ref: ${ref.key}`,\r\n        context: { refKey: ref.key, pattern: ref.info.pattern },\r\n        docsUrl: \"./docs/error-codes.md#upd\",\r\n      });\r\n      indexes.push(listIndex.index);\r\n    }\r\n    for(const [ listRef, indexes ] of this.#reorderIndexesByRef) {\r\n      // listRefのリスト要素をindexesの順に並び替える\r\n      try {\r\n        const newListValue = this.readonlyState[GetByRefSymbol](listRef);\r\n        const { listClone: oldListValue, listIndexes: oldListIndexes } = this.#engine.getListAndListIndexes(listRef);\r\n        if (oldListValue == null || oldListIndexes == null) {\r\n          raiseError({\r\n            code: \"UPD-005\",\r\n            message: `OldListValue or OldListIndexes is null for ref: ${listRef.key}`,\r\n            context: { refKey: listRef.key, pattern: listRef.info.pattern },\r\n            docsUrl: \"./docs/error-codes.md#upd\",\r\n          });\r\n        }\r\n        const listDiff: IListDiff = {\r\n          oldListValue: oldListValue,\r\n          newListValue: newListValue,\r\n          oldIndexes: oldListIndexes,\r\n          newIndexes: Array.from(oldListIndexes),\r\n          changeIndexes: new Set(),\r\n          overwrites: new Set(),\r\n          same: true,\r\n        };\r\n        for(let i = 0; i < indexes.length; i++) {\r\n          const index = indexes[i];\r\n          const elementValue = listDiff.newListValue?.[index];\r\n          const oldIndex = listDiff.oldListValue?.indexOf(elementValue) ?? -1;\r\n          if (oldIndex === -1) {\r\n            listDiff.overwrites?.add(listDiff.newIndexes[index]);\r\n          } else {\r\n            const listIndex = listDiff.oldIndexes?.[oldIndex] ?? raiseError({\r\n              code: \"UPD-004\",\r\n              message: `ListIndex not found for value: ${elementValue}`,\r\n              context: { refKey: listRef.key, pattern: listRef.info.pattern },\r\n              docsUrl: \"./docs/error-codes.md#upd\",\r\n            });\r\n            listIndex.index = index;\r\n            listDiff.newIndexes[index] = listIndex;\r\n            listDiff.changeIndexes?.add(listIndex);\r\n          }\r\n          listDiff.same = false;\r\n        }\r\n        this.#updater.setListDiff(listRef, listDiff);\r\n        // 並べ替え（および上書き）が発生したので親リストの新状態とインデックスを保存\r\n        const saveInfo = this.#engine.getListAndListIndexes(listRef);\r\n        this.#updater.oldValueAndIndexesByRef.set(listRef, saveInfo);\r\n        this.#engine.saveListAndListIndexes(listRef, newListValue ?? null, listDiff.newIndexes);\r\n\r\n        const node = findPathNodeByPath(this.#engine.pathManager.rootNode, listRef.info.pattern);\r\n        if (node === null) {\r\n          raiseError({\r\n            code: \"PATH-101\",\r\n            message: `PathNode not found: ${listRef.info.pattern}`,\r\n            context: { pattern: listRef.info.pattern },\r\n            docsUrl: \"./docs/error-codes.md#path\",\r\n          });\r\n        }\r\n        // 親リスト単位で描画を再開する\r\n        this.renderItem(listRef, node);\r\n      } finally {\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * レンダリングのエントリポイント。ReadonlyState を生成し、\r\n   * 並べ替え処理→各参照の描画の順に処理します。\r\n   *\r\n   * 注意\r\n   * - readonlyState はこのメソッドのスコープ内でのみ有効。\r\n   * - SetCacheableSymbol により参照解決のキャッシュをまとめて有効化できる。\r\n   */\r\n  render(items: IStatePropertyRef[]): void {\r\n    this.#reorderIndexesByRef.clear();\r\n    this.#processedRefs.clear();\r\n    this.#updatedBindings.clear();\r\n\r\n    // 実際のレンダリングロジックを実装\r\n    this.#updater.createReadonlyState( (readonlyState, readonlyHandler) => {\r\n      this.#readonlyState = readonlyState;\r\n      this.#readonlyHandler = readonlyHandler;\r\n      try {\r\n        // まずはリストの並び替えを処理\r\n        this.reorderList(items);\r\n\r\n        for(let i = 0; i < items.length; i++) {\r\n          const ref = items[i];\r\n          const node = findPathNodeByPath(this.#engine.pathManager.rootNode, ref.info.pattern);\r\n          if (node === null) {\r\n            raiseError({\r\n              code: \"PATH-101\",\r\n              message: `PathNode not found: ${ref.info.pattern}`,\r\n              context: { pattern: ref.info.pattern },\r\n              docsUrl: \"./docs/error-codes.md#path\",\r\n            });\r\n          }\r\n          this.renderItem(ref, node);\r\n        }\r\n      } finally {\r\n        this.#readonlyState = null;\r\n        this.#readonlyHandler = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 参照 ref の旧値/新値と保存済みインデックスから ListDiff を計算し、\r\n   * 変更があれば engine.saveListAndListIndexes に保存します。\r\n  *\r\n  * 引数\r\n  * - ref: 対象のリスト参照\r\n  * - _newListValue: isNewValue=true のときのみ使用する、呼び出し側で提供された新リスト値\r\n  * - isNewValue: true の場合、_newListValue を新値とみなす。false の場合は readonlyState から取得\r\n  *\r\n  * メモ\r\n  * - old/new 値の参照比較で異なる場合に限り saveListAndListIndexes を呼び出す\r\n   */\r\n  calcListDiff(ref: IStatePropertyRef): IListDiff | null {\r\n    const tmpValue = this.readonlyState[GetByRefSymbol](ref);\r\n    return this.#updater.getListDiff(ref) ?? null;\r\n  }\r\n\r\n  /**\r\n   * 単一の参照 ref と対応する PathNode を描画します。\r\n   *\r\n   * - まず自身のバインディング適用\r\n   * - 次に静的依存（ワイルドカード含む）\r\n   * - 最後に動的依存（ワイルドカードは階層的に展開）\r\n   *\r\n   * 静的依存（子ノード）\r\n   * - 子名が WILDCARD の場合: calcListDiff の adds を利用して各リスト要素に対し再帰描画\r\n   * - それ以外: 親の listIndex を引き継いで子参照を生成して再帰描画\r\n   *\r\n   * 動的依存\r\n   * - pathManager.dynamicDependencies に登録されたパスを基に、ワイルドカードを展開しつつ描画を再帰\r\n   *\r\n   * Throws\r\n   * - UPD-006: WILDCARD 分岐で ListDiff が未計算（null）の場合\r\n   * - PATH-101: 動的依存の PathNode 未検出\r\n   */\r\n  renderItem(\r\n    ref: IStatePropertyRef,\r\n    node: IPathNode,\r\n  ): void {\r\n    if (this.processedRefs.has(ref)) {\r\n      return; // すでに処理済みのRef情報はスキップ\r\n    }\r\n    this.processedRefs.add(ref);\r\n\r\n    // バインディングに変更を適用する\r\n    // 変更があったバインディングは updatedBindings に追加する（applyChange 実装の責務）\r\n    const bindings = this.#engine.getBindings(ref);\r\n    for(let i = 0; i < bindings.length; i++) {\r\n      const binding = bindings[i];\r\n      if (this.#updatedBindings.has(binding)) {\r\n        continue; // すでに更新済みのバインディングはスキップ\r\n      }\r\n      binding.applyChange(this);\r\n    }\r\n\r\n    // 静的な依存関係を辿る\r\n    for(const [ name, childNode ] of node.childNodeByName) {\r\n      const childInfo = getStructuredPathInfo(childNode.currentPath);\r\n      if (name === WILDCARD) {\r\n        const diff = this.#updater.getListDiff(ref) ?? null;\r\n        if (diff === null) {\r\n          raiseError({\r\n            code: \"UPD-006\",\r\n            message: \"ListDiff is null during renderItem\",\r\n            context: { refKey: ref.key, pattern: ref.info.pattern },\r\n            docsUrl: \"./docs/error-codes.md#upd\",\r\n          });\r\n        }\r\n        for(const listIndex of diff.adds ?? []) {\r\n          const childRef = getStatePropertyRef(childInfo, listIndex);\r\n          this.renderItem(childRef, childNode);\r\n        }\r\n      } else {\r\n        const childRef = getStatePropertyRef(childInfo, ref.listIndex);\r\n        this.renderItem(childRef, childNode);\r\n      }\r\n    }\r\n\r\n    // 動的な依存関係を辿る\r\n    const deps = this.#engine.pathManager.dynamicDependencies.get(ref.info.pattern);\r\n    if (deps) {\r\n      for(const depPath of deps) {\r\n        const depInfo = getStructuredPathInfo(depPath);\r\n        const depNode = findPathNodeByPath(this.#engine.pathManager.rootNode, depInfo.pattern);\r\n        if (depNode === null) {\r\n          raiseError({\r\n            code: \"PATH-101\",\r\n            message: `PathNode not found: ${depInfo.pattern}`,\r\n            context: { pattern: depInfo.pattern },\r\n            docsUrl: \"./docs/error-codes.md#path\",\r\n          });\r\n        }\r\n        if (depInfo.wildcardCount > 0) {\r\n          const infos = depInfo.wildcardParentInfos;\r\n          const walk = (depRef: IStatePropertyRef, index: number, nextInfo: IStructuredPathInfo) => {\r\n            const tmpValue = this.readonlyState[GetByRefSymbol](depRef);\r\n            const listIndexes = this.#engine.getListIndexes(depRef) || [];\r\n            if ((index + 1) < infos.length) {\r\n              for(let i = 0; i < listIndexes.length; i++) {\r\n                const nextRef = getStatePropertyRef(nextInfo, listIndexes[i]);\r\n                walk(nextRef, index + 1, infos[index + 1]);\r\n              }\r\n            } else {\r\n              for(let i = 0; i < listIndexes.length; i++) {\r\n                const subDepRef = getStatePropertyRef(depInfo, listIndexes[i]);\r\n                this.renderItem(subDepRef, depNode);\r\n              }\r\n            }\r\n          }\r\n          const startRef = getStatePropertyRef(depInfo.wildcardParentInfos[0], null);\r\n          walk(startRef, 0, depInfo.wildcardParentInfos[1] || null);\r\n        } else {\r\n          const depRef = getStatePropertyRef(depInfo, null);\r\n          this.renderItem(depRef, depNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n\r\n/**\r\n * 便宜関数。Renderer のインスタンス化と render 呼び出しをまとめて行う。\r\n */\r\nexport function render(refs: IStatePropertyRef[], engine: IComponentEngine, updater: IUpdater): void {\r\n  const renderer = new Renderer(engine, updater);\r\n  renderer.render(refs);\r\n}","import { IComponentEngine, ISaveInfoByResolvedPathInfo } from \"../ComponentEngine/types\";\r\nimport { calcListDiff } from \"../ListDiff/ListDiff\";\r\nimport { IListDiff } from \"../ListDiff/types\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { findPathNodeByPath } from \"../PathTree/PathNode\";\r\nimport { IPathNode } from \"../PathTree/types\";\r\nimport { createReadonlyStateHandler, createReadonlyStateProxy } from \"../StateClass/createReadonlyStateProxy\";\r\nimport { IStateProxy, IWritableStateHandler, IWritableStateProxy } from \"../StateClass/types\";\r\nimport { useWritableStateProxy } from \"../StateClass/useWritableStateProxy\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { render } from \"./Renderer\";\r\nimport { IUpdater, ReadonlyStateCallback, UpdateCallback } from \"./types\";\r\n\r\n\r\n/**\r\n * Updaterクラスは、状態管理と更新の中心的な役割を果たします。\r\n * 状態更新が必要な場合に、都度インスタンスを作成して使用します。\r\n * 主な機能は以下の通りです:\r\n */\r\nclass Updater implements IUpdater {\r\n  queue: IStatePropertyRef[] = [];\r\n  #rendering: boolean = false;\r\n  #engine: IComponentEngine;\r\n\r\n  #version: number;\r\n  #revision: number = 0;\r\n  #listDiffByRef: Map<IStatePropertyRef, IListDiff> = new Map();\r\n  #oldValueAndIndexesByRef: Map<IStatePropertyRef, ISaveInfoByResolvedPathInfo> = new Map();\r\n  #revisionByUpdatedPath: Map<string, number> = new Map();\r\n\r\n  constructor(engine: IComponentEngine) {\r\n    this.#engine = engine;\r\n    this.#version = engine.versionUp();\r\n  }\r\n\r\n  get revisionByUpdatedPath(): Map<string, number> {\r\n    return this.#revisionByUpdatedPath;\r\n  }\r\n\r\n  get oldValueAndIndexesByRef(): Map<IStatePropertyRef, ISaveInfoByResolvedPathInfo> {\r\n    return this.#oldValueAndIndexesByRef;\r\n  }\r\n\r\n  get version(): number {\r\n    return this.#version;\r\n  }\r\n\r\n  get revision(): number {\r\n    return this.#revision;\r\n  }\r\n\r\n  /**\r\n   * リストの元の値とインデックス情報を取得\r\n   * @param ref\r\n   * @returns \r\n   */\r\n  getOldValueAndIndexes(ref: IStatePropertyRef): ISaveInfoByResolvedPathInfo | undefined {\r\n    let saveInfo = this.#oldValueAndIndexesByRef.get(ref);\r\n    if (typeof saveInfo === \"undefined\") {\r\n      saveInfo = this.#engine.getListAndListIndexes(ref);\r\n    }\r\n    return saveInfo;\r\n  }\r\n\r\n  /**\r\n   * リスト差分を計算し、必要に応じて保存する\r\n   * @param ref \r\n   * @param newValue \r\n   * @returns \r\n   */\r\n  calcListDiff(ref: IStatePropertyRef, newValue:any): boolean {\r\n    const curDiff = this.#listDiffByRef.get(ref);\r\n    if (typeof curDiff !== \"undefined\") {\r\n      // すでに計算結果がある場合は、変更があるか計算する\r\n      const diff = calcListDiff(ref.listIndex, curDiff.newListValue, newValue, curDiff.newIndexes);\r\n      if (diff.same) {\r\n        return false;\r\n      }\r\n      // 変更がある場合、以降の処理で元のリストと差分情報を計算し直す\r\n    }\r\n    // 元のリストとインデックス情報を取得して差分計算\r\n    const saveInfo = this.getOldValueAndIndexes(ref);\r\n    const diff = calcListDiff(ref.listIndex, saveInfo?.list, newValue, saveInfo?.listIndexes);\r\n    // 差分を保存、diff.sameに関わらず差分結果を保存(リストが初期化の場合など差分結果なしはまずいので)\r\n    this.#listDiffByRef.set(ref, diff);\r\n    if (diff.same) {\r\n      return false;\r\n    }\r\n    // 差分がある場合は保存処理を行う\r\n    this.#engine.saveListAndListIndexes(ref, diff.newListValue ?? null, diff.newIndexes);\r\n    this.#oldValueAndIndexesByRef.set(ref, saveInfo ?? { list:null, listIndexes: null, listClone: null });\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * リスト差分結果を取得\r\n   * @param ref \r\n   * @returns \r\n   */\r\n  getListDiff(ref: IStatePropertyRef): IListDiff | undefined {\r\n    return this.#listDiffByRef.get(ref);\r\n  }\r\n\r\n  /**\r\n   * リスト差分結果を設定\r\n   * @param ref \r\n   * @param diff \r\n   */\r\n  setListDiff(ref: IStatePropertyRef, diff: IListDiff): void {\r\n    this.#listDiffByRef.set(ref, diff);\r\n  }\r\n  /**\r\n   * 更新したRefをキューに追加し、レンダリングをスケジュールする\r\n   * @param ref \r\n   * @returns \r\n   */\r\n  enqueueRef(ref: IStatePropertyRef): void {\r\n    this.#revision++;\r\n    this.queue.push(ref);\r\n    this.collectMaybeUpdates(this.#engine, ref.info.pattern, this.#revisionByUpdatedPath, this.#revision);\r\n    // レンダリング中はスキップ\r\n    if (this.#rendering) return;\r\n    this.#rendering = true;\r\n    queueMicrotask(() => {\r\n      this.rendering();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 状態更新処理開始\r\n   * @param loopContext \r\n   * @param callback \r\n   */\r\n  async update(loopContext: ILoopContext | null, callback: UpdateCallback): Promise<void> {\r\n    await useWritableStateProxy(this.#engine, this, this.#engine.state, loopContext, async (state:IWritableStateProxy, handler:IWritableStateHandler) => {\r\n      // 状態更新処理\r\n      await callback(state, handler);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * リードオンリーな状態を生成し、コールバックに渡す\r\n   * @param callback \r\n   * @returns \r\n   */\r\n  createReadonlyState(callback: ReadonlyStateCallback): any {\r\n    const handler = createReadonlyStateHandler(this.#engine, this);\r\n    const stateProxy = createReadonlyStateProxy(this.#engine.state, handler);\r\n    return callback(stateProxy, handler);\r\n  }\r\n\r\n  /**\r\n   * レンダリング処理\r\n   */\r\n  rendering(): void {\r\n    try {\r\n      while( this.queue.length > 0 ) {\r\n        // キュー取得\r\n        const queue = this.queue;\r\n        this.queue = [];\r\n        // レンダリング実行\r\n        render(queue, this.#engine, this);\r\n      }\r\n    } finally {\r\n      this.#rendering = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新したパスに対して影響があるパスを再帰的に収集する\r\n   * @param engine \r\n   * @param path \r\n   * @param node \r\n   * @param revisionByUpdatedPath \r\n   * @param revision \r\n   * @param visitedInfo \r\n   * @returns \r\n   */\r\n  recursiveCollectMaybeUpdates(\r\n    engine: IComponentEngine,\r\n    path: string,\r\n    node: IPathNode,\r\n    visitedInfo: Set<string>,\r\n    isSource: boolean\r\n  ): void {\r\n    if (visitedInfo.has(path)) return;\r\n    // swapの場合スキップしたい\r\n    if (isSource && engine.pathManager.elements.has(path)) {\r\n      return;\r\n\r\n    }\r\n    visitedInfo.add(path);\r\n\r\n    for(const [name, childNode] of node.childNodeByName.entries()) {\r\n      const childPath = childNode.currentPath;\r\n      this.recursiveCollectMaybeUpdates(engine, childPath, childNode, visitedInfo, false);\r\n    }\r\n\r\n    const deps = engine.pathManager.dynamicDependencies.get(path) ?? [];\r\n    for(const depPath of deps) {\r\n      const depNode = findPathNodeByPath(engine.pathManager.rootNode, depPath);\r\n      if (depNode === null) {\r\n        raiseError({\r\n          code: \"UPD-004\",\r\n          message: `Path node not found for pattern: ${depPath}`,\r\n          docsUrl: \"./docs/error-codes.md#upd\",\r\n        });\r\n      }\r\n      this.recursiveCollectMaybeUpdates(engine, depPath, depNode, visitedInfo, false);\r\n    }\r\n  }\r\n\r\n  #cacheUpdatedPathsByPath: Map<string, Set<string>> = new Map();\r\n  collectMaybeUpdates(engine: IComponentEngine, path: string, revisionByUpdatedPath: Map<string, number>, revision: number): void {\r\n    const node = findPathNodeByPath(engine.pathManager.rootNode, path);\r\n    if (node === null) {\r\n      raiseError({\r\n        code: \"UPD-003\",\r\n        message: `Path node not found for pattern: ${path}`,\r\n        docsUrl: \"./docs/error-codes.md#upd\",\r\n      });\r\n    }\r\n\r\n    // キャッシュ\r\n    let updatedPaths = this.#cacheUpdatedPathsByPath.get(path);\r\n    if (typeof updatedPaths === \"undefined\") {\r\n      updatedPaths = new Set<string>();\r\n      this.recursiveCollectMaybeUpdates(engine, path, node, updatedPaths, true);\r\n    }\r\n    for(const updatedPath of updatedPaths) {\r\n      revisionByUpdatedPath.set(updatedPath, revision);\r\n    }\r\n    this.#cacheUpdatedPathsByPath.set(path, updatedPaths);\r\n  }\r\n}\r\n\r\n/**\r\n * Updaterを生成しコールバックに渡す\r\n * スコープを明確にするための関数\r\n * @param engine \r\n * @param callback \r\n */\r\nexport function createUpdater(engine: IComponentEngine, callback: (updater: IUpdater) => Promise<void> | void): Promise<void> | void{\r\n  const updater = new Updater(engine);\r\n  return callback(updater);\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IRenderer } from \"../../Updater/types.js\";\r\nimport { createUpdater } from \"../../Updater/Updater.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeEventクラスは、イベントバインディング（onClick, onInputなど）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - 指定イベント（on～）に対して、バインディングされた関数をイベントリスナーとして登録\r\n * - デコレータ（preventDefault, stopPropagation）によるイベント制御に対応\r\n * - ループコンテキストやリストインデックスも引数としてイベントハンドラに渡す\r\n * - ハンドラ実行時はstateProxyを生成し、Updater経由で非同期的に状態を更新\r\n *\r\n * 設計ポイント:\r\n * - nameからイベント名（subName）を抽出し、addEventListenerで登録\r\n * - バインディング値が関数でない場合はエラー\r\n * - デコレータでpreventDefault/stopPropagationを柔軟に制御\r\n * - ループ内イベントにも対応し、リストインデックスを引数展開\r\n */\r\nclass BindingNodeEvent extends BindingNode {\r\n  #subName    : string;\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#subName = this.name.slice(2); // on～\r\n    const element = node as HTMLElement;\r\n    element.addEventListener(this.subName, (e:Event) => this.handler(e));\r\n  }\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  update() {\r\n    // 何もしない（イベントバインディングは初期化時のみ）\r\n  }\r\n\r\n  async handler(e: Event) {\r\n    const engine = this.binding.engine;\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n    const indexes = loopContext?.serialize().map((context) => context.listIndex.index) ?? [];\r\n    const options = this.decorates;\r\n    if (options.includes(\"preventDefault\")) {\r\n      e.preventDefault();\r\n    }\r\n    if (options.includes(\"stopPropagation\")) {\r\n      e.stopPropagation();\r\n    }\r\n    await createUpdater(engine, async (updater) => {\r\n      await updater.update(loopContext, async (state, handler) => {\r\n        // stateProxyを生成し、バインディング値を実行\r\n        const func = this.binding.bindingState.getValue(state, handler);\r\n        if (typeof func !== \"function\") {\r\n          raiseError({\r\n            code: 'BIND-201',\r\n            message: `${this.name} is not a function`,\r\n            context: { where: 'BindingNodeEvent.handler', name: this.name, receivedType: typeof func },\r\n            docsUrl: '/docs/error-codes.md#bind',\r\n            severity: 'error',\r\n          });\r\n        }\r\n        await Reflect.apply(func, state, [e, ...indexes]);\r\n      });\r\n    });\r\n  }\r\n  applyChange(renderer: IRenderer): void {\r\n    // イベントバインディングは初期化時のみで、状態変更時に何もしない\r\n  }\r\n}\r\n\r\n/**\r\n * イベントバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeEventインスタンスを生成\r\n */\r\nexport const createBindingNodeEvent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeEvent(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { COMMENT_TEMPLATE_MARK } from \"../../constants.js\";\r\nimport { Filters } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\n\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\n/**\r\n * BindingNodeBlock は、テンプレートブロック（コメントノードで示すテンプレート挿入部）を\r\n * バインディング対象とする基底クラス。\r\n *\r\n * 役割:\r\n * - コメントのテキストからテンプレートIDを抽出し id として保持\r\n * - Block 系バインディングの共通処理を提供\r\n *\r\n * Throws:\r\n * - BIND-201 Invalid node: コメントノードから ID を抽出できない場合\r\n */\r\nexport class BindingNodeBlock extends BindingNode {\r\n  #id: number;\r\n  get id(): number {\r\n    return this.#id;\r\n  }\r\n\r\n  get isBlock(): boolean {\r\n    return true;\r\n  }\r\n  \r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const id = this.node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN) ?? raiseError({\r\n      code: 'BIND-201',\r\n      message: 'Invalid node',\r\n      context: { where: 'BindingNodeBlock.id', textContent: this.node.textContent ?? null },\r\n      docsUrl: '/docs/error-codes.md#bind',\r\n      severity: 'error',\r\n    });\r\n    this.#id = Number(id);\r\n  }\r\n    \r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\nimport { IRenderer } from \"../../Updater/types.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeIf は、if バインディング（条件付き描画）を担当するノード実装。\r\n *\r\n * 役割:\r\n * - boolean 値に応じて BindContent（描画内容）の mount/unmount を制御\r\n * - 現在表示中の BindContent 集合を bindContents で参照可能\r\n *\r\n * 例外（代表）:\r\n * - BIND-201 Not implemented: assignValue は未実装\r\n * - BIND-201 Value is not boolean: applyChange で値が boolean ではない\r\n * - BIND-201 ParentNode is null: マウント先の親ノードが存在しない\r\n * - TMP-001 Template not found: 内部で参照するテンプレート未登録\r\n */\r\nclass BindingNodeIf extends BindingNodeBlock {\r\n  #bindContent: IBindContent;\r\n  #trueBindContents: IBindContent[];\r\n  #falseBindContents: IBindContent[] = [];\r\n  #bindContents: IBindContent[];\r\n\r\n  get bindContents(): IBindContent[] {\r\n    return this.#bindContents;\r\n  }\r\n\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const blankInfo = getStructuredPathInfo(\"\");\r\n    const blankRef = getStatePropertyRef(blankInfo, null);\r\n    this.#bindContent = createBindContent(\r\n      this.binding, \r\n      this.id, \r\n      this.binding.engine,\r\n      blankRef, \r\n    );\r\n    this.#trueBindContents = this.#bindContents = [this.#bindContent];\r\n  }\r\n\r\n  /**\r\n   * 値の直接代入は未実装。\r\n   * Throws: BIND-201 Not implemented\r\n   */\r\n  assignValue(value: any): void {\r\n    raiseError({\r\n      code: 'BIND-201',\r\n      message: 'Not implemented',\r\n      context: { where: 'BindingNodeIf.assignValue', name: this.name },\r\n      docsUrl: '/docs/error-codes.md#bind',\r\n      severity: 'error',\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * 値を評価して true なら mount+applyChange、false なら unmount。\r\n   * 既に更新済みの binding はスキップ。\r\n   *\r\n   * Throws:\r\n   * - BIND-201 Value is not boolean\r\n   * - BIND-201 ParentNode is null\r\n   */\r\n  applyChange(renderer: IRenderer): void {\r\n    if (renderer.updatedBindings.has(this.binding)) return;\r\n    const filteredValue = this.binding.bindingState.getFilteredValue(renderer.readonlyState, renderer.readonlyHandler);\r\n    if (typeof filteredValue !== \"boolean\") {\r\n      raiseError({\r\n        code: 'BIND-201',\r\n        message: 'Value is not boolean',\r\n        context: { where: 'BindingNodeIf.update', valueType: typeof filteredValue },\r\n        docsUrl: '/docs/error-codes.md#bind',\r\n        severity: 'error',\r\n      });\r\n    }\r\n    const parentNode = this.node.parentNode;\r\n    if (parentNode == null) {\r\n      raiseError({\r\n        code: 'BIND-201',\r\n        message: 'ParentNode is null',\r\n        context: { where: 'BindingNodeIf.update', nodeType: this.node.nodeType },\r\n        docsUrl: '/docs/error-codes.md#bind',\r\n        severity: 'error',\r\n      });\r\n    }\r\n    if (filteredValue) {\r\n      this.#bindContent.mountAfter(parentNode, this.node);\r\n      this.#bindContent.applyChange(renderer);\r\n      this.#bindContents = this.#trueBindContents;\r\n    } else {\r\n      this.#bindContent.unmount();\r\n      this.#bindContents = this.#falseBindContents;\r\n    }\r\n    renderer.updatedBindings.add(this.binding);\r\n  }\r\n}\r\n\r\n/**\r\n * if バインディングノード生成用ファクトリ関数。\r\n * name / フィルタ / デコレータ設定に従い BindingNodeIf を生成する。\r\n */\r\nexport const createBindingNodeIf: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeIf(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types.js\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types.js\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\nimport { IRenderer } from \"../../Updater/types.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nconst EMPTY_SET = new Set<any>();\r\n\r\n/**\r\n * フラグメントに追加し、一括でノードで追加するかのフラグ\r\n * ベンチマークの結果で判断する\r\n */\r\nconst USE_ALL_APPEND = false;\r\n\r\n/**\r\n * BindingNodeForクラスは、forバインディング（配列やリストの繰り返し描画）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - リストデータの各要素ごとにBindContent（バインディングコンテキスト）を生成・管理\r\n * - 配列の差分検出により、必要なBindContentの生成・再利用・削除・再描画を最適化\r\n * - DOM上での要素の並び替えや再利用、アンマウント・マウント処理を効率的に行う\r\n * - プール機構によりBindContentの再利用を促進し、パフォーマンスを向上\r\n *\r\n * 設計ポイント:\r\n * - applyChangeでリストの差分を検出し、BindContentの生成・削除・再利用を管理\r\n * - 追加・削除が無い場合はリオーダー（並べ替え）のみをDOM移動で処理し、再描画を抑制\r\n * - 上書き（overwrites）は同位置の内容変化のため、applyChangeを再実行\r\n * - BindContentのプール・インデックス管理でGCやDOM操作の最小化を図る\r\n * - バインディング状態やリストインデックス情報をエンジンに保存し、再描画や依存解決を容易にする\r\n *\r\n * Throws（代表例）:\r\n * - BIND-201 ParentNode is null / BindContent not found など applyChange 実行時の不整合\r\n * - BIND-202 Length is negative: プール長の不正設定\r\n * - BIND-301 Not implemented. Use update or applyChange: assignValue は未実装\r\n *\r\n * ファクトリ関数 createBindingNodeFor でフィルタ・デコレータ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeFor extends BindingNodeBlock {\r\n  #bindContents          : IBindContent[] = [];\r\n  #bindContentByListIndex: WeakMap<IListIndex, IBindContent> = new WeakMap();\r\n  #bindContentPool       : IBindContent[] = [];\r\n  #bindContentLastIndex  : number = 0;\r\n  #loopInfo: IStructuredPathInfo | undefined = undefined;\r\n\r\n  get bindContents(): IBindContent[] {\r\n    return this.#bindContents;\r\n  }\r\n\r\n  get isFor(): boolean {\r\n    return true;\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  createBindContent(listIndex: IListIndex): IBindContent {\r\n    let bindContent: IBindContent;\r\n    if (this.#bindContentLastIndex >= 0) {\r\n      // プールの最後の要素を取得して、プールの長さをあとで縮減する\r\n      // 作るたびにプールを縮減すると、パフォーマンスが悪化するため\r\n      // プールの長さを縮減するのは、全ての要素を作った後に行う\r\n      bindContent = this.#bindContentPool[this.#bindContentLastIndex];\r\n      this.#bindContentLastIndex--;\r\n      bindContent.assignListIndex(listIndex);\r\n    } else {\r\n      const loopRef = getStatePropertyRef(this.loopInfo, listIndex);\r\n      bindContent = createBindContent(\r\n        this.binding,\r\n        this.id,\r\n        this.binding.engine,\r\n        loopRef\r\n      );\r\n    }\r\n    // 登録\r\n    this.#bindContentByListIndex.set(listIndex, bindContent);\r\n    return bindContent;\r\n  }\r\n\r\n  /**\r\n   * BindContent を削除（アンマウント）し、ループ文脈のインデックスもクリアする。\r\n   */\r\n  deleteBindContent(bindContent: IBindContent): void {\r\n    bindContent.unmount();\r\n    bindContent.loopContext?.clearListIndex();\r\n  }\r\n\r\n  get bindContentLastIndex():number {\r\n    return this.#bindContentLastIndex;\r\n  }\r\n  set bindContentLastIndex(value:number) {\r\n    this.#bindContentLastIndex = value;\r\n  }\r\n\r\n  get poolLength():number {\r\n    return this.#bindContentPool.length;\r\n  }\r\n  set poolLength(length: number) {\r\n    if (length < 0) {\r\n      raiseError({\r\n        code: 'BIND-202',\r\n        message: 'Length is negative',\r\n        context: { where: 'BindingNodeFor.setPoolLength', length },\r\n        docsUrl: './docs/error-codes.md#bind',\r\n      });\r\n    }\r\n    this.#bindContentPool.length = length;\r\n  }\r\n\r\n  get loopInfo(): IStructuredPathInfo {\r\n    if (typeof this.#loopInfo === \"undefined\") {\r\n      const loopPath = this.binding.bindingState.pattern + \".*\";\r\n      this.#loopInfo = getStructuredPathInfo(loopPath);\r\n    }\r\n    return this.#loopInfo;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    raiseError({\r\n      code: 'BIND-301',\r\n      message: 'Not implemented. Use update or applyChange',\r\n      context: { where: 'BindingNodeFor.assignValue' },\r\n      docsUrl: './docs/error-codes.md#bind',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * リストの差分を適用して DOM とバインディングを更新する中核メソッド。\r\n   *\r\n   * - 追加/削除がある場合: add は生成+mount+applyChange、reuse は位置調整のみ\r\n   * - 追加/削除が無い場合: changeIndexes はDOM移動のみ（再描画なし）、overwrites は applyChange を呼ぶ\r\n   * - 全削除/全追加はフラグメント最適化を適用\r\n   */\r\n  applyChange(renderer: IRenderer): void {\r\n    if (renderer.updatedBindings.has(this.binding)) return;\r\n    let newBindContents: IBindContent[] = [];\r\n    // 削除を先にする\r\n    const removeBindContentsSet = new Set<IBindContent>();\r\n    const listDiff = renderer.calcListDiff(this.binding.bindingState.ref);\r\n    if (listDiff === null) {\r\n      raiseError({\r\n        code: 'BIND-201',\r\n        message: 'ListDiff is null',\r\n        context: { where: 'BindingNodeFor.applyChange' },\r\n        docsUrl: './docs/error-codes.md#bind',\r\n      });\r\n    }\r\n    const parentNode = this.node.parentNode ?? raiseError({\r\n      code: 'BIND-201',\r\n      message: 'ParentNode is null',\r\n      context: { where: 'BindingNodeFor.applyChange' },\r\n      docsUrl: './docs/error-codes.md#bind',\r\n    });\r\n    // 全削除最適化のフラグ\r\n    const isAllRemove = (listDiff.oldListValue?.length === listDiff.removes?.size && (listDiff.oldListValue?.length ?? 0) > 0);\r\n    // 親ノードこのノードだけ持つかのチェック\r\n    let isParentNodeHasOnlyThisNode = false;\r\n    if (isAllRemove) {\r\n      const parentChildNodes = Array.from(parentNode.childNodes);\r\n      const lastContent = this.#bindContents.at(-1) ?? raiseError({\r\n        code: 'BIND-201',\r\n        message: 'Last content is null',\r\n        context: { where: 'BindingNodeFor.applyChange' },\r\n        docsUrl: '/docs/error-codes.md#bind',\r\n      });\r\n      // ブランクノードを飛ばす\r\n      let firstNode: Node | null = parentChildNodes[0];\r\n      while(firstNode && firstNode.nodeType === Node.TEXT_NODE && firstNode.textContent?.trim() === \"\") {\r\n        firstNode = firstNode.nextSibling;\r\n      }\r\n      let lastNode: Node | null = parentChildNodes.at(-1) ?? null;\r\n      while(lastNode && lastNode.nodeType === Node.TEXT_NODE && lastNode.textContent?.trim() === \"\") {\r\n        lastNode = lastNode.previousSibling;\r\n      }\r\n      if (firstNode === this.node && lastNode === lastContent.getLastNode(parentNode)) {\r\n        isParentNodeHasOnlyThisNode = true;\r\n      }\r\n    }\r\n    if (isAllRemove && isParentNodeHasOnlyThisNode) {\r\n      // 全削除最適化\r\n      parentNode.textContent = \"\";\r\n      parentNode.append(this.node);\r\n      for(let i = 0; i < this.#bindContents.length; i++) {\r\n        const bindContent = this.#bindContents[i];\r\n        bindContent.loopContext?.clearListIndex();\r\n      }\r\n      this.#bindContentPool.push(...this.#bindContents);\r\n    } else {\r\n      if (listDiff.removes) {\r\n        for(const listIndex of listDiff.removes) {\r\n          const bindContent = this.#bindContentByListIndex.get(listIndex);\r\n          if (typeof bindContent === \"undefined\") {\r\n            raiseError({\r\n              code: 'BIND-201',\r\n              message: 'BindContent not found',\r\n              context: { where: 'BindingNodeFor.applyChange', when: 'removes' },\r\n              docsUrl: './docs/error-codes.md#bind',\r\n            });\r\n          }\r\n          this.deleteBindContent(bindContent);\r\n          removeBindContentsSet.add(bindContent);\r\n        }\r\n      }\r\n      this.#bindContentPool.push(...removeBindContentsSet);\r\n    }\r\n\r\n    let lastBindContent = null;\r\n    const firstNode = this.node;\r\n    this.bindContentLastIndex = this.poolLength - 1;\r\n    const isAllAppend = USE_ALL_APPEND && (listDiff.newListValue?.length === listDiff.adds?.size && (listDiff.newListValue?.length ?? 0) > 0);\r\n    // リオーダー判定: 追加・削除がなく、並び替え（changeIndexes）または上書き（overwrites）のみの場合\r\n    const isReorder = (listDiff.adds?.size ?? 0) === 0 && (listDiff.removes?.size ?? 0) === 0 &&\r\n      ((listDiff.changeIndexes?.size ?? 0) > 0 || (listDiff.overwrites?.size ?? 0) > 0 );\r\n    if (!isReorder) {\r\n      // 全追加の場合、バッファリングしてから一括追加する\r\n      const fragmentParentNode = isAllAppend ? document.createDocumentFragment() : parentNode;\r\n      const fragmentFirstNode = isAllAppend ? null : firstNode;\r\n      const adds = listDiff.adds ?? EMPTY_SET;\r\n      for(const listIndex of listDiff.newIndexes) {\r\n        const lastNode = lastBindContent?.getLastNode(fragmentParentNode) ?? fragmentFirstNode;\r\n        let bindContent;\r\n        if (adds.has(listIndex)) {\r\n          bindContent = this.createBindContent(listIndex);\r\n          bindContent.mountAfter(fragmentParentNode, lastNode);\r\n          //for(let i = 0; i < bindContent.blockBindings.length; i++) {\r\n          //  const blockBinding = bindContent.blockBindings[i];\r\n          //  blockBinding.applyChange(renderer);\r\n          //}\r\n          bindContent.applyChange(renderer);\r\n        } else {\r\n          bindContent = this.#bindContentByListIndex.get(listIndex);\r\n          if (typeof bindContent === \"undefined\") {\r\n            raiseError({\r\n              code: 'BIND-201',\r\n              message: 'BindContent not found',\r\n              context: { where: 'BindingNodeFor.applyChange', when: 'reuse' },\r\n              docsUrl: './docs/error-codes.md#bind',\r\n            });\r\n          }\r\n          if (lastNode?.nextSibling !== bindContent.firstChildNode) {\r\n            bindContent.mountAfter(fragmentParentNode, lastNode);\r\n          }\r\n        }\r\n        newBindContents.push(bindContent);\r\n        lastBindContent = bindContent;\r\n      }\r\n      // 全追加最適化\r\n      if (isAllAppend) {\r\n        const beforeNode = firstNode.nextSibling;\r\n        parentNode.insertBefore(fragmentParentNode, beforeNode);\r\n      }\r\n    } else {\r\n      // リオーダー処理: 要素の追加・削除がない場合の最適化処理\r\n      // 並び替え処理: インデックスの変更のみなので、要素の再描画は不要\r\n      // DOM位置の調整のみ行い、BindContentの内容は再利用する\r\n      if ((listDiff.changeIndexes?.size ?? 0) > 0) {\r\n        const bindContents = Array.from(this.#bindContents);\r\n        const changeIndexes = Array.from(listDiff.changeIndexes ?? []);\r\n        changeIndexes.sort((a, b) => a.index - b.index);\r\n        for(const listIndex of changeIndexes) {\r\n          const bindContent = this.#bindContentByListIndex.get(listIndex);\r\n          if (typeof bindContent === \"undefined\") {\r\n            raiseError({\r\n              code: 'BIND-201',\r\n              message: 'BindContent not found',\r\n              context: { where: 'BindingNodeFor.applyChange', when: 'reorder' },\r\n              docsUrl: '/docs/error-codes.md#bind',\r\n            });\r\n          }\r\n          bindContents[listIndex.index] = bindContent;\r\n          const lastNode = bindContents[listIndex.index - 1]?.getLastNode(parentNode) ?? firstNode;\r\n          bindContent.mountAfter(parentNode, lastNode);\r\n        }\r\n        newBindContents = bindContents;\r\n      }\r\n      // 上書き処理: 同じ位置の要素が異なる値に変更された場合の再描画\r\n      if ((listDiff.overwrites?.size ?? 0) > 0) {\r\n        for (const listIndex of listDiff.overwrites ?? []) {\r\n          const bindContent = this.#bindContentByListIndex.get(listIndex);\r\n          if (typeof bindContent === \"undefined\") {\r\n            raiseError({\r\n              code: 'BIND-201',\r\n              message: 'BindContent not found',\r\n              context: { where: 'BindingNodeFor.applyChange', when: 'overwrites' },\r\n              docsUrl: './docs/error-codes.md#bind',\r\n            });\r\n          }\r\n          bindContent.applyChange(renderer);\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    // プールの長さを更新する\r\n    // プールの長さは、プールの最後の要素のインデックス+1であるため、\r\n    this.poolLength = this.bindContentLastIndex + 1;\r\n    this.#bindContents = newBindContents;\r\n\r\n    renderer.updatedBindings.add(this.binding);\r\n  }\r\n}\r\n\r\nexport const createBindingNodeFor: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeFor(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DEFAULT_PROPERTY = \"textContent\";\r\n\r\ntype DefaultPropertyByElementType = {\r\n  [key:string]: string;\r\n}\r\n\r\nconst defaultPropertyByElementType:DefaultPropertyByElementType = {\r\n  \"radio\"   : \"checked\",\r\n  \"checkbox\": \"checked\",\r\n  \"button\"  : \"onclick\",\r\n}\r\n\r\n/**\r\n * HTML要素のデフォルトプロパティを取得\r\n */\r\nconst getDefaultPropertyHTMLElement = (node:Node):string => \r\n  node instanceof HTMLSelectElement || node instanceof HTMLTextAreaElement || node instanceof HTMLOptionElement ? \"value\" : \r\n  node instanceof HTMLButtonElement ? \"onclick\" : \r\n  node instanceof HTMLAnchorElement ? \"onclick\" : \r\n  node instanceof HTMLFormElement ? \"onsubmit\" : \r\n  node instanceof HTMLInputElement ? (defaultPropertyByElementType[node.type] ?? \"value\") :\r\n  DEFAULT_PROPERTY;\r\n\r\ntype DefaultPropertyByKey = {\r\n  [key:string]: string | undefined;\r\n}\r\n\r\nconst _cache: DefaultPropertyByKey = {};\r\n\r\nconst textContentProperty = (node:Node):string => DEFAULT_PROPERTY;\r\n\r\ntype GetDefaultPropertyByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>string) | undefined;\r\n}\r\n\r\nconst getDefaultPropertyByNodeType: GetDefaultPropertyByNodeType = {\r\n  HTMLElement: getDefaultPropertyHTMLElement,\r\n  SVGElement : undefined,\r\n  Text       : textContentProperty,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * バインド情報でノードプロパティが省略された場合に、ノード種別・要素タイプごとに\r\n * 適切なデフォルトプロパティ名（例: textContent, value, checked, onclick など）を返すユーティリティ関数。\r\n *\r\n * - HTMLInputElementやHTMLSelectElementなど、要素ごとに最適なプロパティを判定\r\n * - input要素はtype属性（radio, checkboxなど）も考慮\r\n * - 一度判定した組み合わせはキャッシュし、パフォーマンス向上\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"HTMLElement\" | \"SVGElement\" | \"Text\" | \"Template\"）\r\n * @returns        デフォルトのプロパティ名（例: \"value\", \"checked\", \"textContent\" など）\r\n */\r\nexport function getDefaultName(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): string | undefined {\r\n  const key = node.constructor.name + \"\\t\" + ((node as HTMLInputElement).type ?? \"\"); // type attribute\r\n  return _cache[key] ?? (_cache[key] = getDefaultPropertyByNodeType[nodeType]?.(node));\r\n}\r\n  ","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { getDefaultName } from \"../../BindingBuilder/getDefaultName.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { createUpdater } from \"../../Updater/Updater.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nfunction isTwoWayBindable(element: HTMLElement): boolean {\r\n  return element instanceof HTMLInputElement || \r\n    element instanceof HTMLTextAreaElement || \r\n    element instanceof HTMLSelectElement;\r\n}\r\n\r\nconst defaultEventByName: {[key:string]: string} = {\r\n  \"value\"   : \"input\",\r\n  \"checked\" : \"change\",\r\n  \"selected\": \"change\",\r\n};\r\n\r\n/**\r\n * BindingNodePropertyクラスは、ノードのプロパティ（value, checked, selected など）への\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - ノードプロパティへの値の割り当て・取得\r\n * - 双方向バインディング（input, changeイベント等）に対応\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - デフォルトプロパティ名と一致し、かつ双方向バインディング可能な要素の場合のみイベントリスナーを登録\r\n * - デコレータでイベント名を指定可能（onInput, onChangeなど）\r\n * - イベント発火時はUpdater経由でstateを非同期的に更新\r\n * - assignValueでnull/undefined/NaNは空文字列に変換してセット\r\n */\r\nclass BindingNodeProperty extends BindingNode {\r\n  get value(): any {\r\n    // @ts-ignore\r\n    return this.node[this.name];\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.filters.length; i++) {\r\n      value = this.filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n\r\n    const isElement = this.node instanceof HTMLElement;\r\n    if (!isElement) return;\r\n    if (!isTwoWayBindable(this.node)) return;\r\n    const defaultName = getDefaultName(this.node, \"HTMLElement\");\r\n    if (defaultName !== this.name) return;\r\n    if (decorates.length > 1) raiseError({\r\n      code: 'BIND-201',\r\n      message: 'Has multiple decorators',\r\n      context: { where: 'BindingNodeProperty.constructor', name: this.name, decoratesCount: decorates.length },\r\n      docsUrl: '/docs/error-codes.md#bind',\r\n      severity: 'error',\r\n    });\r\n    const event = (decorates[0]?.startsWith(\"on\") ? decorates[0]?.slice(2) : decorates[0]) ?? null;\r\n    const eventName = event ?? defaultEventByName[this.name] ?? \"readonly\";\r\n    if (eventName === \"readonly\" || eventName === \"ro\") return;\r\n\r\n    // 双方向バインディング: イベント発火時にstateを更新\r\n    const engine = this.binding.engine;\r\n    this.node.addEventListener(eventName, async () => {\r\n      const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n      const value = this.filteredValue;\r\n      await createUpdater(engine, async (updater) => {\r\n        await updater.update(loopContext, async (state, handler) => {\r\n          binding.updateStateValue(state, handler, value);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  init() {\r\n    // サブクラスで初期化処理を実装可能\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    // @ts-ignore\r\n    this.node[this.name] = value;\r\n  }\r\n}\r\n\r\n/**\r\n * プロパティバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodePropertyインスタンスを生成\r\n */\r\nexport const createBindingNodeProperty: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeProperty(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeRadioクラスは、ラジオボタン（input[type=\"radio\"]）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値とinput要素のvalueが一致していればchecked=trueにする\r\n * - null/undefined/NaNの場合は空文字列に変換して比較\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで値を文字列化し、input要素のvalueと比較してcheckedを制御\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeRadio extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.toString() === element.value.toString();\r\n  }\r\n}\r\n\r\n/**\r\n * ラジオボタン用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeRadioインスタンスを生成\r\n */\r\nexport const createBindingNodeRadio: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeRadio(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeStyleクラスは、style属性（インラインスタイル）のバインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値を指定のCSSプロパティ（subName）としてHTMLElementにセット\r\n * - null/undefined/NaNの場合は空文字列に変換してセット\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからCSSプロパティ名（subName）を抽出（例: \"style.color\" → \"color\"）\r\n * - assignValueで値を文字列化し、style.setPropertyで反映\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeStyle extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLElement;\r\n    element.style.setProperty(this.subName, value.toString());\r\n  }\r\n}\r\n\r\n/**\r\n * style属性バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeStyleインスタンスを生成\r\n */\r\nexport const createBindingNodeStyle: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeStyle(binding, node, name, filterFns, decorates);\r\n  }\r\n","const symbolName = \"component-state-input\";\r\n\r\nexport const AssignStateSymbol: unique symbol = Symbol.for(`${symbolName}.AssignState`);\r\nexport const NotifyRedrawSymbol: unique symbol = Symbol.for(`${symbolName}.NotifyRedraw`);","import { StructiveComponent } from \"./types\";\r\n\r\nconst parentStructiveComponentByStructiveComponent = new WeakMap<StructiveComponent, StructiveComponent>();\r\n\r\nexport function findStructiveParent(el:StructiveComponent): StructiveComponent | null {\r\n  return parentStructiveComponentByStructiveComponent.get(el) ?? null;\r\n}\r\n\r\nexport function registerStructiveComponent(parentComponent: StructiveComponent, component: StructiveComponent): void {\r\n  parentStructiveComponentByStructiveComponent.set(component, parentComponent);\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { NotifyRedrawSymbol } from \"../../ComponentStateInput/symbols.js\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types.js\";\r\nimport { registerStructiveComponent } from \"../../WebComponents/findStructiveParent.js\";\r\nimport { StructiveComponent } from \"../../WebComponents/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeComponentクラスは、StructiveComponent（カスタムコンポーネント）への\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング対象のコンポーネントのstateプロパティ（subName）に値を反映\r\n * - バインディング情報をコンポーネント単位で管理（bindingsByComponentに登録）\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからstateプロパティ名（subName）を抽出（例: \"state.foo\" → \"foo\"）\r\n * - assignValueでコンポーネントのstateに値をセット（RenderSymbol経由で反映）\r\n * - 初期化時にbindingsByComponentへバインディング情報を登録\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeComponent extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  init(): void {\r\n    const engine = this.binding.engine;\r\n    registerStructiveComponent(engine.owner, this.node as StructiveComponent);\r\n    let bindings = engine.bindingsByComponent.get(this.node as StructiveComponent);\r\n    if (typeof bindings === \"undefined\") {\r\n      engine.bindingsByComponent.set(this.node as StructiveComponent, bindings = new Set<IBinding>());\r\n    }\r\n    bindings.add(this.binding);\r\n  }\r\n\r\n  assignValue(value: any): void {\r\n  }\r\n\r\n  notifyRedraw(refs: IStatePropertyRef[]): void {\r\n    const notifyRefs = [];\r\n    const info = this.binding.bindingState.info;\r\n    const listIndex = this.binding.bindingState.listIndex?.at(info.wildcardCount - 1) ?? null;\r\n    const at = (listIndex?.length ?? 0) - 1;\r\n    for(const ref of refs) {\r\n      if (info.pathSegments.length > ref.info.pathSegments.length) {\r\n        // 親パスが更新された\r\n        // ex values, values.* valuesが更新された場合\r\n        if (info.cumulativePathSet.has(ref.info.pattern)) {\r\n          const thisAt = (ref.listIndex?.length ?? 0) - 1;\r\n          if (thisAt >= 0) {\r\n            if (listIndex === null) continue;\r\n            if (ref.listIndex !== listIndex?.at(thisAt)) continue;\r\n          }\r\n          const newRef = getStatePropertyRef(info, listIndex);\r\n          notifyRefs.push(newRef);\r\n        }\r\n      } else {\r\n        // 子パスが更新された\r\n        // ex values.*.foo values.* values.*.fooが更新された\r\n        if (!ref.info.cumulativePathSet.has(info.pattern)) {\r\n          // リストインデックスが一致しない場合はスキップ\r\n          if (at >= 0) {\r\n            if (ref.listIndex?.at(at) !== listIndex) continue;\r\n          }\r\n          notifyRefs.push(ref);\r\n        }\r\n\r\n      }\r\n    }\r\n    if (notifyRefs.length === 0) {\r\n      return;\r\n    }\r\n    const component = this.node as StructiveComponent;\r\n    component.state[NotifyRedrawSymbol](notifyRefs);\r\n  }\r\n}\r\n\r\n/**\r\n * コンポーネント用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeComponentインスタンスを生成\r\n */\r\nexport const createBindingNodeComponent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeComponent(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createBindingNodeAttribute } from \"../DataBinding/BindingNode/BindingNodeAttribute.js\";\r\nimport { createBindingNodeCheckbox } from \"../DataBinding/BindingNode/BindingNodeCheckbox.js\";\r\nimport { createBindingNodeClassList } from \"../DataBinding/BindingNode/BindingNodeClassList.js\";\r\nimport { createBindingNodeClassName } from \"../DataBinding/BindingNode/BindingNodeClassName.js\";\r\nimport { createBindingNodeEvent } from \"../DataBinding/BindingNode/BindingNodeEvent.js\";\r\nimport { createBindingNodeIf } from \"../DataBinding/BindingNode/BindingNodeIf.js\";\r\nimport { createBindingNodeFor } from \"../DataBinding/BindingNode/BindingNodeFor.js\";\r\nimport { createBindingNodeProperty } from \"../DataBinding/BindingNode/BindingNodeProperty.js\";\r\nimport { createBindingNodeRadio } from \"../DataBinding/BindingNode/BindingNodeRadio.js\";\r\nimport { createBindingNodeStyle } from \"../DataBinding/BindingNode/BindingNodeStyle.js\";\r\nimport { CreateBindingNodeByNodeFn, CreateBindingNodeFn } from \"../DataBinding/BindingNode/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\nimport { createBindingNodeComponent } from \"../DataBinding/BindingNode/BindingNodeComponent.js\";\r\n\r\ntype NodePropertyConstructorByName = {[key:string]:CreateBindingNodeFn};\r\ntype NodePropertyConstructorByNameByIsComment = {[key:number]:NodePropertyConstructorByName};\r\n\r\nconst nodePropertyConstructorByNameByIsComment:NodePropertyConstructorByNameByIsComment = {\r\n  0: {\r\n    \"class\"   : createBindingNodeClassList,\r\n    \"checkbox\": createBindingNodeCheckbox,\r\n    \"radio\"   : createBindingNodeRadio,\r\n  },\r\n  1: {\r\n    \"if\" : createBindingNodeIf,\r\n  },\r\n};\r\n\r\ntype NodePropertyConstructorByFirstName = {[key:string]:CreateBindingNodeFn};\r\n\r\nconst nodePropertyConstructorByFirstName:NodePropertyConstructorByFirstName = {\r\n  \"class\": createBindingNodeClassName,\r\n  \"attr\" : createBindingNodeAttribute,\r\n  \"style\": createBindingNodeStyle,\r\n  \"state\": createBindingNodeComponent,\r\n//  \"popover\": PopoverTarget,\r\n//  \"commandfor\": CommandForTarget,\r\n};\r\n\r\n/**\r\n * バインディング対象ノードのプロパティ名やノード種別（Element/Comment）に応じて、\r\n * 適切なバインディングノード生成関数（CreateBindingNodeFn）を返すユーティリティ。\r\n *\r\n * - ノード種別やプロパティ名ごとに専用の生成関数をマッピング\r\n * - コメントノードや特殊プロパティ（for/if等）にも対応\r\n * - プロパティ名の先頭や\"on\"でイベントバインディングも判別\r\n * - 一度判定した組み合わせはキャッシュし、パフォーマンス向上\r\n *\r\n * これにより、テンプレートのdata-bindやコメントバインディングの各種ケースに柔軟に対応できる。\r\n */\r\nfunction _getBindingNodeCreator(isComment:boolean, isElement: boolean, propertyName: string): CreateBindingNodeFn {\r\n  // コメント/エレメント種別とプロパティ名で専用の生成関数を優先的に取得\r\n  const bindingNodeCreatorByName = nodePropertyConstructorByNameByIsComment[isComment ? 1 : 0][propertyName];\r\n  if (typeof bindingNodeCreatorByName !== \"undefined\") {\r\n    return bindingNodeCreatorByName;\r\n  }\r\n  // コメントノードでforの場合は専用関数\r\n  if (isComment && propertyName === \"for\") {\r\n    return createBindingNodeFor;\r\n  }\r\n  // コメントノードで未対応プロパティはエラー\r\n  if (isComment) {\r\n    raiseError(`getBindingNodeCreator: unknown node property ${propertyName}`);\r\n  }\r\n  // プロパティ名の先頭で判別（class.attr.style.state等）\r\n  const nameElements = propertyName.split(\".\");\r\n  const bindingNodeCreatorByFirstName = nodePropertyConstructorByFirstName[nameElements[0]];\r\n  if (typeof bindingNodeCreatorByFirstName !== \"undefined\") {\r\n    return bindingNodeCreatorByFirstName;\r\n  }\r\n  // エレメントノードでonから始まる場合はイベントバインディング\r\n  if (isElement) {\r\n    if (propertyName.startsWith(\"on\")) {\r\n      return createBindingNodeEvent;\r\n    } else {\r\n      return createBindingNodeProperty;\r\n    }\r\n  } else {\r\n    // それ以外は汎用プロパティバインディング\r\n    return createBindingNodeProperty;\r\n  }\r\n}\r\n\r\nconst _cache: {[key:string]:CreateBindingNodeFn} = {};\r\n\r\n/**\r\n * ノード・プロパティ名・フィルタ・デコレータ情報から\r\n * 適切なバインディングノード生成関数を取得し、呼び出すファクトリ関数。\r\n * \r\n * @param node         バインディング対象ノード\r\n * @param propertyName バインディングプロパティ名\r\n * @param filterTexts  フィルタ情報\r\n * @param decorates    デコレータ情報\r\n * @returns            バインディングノード生成関数の実行結果\r\n */\r\nexport function getBindingNodeCreator(\r\n  node        : Node, \r\n  propertyName: string,\r\n  filterTexts : IFilterText[],\r\n  decorates   : string[]\r\n): CreateBindingNodeByNodeFn {\r\n  const isComment = node instanceof Comment;\r\n  const isElement = node instanceof Element;\r\n  const key = isComment + \"\\t\" + isElement + \"\\t\" + propertyName;\r\n  // キャッシュを利用して生成関数を取得\r\n  const fn = _cache[key] ?? (_cache[key] = _getBindingNodeCreator(isComment, isElement, propertyName));\r\n  return fn(propertyName, filterTexts, decorates);\r\n}\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { ILoopContext } from \"../../LoopContext/types.js\";\r\nimport { getByRef } from \"../../StateClass/methods/getByRef.js\";\r\nimport { setByRef } from \"../../StateClass/methods/setByRef.js\";\r\nimport { IStateHandler, IStateProxy, IWritableStateHandler, IWritableStateProxy } from \"../../StateClass/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\n/**\r\n * BindingStateクラスは、バインディング対象の状態（State）プロパティへのアクセス・更新・フィルタ適用を担当する実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング対象の状態プロパティ（pattern, info）やリストインデックス（listIndex）を管理\r\n * - get valueで現在の値を取得し、get filteredValueでフィルタ適用後の値を取得\r\n * - initでリストバインディング時のループコンテキストやインデックス参照を初期化\r\n * - assignValueで状態プロキシに値を書き込む（双方向バインディング対応）\r\n * - バインディング情報をエンジンに登録し、依存解決や再描画を効率化\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードパス（配列バインディング等）にも対応し、ループごとのインデックス管理が可能\r\n * - フィルタ適用は配列で柔軟に対応\r\n * - createBindingStateファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingState implements IBindingState {\r\n  #binding     : IBinding;\r\n  #pattern     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #filters     : Filters;\r\n  #loopContext : ILoopContext | null = null;\r\n  #nullRef     : IStatePropertyRef | null = null;\r\n  #ref         : IStatePropertyRef | null = null;\r\n  get pattern(): string {\r\n    return this.#pattern;\r\n  }\r\n  get info() {\r\n    return this.#info;\r\n  }\r\n  get listIndex() {\r\n    return this.ref.listIndex;\r\n  }\r\n  get ref() {\r\n    if (this.#loopContext !== null) {\r\n      if (this.#ref === null) {\r\n        this.#ref = getStatePropertyRef(this.#info, this.#loopContext.listIndex);\r\n      }\r\n      return this.#ref;\r\n    } else {\r\n      return this.#nullRef ?? raiseError({\r\n        code: 'BIND-201',\r\n        message: 'ref is null',\r\n        context: { pattern: this.#pattern },\r\n        docsUrl: '/docs/error-codes.md#bind',\r\n        severity: 'error',\r\n      });\r\n    }\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#pattern = pattern;\r\n    this.#info = getStructuredPathInfo(pattern);\r\n    this.#nullRef = (this.#info.wildcardCount === 0) ? getStatePropertyRef(this.#info, null) : null;\r\n    this.#filters = filters;\r\n  }\r\n  getValue(state:IStateProxy, handler:IStateHandler): any {\r\n    return getByRef(this.binding.engine.state, this.ref, state, handler);\r\n  }\r\n  getFilteredValue(state:IStateProxy, handler:IStateHandler): any {\r\n    let value = getByRef(this.binding.engine.state, this.ref, state, handler);\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    if (this.info.wildcardCount > 0) {\r\n      const lastWildcardPath = this.info.lastWildcardPath ?? \r\n        raiseError({\r\n          code: 'BIND-201',\r\n          message: 'Wildcard last parentPath is null',\r\n          context: { where: 'BindingState.init', pattern: this.#pattern },\r\n          docsUrl: '/docs/error-codes.md#bind',\r\n          severity: 'error',\r\n        });\r\n      this.#loopContext = this.binding.parentBindContent.currentLoopContext?.find(lastWildcardPath) ?? \r\n        raiseError({\r\n          code: 'BIND-201',\r\n          message: 'LoopContext is null',\r\n          context: { where: 'BindingState.init', lastWildcardPath },\r\n          docsUrl: '/docs/error-codes.md#bind',\r\n          severity: 'error',\r\n        });\r\n      this.#ref = null;\r\n    }\r\n    this.binding.engine.saveBinding(this.ref, this.binding);\r\n  }\r\n  assignValue(writeState: IWritableStateProxy, handler: IWritableStateHandler, value: any) {\r\n    setByRef(this.binding.engine.state, this.ref, value, writeState, handler);\r\n//    writeState[SetByRefSymbol](this.ref, value);\r\n  }\r\n}\r\n\r\nexport const createBindingState: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n    return new BindingState(binding, name, filterFns);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { ILoopContext } from \"../../LoopContext/types.js\";\r\nimport { IStateHandler, IStateProxy, IWritableStateHandler, IWritableStateProxy } from \"../../StateClass/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\n/**\r\n * BindingStateIndexクラスは、forバインディング等のループ内で利用される\r\n * インデックス値（$1, $2, ...）のバインディング状態を管理する実装です。\r\n *\r\n * 主な役割:\r\n * - ループコンテキストからインデックス値を取得し、value/filteredValueで参照可能にする\r\n * - バインディング時にbindingsByListIndexへ自身を登録し、依存解決や再描画を効率化\r\n * - フィルタ適用にも対応\r\n *\r\n * 設計ポイント:\r\n * - pattern（例: \"$1\"）からインデックス番号を抽出し、ループコンテキストから該当インデックスを取得\r\n * - initでループコンテキストやlistIndexRefを初期化し、バインディング情報をエンジンに登録\r\n * - assignValueは未実装（インデックスは書き換え不可のため）\r\n * - createBindingStateIndexファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingStateIndex implements IBindingState {\r\n  #binding     : IBinding;\r\n  #indexNumber : number;\r\n  #filters     : Filters;\r\n  #loopContext : ILoopContext | null = null;\r\n  get pattern(): string {\r\n    return raiseError({\r\n      code: 'BIND-301',\r\n      message: 'Not implemented',\r\n      context: { where: 'BindingStateIndex.pattern' },\r\n      docsUrl: '/docs/error-codes.md#bind',\r\n    });\r\n  }\r\n  get info() {\r\n    return raiseError({\r\n      code: 'BIND-301',\r\n      message: 'Not implemented',\r\n      context: { where: 'BindingStateIndex.info' },\r\n      docsUrl: '/docs/error-codes.md#bind',\r\n    });\r\n  }\r\n  get listIndex() {\r\n    return this.#loopContext?.listIndex ?? raiseError({\r\n      code: 'LIST-201',\r\n      message: 'listIndex is null',\r\n      context: { where: 'BindingStateIndex.listIndex' },\r\n      docsUrl: '/docs/error-codes.md#list',\r\n    });\r\n  }\r\n  get ref() {\r\n    return this.#loopContext?.ref ?? raiseError({\r\n      code: 'STATE-202',\r\n      message: 'ref is null',\r\n      context: { where: 'BindingStateIndex.ref' },\r\n      docsUrl: '/docs/error-codes.md#state',\r\n    });\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    const indexNumber = Number(pattern.slice(1));\r\n    if (isNaN(indexNumber)) {\r\n      raiseError({\r\n        code: 'BIND-202',\r\n        message: 'Pattern is not a number',\r\n        context: { where: 'BindingStateIndex.constructor', pattern },\r\n        docsUrl: '/docs/error-codes.md#bind',\r\n      });\r\n    }\r\n    this.#indexNumber = indexNumber;\r\n    this.#filters = filters;\r\n  }\r\n  getValue(state: IStateProxy, handler: IStateHandler) {\r\n    return this.listIndex?.index ?? raiseError({\r\n      code: 'LIST-201',\r\n      message: 'listIndex is null',\r\n      context: { where: 'BindingStateIndex.getValue' },\r\n      docsUrl: '/docs/error-codes.md#list',\r\n    });\r\n  }\r\n  getFilteredValue(state: IStateProxy, handler: IStateHandler) {\r\n    let value = this.listIndex?.index ?? raiseError({\r\n      code: 'LIST-201',\r\n      message: 'listIndex is null',\r\n      context: { where: 'BindingStateIndex.getFilteredValue' },\r\n      docsUrl: '/docs/error-codes.md#list',\r\n    });\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext ??\r\n      raiseError({\r\n        code: 'BIND-201',\r\n        message: 'LoopContext is null',\r\n        context: { where: 'BindingStateIndex.init' },\r\n        docsUrl: '/docs/error-codes.md#bind',\r\n      });\r\n    const loopContexts = loopContext.serialize();\r\n    this.#loopContext = loopContexts[this.#indexNumber - 1] ??\r\n      raiseError({\r\n        code: 'BIND-201',\r\n        message: 'Current loopContext is null',\r\n        context: { where: 'BindingStateIndex.init', indexNumber: this.#indexNumber },\r\n        docsUrl: '/docs/error-codes.md#bind',\r\n      });\r\n    const bindings = this.binding.engine.bindingsByListIndex.get(this.listIndex);\r\n    if (bindings === undefined) {\r\n      this.binding.engine.bindingsByListIndex.set(this.listIndex, new Set([this.binding]));\r\n    } else {\r\n      bindings.add(this.binding);\r\n    }\r\n  }\r\n  assignValue(writeState:IWritableStateProxy, handler:IWritableStateHandler, value:any): void {\r\n    raiseError({\r\n      code: 'BIND-301',\r\n      message: 'Not implemented',\r\n      context: { where: 'BindingStateIndex.assignValue' },\r\n      docsUrl: '/docs/error-codes.md#bind',\r\n    });\r\n  }\r\n}\r\n\r\nexport const createBindingStateIndex: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n\r\n    return new BindingStateIndex(binding, name, filterFns);\r\n  }\r\n","import { createBindingState } from \"../DataBinding/BindingState/BindingState.js\";\r\nimport { createBindingStateIndex } from \"../DataBinding/BindingState/BindingStateIndex.js\";\r\nimport { CreateBindingStateByStateFn } from \"../DataBinding/BindingState/types\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nconst ereg = new RegExp(/^\\$\\d+$/);\r\n\r\n/**\r\n * バインディング対象の状態プロパティ名とフィルタ情報から、\r\n * 適切なバインディング状態生成関数（CreateBindingStateByStateFn）を返すユーティリティ。\r\n *\r\n * - プロパティ名が \"$数字\"（例: \"$1\"）の場合は createBindingStateIndex を使用（インデックスバインディング用）\r\n * - それ以外は通常の createBindingState を使用\r\n *\r\n * @param name        バインディング対象の状態プロパティ名\r\n * @param filterTexts フィルタ情報\r\n * @returns           バインディング状態生成関数\r\n */\r\nexport function getBindingStateCreator(\r\n  name       : string, \r\n  filterTexts: IFilterText[]\r\n): CreateBindingStateByStateFn {\r\n  if (ereg.test(name)) {\r\n    // \"$数字\"形式の場合はインデックスバインディング用の生成関数を返す\r\n    return createBindingStateIndex(name, filterTexts);\r\n  } else {\r\n    // 通常のプロパティ名の場合は標準の生成関数を返す\r\n    return createBindingState(name, filterTexts);\r\n  }\r\n}","import { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst createNodeKey = (node:Node):string => node.constructor.name + \"\\t\" + ((node instanceof Comment) ? (node.textContent?.[2] ?? \"\") : \"\");\r\n\r\ntype NodeTypeByNodeKey = {\r\n  [nodeKey:string]:NodeType;\r\n};\r\n\r\nconst nodeTypeByNodeKey:NodeTypeByNodeKey = {};\r\n\r\nconst getNodeTypeByNode = (node:Node):NodeType =>\r\n  (node instanceof Comment && node.textContent?.[2] === \":\") ? \"Text\" : \r\n  (node instanceof HTMLElement) ? \"HTMLElement\" :\r\n  (node instanceof Comment && node.textContent?.[2] === \"|\") ? \"Template\" : \r\n  (node instanceof SVGElement) ? \"SVGElement\" : raiseError(`Unknown NodeType: ${node.nodeType}`);\r\n\r\n/**\r\n * ノードのタイプ（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）を判定・キャッシュするユーティリティ関数。\r\n *\r\n * - コメントノードの場合、3文字目が \":\" なら \"Text\"、\"|\" なら \"Template\" と判定\r\n * - HTMLElement, SVGElement もそれぞれ判定\r\n * - 未知のノード型はエラー\r\n * - ノードごとに一意なキー（constructor名＋コメント種別）でキャッシュし、再判定を省略\r\n *\r\n * @param node    判定対象のノード\r\n * @param nodeKey キャッシュ用のノードキー（省略時は自動生成）\r\n * @returns       ノードタイプ（NodeType）\r\n */\r\nexport function getNodeType(\r\n  node   : Node, \r\n  nodeKey: string = createNodeKey(node)\r\n): NodeType {\r\n  return nodeTypeByNodeKey[nodeKey] ?? (nodeTypeByNodeKey[nodeKey] = getNodeTypeByNode(node));\r\n}\r\n","import { IFilterText, IBindText } from \"./types\";\r\n\r\nconst trim = (s:string):string => s.trim();\r\n\r\nconst has = (s:string):boolean => s.length > 0; // check length\r\n\r\nconst re = new RegExp(/^#(.*)#$/);\r\nconst decode = (s:string):string => {\r\n  const m = re.exec(s);\r\n  return m ? decodeURIComponent(m[1]) : s;\r\n};\r\n\r\n/**\r\n * parse filter part\r\n * \"eq,100|falsey\" ---> [Filter(eq, [100]), Filter(falsey)]\r\n */\r\nconst parseFilter = (text:string): IFilterText => {\r\n  const [name, ...options] = text.split(\",\").map(trim);\r\n  return {name, options:options.map(decode)};\r\n};\r\n\r\ntype ReturnParseStateProperty = {property:string,filters:IFilterText[]};\r\n/**\r\n * parse expression\r\n * \"value|eq,100|falsey\" ---> [\"value\", Filter[]]\r\n */\r\nconst parseProperty = (text:string): ReturnParseStateProperty => {\r\n  const [property, ...filterTexts] = text.split(\"|\").map(trim);\r\n  return {property, filters:filterTexts.map(parseFilter)};\r\n};\r\n\r\n/**\r\n * parse expressions\r\n * \"textContent:value|eq,100|falsey\" ---> [\"textContent\", \"value\", Filter[eq, falsey]]\r\n */\r\nconst parseExpression = (expression:string): IBindText => {\r\n  const [ bindExpression, decoratesExpression = null ] = expression.split(\"@\").map(trim);\r\n  const decorates = decoratesExpression ? decoratesExpression.split(\",\").map(trim) : [];\r\n  const [nodePropertyText, statePropertyText] = bindExpression.split(\":\").map(trim);\r\n  const { property:nodeProperty, filters:inputFilterTexts } = parseProperty(nodePropertyText);\r\n  const { property:stateProperty, filters:outputFilterTexts } = parseProperty(statePropertyText);\r\n  return { nodeProperty, stateProperty, inputFilterTexts, outputFilterTexts, decorates };\r\n};\r\n\r\n/**\r\n * parse bind text and return BindText[]\r\n */\r\nconst parseExpressions = (text:string): IBindText[] => {\r\n  return text.split(\";\").map(trim).filter(has).map(s => parseExpression(s));\r\n};\r\n\r\nconst cache:{[key:string]: IBindText[]} = {};\r\n\r\n/**\r\n * バインドテキスト（data-bind属性やコメント等から取得した文字列）を解析し、\r\n * バインディング情報（IBindText[]）に変換するユーティリティ関数群。\r\n *\r\n * - フィルターやデコレータ、プロパティ名などをパースし、構造化データとして返す\r\n * - \"textContent:value|eq,100|falsey@decorate1,decorate2\" のような複雑な記法にも対応\r\n * - セミコロン区切りで複数バインドもサポート\r\n * - パース結果はキャッシュし、同じ入力の再解析を防止\r\n *\r\n * @param text バインドテキスト\r\n * @returns    解析済みバインディング情報（IBindText[]）\r\n */\r\nexport function parseBindText(\r\n  text: string\r\n): IBindText[] {\r\n  if (text.trim() === \"\") {\r\n    return [];\r\n  }\r\n  return cache[text] ?? (cache[text] = parseExpressions(text));\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DATASET_BIND_PROPERTY = 'data-bind';\r\n\r\nconst removeAttributeFromElement = (node:Node):void => {\r\n  const element = node as Element;\r\n  element.removeAttribute(DATASET_BIND_PROPERTY);\r\n}\r\n\r\ntype RemoveAttributeByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>void) | undefined;\r\n}\r\n\r\nconst removeAttributeByNodeType:RemoveAttributeByNodeType = {\r\n  HTMLElement: removeAttributeFromElement,\r\n  SVGElement : removeAttributeFromElement,\r\n  Text       : undefined,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * 指定ノードから data-bind 属性を削除するユーティリティ関数。\r\n *\r\n * - ノードタイプ（HTMLElement, SVGElement）の場合のみ data-bind 属性を削除\r\n * - Text, Template ノードは対象外\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"HTMLElement\" | \"SVGElement\" | \"Text\" | \"Template\"）\r\n * @returns        なし\r\n */\r\nexport function removeDataBindAttribute(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n):void {\r\n  return removeAttributeByNodeType[nodeType]?.(node);\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst replaceTextNodeText = (node:Node):Node => {\r\n  const textNode = document.createTextNode(\"\");\r\n  node.parentNode?.replaceChild(textNode, node);\r\n  return textNode;\r\n}\r\n\r\ntype ReplaceTextNodeFn = {\r\n  [key in NodeType]: ((node:Node)=>Node) | undefined;\r\n}\r\n\r\nconst replaceTextNodeFn:ReplaceTextNodeFn = {\r\n  Text       : replaceTextNodeText,\r\n  HTMLElement: undefined,\r\n  Template   : undefined,\r\n  SVGElement : undefined\r\n}\r\n\r\n/**\r\n * コメントノードをテキストノードに置き換えるユーティリティ関数。\r\n *\r\n * - ノードタイプが \"Text\" の場合のみ、コメントノードを空のテキストノードに置換する\r\n * - それ以外のノードタイプ（HTMLElement, Template, SVGElement）は何もしない\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）\r\n * @returns        置換後のノード（または元のノード）\r\n */\r\nexport function replaceTextNodeFromComment(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): Node {\r\n  return replaceTextNodeFn[nodeType]?.(node) ?? node;\r\n}\r\n","import { getAbsoluteNodePath } from \"./getAbsoluteNodePath.js\";\r\nimport { getBindingNodeCreator } from \"./getBindingNodeCreator.js\";\r\nimport { getBindingStateCreator } from \"./getBindingStateCreator.js\";\r\nimport { getDataBindText } from \"./getDataBindText.js\";\r\nimport { getNodeType } from \"./getNodeType.js\";\r\nimport { parseBindText } from \"./parseBindText.js\";\r\nimport { removeDataBindAttribute } from \"./removeDataBindAttribute.js\";\r\nimport { replaceTextNodeFromComment } from \"./replaceTextNodeFromComment.js\";\r\nimport { IBindingCreator, IBindText, IDataBindAttributes, NodePath, NodeType } from \"./types\";\r\n\r\n/**\r\n * DataBindAttributesクラスは、DOMノードからバインディング情報を抽出・解析し、\r\n * バインディング生成に必要な情報（ノード種別・パス・バインドテキスト・クリエイター）を管理します。\r\n *\r\n * - ノード種別やパスを特定\r\n * - data-bind属性やコメントノードからバインドテキストを取得・解析\r\n * - バインドテキストごとにバインディング生成関数（ノード用・状態用）を用意\r\n * - data-bind属性やコメントノードはパース後に削除・置換\r\n *\r\n * これにより、テンプレート内のバインディング定義を一元的に管理し、後続のバインディング構築処理を効率化します。\r\n */\r\nclass DataBindAttributes implements IDataBindAttributes {\r\n  nodeType     : NodeType; // ノードの種別\r\n  nodePath     : NodePath; // ノードのルート\r\n  bindTexts    : IBindText[]; // BINDテキストの解析結果\r\n  creatorByText: Map<IBindText, IBindingCreator> = new Map(); // BINDテキストからバインディングクリエイターを取得\r\n  constructor(node: Node) {\r\n    this.nodeType = getNodeType(node);\r\n    const text = getDataBindText(this.nodeType, node);\r\n\r\n    // コメントノードの場合はTextノードに置換（template.contentが書き換わる点に注意）\r\n    node = replaceTextNodeFromComment(node, this.nodeType);\r\n\r\n    // data-bind属性を削除（パース後は不要なため）\r\n    removeDataBindAttribute(node, this.nodeType);\r\n\r\n    this.nodePath = getAbsoluteNodePath(node);\r\n    this.bindTexts = parseBindText(text);\r\n\r\n    // 各バインドテキストごとにバインディング生成関数を用意\r\n    for(let i = 0; i < this.bindTexts.length; i++) {\r\n      const bindText = this.bindTexts[i];\r\n      const creator: IBindingCreator = {\r\n        createBindingNode : getBindingNodeCreator(\r\n          node, \r\n          bindText.nodeProperty, \r\n          bindText.inputFilterTexts,\r\n          bindText.decorates\r\n        ),\r\n        createBindingState: getBindingStateCreator(\r\n          bindText.stateProperty, \r\n          bindText.outputFilterTexts\r\n        ),\r\n      }\r\n      this.creatorByText.set(bindText, creator);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * 指定ノードからDataBindAttributesインスタンスを生成するファクトリ関数。\r\n */\r\nexport function createDataBindAttributes(node: Node): IDataBindAttributes {\r\n  return new DataBindAttributes(node);\r\n}","import { COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst COMMENT_EMBED_MARK_LEN = COMMENT_EMBED_MARK.length;\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\n/**\r\n * ノード種別ごとにdata-bindテキスト（バインディング定義文字列）を取得するユーティリティ関数。\r\n *\r\n * - Textノード: コメントマーク以降のテキストを取得し、\"textContent:\"を付与\r\n * - HTMLElement: data-bind属性値を取得\r\n * - Templateノード: コメントマーク以降のIDからテンプレートを取得し、そのdata-bind属性値を取得\r\n * - SVGElement: data-bind属性値を取得\r\n *\r\n * @param nodeType ノード種別（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）\r\n * @param node     対象ノード\r\n * @returns        バインディング定義文字列\r\n */\r\nexport function getDataBindText(nodeType: NodeType, node: Node): string {\r\n  switch (nodeType) {\r\n    case \"Text\": {\r\n      const text = node.textContent?.slice(COMMENT_EMBED_MARK_LEN).trim() ?? \"\";\r\n      return \"textContent:\" + text;\r\n    }\r\n    case \"HTMLElement\": {\r\n      return (node as HTMLElement).getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n    }\r\n    case \"Template\": {\r\n      const text = node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN).trim();\r\n      const id = Number(text);\r\n      const template = getTemplateById(id) ?? raiseError(`Template not found: ${text}`);\r\n      return template.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n    }\r\n    case \"SVGElement\": {\r\n      return (node as SVGElement).getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n    }\r\n    default:\r\n      return \"\";\r\n  }\r\n}","import { NodePath } from \"./types\";\r\n\r\n/**\r\n * 指定ノードの「親からのインデックス」をルートまで辿り、絶対パス（NodePath）として返すユーティリティ関数。\r\n *\r\n * 例: ルートから見て [0, 2, 1] のような配列を返す。\r\n *     これは「親→子→孫…」とたどったときの各階層でのインデックスを表す。\r\n *\r\n * @param node 対象のDOMノード\r\n * @returns    ルートからこのノードまでのインデックス配列（NodePath）\r\n */\r\nexport function getAbsoluteNodePath(node: Node): NodePath {\r\n  let routeIndexes: NodePath = [];\r\n  while(node.parentNode !== null) {\r\n    const childNodes = Array.from(node.parentNode.childNodes) as Node[];\r\n    routeIndexes = [ childNodes.indexOf(node), ...routeIndexes ];\r\n    node = node.parentNode;\r\n  }\r\n  return routeIndexes;\r\n}","import { DATA_BIND_ATTRIBUTE, COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK } from \"../constants.js\";\r\n\r\n/**\r\n * \"@@:\"もしくは\"@@|\"で始まるコメントノードを取得する\r\n */\r\nfunction isCommentNode(node: Node): boolean {\r\n  return node instanceof Comment && (\r\n    (node.textContent?.indexOf(COMMENT_EMBED_MARK) === 0) || (node.textContent?.indexOf(COMMENT_TEMPLATE_MARK) === 0)\r\n  );\r\n} \r\n\r\n/**\r\n * 指定ノード以下のツリーから「data-bind属性を持つ要素」または\r\n * 「特定のマーク（@@: または @@|）で始まるコメントノード」をすべて取得するユーティリティ関数。\r\n *\r\n * - Elementノードの場合: data-bind属性があるものだけを抽出\r\n * - Commentノードの場合: COMMENT_EMBED_MARK または COMMENT_TEMPLATE_MARK で始まるものだけを抽出\r\n * - DOMツリー全体をTreeWalkerで効率的に走査\r\n *\r\n * @param root 探索の起点となるノード\r\n * @returns    条件に合致したノードの配列\r\n */\r\nexport function getNodesHavingDataBind(root: Node): Node[] {\r\n  const nodes: Node[] = [];\r\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT, {\r\n    acceptNode(node:Node) {\r\n      return (node instanceof Element) ? \r\n        (node.hasAttribute(DATA_BIND_ATTRIBUTE) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP)\r\n        : (isCommentNode(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP);\r\n    }\r\n  });\r\n  while (walker.nextNode()) {\r\n    nodes.push(walker.currentNode);\r\n  }\r\n  return nodes;\r\n}\r\n\r\n","import { createDataBindAttributes } from \"./createDataBindAttributes.js\";\r\nimport { getNodesHavingDataBind } from \"./getNodesHavingDataBind.js\";\r\nimport { IDataBindAttributes } from \"./types\";\r\n\r\nconst listDataBindAttributesById: {[key:number]:IDataBindAttributes[]} = {};\r\n\r\nconst listPathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nconst pathsSetById: {[key:number]:Set<string>} = {};\r\n\r\n/**\r\n * テンプレートの DocumentFragment から data-bind 対象ノードを抽出し、\r\n * IDataBindAttributes の配列へ変換するユーティリティ。\r\n */\r\nfunction getDataBindAttributesFromTemplate(content: DocumentFragment): IDataBindAttributes[] {\r\n  const nodes = getNodesHavingDataBind(content);\r\n  return nodes.map(node => createDataBindAttributes(node));\r\n}\r\n\r\n/**\r\n * テンプレート内のバインディング情報（data-bind 属性やコメント）を解析・登録し、\r\n * テンプレート ID ごとに属性リストと状態パス集合をキャッシュする。\r\n *\r\n * - getNodesHavingDataBind → createDataBindAttributes の順で解析\r\n * - for バインディングの stateProperty は listPaths にも登録\r\n *\r\n * @param id      テンプレート ID\r\n * @param content テンプレートの DocumentFragment\r\n * @param rootId  ルートテンプレート ID（省略時は id と同じ）\r\n * @returns       解析済みバインディング属性リスト\r\n */\r\nexport function registerDataBindAttributes(\r\n  id     : number, \r\n  content: DocumentFragment,\r\n  rootId : number = id\r\n): IDataBindAttributes[] {\r\n  const dataBindAttributes = getDataBindAttributesFromTemplate(content);\r\n  const paths = pathsSetById[rootId] ?? (pathsSetById[rootId] = new Set<string>());\r\n  const listPaths = listPathsSetById[rootId] ?? (listPathsSetById[rootId] = new Set<string>());\r\n  for(let i = 0; i < dataBindAttributes.length; i++) {\r\n    const attribute = dataBindAttributes[i];\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      paths.add(bindText.stateProperty);\r\n      if (bindText.nodeProperty === \"for\") {\r\n        listPaths.add(bindText.stateProperty);\r\n      }\r\n    }\r\n  }\r\n  return listDataBindAttributesById[id] = dataBindAttributes;\r\n}\r\n\r\n/** テンプレート ID からバインディング属性リストを取得 */\r\nexport const getDataBindAttributesById = (id: number): IDataBindAttributes[] => {\r\n  return listDataBindAttributesById[id];\r\n}\r\n\r\n/** テンプレート ID から for バインディングの stateProperty 集合を取得 */\r\nexport const getListPathsSetById = (id: number): Set<string> => {\r\n  return listPathsSetById[id] ?? [];\r\n};\r\n\r\n/** テンプレート ID から全バインディングの stateProperty 集合を取得 */\r\nexport const getPathsSetById = (id: number): Set<string> => {\r\n  return pathsSetById[id] ?? [];\r\n};","/**\r\n * HTMLTemplateElement を ID で登録・取得するための管理モジュール。\r\n *\r\n * 役割:\r\n * - registerTemplate: 指定 ID でテンプレートを登録（空テキスト除去と data-bind 解析を実行）\r\n * - getTemplateById: 指定 ID のテンプレートを取得（未登録時はエラー）\r\n *\r\n * Throws（getTemplateById）:\r\n * - TMP-001 Template not found: 未登録のテンプレート ID を要求\r\n */\r\nimport { registerDataBindAttributes } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { removeEmptyTextNodes } from \"./removeEmptyTextNodes.js\";\r\n\r\nconst templateById:Record<number, HTMLTemplateElement> = {};\r\n\r\n/**\r\n * テンプレートを ID で登録し、内部インデックスと data-bind 情報を構築する。\r\n *\r\n * @param id       テンプレート ID\r\n * @param template HTMLTemplateElement\r\n * @param rootId   ルートテンプレート ID（ネスト解析用）\r\n * @returns       登録した ID\r\n */\r\nexport function registerTemplate(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number\r\n): number {\r\n  removeEmptyTextNodes(template.content);\r\n  registerDataBindAttributes(id, template.content, rootId);  \r\n  templateById[id] = template;\r\n  return id;\r\n}\r\n\r\n/**\r\n * 登録済みテンプレートを取得する。\r\n *\r\n * @throws TMP-001 Template not found\r\n */\r\nexport function getTemplateById(id: number): HTMLTemplateElement {\r\n  return templateById[id] ?? raiseError({\r\n    code: \"TMP-001\",\r\n    message: `Template not found: ${id}`,\r\n    context: { where: 'registerTemplate.getTemplateById', templateId: id },\r\n    docsUrl: \"./docs/error-codes.md#tmp\",\r\n  });\r\n}","/**\r\n * removeEmptyTextNodes.ts\r\n *\r\n * DocumentFragment内の空テキストノードを削除するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - content（DocumentFragment）の直下にある空白のみのテキストノードを検出し、削除する\r\n *\r\n * 設計ポイント:\r\n * - childNodesをArray.fromで配列化し、forEachで全ノードを走査\r\n * - nodeTypeがTEXT_NODEかつ、nodeValueが空白のみの場合にremoveChildで削除\r\n * - テンプレート処理やクリーンなDOM生成時に利用\r\n */\r\nexport function removeEmptyTextNodes(content:DocumentFragment):void {\r\n  Array.from(content.childNodes).forEach(node => {\r\n    if (node.nodeType === Node.TEXT_NODE && !(node.nodeValue ?? \"\").trim()) {\r\n      content.removeChild(node);\r\n    }\r\n  });  \r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IReadonlyStateProxy, IWritableStateHandler, IWritableStateProxy } from \"../StateClass/types\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { IRenderer } from \"../Updater/types\";\r\nimport { CreateBindingNodeByNodeFn, IBindingNode } from \"./BindingNode/types\";\r\nimport { CreateBindingStateByStateFn, IBindingState } from \"./BindingState/types\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\n\r\n/**\r\n * Bindingクラスは、1つのバインディング（ノードと状態の対応）を管理する中核的な実装です。\r\n *\r\n * 主な役割:\r\n * - DOMノードと状態（State）を結びつけるバインディングノード（bindingNode）とバインディング状態（bindingState）の生成・管理\r\n * - バインディングの初期化（init）、再描画（render）、状態値の更新（updateStateValue）などの処理を提供\r\n * - バージョン管理により、不要な再描画を防止\r\n *\r\n * 設計ポイント:\r\n * - createBindingNode, createBindingStateファクトリで柔軟なバインディング構造に対応\r\n * - renderでバージョン差分がある場合のみバインディングノードを更新\r\n * - 双方向バインディング時はupdateStateValueで状態プロキシに値を反映\r\n * - createBinding関数で一貫したバインディング生成を提供\r\n */\r\nclass Binding implements IBinding {\r\n  parentBindContent: IBindContent;\r\n  node             : Node;\r\n  engine           : IComponentEngine;\r\n  bindingNode      : IBindingNode;\r\n  bindingState     : IBindingState;\r\n  version          : number | undefined;\r\n  constructor(\r\n    parentBindContent : IBindContent,\r\n    node              : Node,\r\n    engine            : IComponentEngine,\r\n    createBindingNode : CreateBindingNodeByNodeFn, \r\n    createBindingState: CreateBindingStateByStateFn,\r\n  ) {\r\n    this.parentBindContent = parentBindContent\r\n    this.node = node;\r\n    this.engine = engine\r\n    this.bindingNode = createBindingNode(this, node, engine.inputFilters);\r\n    this.bindingState = createBindingState(this, engine.outputFilters);\r\n  }\r\n\r\n  get bindContents(): IBindContent[] {\r\n    return this.bindingNode.bindContents;\r\n  }\r\n\r\n  init() {\r\n    this.bindingNode.init();\r\n    this.bindingState.init();\r\n  }\r\n\r\n  updateStateValue(writeState:IWritableStateProxy, handler: IWritableStateHandler, value: any) {\r\n    return this.bindingState.assignValue(writeState, handler, value);\r\n  }\r\n\r\n  notifyRedraw(refs: IStatePropertyRef[]) {\r\n    this.bindingNode.notifyRedraw(refs);\r\n  }\r\n\r\n  applyChange(renderer: IRenderer): void {\r\n    if (renderer.updatedBindings.has(this)) return;\r\n    this.bindingNode.applyChange(renderer);\r\n  }\r\n}\r\n\r\n/**\r\n * バインディング生成用ファクトリ関数\r\n * - 各種ファクトリ・エンジン・ノード情報からBindingインスタンスを生成\r\n */\r\nexport function createBinding(\r\n  parentBindContent : IBindContent,\r\n  node              : Node, \r\n  engine            : IComponentEngine, \r\n  createBindingNode : CreateBindingNodeByNodeFn, \r\n  createBindingState: CreateBindingStateByStateFn\r\n): IBinding {\r\n  return new Binding(\r\n    parentBindContent, \r\n    node, \r\n    engine, \r\n    createBindingNode, \r\n    createBindingState\r\n  );\r\n}","/**\r\n * createLoopContext.ts\r\n *\r\n * ループバインディング（for等）で利用するLoopContext（ループコンテキスト）管理クラスとファクトリ関数の実装です。\r\n *\r\n * 主な役割:\r\n * - ループごとのプロパティパス・インデックス・BindContentを紐付けて管理\r\n * - 親ループコンテキストの探索やキャッシュ、インデックスの再割り当て・クリアなどを提供\r\n * - ループ階層をたどるwalk/serializeや、名前でのfind検索も可能\r\n *\r\n * 設計ポイント:\r\n * - WeakRefでlistIndexを保持し、GCフレンドリーな設計\r\n * - parentLoopContextで親ループを遅延探索・キャッシュし、効率的な親子関係管理を実現\r\n * - findで名前からループコンテキストを高速検索（キャッシュ付き）\r\n * - walk/serializeでループ階層をたどる処理を簡潔に記述可能\r\n * - createLoopContextファクトリで一貫した生成・管理が可能\r\n */\r\nimport { IBindContent } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { getStatePropertyRef } from \"../StatePropertyRef/StatepropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { ILoopContext } from \"./types\";\r\n\r\nclass LoopContext implements ILoopContext {\r\n  #ref: IStatePropertyRef | null;\r\n  #info: IStructuredPathInfo;\r\n  #bindContent : IBindContent;\r\n  constructor(\r\n    ref: IStatePropertyRef,\r\n    bindContent: IBindContent\r\n  ) {\r\n    this.#ref = ref;\r\n    this.#info = ref.info;\r\n    this.#bindContent = bindContent;\r\n  }\r\n  get ref(): IStatePropertyRef {\r\n    return this.#ref ?? raiseError({\r\n      code: 'STATE-202',\r\n      message: 'ref is null',\r\n      context: { where: 'LoopContext.ref', path: this.#info.pattern },\r\n      docsUrl: '/docs/error-codes.md#state',\r\n    });\r\n  }\r\n  get path(): string {\r\n    return this.ref.info.pattern;\r\n  }\r\n  get info(): IStructuredPathInfo {\r\n    return this.ref.info;\r\n  }\r\n  get listIndex(): IListIndex {\r\n    return this.ref.listIndex ?? raiseError({\r\n      code: 'LIST-201',\r\n      message: 'listIndex is required',\r\n      context: { where: 'LoopContext.listIndex', path: this.#info.pattern },\r\n      docsUrl: '/docs/error-codes.md#list',\r\n    });\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    this.#ref = getStatePropertyRef(this.#info, listIndex);\r\n    // 構造は変わらないので、#parentLoopContext、#cacheはクリアする必要はない\r\n  }\r\n  clearListIndex():void {\r\n    this.#ref = null;\r\n  }\r\n  get bindContent(): IBindContent {\r\n    return this.#bindContent;\r\n  }\r\n\r\n  #parentLoopContext: ILoopContext | null | undefined;\r\n  get parentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#parentLoopContext === \"undefined\") {\r\n      let currentBindContent: IBindContent | null = this.bindContent;\r\n      while(currentBindContent !== null) {\r\n        if (currentBindContent.loopContext !== null && currentBindContent.loopContext !== this) {\r\n          this.#parentLoopContext = currentBindContent.loopContext;\r\n          break;\r\n        }\r\n        currentBindContent = currentBindContent.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      if (typeof this.#parentLoopContext === \"undefined\") this.#parentLoopContext = null;\r\n    }\r\n    return this.#parentLoopContext;\r\n  }\r\n\r\n  #cache:Record<string, ILoopContext | null> = {};\r\n  find(name: string): ILoopContext | null {\r\n    let loopContext = this.#cache[name];\r\n    if (typeof loopContext === \"undefined\") {\r\n      let currentLoopContext: ILoopContext | null = this;\r\n      while(currentLoopContext !== null) {\r\n        if (currentLoopContext.path === name) break;\r\n        currentLoopContext = currentLoopContext.parentLoopContext;\r\n      }\r\n      loopContext = this.#cache[name] = currentLoopContext;\r\n    }\r\n    return loopContext;\r\n  }\r\n\r\n  walk(callback: (loopContext: ILoopContext) => void): void {\r\n    let currentLoopContext: ILoopContext | null = this;\r\n    while(currentLoopContext !== null) {\r\n      callback(currentLoopContext);\r\n      currentLoopContext = currentLoopContext.parentLoopContext;\r\n    }\r\n  }\r\n\r\n  serialize(): ILoopContext[] {\r\n    const results: ILoopContext[] = [];\r\n    this.walk((loopContext) => {\r\n      results.unshift(loopContext);\r\n    });\r\n    return results;\r\n  }\r\n\r\n}\r\n\r\n// 生成されたあと、IBindContentのloopContextに登録される\r\n// IBindContentにずっと保持される\r\nexport function createLoopContext(\r\n  ref: IStatePropertyRef,\r\n  bindContent: IBindContent\r\n): ILoopContext {\r\n  return new LoopContext(ref, bindContent);\r\n}","import { resolveNodeFromPath } from \"../BindingBuilder/resolveNodeFromPath.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { createBinding } from \"./Binding.js\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\nimport { createLoopContext } from \"../LoopContext/createLoopContext.js\";\r\nimport { getDataBindAttributesById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { hasLazyLoadComponents, loadLazyLoadComponent } from \"../WebComponents/loadFromImportMap.js\";\r\nimport { IListIndex } from \"../ListIndex/types.js\";\r\nimport { IRenderer } from \"../Updater/types.js\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types.js\";\r\nimport { BindingNode } from \"./BindingNode/BindingNode.js\";\r\n\r\n/**\r\n * 指定テンプレートIDから DocumentFragment を生成するヘルパー。\r\n *\r\n * Params:\r\n * - id: 登録済みテンプレートID\r\n *\r\n * Returns:\r\n * - テンプレート内容を複製した DocumentFragment\r\n *\r\n * Throws:\r\n * - BIND-101 Template not found: 未登録IDが指定された場合\r\n */\r\nfunction createContent(id: number): DocumentFragment {\r\n  const template = getTemplateById(id) ?? \r\n    raiseError({\r\n      code: \"BIND-101\",\r\n      message: `Template not found: ${id}`,\r\n      context: { where: 'BindContent.createContent', templateId: id },\r\n      docsUrl: \"./docs/error-codes.md#bind\",\r\n    });\r\n  const fragment = document.importNode(template.content, true);\r\n  if (hasLazyLoadComponents()) {\r\n    const lazyLoadElements = fragment.querySelectorAll(\":not(:defined)\");\r\n    for(let i = 0; i < lazyLoadElements.length; i++) {\r\n      const tagName = lazyLoadElements[i].tagName.toLowerCase();\r\n      loadLazyLoadComponent(tagName);\r\n    }\r\n  }\r\n  return fragment;\r\n}\r\n\r\n/**\r\n * テンプレート内の data-bind 情報から IBinding 配列を構築する。\r\n *\r\n * Params:\r\n * - bindContent: 親 BindContent\r\n * - id: テンプレートID\r\n * - engine: コンポーネントエンジン\r\n * - content: テンプレートから複製したフラグメント\r\n *\r\n * Returns:\r\n * - 生成された IBinding の配列\r\n *\r\n * Throws:\r\n * - BIND-101 Data-bind is not set: テンプレートに data-bind 情報が未登録\r\n * - BIND-102 Node not found: パスで指すノードが見つからない\r\n * - BIND-103 Creator not found: 対応する BindingCreator が未登録\r\n */\r\nfunction createBindings(\r\n  bindContent: IBindContent, \r\n  id         : number, \r\n  engine     : IComponentEngine, \r\n  content    : DocumentFragment\r\n): [IBinding[], IBinding[]] {\r\n  const attributes = getDataBindAttributesById(id) ?? \r\n    raiseError({\r\n      code: \"BIND-101\",\r\n      message: \"Data-bind is not set\",\r\n      context: { where: 'BindContent.createBindings', templateId: id },\r\n      docsUrl: \"./docs/error-codes.md#bind\",\r\n    });\r\n  const bindings: IBinding[] = [];\r\n  const blockBindings: IBinding[] = [];\r\n  for(let i = 0; i < attributes.length; i++) {\r\n    const attribute = attributes[i];\r\n    const node = resolveNodeFromPath(content, attribute.nodePath) ?? \r\n      raiseError({\r\n        code: \"BIND-102\",\r\n        message: `Node not found: ${attribute.nodePath}`,\r\n        context: { where: 'BindContent.createBindings', templateId: id, nodePath: attribute.nodePath },\r\n        docsUrl: \"./docs/error-codes.md#bind\",\r\n      });\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      const creator = attribute.creatorByText.get(bindText) ?? \r\n        raiseError({\r\n          code: \"BIND-103\",\r\n          message: `Creator not found: ${bindText}`,\r\n          context: { where: 'BindContent.createBindings', templateId: id, bindText },\r\n          docsUrl: \"./docs/error-codes.md#bind\",\r\n        });\r\n      const binding = createBinding(\r\n        bindContent, \r\n        node, \r\n        engine, \r\n        creator.createBindingNode, \r\n        creator.createBindingState\r\n      );\r\n      if (binding.bindingNode.isBlock) {\r\n        blockBindings.push(binding);\r\n      }\r\n      bindings.push(binding);\r\n    }\r\n  }\r\n  return [bindings, blockBindings];\r\n}\r\n\r\n/**\r\n * BindContent は、テンプレートから生成された DOM 断片（DocumentFragment）と\r\n * そのバインディング情報（IBinding[]）を管理する実装です。\r\n *\r\n * 主な役割:\r\n * - テンプレートIDから DOM 断片を生成し、バインディング情報を構築\r\n * - mount/mountBefore/mountAfter/unmount で DOM への挿入・削除を制御\r\n * - applyChange で各 IBinding に更新を委譲\r\n * - ループ時の LoopContext やリストインデックス管理にも対応\r\n * - getLastNode で再帰的に最後のノードを取得\r\n * - assignListIndex でループ内のリストインデックスを再割り当て\r\n *\r\n * Throws（代表例）:\r\n * - BIND-101 Template not found: createContent 内で未登録テンプレートID\r\n * - BIND-101/102/103: createBindings 内の data-bind 情報不足/不整合\r\n * - BIND-104 Child bindContent not found: getLastNode の子探索で不整合\r\n * - BIND-201 LoopContext is null: assignListIndex 実行時に LoopContext 未初期化\r\n */\r\nclass BindContent implements IBindContent {\r\n  loopContext  : ILoopContext | null;\r\n  parentBinding: IBinding | null;\r\n  childNodes   : Node[];\r\n  fragment     : DocumentFragment;\r\n  engine       : IComponentEngine | undefined;\r\n  bindings: IBinding[] = [];\r\n  blockBindings: IBinding[] = [];\r\n  #id;\r\n  get id() {\r\n    return this.#id;\r\n  }\r\n  /**\r\n   * この BindContent が既に DOM にマウントされているかどうか。\r\n   * 判定は childNodes[0] の親が fragment 以外かで行う。\r\n   */\r\n  get isMounted() {\r\n    return this.childNodes.length > 0 && this.childNodes[0].parentNode !== this.fragment;\r\n  }\r\n  /**\r\n   * 先頭の子ノードを返す。存在しなければ null。\r\n   */\r\n  get firstChildNode() {\r\n    return this.childNodes[0] ?? null;\r\n  }\r\n  /**\r\n   * 末尾の子ノードを返す。存在しなければ null。\r\n   */\r\n  get lastChildNode() {\r\n    return this.childNodes[this.childNodes.length - 1] ?? null;\r\n  }\r\n\r\n  get hasBlockBinding() {\r\n    return this.blockBindings.length > 0;\r\n  }\r\n  /**\r\n   * 再帰的に最終ノード（末尾のバインディング配下も含む）を取得する。\r\n   *\r\n   * Params:\r\n   * - parentNode: 検証対象の親ノード（このノード配下にあることを期待）\r\n   *\r\n   * Returns:\r\n   * - 最終ノード（Node）または null（親子関係が崩れている場合）\r\n   *\r\n   * Throws:\r\n   * - BIND-104 子 BindContent が見つからない（不整合）\r\n   */\r\n  getLastNode(parentNode: Node): Node | null {\r\n    const lastBinding = this.bindings[this.bindings.length - 1];\r\n    const lastChildNode = this.lastChildNode;\r\n    if (typeof lastBinding !== \"undefined\" && lastBinding.node === lastChildNode) {\r\n      if (lastBinding.bindContents.length > 0) {\r\n        const childBindContent = lastBinding.bindContents.at(-1) ?? raiseError({\r\n          code: \"BIND-104\",\r\n          message: \"Child bindContent not found\",\r\n          context: { where: 'BindContent.getLastNode', templateId: this.#id },\r\n          docsUrl: \"./docs/error-codes.md#bind\",\r\n        });\r\n        const lastNode = childBindContent.getLastNode(parentNode);\r\n        if (lastNode !== null) {\r\n          return lastNode;\r\n        }\r\n      }\r\n    }\r\n    if (parentNode !== lastChildNode?.parentNode) {\r\n      return null;\r\n    }\r\n    return lastChildNode;\r\n  }\r\n  #currentLoopContext: ILoopContext | null | undefined;\r\n  /**\r\n   * 現在のループ文脈（LoopContext）を返す。自身に無ければ親方向へ遡って探索し、\r\n   * 一度解決した値はフィールドにキャッシュする。\r\n   */\r\n  get currentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#currentLoopContext === \"undefined\") {\r\n      let bindContent: IBindContent | null = this;\r\n      while(bindContent !== null) {\r\n        if (bindContent.loopContext !== null) break; ;\r\n        bindContent = bindContent.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      this.#currentLoopContext = bindContent?.loopContext ?? null;\r\n    }\r\n    return this.#currentLoopContext;\r\n  }\r\n  /**\r\n   * コンストラクタ。\r\n   * - テンプレートから DocumentFragment と childNodes を構築\r\n   * - ループ参照（loopRef.listIndex）がある場合に LoopContext を生成\r\n   * - テンプレートに基づき Bindings を生成\r\n   */\r\n  constructor(\r\n    parentBinding: IBinding | null,\r\n    id           : number, \r\n    engine       : IComponentEngine, \r\n    loopRef      : IStatePropertyRef,\r\n  ) {\r\n    this.parentBinding = parentBinding;\r\n    this.#id = id;\r\n    this.fragment = createContent(id);\r\n    this.childNodes = Array.from(this.fragment.childNodes);\r\n    this.engine = engine;\r\n    this.loopContext = (loopRef.listIndex !== null) ? createLoopContext(loopRef, this) : null;\r\n    const [ bindings, blockBindings ] = createBindings(\r\n      this, \r\n      id, \r\n      engine, \r\n      this.fragment\r\n    );\r\n    this.bindings = bindings;\r\n    this.blockBindings = blockBindings;\r\n  }\r\n  /**\r\n   * 末尾にマウント（appendChild）。\r\n   * 注意: idempotent ではないため、重複マウントは呼び出し側で避けること。\r\n   */\r\n  mount(parentNode: Node) {\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      parentNode.appendChild(this.childNodes[i]);\r\n    }\r\n  }\r\n  /**\r\n   * 指定ノードの直前にマウント（insertBefore）。\r\n   */\r\n  mountBefore(parentNode: Node, beforeNode: Node | null) {\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n    }\r\n  }\r\n  /**\r\n   * 指定ノードの直後にマウント（afterNode.nextSibling を before にして insertBefore）。\r\n   */\r\n  mountAfter(parentNode: Node, afterNode: Node | null) {\r\n    const beforeNode = afterNode?.nextSibling ?? null;\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n    }\r\n  }\r\n  /**\r\n   * アンマウント（親から childNodes を一括で取り外す）。\r\n   * コメント/テキストノードにも対応するため parentNode を使用。\r\n   * 親が既に無い場合は no-op。\r\n   */\r\n  unmount() {\r\n    // コメント/テキストノードでも確実に取得できるよう parentNode を使用する\r\n    const parentNode = this.childNodes[0]?.parentNode ?? null;\r\n    if (parentNode === null) {\r\n      return; // すでにDOMから削除されている場合は何もしない\r\n    }\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      parentNode.removeChild(this.childNodes[i]);\r\n    }\r\n  }\r\n  /**\r\n   * 生成済みの全 Binding を初期化。\r\n   * createBindContent 直後および assignListIndex 後に呼び出される。\r\n   */\r\n  init() {\r\n    for(let i = 0; i < this.bindings.length; i++) {\r\n      this.bindings[i].init();\r\n    }\r\n  }\r\n  /**\r\n   * ループ中の ListIndex を再割当てし、Bindings を再初期化する。\r\n   * Throws:\r\n   * - BIND-201 LoopContext が未初期化\r\n   */\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    if (this.loopContext == null) raiseError({\r\n      code: \"BIND-201\",\r\n      message: \"LoopContext is null\",\r\n      context: { where: 'BindContent.assignListIndex', templateId: this.#id },\r\n      docsUrl: \"./docs/error-codes.md#bind\",\r\n    });\r\n    this.loopContext.assignListIndex(listIndex);\r\n    this.init();\r\n  }\r\n  /**\r\n   * 変更適用エントリポイント。\r\n   * Renderer から呼ばれ、各 Binding に applyChange を委譲する。\r\n   * renderer.updatedBindings に載っているものは二重適用を避ける。\r\n   */\r\n  applyChange(renderer: IRenderer): void {\r\n    for(let i = 0; i < this.bindings.length; i++) {\r\n      const binding = this.bindings[i];\r\n      if (renderer.updatedBindings.has(binding)) continue;\r\n      binding.applyChange(renderer);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * BindContent を生成して初期化（bindings.init）までを行うファクトリ関数。\r\n * \r\n * Params:\r\n * - parentBinding: 親の IBinding（なければ null）\r\n * - id: テンプレートID\r\n * - engine: コンポーネントエンジン\r\n * - loopRef: ループ用の StatePropertyRef（listIndex を含む場合に LoopContext を構築）\r\n *\r\n * Returns:\r\n * - 初期化済みの IBindContent\r\n */\r\nexport function createBindContent(\r\n  parentBinding: IBinding | null,\r\n  id           : number, \r\n  engine       :IComponentEngine, \r\n  loopRef      : IStatePropertyRef,\r\n):IBindContent {\r\n  const bindContent = new BindContent(\r\n    parentBinding, \r\n    id, \r\n    engine, \r\n    loopRef,\r\n  );\r\n  bindContent.init();\r\n  return bindContent;\r\n}","/**\r\n * loadFromImportMap\r\n *\r\n * importmap のエイリアスを走査し、ルート/コンポーネントを自動登録する。\r\n * - @routes/*: entryRoute でルーティング登録（/root → / に正規化）\r\n * - @components/*: SFC を読み込み、ComponentClass を生成して registerComponentClass\r\n * - #lazy サフィックスが付与されている場合は遅延ロード用に保持\r\n *\r\n * 戻り値: Promise<void>\r\n * Throws: 重大な例外は基本なし（見つからないエイリアスは warn として扱う）\r\n */\r\nimport { entryRoute } from \"../Router/Router\";\r\nimport { raiseError } from \"../utils\";\r\nimport { createComponentClass } from \"./createComponentClass\";\r\nimport { loadImportmap } from \"./loadImportmap\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent\";\r\nimport { registerComponentClass } from \"./registerComponentClass\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nconst ROUTES_KEY = \"@routes/\";\r\nconst COMPONENTS_KEY = \"@components/\";\r\nconst LAZY_LOAD_SUFFIX = \"#lazy\";\r\nconst LAZY_LOAD_SUFFIX_LEN = LAZY_LOAD_SUFFIX.length;\r\n\r\nconst lazyLoadComponentAliasByTagName: Record<string, string> = {};\r\n\r\nexport async function loadFromImportMap(): Promise<void> {\r\n  const importmap = loadImportmap();\r\n  if (importmap.imports) {\r\n    const loadAliasByTagName: Map<string, string> = new Map();\r\n    for (const [alias, value] of Object.entries(importmap.imports)) {\r\n      let tagName, isLazyLoad;\r\n      if (alias.startsWith(ROUTES_KEY)) {\r\n        isLazyLoad = alias.endsWith(LAZY_LOAD_SUFFIX);\r\n        // remove the prefix '@routes' and the suffix '#lazy' if it exists\r\n        const path = alias.slice(ROUTES_KEY.length - 1, isLazyLoad ? -LAZY_LOAD_SUFFIX_LEN : undefined); \r\n        const pathWithoutParams = path.replace(/:[^\\s/]+/g, \"\"); // remove the params\r\n        tagName = \"routes\" + pathWithoutParams.replace(/\\//g, \"-\"); // replace '/' with '-'\r\n        entryRoute(tagName, path === \"/root\" ? \"/\" : path); // routing\r\n      } if (alias.startsWith(COMPONENTS_KEY)) {\r\n        isLazyLoad = alias.endsWith(LAZY_LOAD_SUFFIX);\r\n        // remove the prefix '@components/' and the suffix '#lazy' if it exists\r\n        tagName = alias.slice(COMPONENTS_KEY.length, isLazyLoad ? -LAZY_LOAD_SUFFIX_LEN : undefined);\r\n      }\r\n      if (!tagName) {\r\n        continue;\r\n      }\r\n      if (isLazyLoad) {\r\n        // Lazy Load用のコンポーネントのエイリアスを格納\r\n        lazyLoadComponentAliasByTagName[tagName] = alias;\r\n        continue; // Lazy Loadの場合はここでスキップ\r\n      }\r\n      loadAliasByTagName.set(tagName, alias);\r\n    }\r\n    for (const [tagName, alias] of loadAliasByTagName.entries()) {\r\n      // 非Lazy Loadのコンポーネントはここで登録\r\n      const componentData = await loadSingleFileComponent(alias);\r\n      const componentClass = createComponentClass(componentData);\r\n      registerComponentClass(tagName, componentClass);\r\n    }\r\n  }\r\n}\r\n\r\nexport function hasLazyLoadComponents(): boolean {\r\n  return Object.keys(lazyLoadComponentAliasByTagName).length > 0;\r\n}\r\n\r\nexport function isLazyLoadComponent(tagName: string): boolean {\r\n  return lazyLoadComponentAliasByTagName.hasOwnProperty(tagName);\r\n}\r\n\r\nexport function loadLazyLoadComponent(tagName: string): void {\r\n  const alias = lazyLoadComponentAliasByTagName[tagName];\r\n  if (!alias) {\r\n    // 警告として扱うが、構造化メタ情報を付加\r\n    const err = {\r\n      code: \"IMP-201\",\r\n      message: `Alias not found for tagName: ${tagName}`,\r\n      context: { where: 'loadFromImportMap.loadLazyLoadComponent', tagName },\r\n      docsUrl: \"./docs/error-codes.md#imp\",\r\n      severity: \"warn\" as const,\r\n    };\r\n    // 既存挙動は warn + return のため、throw はせず console.warn にメタを付与\r\n    console.warn(err.message, { code: err.code, context: err.context, docsUrl: err.docsUrl, severity: err.severity });\r\n    return;\r\n  }\r\n  delete lazyLoadComponentAliasByTagName[tagName]; // 一度ロードしたら削除\r\n  queueMicrotask(async () => {\r\n    const componentData = await loadSingleFileComponent(alias);\r\n    const componentClass = createComponentClass(componentData);\r\n    registerComponentClass(tagName, componentClass);\r\n  });\r\n}\r\n","import { raiseError } from \"../utils.js\";\r\nimport { IComponentConfig } from \"../WebComponents/types\";\r\nimport { canHaveShadowRoot } from \"./canHaveShadowRoot.js\";\r\n\r\nfunction getParentShadowRoot(parentNode: Node | null): ShadowRoot|undefined{\r\n  let node: Node | null = parentNode;\r\n  while(node) {\r\n    if (node instanceof ShadowRoot) {\r\n      return node;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n}\r\n\r\n/**\r\n * 指定したHTMLElementにShadow DOMをアタッチし、スタイルシートを適用するユーティリティ関数。\r\n *\r\n * - config.enableShadowDomがtrueの場合は、ShadowRootを生成し、adoptedStyleSheetsでスタイルを適用\r\n * - extends指定がある場合はcanHaveShadowRootで拡張可能かチェック\r\n * - Shadow DOMを使わない場合は、親のShadowRootまたはdocumentにスタイルシートを追加\r\n * - すでに同じスタイルシートが含まれていれば重複追加しない\r\n *\r\n * @param element    対象のHTMLElement\r\n * @param config     コンポーネント設定\r\n * @param styleSheet 適用するCSSStyleSheet\r\n * @throws           Shadow DOM非対応の組み込み要素を拡張しようとした場合はエラー\r\n */\r\nexport function attachShadow(element: HTMLElement, config: IComponentConfig, styleSheet: CSSStyleSheet): void {\r\n    if (config.enableShadowDom) {\r\n      if (config.extends === null || canHaveShadowRoot(config.extends)) {\r\n        if (!element.shadowRoot) {\r\n          const shadowRoot = element.attachShadow({ mode: 'open' });\r\n          shadowRoot.adoptedStyleSheets = [styleSheet];\r\n        }\r\n      } else {\r\n        raiseError(`ComponentEngine: Shadow DOM not supported for builtin components that extend ${config.extends}`);\r\n      }\r\n    } else {\r\n      const shadowRootOrDocument = getParentShadowRoot(element.parentNode) || document;\r\n      const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n      if (!styleSheets.includes(styleSheet)) {\r\n        shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, styleSheet];\r\n      }\r\n    }\r\n\r\n}","/**\r\n * 指定したタグ名の要素がShadowRootを持てるかどうかを判定するユーティリティ関数。\r\n *\r\n * - 指定タグ名で要素を生成し、attachShadowメソッドが存在するかどうかで判定\r\n * - 無効なタグ名やattachShadow未対応の場合はfalseを返す\r\n *\r\n * @param tagName 判定したい要素のタグ名（例: \"div\", \"span\", \"input\" など）\r\n * @returns       ShadowRootを持てる場合はtrue、持てない場合はfalse\r\n */\r\nexport function canHaveShadowRoot(tagName: string): boolean {\r\n  try {\r\n    // 一時的に要素を作成\r\n    const element = document.createElement(tagName);\r\n    // `attachShadow` メソッドが存在し、実行可能かを確認\r\n    if (typeof element.attachShadow !== \"function\") {\r\n      return false;\r\n    }\r\n    // 一時的にShadowRootをアタッチしてみる\r\n    const shadowRoot = element.attachShadow({ mode: 'open' });\r\n    return true;\r\n  } catch {\r\n    // 無効なタグ名などが渡された場合は false を返す\r\n    return false;\r\n  }\r\n}\r\n","import { IBinding } from \"../DataBinding/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { StructiveComponent } from \"../WebComponents/types\";\r\nimport { IComponentStateBinding } from \"./types\";\r\n\r\n/**\r\n * ComponentStateBinding\r\n *\r\n * 目的:\r\n * - 親コンポーネントの状態パスと子コンポーネント側のサブパスを一対一で関連付け、\r\n *   双方向にパス変換・参照できるようにする（親->子/子->親）。\r\n *\r\n * 制約:\r\n * - 親パス/子パスは 1:1 のみ（重複登録は STATE-303）\r\n * - 最長一致でのパス変換を行い、下位セグメントはそのまま連結\r\n */\r\nclass ComponentStateBinding implements IComponentStateBinding {\r\n  parentPaths: Set<string> = new Set<string>();\r\n  childPaths: Set<string> = new Set<string>();\r\n  childPathByParentPath: Map<string, string> = new Map();\r\n  parentPathByChildPath: Map<string, string> = new Map();\r\n  bindingByParentPath: Map<string, IBinding> = new Map();\r\n  bindingByChildPath: Map<string, IBinding> = new Map();\r\n  bindings: WeakSet<IBinding> = new WeakSet();\r\n\r\n  addBinding(binding: IBinding): void {\r\n    if (this.bindings.has(binding)) {\r\n      return; // 既にバインディングが追加されている場合は何もしない\r\n    }\r\n    const parentPath = binding.bindingState.pattern;\r\n    const childPath = binding.bindingNode.subName;\r\n    if (this.childPathByParentPath.has(parentPath)) {\r\n      raiseError({\r\n        code: \"STATE-303\",\r\n  message: `Parent path \"${parentPath}\" already has a child path`,\r\n        context: { parentPath, existingChildPath: this.childPathByParentPath.get(parentPath) },\r\n        docsUrl: \"./docs/error-codes.md#state\",\r\n      });\r\n    }\r\n    if (this.parentPathByChildPath.has(childPath)) {\r\n      raiseError({\r\n        code: \"STATE-303\",\r\n  message: `Child path \"${childPath}\" already has a parent path`,\r\n        context: { childPath, existingParentPath: this.parentPathByChildPath.get(childPath) },\r\n        docsUrl: \"./docs/error-codes.md#state\",\r\n      });\r\n    }\r\n    this.childPathByParentPath.set(parentPath, childPath);\r\n    this.parentPathByChildPath.set(childPath, parentPath);\r\n    this.parentPaths.add(parentPath);\r\n    this.childPaths.add(childPath);\r\n    this.bindingByParentPath.set(parentPath, binding);\r\n    this.bindingByChildPath.set(childPath, binding);\r\n    this.bindings.add(binding);\r\n  }\r\n  \r\n  getChildPath(parentPath: string): string | undefined {\r\n    return this.childPathByParentPath.get(parentPath);\r\n  }\r\n\r\n  getParentPath(childPath: string): string | undefined {\r\n    return this.parentPathByChildPath.get(childPath);\r\n  }\r\n\r\n  toParentPathFromChildPath(childPath: string): string {\r\n    // 子から親へ: 最長一致する childPaths のエントリを探し、残差のセグメントを親に連結\r\n    const childPathInfo = getStructuredPathInfo(childPath);\r\n    const matchPaths = childPathInfo.cumulativePathSet.intersection(this.childPaths);\r\n    if (matchPaths.size === 0) {\r\n      raiseError({\r\n        code: \"STATE-302\",\r\n  message: `No parent path found for child path \"${childPath}\"`,\r\n        context: { childPath },\r\n        docsUrl: \"./docs/error-codes.md#state\",\r\n      });\r\n    }\r\n    const matchPathArray = Array.from(matchPaths);\r\n    const longestMatchPath = matchPathArray[matchPathArray.length - 1];\r\n    const remainPath = childPath.slice(longestMatchPath.length); // include the dot\r\n    const matchParentPath = this.parentPathByChildPath.get(longestMatchPath);\r\n    if (typeof matchParentPath === \"undefined\") {\r\n      raiseError({\r\n        code: \"STATE-302\",\r\n  message: `No parent path found for child path \"${childPath}\"`,\r\n        context: { childPath, longestMatchPath },\r\n        docsUrl: \"./docs/error-codes.md#state\",\r\n      });\r\n    }\r\n    return matchParentPath + remainPath;\r\n  }\r\n\r\n  toChildPathFromParentPath(parentPath: string): string {\r\n    // 親から子へ: 最長一致する parentPaths のエントリを探し、残差のセグメントを子に連結\r\n    const parentPathInfo = getStructuredPathInfo(parentPath);\r\n    const matchPaths = parentPathInfo.cumulativePathSet.intersection(this.parentPaths);\r\n    if (matchPaths.size === 0) {\r\n      raiseError({\r\n        code: \"STATE-302\",\r\n  message: `No child path found for parent path \"${parentPath}\"`,\r\n        context: { parentPath },\r\n        docsUrl: \"./docs/error-codes.md#state\",\r\n      });\r\n    }\r\n    const matchPathArray = Array.from(matchPaths);\r\n    const longestMatchPath = matchPathArray[matchPathArray.length - 1];\r\n    const remainPath = parentPath.slice(longestMatchPath.length); // include the dot\r\n    const matchChildPath = this.childPathByParentPath.get(longestMatchPath);\r\n    if (typeof matchChildPath === \"undefined\") {\r\n      raiseError({\r\n        code: \"STATE-302\",\r\n  message: `No child path found for parent path \"${parentPath}\"`,\r\n        context: { parentPath, longestMatchPath },\r\n        docsUrl: \"./docs/error-codes.md#state\",\r\n      });\r\n    }\r\n    return matchChildPath + remainPath;\r\n  }\r\n\r\n  startsWithByChildPath(childPathInfo: IStructuredPathInfo): string | null {\r\n    if (this.childPaths.size === 0) {\r\n      return null;\r\n    }\r\n    const matchPaths = childPathInfo.cumulativePathSet.intersection(this.childPaths);\r\n    if (matchPaths.size === 0) {\r\n      return null;\r\n    } else {\r\n      const matches = Array.from(matchPaths);\r\n      const longestMatchPath = matches[matches.length - 1];\r\n      return longestMatchPath;\r\n    }\r\n  }\r\n\r\n  bind(parentComponent: StructiveComponent, childComponent: StructiveComponent): void {\r\n    // bindParentComponent\r\n    const bindings = parentComponent.getBindingsFromChild(childComponent);\r\n    for (const binding of bindings ?? []) {\r\n      this.addBinding(binding);\r\n    }\r\n  }\r\n}\r\n\r\nexport function createComponentStateBinding(): IComponentStateBinding {\r\n  return new ComponentStateBinding();\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IComponentStateBinding } from \"../ComponentStateBinding/types\";\r\nimport { SetByRefSymbol } from \"../StateClass/symbols\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { getStatePropertyRef } from \"../StatePropertyRef/StatepropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { createUpdater } from \"../Updater/Updater\";\r\nimport { raiseError } from \"../utils\";\r\nimport { AssignStateSymbol, NotifyRedrawSymbol } from \"./symbols\";\r\nimport { IComponentStateInput, IComponentStateInputHandler } from \"./types\";\r\n\r\nclass ComponentStateInputHandler implements IComponentStateInputHandler {\r\n  private componentStateBinding: IComponentStateBinding;\r\n  private engine: IComponentEngine;\r\n  constructor(engine:IComponentEngine, componentStateBinding: IComponentStateBinding) {\r\n    this.componentStateBinding = componentStateBinding;\r\n    this.engine = engine;\r\n  }\r\n\r\n  assignState(object: any): void {\r\n    createUpdater(this.engine, (updater) => {\r\n      updater.update(null, (stateProxy, handler) => {\r\n        for(const [key, value] of Object.entries(object)) {\r\n          const childPathInfo = getStructuredPathInfo(key);\r\n          const childRef = getStatePropertyRef(childPathInfo, null);\r\n          stateProxy[SetByRefSymbol](childRef, value);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * listindexに一致するかどうかは事前にスクリーニングしておく\r\n   * @param refs \r\n   */\r\n  notifyRedraw(refs: IStatePropertyRef[]): void {\r\n    // ToDo: createUpdater内でループさせるべきか検討\r\n    for(const parentPathRef of refs) {\r\n      try {\r\n        const childPath = this.componentStateBinding.toChildPathFromParentPath(parentPathRef.info.pattern);\r\n        const childPathInfo = getStructuredPathInfo(childPath);\r\n        const childListIndex = parentPathRef.listIndex;\r\n        const childRef = getStatePropertyRef(childPathInfo, childListIndex);\r\n        const value = this.engine.getPropertyValue(childRef);\r\n        // Ref情報をもとに状態更新キューに追加\r\n        createUpdater(this.engine, (updater) => {\r\n          updater.update(null, (stateProxy, handler) => {\r\n            stateProxy[SetByRefSymbol](childRef, value);\r\n          });\r\n        });\r\n      } catch(e) {\r\n        // 対象でないものは何もしない\r\n      }\r\n    }\r\n  }\r\n\r\n  get(target:any, prop:PropertyKey, receiver:IComponentStateInput) {\r\n    if (prop === AssignStateSymbol) {\r\n      return this.assignState.bind(this);\r\n    } else if (prop === NotifyRedrawSymbol) {\r\n      return this.notifyRedraw.bind(this);\r\n    } else if (typeof prop === \"string\") {\r\n      const ref = getStatePropertyRef(getStructuredPathInfo(prop), null);\r\n      return this.engine.getPropertyValue(ref);\r\n    }\r\n    raiseError(`Property \"${String(prop)}\" is not supported in ComponentStateInput.`);\r\n  }\r\n\r\n  set(target:any, prop:PropertyKey, value:any, receiver:IComponentStateInput): boolean {\r\n    if (typeof prop === \"string\") {\r\n      const ref = getStatePropertyRef(getStructuredPathInfo(prop), null);\r\n      this.engine.setPropertyValue(ref, value);\r\n      return true;\r\n    }\r\n    raiseError(`Property \"${String(prop)}\" is not supported in ComponentStateInput.`);\r\n  }\r\n}\r\n\r\nexport function createComponentStateInput(\r\n  engine: IComponentEngine,\r\n  componentStateBinding: IComponentStateBinding\r\n): IComponentStateInput {\r\n  const handler = new ComponentStateInputHandler(engine, componentStateBinding);\r\n  return new Proxy({}, handler) as IComponentStateInput;\r\n}","import { IComponentStateBinding } from \"../ComponentStateBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { SetByRefSymbol } from \"../StateClass/symbols\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { getStatePropertyRef } from \"../StatePropertyRef/StatepropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { createUpdater } from \"../Updater/Updater\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IComponentStateOutput } from \"./types\";\r\n\r\nclass ComponentStateOutput implements IComponentStateOutput {\r\n  binding: IComponentStateBinding;\r\n  constructor(binding: IComponentStateBinding) {\r\n    this.binding = binding;\r\n  }\r\n\r\n  get(ref: IStatePropertyRef): any {\r\n    const childPath = this.binding.startsWithByChildPath(ref.info);\r\n    if (childPath === null) {\r\n      raiseError(`No child path found for path \"${ref.info.toString()}\".`);\r\n    }\r\n    const binding = this.binding.bindingByChildPath.get(childPath);\r\n    if (typeof binding === \"undefined\") {\r\n      raiseError(`No binding found for child path \"${childPath}\".`);\r\n    }\r\n    const parentPathInfo = getStructuredPathInfo(this.binding.toParentPathFromChildPath(ref.info.pattern));\r\n    const parentRef = getStatePropertyRef(parentPathInfo, ref.listIndex ?? binding.bindingState.listIndex);\r\n    return binding.engine.getPropertyValue(parentRef);\r\n  }\r\n\r\n  set(ref: IStatePropertyRef, value: any): boolean {\r\n    const childPath = this.binding.startsWithByChildPath(ref.info);\r\n    if (childPath === null) {\r\n      raiseError(`No child path found for path \"${ref.info.toString()}\".`);\r\n    }\r\n    const binding = this.binding.bindingByChildPath.get(childPath);\r\n    if (typeof binding === \"undefined\") {\r\n      raiseError(`No binding found for child path \"${childPath}\".`);\r\n    }\r\n    const parentPathInfo = getStructuredPathInfo(this.binding.toParentPathFromChildPath(ref.info.pattern));\r\n    const engine = binding.engine;\r\n    const parentRef = getStatePropertyRef(parentPathInfo, ref.listIndex ?? binding.bindingState.listIndex);\r\n    createUpdater(engine, (updater) => {\r\n      updater.update(null, (stateProxy, handler) => {\r\n        stateProxy[SetByRefSymbol](parentRef, value);\r\n      });\r\n    });\r\n    return true;\r\n  }\r\n\r\n  startsWith(pathInfo: IStructuredPathInfo): boolean {\r\n    return this.binding.startsWithByChildPath(pathInfo) !== null;\r\n  }\r\n\r\n  getListIndexes(ref: IStatePropertyRef): IListIndex[] | null {\r\n    const childPath = this.binding.startsWithByChildPath(ref.info);\r\n    if (childPath === null) {\r\n      raiseError(`No child path found for path \"${ref.info.toString()}\".`);\r\n    }\r\n    const binding = this.binding.bindingByChildPath.get(childPath);\r\n    if (typeof binding === \"undefined\") {\r\n      raiseError(`No binding found for child path \"${childPath}\".`);\r\n    }\r\n    const parentPathInfo = getStructuredPathInfo(this.binding.toParentPathFromChildPath(ref.info.pattern));\r\n    const parentRef = getStatePropertyRef(parentPathInfo, ref.listIndex);\r\n    return binding.engine.getListIndexes(parentRef);\r\n  }\r\n}\r\n\r\nexport function createComponentStateOutput(binding: IComponentStateBinding): IComponentStateOutput {\r\n  return new ComponentStateOutput(binding);\r\n}","import { createBindContent } from \"../DataBinding/BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../DataBinding/types\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { IState, IStructiveState } from \"../StateClass/types\";\r\nimport { ComponentType, IComponentConfig, IComponentStatic, StructiveComponent } from \"../WebComponents/types\";\r\nimport { attachShadow } from \"./attachShadow.js\";\r\nimport { ISaveInfoByResolvedPathInfo, IComponentEngine, ICacheEntry } from \"./types\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetByRefSymbol, SetCacheableSymbol } from \"../StateClass/symbols.js\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IComponentStateBinding } from \"../ComponentStateBinding/types.js\";\r\nimport { createComponentStateBinding } from \"../ComponentStateBinding/createComponentStateBinding.js\";\r\nimport { createComponentStateInput } from \"../ComponentStateInput/createComponentStateInput.js\";\r\nimport { createComponentStateOutput } from \"../ComponentStateOutput/createComponentStateOutput.js\";\r\nimport { IComponentStateInput } from \"../ComponentStateInput/types.js\";\r\nimport { IComponentStateOutput } from \"../ComponentStateOutput/types.js\";\r\nimport { AssignStateSymbol } from \"../ComponentStateInput/symbols.js\";\r\nimport { IListIndex } from \"../ListIndex/types.js\";\r\nimport { IPathManager } from \"../PathManager/types.js\";\r\nimport { createUpdater } from \"../Updater/Updater.js\";\r\nimport { getStatePropertyRef } from \"../StatePropertyRef/StatepropertyRef.js\";\r\nimport { RESERVED_WORD_SET } from \"../constants.js\";\r\nimport { addPathNode } from \"../PathTree/PathNode.js\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types.js\";\r\n\r\n/**\r\n * ComponentEngine は、Structive コンポーネントの状態・依存関係・\r\n * バインディング・ライフサイクル・レンダリングを統合する中核エンジンです。\r\n *\r\n * 主な役割:\r\n * - 状態インスタンスやプロキシの生成・管理\r\n * - テンプレート/スタイルシート/フィルター/バインディングの管理\r\n * - 依存関係グラフ（PathTree）の構築と管理\r\n * - バインディング情報やリスト情報の保存・取得\r\n * - ライフサイクル（connected/disconnected）処理\r\n * - Shadow DOM の適用、またはブロックモードのプレースホルダー運用\r\n * - 状態プロパティの取得・設定\r\n * - バインディングの追加・存在判定・リスト管理\r\n *\r\n * Throws（代表例）:\r\n * - BIND-201 bindContent not initialized yet / Block parent node is not set\r\n * - STATE-202 Failed to parse state from dataset\r\n *\r\n * 備考:\r\n * - 非同期初期化（waitForInitialize）と切断待機（waitForDisconnected）を提供\r\n * - Updater と連携したバッチ更新で効率的なレンダリングを実現\r\n */\r\n\r\nconst EMPTY_SAVE_INFO: ISaveInfoByResolvedPathInfo = {\r\n  list: null,\r\n  listIndexes: null,\r\n  listClone: null,\r\n};\r\nexport class ComponentEngine implements IComponentEngine {\r\n  type          : ComponentType = 'autonomous';\r\n  config        : IComponentConfig;\r\n  template      : HTMLTemplateElement;\r\n  styleSheet    : CSSStyleSheet;\r\n  stateClass    : IStructiveState;\r\n  state         : IState;\r\n  inputFilters  : FilterWithOptions;\r\n  outputFilters : FilterWithOptions;\r\n  #bindContent  :IBindContent | null = null;\r\n \r\n  get bindContent(): IBindContent {\r\n    if (this.#bindContent === null) {\r\n      raiseError({\r\n        code: 'BIND-201',\r\n        message: 'bindContent not initialized yet',\r\n        context: { where: 'ComponentEngine.bindContent.get', componentId: (this.owner.constructor as IComponentStatic).id },\r\n        docsUrl: './docs/error-codes.md#bind',\r\n      });\r\n    }\r\n    return this.#bindContent;\r\n  }\r\n  baseClass     : typeof HTMLElement = HTMLElement;\r\n  owner         : StructiveComponent;\r\n\r\n  bindingsByListIndex : WeakMap<IListIndex, Set<IBinding>> = new WeakMap();\r\n\r\n  bindingsByComponent: WeakMap<StructiveComponent, Set<IBinding>> = new WeakMap();\r\n  structiveChildComponents: Set<StructiveComponent> = new Set();\r\n\r\n  #waitForInitialize : PromiseWithResolvers<void> = Promise.withResolvers<void>();\r\n  #waitForDisconnected: PromiseWithResolvers<void> | null = null;\r\n  \r\n  #stateBinding: IComponentStateBinding = createComponentStateBinding();\r\n  stateInput: IComponentStateInput;\r\n  stateOutput: IComponentStateOutput;\r\n  #blockPlaceholder: Comment | null = null; // ブロックプレースホルダー\r\n  #blockParentNode: Node | null = null; // ブロックプレースホルダーの親ノード\r\n  #ignoreDissconnectedCallback: boolean = false; // disconnectedCallbackを無視するフラグ\r\n\r\n  #currentVersion: number = 0;\r\n  get currentVersion(): number {\r\n    return this.#currentVersion;\r\n  }\r\n\r\n  versionUp(): number {\r\n    return ++this.#currentVersion;\r\n  }\r\n\r\n  cache: WeakMap<IStatePropertyRef, ICacheEntry> = new WeakMap(); // StatePropertyRefごとのキャッシュエントリ\r\n  constructor(config: IComponentConfig, owner: StructiveComponent) {\r\n    this.config = config;\r\n    if (this.config.extends) {\r\n      this.type = 'builtin';\r\n    }\r\n    const componentClass = owner.constructor as IComponentStatic;\r\n    this.template = componentClass.template;\r\n    this.styleSheet = componentClass.styleSheet;\r\n    this.stateClass = componentClass.stateClass;\r\n    this.state = new this.stateClass();\r\n    this.inputFilters = componentClass.inputFilters;\r\n    this.outputFilters = componentClass.outputFilters;\r\n    this.owner =  owner;\r\n    this.stateInput = createComponentStateInput(this, this.#stateBinding);\r\n    this.stateOutput = createComponentStateOutput(this.#stateBinding);\r\n  }\r\n\r\n  get pathManager(): IPathManager {\r\n    return (this.owner.constructor as IComponentStatic).pathManager;\r\n  }\r\n\r\n  setup(): void {\r\n    // 実体化された state オブジェクトのプロパティをすべて PathManager に登録する\r\n    // ToDo:prototypeを遡ったほうが良い\r\n    for(const path in this.state) {\r\n      if (RESERVED_WORD_SET.has(path) || this.pathManager.alls.has(path)) {\r\n        continue;\r\n      }\r\n      this.pathManager.alls.add(path);\r\n      addPathNode(this.pathManager.rootNode, path);\r\n    }\r\n    const componentClass = this.owner.constructor as IComponentStatic;\r\n    const rootRef = getStatePropertyRef(getStructuredPathInfo(''), null);\r\n    this.#bindContent = createBindContent(null, componentClass.id, this, rootRef); // this.stateArrayPropertyNamePatternsが変更になる可能性がある\r\n  }\r\n\r\n  get waitForInitialize(): PromiseWithResolvers<void> {\r\n    return this.#waitForInitialize;\r\n  }\r\n\r\n  async connectedCallback(): Promise<void> {\r\n    await this.#waitForDisconnected?.promise; // disconnectedCallbackが呼ばれている場合は待つ\r\n    await this.owner.parentStructiveComponent?.waitForInitialize.promise;\r\n    // コンポーネントの状態を初期化する\r\n    if (this.owner.dataset.state) {\r\n      // data-state属性から状態を取得する\r\n      try {\r\n        const json = JSON.parse(this.owner.dataset.state);\r\n        this.stateInput[AssignStateSymbol](json);\r\n      } catch(e) {\r\n        raiseError({\r\n          code: 'STATE-202',\r\n          message: 'Failed to parse state from dataset',\r\n          context: { where: 'ComponentEngine.connectedCallback', datasetState: this.owner.dataset.state },\r\n          docsUrl: './docs/error-codes.md#state',\r\n          cause: e as any,\r\n        });\r\n      }\r\n    }\r\n    const parentComponent = this.owner.parentStructiveComponent;\r\n    if (parentComponent) {\r\n      // 親コンポーネントの状態をバインドする\r\n      parentComponent.registerChildComponent(this.owner);\r\n      // 親コンポーネントの状態を子コンポーネントにバインドする\r\n      this.#stateBinding.bind(parentComponent, this.owner);\r\n    }\r\n    if (this.config.enableWebComponents) {\r\n      attachShadow(this.owner, this.config, this.styleSheet);\r\n    } else {\r\n      this.#blockParentNode = this.owner.parentNode;\r\n      this.#blockPlaceholder = document.createComment(\"Structive block placeholder\");\r\n      try {\r\n        this.#ignoreDissconnectedCallback = true; // disconnectedCallbackを無視するフラグを立てる\r\n        this.owner.replaceWith(this.#blockPlaceholder); // disconnectCallbackが呼ばれてしまう\r\n      } finally {\r\n        this.#ignoreDissconnectedCallback = false;\r\n      }\r\n    }\r\n\r\n    if (this.config.enableWebComponents) {\r\n      // Shadow DOMにバインドコンテンツをマウントする\r\n      this.bindContent.mount(this.owner.shadowRoot ?? this.owner);\r\n    } else {\r\n      // ブロックプレースホルダーの親ノードにバインドコンテンツをマウントする\r\n      const parentNode = this.#blockParentNode ?? raiseError({\r\n        code: 'BIND-201',\r\n        message: 'Block parent node is not set',\r\n        context: { where: 'ComponentEngine.connectedCallback', mode: 'block' },\r\n        docsUrl: './docs/error-codes.md#bind',\r\n      });\r\n      this.bindContent.mountAfter(parentNode, this.#blockPlaceholder);\r\n    }\r\n    await createUpdater(this, async (updater) => {\r\n      await updater.update(null, async (stateProxy, handler) => {\r\n        // 状態の初期レンダリングを行う\r\n        for(const path of this.pathManager.alls) {\r\n          const info = getStructuredPathInfo(path);\r\n          if (info.pathSegments.length !== 1) continue; // ルートプロパティのみ\r\n          if (this.pathManager.funcs.has(path)) continue; // 関数は除外\r\n          const ref = getStatePropertyRef(info, null);\r\n          updater.enqueueRef(ref);\r\n        }\r\n        await stateProxy[ConnectedCallbackSymbol]();\r\n      });\r\n    });\r\n\r\n    // レンダリングが終わってから実行する\r\n    queueMicrotask(() => {\r\n      this.#waitForInitialize.resolve();\r\n    });\r\n  }\r\n\r\n  async disconnectedCallback(): Promise<void> {\r\n    this.#waitForDisconnected = Promise.withResolvers<void>();\r\n    try {\r\n      if (this.#ignoreDissconnectedCallback) return; // disconnectedCallbackを無視するフラグが立っている場合は何もしない\r\n      await createUpdater(this, async (updater) => {\r\n        await updater.update(null, async (stateProxy, handler) => {\r\n          await stateProxy[DisconnectedCallbackSymbol]();\r\n        });\r\n      });\r\n      // 親コンポーネントから登録を解除する\r\n      this.owner.parentStructiveComponent?.unregisterChildComponent(this.owner);\r\n      if (!this.config.enableWebComponents) {\r\n        this.#blockPlaceholder?.remove();\r\n        this.#blockPlaceholder = null;\r\n        this.#blockParentNode = null;\r\n      }\r\n    } finally {\r\n      this.#waitForDisconnected.resolve(); // disconnectedCallbackが呼ばれたことを通知   \r\n    }\r\n  }\r\n\r\n  #saveInfoByStructuredPathId: { [id:number]: ISaveInfoByResolvedPathInfo } = {};\r\n  #saveInfoByResolvedPathInfoIdByListIndex: WeakMap<IListIndex, { [id:number]: ISaveInfoByResolvedPathInfo }> = new WeakMap();\r\n  #saveInfoByRef: WeakMap<IStatePropertyRef, ISaveInfoByResolvedPathInfo> = new WeakMap();\r\n  #listByRef: WeakMap<IStatePropertyRef, any[] | null> = new WeakMap();\r\n  #listIndexesByRef: WeakMap<IStatePropertyRef, IListIndex[] | null> = new WeakMap();\r\n  #bindingsByRef: WeakMap<IStatePropertyRef, IBinding[]> = new WeakMap();\r\n  #listCloneByRef: WeakMap<IStatePropertyRef, any[] | null> = new WeakMap();\r\n\r\n  saveBinding(\r\n    ref      : IStatePropertyRef,\r\n    binding  : IBinding\r\n  ): void {\r\n    const bindings = this.#bindingsByRef.get(ref);\r\n    if (typeof bindings !== \"undefined\") {\r\n      bindings.push(binding);\r\n      return;\r\n    }\r\n    this.#bindingsByRef.set(ref, [binding]);\r\n  }\r\n\r\n  saveListAndListIndexes(\r\n    ref               : IStatePropertyRef,\r\n    list              : any[] | null,\r\n    listIndexes       : IListIndex[] | null\r\n  ): void {\r\n    if (this.pathManager.lists.has(ref.info.pattern)) {\r\n      const saveInfo = {\r\n        list          : list,\r\n        listIndexes   : listIndexes,\r\n        listClone     : list ? Array.from(list) : null,\r\n      }\r\n      this.#saveInfoByRef.set(ref, saveInfo);\r\n    }\r\n  }\r\n\r\n  getBindings(ref: IStatePropertyRef): IBinding[] {\r\n    const bindings = this.#bindingsByRef.get(ref);\r\n    if (typeof bindings !== \"undefined\") {\r\n      return bindings;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  getListIndexes(ref: IStatePropertyRef): IListIndex[] | null {\r\n    if (this.stateOutput.startsWith(ref.info)) {\r\n      return this.stateOutput.getListIndexes(ref);\r\n    }\r\n    return this.#saveInfoByRef.get(ref)?.listIndexes ?? null;\r\n  }\r\n\r\n  getListAndListIndexes(ref: IStatePropertyRef): ISaveInfoByResolvedPathInfo {\r\n    const saveInfo = this.#saveInfoByRef.get(ref);\r\n    if (typeof saveInfo === \"undefined\") {\r\n      return EMPTY_SAVE_INFO;\r\n    }\r\n    return saveInfo;\r\n  }\r\n\r\n  getPropertyValue(ref: IStatePropertyRef): any {\r\n    // プロパティの値を取得する\r\n    let value;\r\n    createUpdater(this, (updater) => {\r\n      value = updater.createReadonlyState((stateProxy, handler) => {\r\n        return stateProxy[GetByRefSymbol](ref);\r\n      });\r\n    });\r\n    return value;\r\n  }\r\n  setPropertyValue(ref: IStatePropertyRef, value: any): void {\r\n    // プロパティの値を設定する\r\n    createUpdater(this, (updater) => {\r\n      updater.update(null, (stateProxy, handler) => {\r\n        stateProxy[SetByRefSymbol](ref, value);\r\n      });\r\n    });\r\n  }\r\n  // Structive子コンポーネントを登録する\r\n  registerChildComponent(component: StructiveComponent): void {\r\n    this.structiveChildComponents.add(component);\r\n  }\r\n  unregisterChildComponent(component: StructiveComponent): void {\r\n    this.structiveChildComponents.delete(component);\r\n  }\r\n  \r\n}\r\n\r\nexport function createComponentEngine(config: IComponentConfig, component: StructiveComponent): IComponentEngine {\r\n  return new ComponentEngine(config, component);\r\n}","/**\r\n * replaceMustacheWithTemplateTag.ts\r\n *\r\n * Mustache構文（{{if:条件}}, {{for:式}}, {{endif}}, {{endfor}}, {{elseif:条件}}, {{else}} など）を\r\n * <template>タグやコメントノードに変換するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - HTML文字列内のMustache構文を正規表現で検出し、<template data-bind=\"...\">やコメントノードに変換\r\n * - if/for/endif/endfor/elseif/elseなどの制御構文をネスト対応で<template>タグに変換\r\n * - 通常の埋め込み式（{{expr}}）はコメントノード（<!--embed:expr-->）に変換\r\n *\r\n * 設計ポイント:\r\n * - stackでネスト構造を管理し、endif/endfor/elseif/elseの対応関係を厳密にチェック\r\n * - 不正なネストや対応しない構文にはraiseErrorで例外を発生\r\n * - elseif/elseはnot条件のtemplateを自動生成し、条件分岐を表現\r\n * - コメントノードへの変換で埋め込み式の安全なDOM挿入を実現\r\n */\r\nimport { COMMENT_EMBED_MARK } from \"../constants.js\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nconst MUSTACHE_REGEXP = /\\{\\{([^\\}]+)\\}\\}/g;\r\nconst MUSTACHE_TYPES:Set<string> = new Set(['if', 'for', 'endif', 'endfor', 'elseif', 'else']);\r\n\r\ntype MustacheType = 'if' | 'for' | 'endif' | 'endfor' | 'elseif' | 'else';\r\ntype MustacheInfo = {\r\n  type: MustacheType;\r\n  remain: string; // after first ':'\r\n  expr: string;\r\n}\r\n\r\nexport function replaceMustacheWithTemplateTag(html: string): string {\r\n  const stack:MustacheInfo[] = [];\r\n  return html.replaceAll(MUSTACHE_REGEXP, (match, expr) => {\r\n    expr = expr.trim();\r\n    const [ type ] = expr.split(':');\r\n    if (!MUSTACHE_TYPES.has(type)) {\r\n      // embed\r\n      return `<!--${COMMENT_EMBED_MARK}${expr}-->`;\r\n    }\r\n    const remain = expr.slice(type.length + 1).trim();\r\n    const currentInfo:MustacheInfo = { type, expr, remain };\r\n    if (type === 'if' || type === 'for') {\r\n      stack.push(currentInfo);\r\n      return `<template data-bind=\"${expr}\">`;\r\n    } else if (type === 'endif') {\r\n      const endTags = [];\r\n      do {\r\n        const info = stack.pop() ?? raiseError({\r\n          code: 'TMP-102',\r\n          message: 'Endif without if',\r\n          context: { where: 'replaceMustacheWithTemplateTag', expr, stackDepth: stack.length },\r\n          docsUrl: './docs/error-codes.md#tmp',\r\n        });\r\n        if (info.type === 'if') {\r\n          endTags.push('</template>');\r\n          break;\r\n        } else if (info.type === 'elseif') {\r\n          endTags.push('</template>');\r\n        } else {\r\n          raiseError({\r\n            code: 'TMP-102',\r\n            message: 'Endif without if',\r\n            context: { where: 'replaceMustacheWithTemplateTag', got: info.type, expr },\r\n            docsUrl: './docs/error-codes.md#tmp',\r\n          });\r\n        }\r\n      } while(true);\r\n      return endTags.join('');\r\n    } else if (type === 'endfor') {\r\n      const info = stack.pop() ?? raiseError({\r\n        code: 'TMP-102',\r\n        message: 'Endif without if',\r\n        context: { where: 'replaceMustacheWithTemplateTag', expr, stackDepth: stack.length },\r\n        docsUrl: './docs/error-codes.md#tmp',\r\n      });\r\n      if (info.type === 'for') {\r\n        return '</template>';\r\n      } else {\r\n        raiseError({\r\n          code: 'TMP-102',\r\n          message: 'Endfor without for',\r\n          context: { where: 'replaceMustacheWithTemplateTag', got: info.type, expr },\r\n          docsUrl: './docs/error-codes.md#tmp',\r\n        });\r\n      }\r\n    } else if (type === 'elseif') {\r\n      const lastInfo = stack.at(-1) ?? raiseError({\r\n        code: 'TMP-102',\r\n        message: 'Elseif without if',\r\n        context: { where: 'replaceMustacheWithTemplateTag', expr, stackDepth: stack.length },\r\n        docsUrl: './docs/error-codes.md#tmp',\r\n      });\r\n      if (lastInfo.type === 'if' || lastInfo.type === 'elseif') {\r\n        stack.push(currentInfo);\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\"><template data-bind=\"if:${remain}\">`;\r\n      } else {\r\n        raiseError({\r\n          code: 'TMP-102',\r\n          message: 'Elseif without if',\r\n          context: { where: 'replaceMustacheWithTemplateTag', got: lastInfo.type, expr },\r\n          docsUrl: './docs/error-codes.md#tmp',\r\n        });\r\n      }\r\n    } else if (type === 'else') {\r\n      const lastInfo = stack.at(-1) ?? raiseError({\r\n        code: 'TMP-102',\r\n        message: 'Else without if',\r\n        context: { where: 'replaceMustacheWithTemplateTag', expr, stackDepth: stack.length },\r\n        docsUrl: './docs/error-codes.md#tmp',\r\n      });\r\n      if (lastInfo.type === 'if') {\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\">`;\r\n      } else {\r\n        raiseError({\r\n          code: 'TMP-102',\r\n          message: 'Else without if',\r\n          context: { where: 'replaceMustacheWithTemplateTag', got: lastInfo.type, expr },\r\n          docsUrl: './docs/error-codes.md#tmp',\r\n        });\r\n      }\r\n    } else {\r\n      raiseError({\r\n        code: 'TMP-102',\r\n        message: 'Unknown type',\r\n        context: { where: 'replaceMustacheWithTemplateTag', type, expr },\r\n        docsUrl: './docs/error-codes.md#tmp',\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n","/**\r\n * replaceTemplateTagWithComment.ts\r\n *\r\n * <template>タグをコメントノードに置換し、テンプレートを再帰的に登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 指定したHTMLTemplateElementをコメントノード（<!--template:id-->）に置換\r\n * - SVG内のtemplateタグは通常のtemplate要素に変換し、属性や子ノードを引き継ぐ\r\n * - テンプレート内の入れ子templateも再帰的に置換・登録\r\n * - registerTemplateでテンプレートをID付きで管理\r\n *\r\n * 設計ポイント:\r\n * - テンプレートの階層構造を維持しつつ、DOM上はコメントノードでマーク\r\n * - SVG対応や属性引き継ぎなど、汎用的なテンプレート処理に対応\r\n * - generateIdでユニークIDを割り当て、テンプレート管理を一元化\r\n */\r\nimport { COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { registerTemplate } from \"./registerTemplate.js\";\r\n\r\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport function replaceTemplateTagWithComment(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number = id\r\n):number {\r\n  // テンプレートの親ノードが存在する場合は、テンプレートをコメントノードに置き換える\r\n  template.parentNode?.replaceChild(document.createComment(`${COMMENT_TEMPLATE_MARK}${id}`), template);\r\n  if (template.namespaceURI === SVG_NS) {\r\n    // SVGタグ内のtemplateタグを想定\r\n    const newTemplate = document.createElement(\"template\");\r\n    const childNodes = Array.from(template.childNodes);\r\n    for(let i = 0; i < childNodes.length; i++) {\r\n      const childNode = childNodes[i];\r\n      newTemplate.content.appendChild(childNode);\r\n    }\r\n    const bindText = template.getAttribute(DATA_BIND_ATTRIBUTE);\r\n    newTemplate.setAttribute(DATA_BIND_ATTRIBUTE, bindText ?? \"\");\r\n    template = newTemplate;\r\n  }\r\n  template.content.querySelectorAll(\"template\").forEach(template => {\r\n    replaceTemplateTagWithComment(generateId(), template, rootId);\r\n  });\r\n  registerTemplate(id, template, rootId);\r\n  return id;\r\n}\r\n","/**\r\n * registerHtml.ts\r\n *\r\n * HTML文字列をテンプレートとして登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 指定IDでHTMLテンプレートを生成し、data-id属性を付与\r\n * - Mustache構文（{{ }})をテンプレートタグに変換（replaceMustacheWithTemplateTagを利用）\r\n * - テンプレートタグをコメントに置換（replaceTemplateTagWithCommentを利用）\r\n *\r\n * 設計ポイント:\r\n * - テンプレートの動的生成・管理や、構文変換による柔軟なテンプレート処理に対応\r\n * - テンプレートはdocument.createElement(\"template\")で生成し、data-idで識別\r\n */\r\nimport { replaceMustacheWithTemplateTag } from \"./replaceMustacheWithTemplateTag.js\";\r\nimport { replaceTemplateTagWithComment } from \"./replaceTemplateTagWithComment.js\";\r\n\r\nexport function registerHtml(id: number, html:string) {\r\n  const template = document.createElement(\"template\");\r\n  template.dataset.id = id.toString();\r\n  template.innerHTML = replaceMustacheWithTemplateTag(html);\r\n  replaceTemplateTagWithComment(id, template);\r\n}","/**\r\n * createAccessorFunctions.ts\r\n *\r\n * Stateプロパティのパス情報（IStructuredPathInfo）から、動的なgetter/setter関数を生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - パス情報とgetter集合から、最適なアクセサ関数（get/set）を動的に生成\r\n * - ワイルドカード（*）やネストしたプロパティパスにも対応\r\n * - パスやセグメントのバリデーションも実施\r\n *\r\n * 設計ポイント:\r\n * - matchPathsから最長一致のgetterパスを探索し、そこからの相対パスでアクセサを構築\r\n * - パスが一致しない場合はinfo.pathSegmentsから直接アクセサを生成\r\n * - new Functionで高速なgetter/setterを動的生成\r\n * - パスやセグメント名は正規表現で厳密にチェックし、安全性を担保\r\n */\r\nimport { getStructuredPathInfo } from \"./getStructuredPathInfo\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IAccessorFunctions, IStructuredPathInfo } from \"./types\";\r\n\r\nconst checkSegmentRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\r\nconst checkPathRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*(\\.[a-zA-Z_$][0-9a-zA-Z_$]*|\\.\\*)*$/;\r\n\r\nexport function createAccessorFunctions(info: IStructuredPathInfo, getters: Set<string>): IAccessorFunctions {\r\n  const matchPaths = new Set(info.cumulativePaths).intersection(getters);\r\n  let len = -1;\r\n  let matchPath = '';\r\n  for(const curPath of matchPaths) {\r\n    const pathSegments = curPath.split('.');\r\n    if (pathSegments.length === 1) {\r\n      continue;\r\n    }\r\n    if (pathSegments.length > len) {\r\n      len = pathSegments.length;\r\n      matchPath = curPath;\r\n    }\r\n  }\r\n  if (matchPath.length > 0) {\r\n    if (!checkPathRegexp.test(matchPath)) {\r\n      raiseError({\r\n        code: \"STATE-202\",\r\n        message: `Invalid path: ${matchPath}`,\r\n        context: { matchPath },\r\n        docsUrl: \"./docs/error-codes.md#state\",\r\n      });\r\n    }\r\n    const matchInfo = getStructuredPathInfo(matchPath);\r\n    const segments = [];\r\n    let count = matchInfo.wildcardCount;\r\n    for(let i = matchInfo.pathSegments.length; i < info.pathSegments.length; i++) {\r\n      const segment = info.pathSegments[i];\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          raiseError({\r\n            code: \"STATE-202\",\r\n            message: `Invalid segment name: ${segment}`,\r\n            context: { segment, matchPath },\r\n            docsUrl: \"./docs/error-codes.md#state\",\r\n          });\r\n        }\r\n        segments.push(\".\" + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this[\"${matchPath}\"]${path};`) as ()=> any,\r\n      set : new Function('value', `this[\"${matchPath}\"]${path} = value;`) as (value: any) => void,\r\n    }\r\n  } else {\r\n    const segments = [];\r\n    let count = 0;\r\n    for(let i = 0; i < info.pathSegments.length; i++) {\r\n      const segment = info.pathSegments[i];\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          raiseError({\r\n            code: \"STATE-202\",\r\n            message: `Invalid segment name: ${segment}`,\r\n            context: { segment },\r\n            docsUrl: \"./docs/error-codes.md#state\",\r\n          });\r\n        }\r\n        segments.push((segments.length > 0 ? \".\" : \"\") + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this.${path};`) as ()=> any,\r\n      set : new Function('value', `this.${path} = value;`) as (value: any) => void,\r\n    }\r\n  }\r\n\r\n}\r\n","import { getListPathsSetById, getPathsSetById } from \"../BindingBuilder/registerDataBindAttributes\";\r\nimport { RESERVED_WORD_SET } from \"../constants\";\r\nimport { addPathNode, createRootNode } from \"../PathTree/PathNode\";\r\nimport { IPathNode } from \"../PathTree/types\";\r\nimport { createAccessorFunctions } from \"../StateProperty/createAccessorFunctions\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { Constructor } from \"../types\";\r\nimport { StructiveComponentClass } from \"../WebComponents/types\";\r\nimport { Dependencies, IPathManager } from \"./types\";\r\n\r\nclass PathManager implements IPathManager {\r\n  alls: Set<string> = new Set<string>();\r\n  lists: Set<string> = new Set<string>();\r\n  elements: Set<string> = new Set<string>();\r\n  funcs: Set<string> = new Set<string>();\r\n  getters: Set<string> = new Set<string>();\r\n  onlyGetters: Set<string> = new Set<string>();\r\n  setters: Set<string> = new Set<string>();\r\n  getterSetters: Set<string> = new Set<string>();\r\n  optimizes: Set<string> = new Set<string>();\r\n  staticDependencies: Dependencies<string> = new Map<string, Set<string>>();\r\n  dynamicDependencies: Dependencies<string> = new Map<string, Set<string>>();\r\n  rootNode: IPathNode = createRootNode();\r\n  #id: number;\r\n  #stateClass: Constructor<any>;\r\n\r\n  constructor(componentClass: StructiveComponentClass) {\r\n    this.#id = componentClass.id;\r\n    this.#stateClass = componentClass.stateClass;\r\n    const alls = getPathsSetById(this.#id);\r\n    for(const path of alls) {\r\n      const info = getStructuredPathInfo(path);\r\n      this.alls = this.alls.union(info.cumulativePathSet);\r\n    }\r\n    const lists = getListPathsSetById(this.#id);\r\n    this.lists = this.lists.union(lists);\r\n    for(const listPath of lists) {\r\n      const elementPath = listPath + \".*\";\r\n      this.elements.add(elementPath);\r\n    }\r\n    let currentProto = this.#stateClass.prototype;\r\n    while (currentProto && currentProto !== Object.prototype) {\r\n      const getters = Object.getOwnPropertyDescriptors(currentProto);\r\n      if (getters) {\r\n        for (const [key, desc] of Object.entries(getters)) {\r\n          if (RESERVED_WORD_SET.has(key)) {\r\n            continue;\r\n          }\r\n          if (typeof desc.value === \"function\") {\r\n            this.funcs.add(key);\r\n            continue;\r\n          }\r\n          const hasGetter = (desc as PropertyDescriptor).get !== undefined;\r\n          const hasSetter = (desc as PropertyDescriptor).set !== undefined;\r\n          const info = getStructuredPathInfo(key);\r\n          this.alls = this.alls.union(info.cumulativePathSet);\r\n          if (hasGetter) {\r\n            this.getters.add(key);\r\n          }\r\n          if (hasSetter) {\r\n            this.setters.add(key);\r\n          }\r\n          if (hasGetter && !hasSetter) {\r\n            this.onlyGetters.add(key);\r\n          }\r\n          if (hasGetter && hasSetter) {\r\n            this.getterSetters.add(key);\r\n          }\r\n        }\r\n      }\r\n      currentProto = Object.getPrototypeOf(currentProto);\r\n    }\r\n    // 最適化対象のパスを決定し、最適化する\r\n    for(const path of this.alls) {\r\n      if (this.getters.has(path)) {\r\n        continue;\r\n      }\r\n      if (this.setters.has(path)) {\r\n        continue;\r\n      }\r\n      const info = getStructuredPathInfo(path);\r\n      if (info.pathSegments.length === 1) {\r\n        continue;\r\n      }\r\n      const funcs = createAccessorFunctions(info, this.getters);\r\n      Object.defineProperty(this.#stateClass.prototype, path, {\r\n        get: funcs.get,\r\n        set: funcs.set,\r\n        enumerable: true,\r\n        configurable: true,\r\n      });\r\n      this.optimizes.add(path);\r\n    }\r\n    // 静的依存関係の設定\r\n    for(const path of this.alls) {\r\n      addPathNode(this.rootNode, path);\r\n      const info = getStructuredPathInfo(path);\r\n      if (info.parentPath) {\r\n        this.staticDependencies.get(info.parentPath)?.add(path) ?? \r\n          this.staticDependencies.set(info.parentPath, new Set([path]));\r\n      }\r\n    }\r\n  }\r\n\r\n  #dianamicDependencyKeys = new Set<string>();\r\n  addDynamicDependency(target: string, source: string) {\r\n    const key = `${source}=>${target}`;\r\n    if (this.#dianamicDependencyKeys.has(key)) {\r\n      return;\r\n    }\r\n    this.#dianamicDependencyKeys.add(key);\r\n    this.dynamicDependencies.get(source)?.add(target) ?? \r\n      this.dynamicDependencies.set(source, new Set([target]));\r\n  }\r\n}\r\n\r\nexport function createPathManager(componentClass: StructiveComponentClass): IPathManager {\r\n  return new PathManager(componentClass);\r\n}","/**\r\n * createComponentClass.ts\r\n *\r\n * StructiveのWeb Components用カスタム要素クラスを動的に生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - ユーザー定義のcomponentData（stateClass, html, css等）からWeb Componentsクラスを生成\r\n * - StateClass/テンプレート/CSS/バインディング情報などをIDで一元管理・登録\r\n * - 独自のget/setトラップやバインディング、親子コンポーネント探索、フィルター拡張など多機能な基盤を提供\r\n * - 静的プロパティでテンプレート・スタイル・StateClass・フィルター・getter情報などにアクセス可能\r\n * - defineメソッドでカスタム要素として登録\r\n *\r\n * 設計ポイント:\r\n * - findStructiveParentで親Structiveコンポーネントを探索し、階層的な状態管理を実現\r\n * - getter/setter/バインディング最適化やアクセサ自動生成（optimizeAccessor）に対応\r\n * - テンプレート・CSS・StateClass・バインディング情報をIDで一元管理し、再利用性・拡張性を確保\r\n * - フィルターやバインディング情報も静的プロパティで柔軟に拡張可能\r\n */\r\nimport { inputBuiltinFilters, outputBuiltinFilters } from \"../Filter/builtinFilters.js\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { getStateClassById, registerStateClass } from \"../StateClass/registerStateClass.js\";\r\nimport { getStyleSheetById } from \"../StyleSheet/registerStyleSheet.js\";\r\nimport { registerCss } from \"../StyleSheet/regsiterCss.js\";\r\nimport { createComponentEngine } from \"../ComponentEngine/ComponentEngine.js\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types.js\";\r\nimport { registerHtml } from \"../Template/registerHtml.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { getBaseClass } from \"./getBaseClass.js\";\r\nimport { getComponentConfig } from \"./getComponentConfig.js\";\r\nimport { IComponent, IUserComponentData, IUserConfig, StructiveComponentClass, StructiveComponent } from \"./types\";\r\nimport { getListPathsSetById, getPathsSetById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { IStructiveState } from \"../StateClass/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { createAccessorFunctions } from \"../StateProperty/createAccessorFunctions.js\";\r\nimport { config as globalConfig } from \"./getGlobalConfig.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IComponentStateInput } from \"../ComponentStateInput/types.js\";\r\nimport { findStructiveParent } from \"./findStructiveParent.js\";\r\nimport { IPathManager } from \"../PathManager/types.js\";\r\nimport { createPathManager } from \"../PathManager/PathManager.js\";\r\n\r\n\r\nexport function createComponentClass(componentData: IUserComponentData): StructiveComponentClass {\r\n  const config = (componentData.stateClass.$config ?? {})as IUserConfig;\r\n  const componentConfig = getComponentConfig(config);\r\n  const id = generateId();\r\n  const { html, css, stateClass } = componentData;\r\n  const inputFilters:FilterWithOptions = Object.assign({}, inputBuiltinFilters);\r\n  const outputFilters:FilterWithOptions = Object.assign({}, outputBuiltinFilters);\r\n  stateClass.$isStructive = true;\r\n  registerHtml(id, html);\r\n  registerCss(id, css);\r\n  registerStateClass(id, stateClass);\r\n  const baseClass = getBaseClass(componentConfig.extends);\r\n  const extendTagName = componentConfig.extends;\r\n  return class extends baseClass implements IComponent {\r\n    #engine: IComponentEngine;\r\n\r\n    constructor() {\r\n      super();\r\n      this.#engine = createComponentEngine(componentConfig, this as StructiveComponent);\r\n      this.#engine.setup();\r\n    }\r\n\r\n    connectedCallback() {\r\n      this.#engine.connectedCallback();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n      this.#engine.disconnectedCallback();\r\n    }\r\n\r\n    #parentStructiveComponent: StructiveComponent | null | undefined;\r\n    get parentStructiveComponent(): StructiveComponent | null {\r\n      if (typeof this.#parentStructiveComponent === \"undefined\") {\r\n        this.#parentStructiveComponent = findStructiveParent(this as StructiveComponent);\r\n      }\r\n      return this.#parentStructiveComponent;\r\n    }\r\n\r\n    get state(): IComponentStateInput {\r\n      return this.#engine.stateInput;\r\n    }\r\n\r\n    get isStructive(): boolean {\r\n      return this.#engine.stateClass.$isStructive ?? false;\r\n    }\r\n\r\n    get waitForInitialize(): PromiseWithResolvers<void> {\r\n      return this.#engine.waitForInitialize;\r\n    }\r\n\r\n    getBindingsFromChild(component: IComponent): Set<IBinding> | null {\r\n      return this.#engine.bindingsByComponent.get(component as StructiveComponent) ?? null;\r\n    }\r\n\r\n    registerChildComponent(component:StructiveComponent): void {\r\n      this.#engine.registerChildComponent(component);\r\n    }\r\n    unregisterChildComponent(component:StructiveComponent): void {\r\n      this.#engine.unregisterChildComponent(component);\r\n    }\r\n    static define(tagName:string) {\r\n      if (extendTagName) {\r\n        customElements.define(tagName, this, { extends: extendTagName });\r\n      } else {\r\n        customElements.define(tagName, this);\r\n      }\r\n    }\r\n\r\n    static get id():number {\r\n      return id;\r\n    }\r\n    static #html:string = html;\r\n    static get html():string {\r\n      return this.#html;\r\n    }\r\n    static set html(value:string) {\r\n      this.#html = value;\r\n      registerHtml(this.id, value);\r\n      this.#template = null;\r\n      this.#pathManager = null; // パス情報をリセット\r\n    }\r\n\r\n    static #css:string = css;\r\n    static get css() {\r\n      return this.#css;\r\n    }\r\n    static set css(value:string) {\r\n      this.#css = value;\r\n      registerCss(this.id, value);\r\n      this.#styleSheet = null;\r\n    }\r\n    static #template: HTMLTemplateElement | null = null;\r\n    static get template():HTMLTemplateElement {\r\n      if (!this.#template) {\r\n        this.#template = getTemplateById(this.id);\r\n      }\r\n      return this.#template;\r\n    }\r\n    static #styleSheet: CSSStyleSheet | null = null;\r\n    static get styleSheet():CSSStyleSheet {\r\n      if (!this.#styleSheet) {\r\n        this.#styleSheet = getStyleSheetById(this.id);\r\n      }\r\n      return this.#styleSheet;\r\n    }\r\n    static #stateClass: IStructiveState | null = null;\r\n    static get stateClass():IStructiveState {\r\n      if (!this.#stateClass) {\r\n        this.#stateClass = getStateClassById(this.id) as IStructiveState;\r\n      }\r\n      return this.#stateClass;\r\n    }\r\n    static #inputFilters:FilterWithOptions = inputFilters;\r\n    static get inputFilters():FilterWithOptions {\r\n      return this.#inputFilters;\r\n    }\r\n    static #outputFilters:FilterWithOptions = outputFilters;\r\n    static get outputFilters():FilterWithOptions {\r\n      return this.#outputFilters;\r\n    }\r\n    static #pathManager: IPathManager | null = null;\r\n    static get pathManager(): IPathManager {\r\n      if (!this.#pathManager) {\r\n        this.#pathManager = createPathManager(this as StructiveComponentClass);\r\n      }\r\n      return this.#pathManager;\r\n    }\r\n\r\n  } as StructiveComponentClass;\r\n}\r\n","/**\r\n * getComponentConfig.ts\r\n *\r\n * ユーザー設定（IUserConfig）とグローバル設定を統合し、コンポーネントの設定（IComponentConfig）を生成するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - getGlobalConfigでグローバル設定を取得\r\n * - ユーザー設定が優先され、未指定の場合はグローバル設定値を利用\r\n * - enableShadowDomやextendsなどの設定値を一元的に返却\r\n *\r\n * 設計ポイント:\r\n * - ユーザーごとの個別設定と全体のデフォルト設定を柔軟に統合\r\n * - 設定値のデフォルト化や拡張性を考慮した設計\r\n */\r\nimport { getGlobalConfig } from \"./getGlobalConfig.js\";\r\nimport { IUserConfig, IComponentConfig } from \"./types\";\r\n\r\nexport function getComponentConfig(userConfig: IUserConfig): IComponentConfig {\r\n  const globalConfig = getGlobalConfig();\r\n  return {\r\n    enableWebComponents: typeof userConfig.enableWebComponents === \"undefined\" ? true : userConfig.enableWebComponents,\r\n    enableShadowDom    : userConfig.enableShadowDom ?? globalConfig.enableShadowDom,\r\n    extends            : userConfig.extends ?? null,\r\n  };\r\n}","/**\r\n * getBaseClass.ts\r\n *\r\n * 指定したタグ名（extendTagName）から、その要素のコンストラクタ（基底クラス）を取得するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - extendTagNameが指定されていれば、そのタグのHTMLElementコンストラクタを返す\r\n * - 指定がなければHTMLElementを返す\r\n *\r\n * 設計ポイント:\r\n * - カスタム要素の継承元クラスを動的に取得し、柔軟なWeb Components拡張に対応\r\n */\r\nimport { Constructor } from \"../types\";\r\n\r\nexport function getBaseClass(extendTagName: string | null):Constructor<HTMLElement> {\r\n  return extendTagName ? (document.createElement(extendTagName).constructor as Constructor<HTMLElement>) : HTMLElement;\r\n}","/**\r\n * createSingleFileComponent.ts\r\n *\r\n * Structive用のシングルファイルコンポーネント（SFC）をパースし、各要素（HTML, CSS, StateClass）を抽出・生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - テキストから<template>・<script type=\"module\">・<style>を抽出し、それぞれを分離\r\n * - <script type=\"module\">はBase64エンコードして動的importし、StateClassとして利用\r\n * - {{...}}埋め込み式は一時的にコメントノード化してHTMLパース時の消失を防止し、復元\r\n * - 各要素（html, css, stateClass, text）をIUserComponentDataとして返却\r\n *\r\n * 設計ポイント:\r\n * - escapeEmbed/unescapeEmbedでMustache構文の安全なパースを実現\r\n * - scriptはdata:URL経由で安全に動的import\r\n * - テンプレート・スクリプト・スタイルを柔軟に分離・管理できる設計\r\n */\r\nimport { IStructiveState } from \"../StateClass/types\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nfunction escapeEmbed(html: string): string {\r\n  return html.replaceAll(/\\{\\{([^\\}]+)\\}\\}/g, (match, expr) => {\r\n    return `<!--{{${expr}}}-->`;\r\n  });\r\n}\r\n\r\nfunction unescapeEmbed(html:string):string {\r\n  return html.replaceAll(/<!--\\{\\{([^\\}]+)\\}\\}-->/g, (match, expr) => {\r\n    return `{{${expr}}}`;\r\n  });\r\n}\r\n\r\nexport async function createSingleFileComponent(text: string): Promise<IUserComponentData> {\r\n  const template = document.createElement(\"template\");\r\n  template.innerHTML = escapeEmbed(text);\r\n\r\n  const html = template.content.querySelector(\"template\");\r\n  html?.remove();\r\n\r\n  const script = template.content.querySelector(\"script[type=module]\") as HTMLScriptElement | null;\r\n  let scriptModule: any = {};\r\n  if (script) {\r\n    const b64 = btoa(String.fromCodePoint(...new TextEncoder().encode(script.text)));\r\n    scriptModule = await import(\"data:application/javascript;base64,\" + b64);\r\n  }\r\n//  const scriptModule = script ? await import(\"data:text/javascript;charset=utf-8,\" + script.text) : {};\r\n  script?.remove();\r\n\r\n  const style = template.content.querySelector(\"style\");\r\n  style?.remove();\r\n\r\n  const stateClass = (scriptModule.default ?? class {}) as IStructiveState;\r\n  \r\n  return {\r\n    text,\r\n    html      : unescapeEmbed(html?.innerHTML ?? \"\").trim(),\r\n    css       : style?.textContent ?? \"\",\r\n    stateClass,\r\n  }\r\n}","/**\r\n * loadSingleFileComponent.ts\r\n *\r\n * 指定パスのシングルファイルコンポーネント（SFC）をfetchし、パースしてIUserComponentDataとして返すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - fetchで指定パスのSFCファイルを取得\r\n * - テキストとして読み込み、createSingleFileComponentでパース\r\n * - パース結果（IUserComponentData）を返却\r\n *\r\n * 設計ポイント:\r\n * - import.meta.resolveを利用し、パス解決の柔軟性を確保\r\n * - 非同期処理で動的なコンポーネントロードに対応\r\n */\r\nimport { createSingleFileComponent } from \"./createSingleFileComponent.js\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nexport async function loadSingleFileComponent(path: string): Promise<IUserComponentData> {\r\n  // Node/Vitest 等の SSR 環境では import.meta.resolve が存在しない場合があるためフォールバック\r\n  const resolved = (import.meta as any).resolve ? (import.meta as any).resolve(path) : path;\r\n  const response = await fetch(resolved);\r\n  const text = await response.text();\r\n  return createSingleFileComponent(text);\r\n}\r\n","/**\r\n * registerComponentClass.ts\r\n *\r\n * StructiveのWeb Componentsクラスを指定したタグ名でカスタム要素として登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - registerComponentClass: 渡されたcomponentClassをtagNameでdefineメソッドを使って登録\r\n *\r\n * 設計ポイント:\r\n * - Web Componentsのカスタム要素登録を簡潔にラップし、再利用性を高める設計\r\n */\r\nimport { StructiveComponentClass } from \"./types\";\r\n\r\nexport function registerComponentClass(tagName: string, componentClass: StructiveComponentClass) {\r\n  componentClass.define(tagName);\r\n}","/**\r\n * loadImportmap.ts\r\n *\r\n * HTML内の<script type=\"importmap\">タグからimportmap情報を取得・統合するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 複数のimportmapスクリプトタグを走査し、全てのimportsをマージしてIImportMap型で返却\r\n *\r\n * 設計ポイント:\r\n * - scriptタグのinnerHTMLをJSON.parseでパースし、importsプロパティを統合\r\n * - importmap.importsが複数存在する場合もObject.assignでマージ\r\n * - importmap仕様に準拠し、柔軟なimportエイリアス管理を実現\r\n */\r\nimport { IImportMap } from \"./types\";\r\n\r\nexport function loadImportmap():IImportMap {\r\n  const importmap: IImportMap = {};\r\n  document.querySelectorAll(\"script[type='importmap']\").forEach(script => {\r\n    const scriptImportmap = JSON.parse(script.innerHTML);\r\n    if (scriptImportmap.imports) {\r\n      importmap.imports = Object.assign(importmap.imports || {}, scriptImportmap.imports);\r\n    }\r\n  });\r\n  return importmap;\r\n}\r\n\r\n","/**\r\n * MainWrapper.ts\r\n *\r\n * アプリ全体のレイアウトやルーティングを管理するカスタムエレメント MainWrapper の実装です。\r\n *\r\n * 主な役割:\r\n * - Shadow DOMの有効化やレイアウトテンプレートの動的読み込み\r\n * - レイアウトテンプレートやスタイルの適用\r\n * - ルーター要素（routerTagName）の動的追加\r\n *\r\n * 設計ポイント:\r\n * - config.enableShadowDom でShadow DOMの有効/無効を切り替え\r\n * - config.layoutPath が指定されていればfetchでレイアウトHTMLを取得し、テンプレート・スタイルを適用\r\n * - スタイルはadoptedStyleSheetsでShadowRootまたはdocumentに適用\r\n * - レイアウトが指定されていない場合はデフォルトのslotを挿入\r\n * - config.enableRouter が有効な場合はrouter要素をslotに追加\r\n */\r\nimport { raiseError } from \"../utils\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst SLOT_KEY = \"router\";\r\nconst DEFAULT_LAYOUT = `<slot name=\"${SLOT_KEY}\"></slot>`;\r\n\r\nexport class MainWrapper extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n    if (config.enableShadowDom) {\r\n      this.attachShadow({ mode: 'open' });\r\n    }\r\n  }\r\n\r\n  async connectedCallback() {\r\n    await this.loadLayout();\r\n    this.render();\r\n  }\r\n\r\n  get root(): ShadowRoot | HTMLElement {\r\n    return this.shadowRoot ?? this;\r\n  }\r\n\r\n  async loadLayout() {\r\n    if (config.layoutPath) {\r\n      const response = await fetch(config.layoutPath);\r\n      if (response.ok) {\r\n        const layoutText = await response.text();\r\n        const workTemplate = document.createElement(\"template\");\r\n        workTemplate.innerHTML = layoutText;\r\n      \r\n        const template = workTemplate.content.querySelector(\"template\");\r\n        const style = workTemplate.content.querySelector(\"style\") as CSSStyleSheet | null;\r\n      \r\n        this.root.appendChild(template?.content ?? document.createDocumentFragment());\r\n        if (style) {\r\n          const shadowRootOrDocument = this.shadowRoot ?? document;\r\n          const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n          if (!styleSheets.includes(style)) {\r\n            shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, style];\r\n          }\r\n        }\r\n      } else {\r\n        raiseError({\r\n          code: 'TMP-101',\r\n          message: `Failed to load layout from ${config.layoutPath}`,\r\n          context: { layoutPath: config.layoutPath },\r\n          docsUrl: '/docs/error-codes.md#tmp',\r\n          severity: 'error',\r\n        });\r\n      }\r\n    } else {\r\n      this.root.innerHTML = DEFAULT_LAYOUT;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // add router\r\n    if (config.enableRouter) {\r\n      const router = document.createElement(config.routerTagName);\r\n      router.setAttribute('slot', SLOT_KEY);\r\n      this.root.appendChild(router);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * exports.ts\r\n *\r\n * Structiveの主要なエントリーポイント・APIを外部公開するモジュールです。\r\n *\r\n * 主な役割:\r\n * - registerSingleFileComponents, bootstrap, config などの主要APIをエクスポート\r\n * - defineComponents: SFC群をまとめて登録し、autoInitが有効なら自動で初期化\r\n * - bootstrapStructive: 初期化処理を一度だけ実行\r\n *\r\n * 設計ポイント:\r\n * - グローバル設定(config)を外部から参照・変更可能\r\n * - 初期化処理の多重実行を防止し、安全な起動を保証\r\n */\r\nimport { registerSingleFileComponents } from \"./WebComponents/registerSingleFIleComponents.js\";\r\nimport { bootstrap } from \"./bootstrap.js\";\r\nimport { config as _config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { IConfig } from \"./WebComponents/types\";\r\n\r\nexport const config: IConfig = _config;\r\n\r\nlet initialized = false;\r\nexport async function defineComponents(singleFileComponents: Record<string, string>):Promise<void> {\r\n  await registerSingleFileComponents(singleFileComponents);\r\n  if (config.autoInit) {\r\n    await bootstrapStructive();\r\n  }\r\n}\r\n\r\nexport async function bootstrapStructive():Promise<void> {\r\n  if (!initialized) {\r\n    await bootstrap();\r\n    initialized = true;\r\n  }\r\n}\r\n\r\n","/**\r\n * registerSingleFileComponents.ts\r\n *\r\n * 複数のシングルファイルコンポーネント（SFC）をまとめてStructiveのWeb Componentsとして登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - singleFileComponents（tagNameとパスのマップ）を走査し、各SFCを非同期で取得・パース\r\n * - enableRouterが有効な場合はentryRouteでルーティング情報も登録\r\n * - createComponentClassでWeb Componentsクラスを生成し、registerComponentClassでカスタム要素として登録\r\n *\r\n * 設計ポイント:\r\n * - SFCのロードからWeb Components登録、ルーティング登録までを一括で自動化\r\n * - 非同期処理で複数コンポーネントの動的登録に対応\r\n * - ルートパス\"/root\"の正規化や、@routesプレフィックスの除去など柔軟なパス処理\r\n */\r\nimport { entryRoute } from \"../Router/Router.js\";\r\nimport { createComponentClass } from \"./createComponentClass.js\";\r\nimport { config } from \"./getGlobalConfig.js\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent.js\";\r\nimport { registerComponentClass } from \"./registerComponentClass.js\";\r\nimport { IUserComponentData, SingleFileComponents } from \"./types\";\r\n\r\nexport async function registerSingleFileComponents(singleFileComponents:SingleFileComponents):Promise<void> {\r\n  for(const [ tagName, path ] of Object.entries(singleFileComponents)) {\r\n    let componentData : IUserComponentData | null = null;\r\n    if (config.enableRouter) {\r\n      const routePath = path.startsWith(\"@routes\") ? path.slice(7) : path; // remove the prefix 'routes:'\r\n      entryRoute(tagName, routePath === \"/root\" ? \"/\" : routePath); // routing\r\n    }\r\n    componentData = await loadSingleFileComponent(path);\r\n    const componentClass = createComponentClass(componentData);\r\n    registerComponentClass(tagName, componentClass);\r\n  }\r\n}","/**\r\n * bootstrap.ts\r\n *\r\n * Structiveアプリケーションの初期化処理を行うエントリーポイントです。\r\n *\r\n * 主な役割:\r\n * - グローバル設定(config)に従い、必要なコンポーネントやルーター、メインラッパーを登録・初期化\r\n * - autoLoadFromImportMapが有効な場合はimportmapからルートやコンポーネントを動的ロード\r\n * - enableRouterが有効な場合はRouterコンポーネントをカスタム要素として登録\r\n * - enableMainWrapperが有効な場合はMainWrapperをカスタム要素として登録し、autoInsertMainWrapperが有効ならbodyに自動挿入\r\n *\r\n * 設計ポイント:\r\n * - 設定値に応じて初期化処理を柔軟に制御\r\n * - importmapやカスタム要素の登録、DOMへの自動挿入など、Structiveの起動に必要な処理を一元化\r\n */\r\nimport { MainWrapper } from \"./MainWrapper/MainWrapper.js\";\r\nimport { Router } from \"./Router/Router.js\";\r\nimport { config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { loadFromImportMap } from \"./WebComponents/loadFromImportMap.js\";\r\n\r\nexport async function bootstrap(): Promise<void> {\r\n  if (config.autoLoadFromImportMap) {\r\n    await loadFromImportMap();\r\n  }\r\n\r\n  if (config.enableRouter) {\r\n    customElements.define(config.routerTagName, Router);\r\n  }\r\n\r\n  if (config.enableMainWrapper) {\r\n    customElements.define(config.mainTagName, MainWrapper);\r\n    if (config.autoInsertMainWrapper) {\r\n      const mainWrapper = document.createElement(config.mainTagName);\r\n      document.body.appendChild(mainWrapper);\r\n    }\r\n  }\r\n}"],"names":["globalConfig","debug","locale","enableShadowDom","enableMainWrapper","enableRouter","autoInsertMainWrapper","autoInit","mainTagName","routerTagName","layoutPath","autoLoadFromImportMap","optimizeList","optimizeListElements","optimizeAccessor","getGlobalConfig","config","raiseError","messageOrPayload","Error","message","code","context","hint","t","docsUrl","o","severity","i","cause","err","optionsRequired","fnName","optionMustBeNumber","valueMustBeNumber","valueMustBeDate","builtinFilters","eq","options","opt","value","optValue","Number","isNaN","ne","not","lt","le","gt","ge","inc","dec","mul","div","fix","toFixed","toLocaleString","uc","toString","toUpperCase","lc","toLowerCase","cap","v","length","charAt","slice","trim","substr","opt1","opt1Value","opt2","opt2Value","pad","padStart","rep","repeat","rev","split","reverse","join","int","parseInt","float","parseFloat","round","Math","pow","floor","ceil","percent","date","Date","toLocaleDateString","time","toLocaleTimeString","datetime","ymd","year","getFullYear","month","getMonth","day","getDate","falsy","truthy","defaults","boolean","Boolean","number","string","String","null","outputBuiltinFilters","inputBuiltinFilters","id","generateId","stateClassById","styleSheetById","registerCss","css","styleSheet","CSSStyleSheet","replaceSync","registerStyleSheet","resolveNodeFromPath","root","path","node","childNodes","textToFilter","filters","text","filter","name","where","cache","Map","createFilters","texts","result","get","push","set","BindingNode","binding","decorates","bindContents","this","subName","constructor","init","assignValue","updateElements","listIndexes","values","notifyRedraw","refs","applyChange","renderer","updatedBindings","has","filteredValue","bindingState","getFilteredValue","readonlyState","readonlyHandler","add","isSelectElement","HTMLSelectElement","isFor","isBlock","BindingNodeAttribute","super","setAttribute","BindingNodeCheckbox","Array","isArray","receivedType","element","checked","map","_val","includes","BindingNodeClassList","className","BindingNodeClassName","classList","remove","version","ListIndex","parentListIndex","pos","index","sid","position","indexes","dirty","WeakRef","varName","at","deref","createListIndex","calcListDiff","oldListValue","newListValue","oldIndexes","_newListValue","_oldListValue","_oldIndexes","newIndexes","same","removes","Set","adds","indexByValue","changeIndexes","usedOldIndexes","maybeSame","newValue","oldIndex","undefined","newListIndex","existingListIndex","DATA_BIND_ATTRIBUTE","COMMENT_EMBED_MARK","COMMENT_TEMPLATE_MARK","RESERVED_WORD_SET","_cache","StructuredPathInfo","static","pattern","pathSegments","lastSegment","cumulativePaths","cumulativePathSet","cumulativeInfos","cumulativeInfoSet","wildcardPaths","wildcardPathSet","wildcardInfos","indexByWildcardPath","wildcardInfoSet","wildcardParentPaths","wildcardParentPathSet","wildcardParentInfos","wildcardParentInfoSet","lastWildcardPath","lastWildcardInfo","parentPath","parentInfo","wildcardCount","children","getPattern","_pattern","getStructuredPathInfo","currentPatternPath","prevPatternPath","structuredPath","info","NodePath","currentPath","childNodeByName","level","find","segments","segIndex","currentSegment","childNode","appendChild","childName","findPathNodeByPath","rootNode","nodeCache","cachedNode","addPathNode","parentNode","symbolName","GetByRefSymbol","Symbol","for","SetByRefSymbol","ConnectedCallbackSymbol","DisconnectedCallbackSymbol","ResolvedPathInfo","elements","paths","wildcardType","wildcardIndexes","tmpPatternElements","incompleteCount","completeCount","lastPath","getResolvedPathInfo","nameInfo","StatePropertyRef","listIndexRef","listIndex","key","createRefKey","refByInfoByListIndex","WeakMap","refByInfoByNull","getStatePropertyRef","ref","refByInfo","getContextListIndex","handler","lastRefStack","getListIndex","resolvedPath","receiver","wildcardParentPattern","wildcardRef","engine","getListIndexes","wildcardParent","wildcardIndex","indexByIndexName","getByRef","target","cacheable","pathManager","getters","cacheEntry","revision","updater","revisionByUpdatedPath","refIndex","lastInfo","onlyGetters","addDynamicDependency","checkDependency","stateOutput","startsWith","intersection","size","refStack","Reflect","lists","setByRef","setters","refPath","parentValue","enqueueRef","resolve","prop","expected","received","hasSetValue","resolveFn","wildcardPattern","infoPattern","walkWildcardPattern","wildardIndexPos","indexPos","parentIndexes","results","concat","resultIndexes","resultValues","getAll","trackDependency","to","globalRouter","navigate","owner","resolvedInfo","symbols","async","callback","call","connectedCallback","disconnectedCallback","StateHandler$1","fill","loopContext","apis","trapGet","StateHandler","trapSet","useWritableStateProxy","state","stateProxy","Proxy","asyncSetStatePropertyRef","setLoopContext","Renderer","processedRefs","reorderIndexesByRef","reorderList","items","listRefs","refKey","listRef","listClone","oldListIndexes","getListAndListIndexes","listDiff","from","overwrites","elementValue","indexOf","setListDiff","saveInfo","oldValueAndIndexesByRef","saveListAndListIndexes","renderItem","render","clear","createReadonlyState","getListDiff","bindings","getBindings","childInfo","diff","childRef","deps","dynamicDependencies","depPath","depInfo","depNode","infos","walk","depRef","nextInfo","nextRef","subDepRef","startRef","Updater","queue","rendering","listDiffByRef","versionUp","getOldValueAndIndexes","curDiff","list","collectMaybeUpdates","queueMicrotask","update","createReadonlyStateProxy","recursiveCollectMaybeUpdates","visitedInfo","isSource","entries","childPath","cacheUpdatedPathsByPath","updatedPaths","updatedPath","createUpdater","BindingNodeEvent","addEventListener","e","parentBindContent","currentLoopContext","serialize","preventDefault","stopPropagation","func","getValue","apply","createBindingNodeEvent","filterTexts","filterFns","BindingNodeBlock","textContent","BindingNodeIf","bindContent","trueBindContents","falseBindContents","blankRef","createBindContent","valueType","nodeType","mountAfter","unmount","EMPTY_SET","BindingNodeFor","bindContentByListIndex","bindContentPool","bindContentLastIndex","loopInfo","assignListIndex","loopRef","deleteBindContent","clearListIndex","poolLength","loopPath","newBindContents","removeBindContentsSet","isAllRemove","isParentNodeHasOnlyThisNode","parentChildNodes","lastContent","firstNode","Node","TEXT_NODE","nextSibling","lastNode","previousSibling","getLastNode","append","when","lastBindContent","sort","a","b","fragmentParentNode","fragmentFirstNode","firstChildNode","createBindingNodeFor","DEFAULT_PROPERTY","defaultPropertyByElementType","radio","checkbox","button","getDefaultPropertyByNodeType","HTMLElement","HTMLTextAreaElement","HTMLOptionElement","HTMLButtonElement","HTMLAnchorElement","HTMLFormElement","HTMLInputElement","type","SVGElement","Text","Template","defaultEventByName","selected","BindingNodeProperty","defaultName","getDefaultName","decoratesCount","eventName","updateStateValue","createBindingNodeProperty","BindingNodeRadio","BindingNodeStyle","style","setProperty","AssignStateSymbol","NotifyRedrawSymbol","parentStructiveComponentByStructiveComponent","BindingNodeComponent","parentComponent","component","bindingsByComponent","notifyRefs","thisAt","newRef","nodePropertyConstructorByNameByIsComment","class","if","nodePropertyConstructorByFirstName","attr","getBindingNodeCreator","propertyName","isComment","Comment","isElement","Element","fn","bindingNodeCreatorByName","nameElements","bindingNodeCreatorByFirstName","_getBindingNodeCreator","BindingState","nullRef","saveBinding","writeState","BindingStateIndex","indexNumber","loopContexts","bindingsByListIndex","ereg","RegExp","getBindingStateCreator","test","createBindingStateIndex","createBindingState","nodeTypeByNodeKey","getNodeType","nodeKey","createNodeKey","getNodeTypeByNode","s","re","decode","m","exec","decodeURIComponent","parseFilter","parseProperty","property","parseExpressions","expression","bindExpression","decoratesExpression","nodePropertyText","statePropertyText","nodeProperty","inputFilterTexts","stateProperty","outputFilterTexts","parseExpression","removeAttributeFromElement","removeAttribute","removeAttributeByNodeType","replaceTextNodeFn","textNode","document","createTextNode","replaceChild","DataBindAttributes","nodePath","bindTexts","creatorByText","getAttribute","getTemplateById","getDataBindText","removeDataBindAttribute","replaceTextNodeFromComment","routeIndexes","getAbsoluteNodePath","parseBindText","bindText","creator","createBindingNode","getNodesHavingDataBind","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","acceptNode","hasAttribute","FILTER_ACCEPT","FILTER_SKIP","isCommentNode","nextNode","currentNode","listDataBindAttributesById","listPathsSetById","pathsSetById","getDataBindAttributesFromTemplate","content","createDataBindAttributes","templateById","registerTemplate","template","rootId","forEach","nodeValue","removeChild","dataBindAttributes","listPaths","attribute","j","registerDataBindAttributes","templateId","Binding","bindingNode","inputFilters","outputFilters","createBinding","LoopContext","parentLoopContext","currentBindContent","parentBinding","unshift","createContent","fragment","importNode","Object","keys","lazyLoadComponentAliasByTagName","lazyLoadElements","querySelectorAll","loadLazyLoadComponent","tagName","createBindings","attributes","getDataBindAttributesById","blockBindings","BindContent","isMounted","lastChildNode","hasBlockBinding","lastBinding","mount","mountBefore","beforeNode","insertBefore","afterNode","attachShadow","extends","createElement","mode","canHaveShadowRoot","shadowRoot","adoptedStyleSheets","shadowRootOrDocument","ShadowRoot","getParentShadowRoot","styleSheets","ComponentStateBinding","parentPaths","childPaths","childPathByParentPath","parentPathByChildPath","bindingByParentPath","bindingByChildPath","WeakSet","addBinding","existingChildPath","existingParentPath","getChildPath","getParentPath","toParentPathFromChildPath","matchPaths","matchPathArray","longestMatchPath","remainPath","matchParentPath","toChildPathFromParentPath","matchChildPath","startsWithByChildPath","childPathInfo","matches","bind","childComponent","getBindingsFromChild","ComponentStateInputHandler","componentStateBinding","assignState","object","parentPathRef","getPropertyValue","setPropertyValue","ComponentStateOutput","parentRef","parentPathInfo","pathInfo","EMPTY_SAVE_INFO","ComponentEngine","stateClass","componentId","baseClass","structiveChildComponents","waitForInitialize","Promise","withResolvers","waitForDisconnected","stateBinding","createComponentStateBinding","stateInput","blockPlaceholder","blockParentNode","ignoreDissconnectedCallback","currentVersion","componentClass","createComponentStateInput","setup","alls","rootRef","promise","parentStructiveComponent","dataset","json","JSON","parse","datasetState","registerChildComponent","enableWebComponents","createComment","replaceWith","funcs","unregisterChildComponent","saveInfoByStructuredPathId","saveInfoByResolvedPathInfoIdByListIndex","saveInfoByRef","listByRef","listIndexesByRef","bindingsByRef","listCloneByRef","delete","MUSTACHE_REGEXP","MUSTACHE_TYPES","SVG_NS","replaceTemplateTagWithComment","namespaceURI","newTemplate","registerHtml","html","innerHTML","stack","replaceAll","match","expr","remain","currentInfo","endTags","pop","stackDepth","got","replaceMustacheWithTemplateTag","checkSegmentRegexp","checkPathRegexp","createAccessorFunctions","len","matchPath","curPath","matchInfo","count","segment","Function","PathManager","getterSetters","optimizes","staticDependencies","createRootNode","getPathsSetById","union","getListPathsSetById","listPath","elementPath","currentProto","prototype","getOwnPropertyDescriptors","desc","hasGetter","hasSetter","getPrototypeOf","defineProperty","enumerable","configurable","dianamicDependencyKeys","source","createComponentClass","componentData","componentConfig","userConfig","vn","getComponentConfig","$config","Ns","Is","_n","assign","$isStructive","registerStateClass","extendTagName","getBaseClass","createComponentEngine","el","isStructive","define","customElements","styleSheetId","getStyleSheetById","stateClassId","getStateClassById","unescapeEmbed","loadSingleFileComponent","resolved","response","fetch","escapeEmbed","querySelector","script","scriptModule","b64","btoa","fromCodePoint","TextEncoder","encode","import","default","createSingleFileComponent","registerComponentClass","ROUTES_KEY","COMPONENTS_KEY","LAZY_LOAD_SUFFIX","loadFromImportMap","importmap","scriptImportmap","imports","loadImportmap","loadAliasByTagName","alias","isLazyLoad","endsWith","replace","entryRoute","console","warn","ROUTE_PATH_PREFIX","routeEntries","Router","originalPathName","window","location","pathname","originalFileName","basePath","href","origin","_popstateHandler","popstateHandler","dispatchEvent","Event","removeEventListener","event","toPath","history","pushState","n","replacedPath","params","tag","regex","substring","customElement","stringify","hasOwnProperty","isLazyLoadComponent","messageElement","routePath","SLOT_KEY","DEFAULT_LAYOUT","MainWrapper","loadLayout","ok","layoutText","workTemplate","createDocumentFragment","router","_config","initialized","defineComponents","singleFileComponents","registerSingleFileComponents","bootstrapStructive","mainWrapper","body","bootstrap"],"mappings":"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"}
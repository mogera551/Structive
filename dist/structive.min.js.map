{"version":3,"file":"structive.min.js","sources":["../src/Router/Router.ts","../src/WebComponents/getGlobalConfig.ts","../src/Filter/errorMessages.ts","../src/Filter/builtinFilters.ts","../src/GlobalId/generateId.ts","../src/utils.ts","../src/StateClass/registerStateClass.ts","../src/StyleSheet/registerStyleSheet.ts","../src/StyleSheet/regsiterCss.ts","../src/BindingBuilder/createFilters.ts","../src/DataBinding/BindingNode/BindingNode.ts","../src/DataBinding/BindingNode/BindingNodeAttribute.ts","../src/DataBinding/BindingNode/BindingNodeCheckbox.ts","../src/DataBinding/BindingNode/BindingNodeClassList.ts","../src/DataBinding/BindingNode/BindingNodeClassName.ts","../src/DataBinding/BindingNode/BindingNodeEvent.ts","../src/constants.ts","../src/DataBinding/BindingNode/BindingNodeBlock.ts","../src/DataBinding/BindingNode/BindingNodeIf.ts","../src/DataBinding/BindingNode/BindingNodeFor.ts","../src/BindingBuilder/getDefaultName.ts","../src/DataBinding/BindingNode/BindingNodeProperty.ts","../src/DataBinding/BindingNode/BindingNodeRadio.ts","../src/DataBinding/BindingNode/BindingNodeStyle.ts","../src/ComponentState/symbols.ts","../src/DataBinding/BindingNode/BindingNodeComponent.ts","../src/BindingBuilder/getBindingNodeCreator.ts","../src/StateClass/symbols.ts","../src/StateProperty/getStructuredPathInfo.ts","../src/DataBinding/BindingState/BindingState.ts","../src/DataBinding/BindingState/BindingStateIndex.ts","../src/BindingBuilder/getBindingStateCreator.ts","../src/BindingBuilder/getDataBindText.ts","../src/BindingBuilder/getNodeType.ts","../src/BindingBuilder/parseBindText.ts","../src/BindingBuilder/removeDataBindAttribute.ts","../src/BindingBuilder/replaceTextNodeFromComment.ts","../src/BindingBuilder/createDataBindAttributes.ts","../src/BindingBuilder/getAbsoluteNodePath.ts","../src/BindingBuilder/getNodesHavingDataBind.ts","../src/BindingBuilder/registerDataBindAttributes.ts","../src/Template/registerTemplate.ts","../src/Template/removeEmptyTextNodes.ts","../src/DataBinding/Binding.ts","../src/LoopContext/createLoopContext.ts","../src/Render/render.ts","../src/DataBinding/BindContent.ts","../src/BindingBuilder/resolveNodeFromPath.ts","../src/DependencyWalker/createDependencyEdge.ts","../src/DependencyWalker/createDependencyWalker.ts","../src/ListIndex/createListIndex.ts","../src/ListWalker/listWalker.ts","../src/StatePropertyRef/getStatePropertyRef.ts","../src/Updater/restructListIndex.ts","../src/Updater/updater.ts","../src/ComponentEngine/attachShadow.ts","../src/ComponentEngine/canHaveShadowRoot.ts","../src/StateClass/buildListIndexTree.ts","../src/StateClass/methods/getByRef.ts","../src/StateClass/methods/setTracking.ts","../src/StateClass/apis/getByRef.ts","../src/StateClass/apis/setCacheable.ts","../src/StateClass/methods/setCacheable.ts","../src/StateClass/apis/connectedCallback.ts","../src/StateClass/apis/disconnectedCallback.ts","../src/StateClass/methods/setByRef.ts","../src/StateClass/apis/resolve.ts","../src/StateClass/apis/getAll.ts","../src/StateProperty/getResolvedPathInfo.ts","../src/StateClass/getListIndex.ts","../src/StateClass/traps/get.ts","../src/StateClass/createReadonlyStateProxy.ts","../src/StateClass/apis/setByRef.ts","../src/StateClass/createWritableStateProxy.ts","../src/StateClass/traps/set.ts","../src/ComponentEngine/ComponentEngine.ts","../src/Template/replaceMustacheWithTemplateTag.ts","../src/Template/replaceTemplateTagWithComment.ts","../src/Template/registerHtml.ts","../src/ComponentState/createComponentState.ts","../src/StateProperty/createAccessorFunctions.ts","../src/WebComponents/createComponentClass.ts","../src/WebComponents/getComponentConfig.ts","../src/WebComponents/getBaseClass.ts","../src/WebComponents/createSingleFileComponent.ts","../src/WebComponents/loadSingleFileComponent.ts","../src/WebComponents/registerComponentClass.ts","../src/MainWrapper/MainWrapper.ts","../src/WebComponents/loadFromImportMap.ts","../src/WebComponents/loadImportmap.ts","../src/exports.ts","../src/WebComponents/registerSingleFIleComponents.ts","../src/bootstrap.ts"],"sourcesContent":["import { config } from \"../WebComponents/getGlobalConfig\";\r\nimport { IRouter } from \"./types\";\r\n\r\nconst DEFAULT_ROUTE_PATH = '/'; // Default route path\r\nconst ROUTE_PATH_PREFIX = 'routes:'; // Prefix for route paths\r\n/**\r\n * example:\r\n * ```ts\r\n * entryRoute('my-view', '/my-view/:id');\r\n */\r\nconst routeEntries: Array<[string, string]> = [];\r\n\r\nlet globalRouter : Router | null = null;\r\n\r\nexport class Router extends HTMLElement implements IRouter {\r\n  _popstateHandler: (event: PopStateEvent) => void;\r\n  constructor() {\r\n    super();\r\n    this._popstateHandler = this.popstateHandler.bind(this);\r\n  }\r\n\r\n  connectedCallback() {\r\n    globalRouter = this;\r\n    this.innerHTML = '<slot name=\"content\"></slot>';\r\n    window.addEventListener('popstate', this._popstateHandler);\r\n    window.dispatchEvent(new Event(\"popstate\")); // Dispatch popstate event to trigger the initial render\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('popstate', this._popstateHandler);\r\n    globalRouter = null;\r\n  }\r\n\r\n  popstateHandler(event: PopStateEvent) {\r\n    event.preventDefault();\r\n    this.render();\r\n  }\r\n\r\n  navigate(to: string) {\r\n    history.pushState({}, '', to);\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    // スロットコンテントをクリア\r\n    const slotChildren = Array.from(this.childNodes).filter(\r\n      n => (n as HTMLElement).getAttribute?.('slot') === 'content'\r\n    );\r\n    slotChildren.forEach(n => this.removeChild(n));\r\n\r\n    const routePath = window.location.pathname || DEFAULT_ROUTE_PATH;\r\n    let tagName: string | undefined = undefined;\r\n    let params: Record<string, string> = {};\r\n    // Check if the routePath matches any of the defined routes\r\n    for (const [path, tag] of routeEntries) {\r\n      const regex = new RegExp(path.replace(/:[^\\s/]+/g, '([^/]+)'));\r\n      if (regex.test(routePath)) {\r\n        tagName = tag;\r\n        // Extract the parameters from the routePath\r\n        const matches = routePath.match(regex);\r\n        if (matches) {\r\n          const keys = path.match(/:[^\\s/]+/g) || [];\r\n          keys.forEach((key, index) => {\r\n            params[key.substring(1)] = matches[index + 1]; // +1 to skip the full match\r\n          });\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (tagName) {\r\n      // If a route matches, create the custom element and set its state\r\n      // Create the custom element with the tag name\r\n      // project the custom element into the router slot\r\n      const customElement = document.createElement(tagName) as HTMLElement;\r\n      customElement.setAttribute('data-state', JSON.stringify(params));\r\n      customElement.setAttribute('slot', 'content');\r\n      this.appendChild(customElement);\r\n    } else {\r\n      // If no route matches, show 404 content\r\n      const messageElement = document.createElement('h1') as HTMLElement;\r\n      messageElement.setAttribute('slot', 'content');\r\n      messageElement.textContent = '404 Not Found';\r\n      this.appendChild(messageElement);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function entryRoute(tagName: string, routePath: string): void {\r\n  if (routePath.startsWith(ROUTE_PATH_PREFIX)) {\r\n    routePath = routePath.substring(ROUTE_PATH_PREFIX.length); // Remove 'routes:' prefix\r\n  }\r\n  routeEntries.push([routePath, tagName]);\r\n}\r\n\r\nexport function getRouter(): Router | null {\r\n  return globalRouter;\r\n}\r\n\r\n","import { IConfig } from \"./types\";\r\n\r\nconst globalConfig: IConfig = {\r\n  debug                : false,\r\n  locale               : \"en-US\", // The locale of the component, ex. \"en-US\", default is \"en-US\"\r\n  enableShadowDom      : true,\r\n  enableMainWrapper    : true, // Whether to use the main wrapper or not\r\n  enableRouter         : true, // Whether to use the router or not\r\n  autoInsertMainWrapper: false, // Whether to automatically insert the main wrapper or not\r\n  autoInit             : true, // Whether to automatically initialize the component or not\r\n  mainTagName          : \"app-main\", // The tag name of the main wrapper, default is \"app-main\"\r\n  routerTagName        : \"view-router\", // The tag name of the router, default is \"view-router\"\r\n  layoutPath           : \"\", // The path to the layout file, default is \"\"\r\n  autoLoadFromImportMap: false, // Whether to automatically load the component from the import map or not\r\n  optimizeList         : true, // Whether to optimize the list or not\r\n  optimizeListElements : true, // Whether to optimize the list elements or not\r\n  optimizeAccessor     : true, // Whether to optimize the accessors or not\r\n};\r\n\r\n\r\nexport function getGlobalConfig():IConfig {\r\n  return globalConfig;\r\n}\r\n\r\nexport const config = getGlobalConfig();\r\n","\r\nexport function optionsRequired(fnName:string): never {\r\n  throw new Error(`${fnName} requires at least one option`);\r\n}\r\n\r\nexport function optionMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number as option`);\r\n}\r\n\r\nexport function valueMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number value`);\r\n}\r\n\r\nexport function valueMustBeBoolean(fnName:string): never {\r\n  throw new Error(`${fnName} requires a boolean value`);\r\n}\r\n\r\nexport function valueMustBeDate(fnName:string): never {\r\n  throw new Error(`${fnName} requires a date value`);\r\n}","import { getGlobalConfig } from \"../WebComponents/getGlobalConfig.js\";\r\nimport { optionMustBeNumber, optionsRequired, valueMustBeBoolean, valueMustBeDate, valueMustBeNumber } from \"./errorMessages.js\";\r\nimport { FilterWithOptions } from \"./types\";\r\n\r\nconst config = getGlobalConfig();\r\n\r\nconst eq = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('eq');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('eq');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('eq');\r\n    return value === optValue;\r\n  }\r\n}\r\n\r\nconst ne = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ne');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ne');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ne');\r\n    return value !== optValue;\r\n  }\r\n}\r\n\r\nconst not = (options?:string[]) => {\r\n  return (value: any) => {\r\n    if (typeof value !== 'boolean') valueMustBeBoolean('not');\r\n    return !value;\r\n  }\r\n}\r\n\r\nconst lt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('lt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('lt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('lt');\r\n    return value < optValue;\r\n  }\r\n}\r\n\r\nconst le = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('le');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('le');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('le');\r\n    return value <= optValue;\r\n  }\r\n}\r\n\r\nconst gt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('gt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('gt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('gt');\r\n    return value > optValue;\r\n  }\r\n}\r\n\r\nconst ge = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ge');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ge');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ge');\r\n    return value >= optValue;\r\n  }\r\n}\r\n\r\nconst inc = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('inc');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('inc');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('inc');\r\n    return value + optValue;\r\n  }\r\n}\r\n\r\nconst dec = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('dec');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('dec');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('dec');\r\n    return value - optValue;\r\n  }\r\n}\r\n\r\nconst mul = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('mul');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('mul');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('mul');\r\n    return value * optValue;\r\n  }\r\n}\r\n\r\nconst div = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('div');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value / optValue;\r\n  }\r\n}\r\n\r\nconst fix = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value.toFixed(optValue);\r\n  }\r\n}\r\n\r\nconst locale = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('locale');\r\n    return value.toLocaleString(opt);\r\n  }\r\n}\r\n\r\nconst uc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toUpperCase();\r\n  }\r\n}\r\n\r\nconst lc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toLowerCase();\r\n  }\r\n}\r\n\r\nconst cap = (options?:string[]) => {\r\n  return (value: any) => {\r\n    const v = value.toString();\r\n    if (v.length === 0) return v;\r\n    if (v.length === 1) return v.toUpperCase();\r\n    return v.charAt(0).toUpperCase() + v.slice(1);\r\n  }\r\n}\r\n\r\nconst trim = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().trim();\r\n  }\r\n}\r\n\r\nconst slice = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('slice');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('slice');\r\n  return (value: any) => {\r\n    return value.toString().slice(optValue);\r\n  }\r\n}\r\n\r\nconst substr = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('substr');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('substr');\r\n  const opt2 = options?.[1] ?? optionsRequired('substr');\r\n  const opt2Value = Number(opt2);\r\n  if (isNaN(opt2Value)) optionMustBeNumber('substr');\r\n  return (value: any) => {\r\n    return value.toString().substr(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst pad = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('pad');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('pad');\r\n  const opt2 = options?.[1] ?? '0';\r\n  const opt2Value = opt2;\r\n  return (value: any) => {\r\n    return value.toString().padStart(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst rep = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('rep');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('rep');\r\n  return (value: any) => {\r\n    return value.toString().repeat(optValue);\r\n  }\r\n}\r\n\r\nconst rev = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().split('').reverse().join('');\r\n  }\r\n}\r\n\r\nconst int = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseInt(value, 10);\r\n  }\r\n}\r\n\r\nconst float = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseFloat(value);\r\n  }\r\n}\r\n\r\nconst round = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('round');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('round');\r\n    return Math.round(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst floor = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('floor');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('floor');\r\n    return Math.floor(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst ceil = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('ceil');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ceil');\r\n    return Math.ceil(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst percent = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('percent');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('percent');\r\n    return value.toFixed(optValue) + '%';\r\n  }\r\n}\r\n\r\nconst date = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date))  valueMustBeDate('date');\r\n    return value.toLocaleDateString(config.locale);\r\n  }\r\n}\r\n\r\nconst time = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('time');\r\n    return value.toLocaleTimeString(config.locale);\r\n  }\r\n}\r\n\r\nconst datetime = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('datetime');\r\n    return value.toLocaleString(config.locale);\r\n  }\r\n}\r\n\r\nconst ymd = (options?:string[]) => {\r\n  const opt = options?.[0] ?? '-';\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('ymd');\r\n    const year = value.getFullYear().toString();\r\n    const month = (value.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = value.getDate().toString().padStart(2, '0');\r\n    return `${year}${opt}${month}${opt}${day}`;\r\n  }\r\n}\r\n\r\nconst falsy = (options?:string[]) => {\r\n  return (value: any) => value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value);\r\n}\r\n\r\nconst truthy = (options?:string[]) => {\r\n  return (value: any) =>value !== false && value !== null && value !== undefined && value !== 0 && value !== '' && !Number.isNaN(value);\r\n}\r\n\r\nconst defaults = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('defaults');\r\n  return (value: any) => {\r\n    if (value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value)) return opt;\r\n    return value;\r\n  }\r\n}\r\n\r\nconst boolean = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Boolean(value);\r\n  }\r\n}\r\n\r\nconst number = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Number(value);\r\n  }\r\n}\r\n\r\nconst string = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return String(value);\r\n  }\r\n}\r\n\r\nconst _null = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return (value === \"\") ? null : value;\r\n  } \r\n}\r\n\r\nconst builtinFilters: FilterWithOptions = {\r\n  eq,\r\n  ne,\r\n  not,\r\n  \r\n  lt,\r\n  le,\r\n  gt,\r\n  ge,\r\n\r\n  inc,\r\n  dec,\r\n  mul,\r\n  div,\r\n\r\n  fix,\r\n  locale,\r\n  uc,\r\n  lc,\r\n  cap,\r\n  trim,\r\n  slice,\r\n  substr,\r\n  pad,\r\n  rep,\r\n  rev,\r\n\r\n  int,\r\n  float,\r\n  round,\r\n  floor,\r\n  ceil,\r\n  percent,\r\n\r\n  date,\r\n  time,\r\n  datetime,\r\n  ymd,\r\n\r\n  falsy,\r\n  truthy,\r\n  defaults,\r\n\r\n  boolean,\r\n  number,\r\n  string,\r\n  \"null\": _null,\r\n};\r\n\r\nexport const outputBuiltinFilters = builtinFilters;\r\nexport const inputBuiltinFilters = builtinFilters;\r\n\r\nexport const builtinFilterFn = (name:string, options: string[]) => (filters: FilterWithOptions) => {\r\n  const filter = filters[name];\r\n  if (!filter) throw new Error(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(options);\r\n}\r\n\r\n","\r\nlet id = 0;\r\n\r\nexport function generateId(): number {\r\n  return ++id;\r\n}","\r\nexport function raiseError(message: string): never {\r\n  throw new Error(message);\r\n}\r\n","import { raiseError } from \"../utils.js\";\r\nimport { IStructiveState } from \"./types\";\r\n\r\nconst stateClassById: Record<number,IStructiveState> = {};\r\n\r\nexport function registerStateClass(id: number, stateClass: IStructiveState) {\r\n  stateClassById[id] = stateClass;\r\n}\r\n\r\nexport function getStateClassById(id: number): IStructiveState {\r\n  return stateClassById[id] ?? raiseError(`getStateClassById: stateClass not found: ${id}`);\r\n}\r\n","import { raiseError } from \"../utils.js\";\r\n\r\nconst styleSheetById: Record<number,CSSStyleSheet> = {};\r\n\r\nexport function registerStyleSheet(id: number, css: CSSStyleSheet) {\r\n  styleSheetById[id] = css;\r\n}\r\n\r\nexport function getStyleSheetById(id: number): CSSStyleSheet {\r\n  return styleSheetById[id] ?? raiseError(`getStyleSheetById: stylesheet not found: ${id}`);\r\n}","import { registerStyleSheet } from \"./registerStyleSheet.js\";\r\n\r\nexport function registerCss(id: number, css: string) {\r\n  const styleSheet = new CSSStyleSheet();\r\n  styleSheet.replaceSync(css);\r\n  registerStyleSheet(id, styleSheet);\r\n}","import { FilterFn, Filters, FilterWithOptions } from \"../Filter/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nfunction textToFilter(filters:FilterWithOptions, text: IFilterText): FilterFn {\r\n  const filter = filters[text.name];\r\n  if (!filter) raiseError(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(text.options);\r\n}\r\n\r\nconst cache : Map<IFilterText[], Filters> = new Map();\r\n\r\nexport function createFilters(filters:FilterWithOptions, texts: IFilterText[]): Filters {\r\n  let result = cache.get(texts);\r\n  if (typeof result === \"undefined\") {\r\n    result = [];\r\n    for(let i = 0; i < texts.length; i++) {\r\n      result.push(textToFilter(filters, texts[i]));\r\n    }\r\n    cache.set(texts, result);\r\n  }\r\n  return result;\r\n}\r\n","import { Filters } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { IBindingNode } from \"./types\";\r\n\r\nexport class BindingNode implements IBindingNode {\r\n  #binding: IBinding;\r\n  #node: Node;\r\n  #name: string;\r\n  #filters: Filters;\r\n  #decorates: string[];\r\n  #bindContents: Set<IBindContent> = new Set<IBindContent>();\r\n  get node(): Node {\r\n    return this.#node;\r\n  }\r\n  get name(): string {\r\n    return this.#name;\r\n  }\r\n  get subName(): string {\r\n    return this.#name;\r\n  }\r\n  get binding(): IBinding {\r\n    return this.#binding;\r\n  }\r\n  get decorates(): string[] {\r\n    return this.#decorates;\r\n  }\r\n  get filters(): Filters {\r\n    return this.#filters;\r\n  }\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#node = node;\r\n    this.#name = name;\r\n    this.#filters = filters;\r\n    this.#decorates = decorates;\r\n  }\r\n  init():void {\r\n  }\r\n  update(): void {\r\n    this.assignValue(this.binding.bindingState.filteredValue);\r\n  }\r\n  assignValue(value: any): void {\r\n    raiseError(`BindingNode: assignValue not implemented`);\r\n  }\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    raiseError(`BindingNode: updateElements not implemented`);\r\n  }\r\n  get isSelectElement(): boolean {\r\n    return this.node instanceof HTMLSelectElement;\r\n  }\r\n  get value():any {\r\n    return null;\r\n  }\r\n  get filteredValue():any {\r\n    return null;\r\n  }\r\n  get isFor(): boolean {\r\n    return false;\r\n  }\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeAttribute extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as Element;\r\n    element.setAttribute(this.subName, value.toString());\r\n  }\r\n}\r\n\r\nexport const createBindingNodeAttribute: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeAttribute(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeCheckbox extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeCheckbox.update: value is not array`, );\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.map(_val => _val.toString()).includes(element.value);\r\n  }\r\n}\r\n\r\nexport const createBindingNodeCheckbox: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeCheckbox(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeClassList extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeClassList.update: value is not array`);\r\n    }\r\n    const element = this.node as Element;\r\n    element.className = value.join(\" \");\r\n  }\r\n}\r\n\r\nexport const createBindingNodeClassList: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassList(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeClassName extends BindingNode {\r\n  #subName: string;\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeClassName.update: value is not boolean`);\r\n    }\r\n    const element = this.node as Element;\r\n    if (value) {\r\n      element.classList.add(this.subName);\r\n    } else {\r\n      element.classList.remove(this.subName);\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBindingNodeClassName: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassName(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeEvent extends BindingNode {\r\n  #subName    : string;\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#subName = this.name.slice(2); // on～\r\n    const element = node as HTMLElement;\r\n    element.addEventListener(this.subName, (e:Event) => this.handler(e));\r\n  }\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  update() {\r\n    // 何もしない\r\n  }\r\n\r\n  handler(e: Event) {\r\n    const bindingState = this.binding.bindingState;\r\n    const engine = this.binding.engine;\r\n    const stateProxy = engine.createWritableStateProxy();\r\n    const updater = engine.updater;\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n    const indexes = loopContext?.serialize().map((context) => context.listIndex.index) ?? [];\r\n    const options = this.decorates;\r\n    if (options.includes(\"preventDefault\")) {\r\n      e.preventDefault();\r\n    }\r\n    if (options.includes(\"stopPropagation\")) {\r\n      e.stopPropagation();\r\n    }\r\n    this.binding.engine.updater.addProcess(async () => {\r\n      const value = bindingState.value;\r\n      const typeOfValue = typeof value;\r\n      updater.addProcess(async () => {\r\n        if (loopContext) {\r\n          await engine.setLoopContext(loopContext, async () => {\r\n            if (typeOfValue === \"function\") {\r\n              await Reflect.apply(value, stateProxy, [e, ...indexes]);\r\n            } else {\r\n              // ToDo:error\r\n            }\r\n          });\r\n        } else {\r\n          if (typeOfValue === \"function\") {\r\n            await Reflect.apply(value, stateProxy, [e, ...indexes]);\r\n          } else {\r\n            // ToDo:error\r\n          }\r\n        }\r\n      });\r\n    });\r\n  } \r\n}\r\n\r\nexport const createBindingNodeEvent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeEvent(binding, node, name, filterFns, decorates);\r\n  }\r\n","export const DATA_BIND_ATTRIBUTE = \"data-bind\";\r\nexport const COMMENT_EMBED_MARK = \"@@:\"; // 埋め込み変数のマーク\r\nexport const COMMENT_TEMPLATE_MARK = \"@@|\"; // テンプレートのマーク\r\n","import { COMMENT_TEMPLATE_MARK } from \"../../constants.js\";\r\nimport { Filters } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\n\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\nexport class BindingNodeBlock extends BindingNode {\r\n  #id: number;\r\n  get id(): number {\r\n    return this.#id;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const id = this.node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN) ?? raiseError(\"BindingNodeBlock.id: invalid node\");\r\n    this.#id = Number(id);\r\n  }\r\n    \r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeIf extends BindingNodeBlock {\r\n  #bindContent: IBindContent;\r\n  #trueBindContents: Set<IBindContent>;\r\n  #falseBindContents: Set<IBindContent> = new Set();\r\n  #bindContents: Set<IBindContent>;\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#bindContent = createBindContent(\r\n      this.binding, \r\n      this.id, \r\n      this.binding.engine, \r\n      \"\", \r\n      null\r\n    );\r\n    this.#trueBindContents = this.#bindContents = new Set([this.#bindContent]);\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeIf.update: value is not boolean`);\r\n    }\r\n    const parentNode = this.node.parentNode;\r\n    if (parentNode == null) {\r\n      raiseError(`BindingNodeIf.update: parentNode is null`);\r\n    }\r\n    if (value) {\r\n      this.#bindContent.render();\r\n      this.#bindContent.mountAfter(parentNode, this.node.nextSibling);\r\n      this.#bindContents = this.#trueBindContents;\r\n    } else {\r\n      this.#bindContent.unmount();\r\n      this.#bindContents = this.#falseBindContents;\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBindingNodeIf: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeIf(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeFor extends BindingNodeBlock {\r\n  #bindContentsSet       : Set<IBindContent> = new Set<IBindContent>();\r\n  #bindContentByListIndex: WeakMap<IListIndex, IBindContent> = new WeakMap();\r\n  #bindContentPool       : IBindContent[] = [];\r\n  #bindContentLastIndex  : number = 0;\r\n  #lastListIndexSet      : Set<IListIndex> = new Set<IListIndex>();\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContentsSet;\r\n  }\r\n\r\n  get isFor(): boolean {\r\n    return true;\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  createBindContent(listIndex: IListIndex): IBindContent {\r\n    let bindContent: IBindContent;\r\n    if (this.#bindContentLastIndex >= 0) {\r\n      // プールの最後の要素を取得して、プールの長さをあとで縮減する\r\n      // 作るたびにプールを縮減すると、パフォーマンスが悪化するため\r\n      // プールの長さを縮減するのは、全ての要素を作った後に行う\r\n      bindContent = this.#bindContentPool[this.#bindContentLastIndex];\r\n      this.#bindContentLastIndex--;\r\n      bindContent.assignListIndex(listIndex);\r\n    } else {\r\n      bindContent = createBindContent(\r\n        this.binding, \r\n        this.id, \r\n        this.binding.engine, \r\n        this.binding.bindingState.pattern + \".*\", \r\n        listIndex);\r\n    }\r\n    // 登録\r\n    this.#bindContentByListIndex.set(listIndex, bindContent);\r\n    return bindContent;\r\n  }\r\n\r\n  deleteBindContent(bindContent: IBindContent): void {\r\n    bindContent.unmount();\r\n    bindContent.loopContext?.clearListIndex();\r\n  }\r\n\r\n  get bindContentLastIndex():number {\r\n    return this.#bindContentLastIndex;\r\n  }\r\n  set bindContentLastIndex(value:number) {\r\n    this.#bindContentLastIndex = value;\r\n  }\r\n\r\n  get poolLength():number {\r\n    return this.#bindContentPool.length;\r\n  }\r\n  set poolLength(length: number) {\r\n    if (length < 0) {\r\n      raiseError(`BindingNodeFor.setPoolLength: length is negative`);\r\n    }\r\n    this.#bindContentPool.length = length;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeFor.assignValue: value is not array`);\r\n    }\r\n    const listIndexesSet = this.binding.engine.getListIndexesSet(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex\r\n    );\r\n    if (listIndexesSet === null) {\r\n      raiseError(`BindingNodeFor.assignValue: listIndexes is not found`);\r\n    }\r\n    const newBindContensSet = new Set<IBindContent>();\r\n    let lastBindContent = null;\r\n    // 削除を先にする\r\n    const removeBindContentsSet = new Set<IBindContent>();\r\n    const diff = this.#lastListIndexSet.difference(listIndexesSet);\r\n    for(const listIndex of diff) {\r\n      const bindContent = this.#bindContentByListIndex.get(listIndex);\r\n      if (bindContent) {\r\n        this.deleteBindContent(bindContent);\r\n        removeBindContentsSet.add(bindContent);\r\n      }\r\n    }\r\n    this.#bindContentPool.push(...removeBindContentsSet);\r\n\r\n    const parentNode = this.node.parentNode ?? raiseError(`BindingNodeFor.update: parentNode is null`);\r\n    const firstNode = this.node;\r\n\r\n    this.bindContentLastIndex = this.poolLength - 1;\r\n    for(const listIndex of listIndexesSet) {\r\n      const lastNode = lastBindContent?.getLastNode(parentNode) ?? firstNode;\r\n      let bindContent = this.#bindContentByListIndex.get(listIndex);\r\n      if (typeof bindContent === \"undefined\") {\r\n        bindContent = this.createBindContent(listIndex);\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        if (lastNode?.nextSibling !== bindContent.firstChildNode) {\r\n          bindContent.mountAfter(parentNode, lastNode);\r\n        }\r\n      }\r\n      newBindContensSet.add(bindContent);\r\n      lastBindContent = bindContent;\r\n    }\r\n    // プールの長さを更新する\r\n    // プールの長さは、プールの最後の要素のインデックス+1であるため、\r\n    this.poolLength = this.bindContentLastIndex + 1;\r\n    this.#bindContentsSet = newBindContensSet;\r\n    this.#lastListIndexSet = new Set<IListIndex>(listIndexesSet);\r\n  }\r\n\r\n  /**\r\n   * SWAP処理を想定\r\n   * \r\n   * @param listIndexes \r\n   * @param values \r\n   * @returns \r\n   */\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    if (typeof values[0] !== \"object\") return;\r\n    const engine = this.binding.engine;\r\n    const oldListValues = \r\n      engine.getList(\r\n        this.binding.bindingState.info, \r\n        this.binding.bindingState.listIndex\r\n      ) ?? raiseError(`BindingNodeFor.updateElements: oldValues is not found`); \r\n    const parentNode = this.node.parentNode ?? raiseError(`BindingNodeFor.update: parentNode is null`);\r\n\r\n    // DOMから削除\r\n    const currentBindContents = Array.from(this.#bindContentsSet);\r\n    const targetBindContents: IBindContent[] = [];\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const bindContent = currentBindContents[listIndex.index];\r\n      bindContent.unmount();\r\n      targetBindContents.push(bindContent);\r\n    }\r\n\r\n    // DOMに追加、listIndexを更新\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const index = listIndex.index;\r\n\r\n      const lastBindContent = currentBindContents[index - 1] ?? null;\r\n      const lastNode = lastBindContent?.lastChildNode ?? this.node;\r\n\r\n      const oldValue = oldListValues[index];\r\n      const targetIndex = values.indexOf(oldValue);\r\n      const prevBindContent = targetBindContents[targetIndex];\r\n\r\n      if (typeof prevBindContent === \"undefined\") {\r\n        // 入れ替えるBindContentがない場合は再描画\r\n        const bindContent = targetBindContents[index];\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        prevBindContent.assignListIndex(listIndex);\r\n        prevBindContent.mountAfter(parentNode, lastNode);\r\n        this.#bindContentByListIndex.set(listIndex, prevBindContent);\r\n        currentBindContents[index] = prevBindContent;\r\n      }\r\n      if (targetIndex >= 0) {\r\n        values[targetIndex] = -1;\r\n      }\r\n    }\r\n    this.#bindContentsSet = new Set<IBindContent>(currentBindContents);\r\n    engine.saveList(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex, \r\n      this.binding.bindingState.value.slice(0)\r\n    );\r\n  }\r\n}\r\n\r\nexport const createBindingNodeFor: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeFor(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DEFAULT_PROPERTY = \"textContent\";\r\n\r\ntype DefaultPropertyByElementType = {\r\n  [key:string]: string;\r\n}\r\n\r\nconst defaultPropertyByElementType:DefaultPropertyByElementType = {\r\n  \"radio\"   : \"checked\",\r\n  \"checkbox\": \"checked\",\r\n  \"button\"  : \"onclick\",\r\n}\r\n\r\n/**\r\n * HTML要素のデフォルトプロパティを取得\r\n */\r\nconst getDefaultPropertyHTMLElement = (node:Node):string => \r\n  node instanceof HTMLSelectElement || node instanceof HTMLTextAreaElement || node instanceof HTMLOptionElement ? \"value\" : \r\n  node instanceof HTMLButtonElement ? \"onclick\" : \r\n  node instanceof HTMLAnchorElement ? \"onclick\" : \r\n  node instanceof HTMLFormElement ? \"onsubmit\" : \r\n  node instanceof HTMLInputElement ? (defaultPropertyByElementType[node.type] ?? \"value\") :\r\n  DEFAULT_PROPERTY;\r\n\r\ntype DefaultPropertyByKey = {\r\n  [key:string]: string | undefined;\r\n}\r\n\r\nconst _cache: DefaultPropertyByKey = {};\r\n\r\nconst textContentProperty = (node:Node):string => DEFAULT_PROPERTY;\r\n\r\ntype GetDefaultPropertyByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>string) | undefined;\r\n}\r\n\r\nconst getDefaultPropertyByNodeType: GetDefaultPropertyByNodeType = {\r\n  HTMLElement: getDefaultPropertyHTMLElement,\r\n  SVGElement : undefined,\r\n  Text       : textContentProperty,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * バインド情報でノードプロパティを省略された場合のデフォルトのプロパティ名を取得\r\n * @param node ノード\r\n * @param nodeType ノードタイプ\r\n * @returns {string | undefined} デフォルトのプロパティ名\r\n */\r\nexport function getDefaultName(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): string | undefined {\r\n  const key = node.constructor.name + \"\\t\" + ((node as HTMLInputElement).type ?? \"\"); // type attribute\r\n  return _cache[key] ?? (_cache[key] = getDefaultPropertyByNodeType[nodeType]?.(node));\r\n}\r\n  ","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { getDefaultName } from \"../../BindingBuilder/getDefaultName.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nfunction isTwoWayBindable(element: HTMLElement): boolean {\r\n  return element instanceof HTMLInputElement || \r\n    element instanceof HTMLTextAreaElement || \r\n    element instanceof HTMLSelectElement;\r\n}\r\n\r\nconst defaultEventByName: {[key:string]: string} = {\r\n  \"value\"   : \"input\",\r\n  \"checked\" : \"change\",\r\n  \"selected\": \"change\",\r\n};\r\n\r\nclass BindingNodeProperty extends BindingNode {\r\n  get value(): any {\r\n    // @ts-ignore\r\n    return this.node[this.name];\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.filters.length; i++) {\r\n      value = this.filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n\r\n    const isElement = this.node instanceof HTMLElement;\r\n    if (!isElement) return;\r\n    if (!isTwoWayBindable(this.node)) return;\r\n    const defaultName = getDefaultName(this.node, \"HTMLElement\");\r\n    if (defaultName !== this.name) return;\r\n    if (decorates.length > 1) raiseError(`BindingNodeProperty: ${this.name} has multiple decorators`);\r\n    const event = (decorates[0]?.startsWith(\"on\") ? decorates[0]?.slice(2) : decorates[0]) ?? null;\r\n    const eventName = event ?? defaultEventByName[this.name] ?? \"readonly\";\r\n    if (eventName === \"readonly\" || eventName === \"ro\") return;\r\n    this.node.addEventListener(eventName, () => {\r\n      this.binding.updateStateValue(this.filteredValue);\r\n    });\r\n\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    // @ts-ignore\r\n    this.node[this.name] = value;\r\n  }\r\n}\r\n\r\nexport const createBindingNodeProperty: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeProperty(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeRadio extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.toString() === element.value.toString();\r\n  }\r\n}\r\n\r\nexport const createBindingNodeRadio: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeRadio(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeStyle extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLElement;\r\n    element.style.setProperty(this.subName, value.toString());\r\n  }\r\n}\r\n\r\nexport const createBindingNodeStyle: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeStyle(binding, node, name, filterFns, decorates);\r\n  }\r\n","\r\nconst symbolName = \"componentState\";\r\n\r\nexport const RenderSymbol : unique symbol = Symbol.for(`${symbolName}.render`);\r\nexport const BindParentComponentSymbol : unique symbol = Symbol.for(`${symbolName}.bindParentComponent`);\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { RenderSymbol } from \"../../ComponentState/symbols.js\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { StructiveComponent } from \"../../WebComponents/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeComponent extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  init(): void {\r\n    const engine = this.binding.engine;\r\n    let bindings = engine.bindingsByComponent.get(this.node as StructiveComponent);\r\n    if (typeof bindings === \"undefined\") {\r\n      bindings = new Set<IBinding>();\r\n      engine.bindingsByComponent.set(this.node as StructiveComponent, bindings);\r\n    }\r\n    bindings.add(this.binding);\r\n  }\r\n\r\n  assignValue(value: any): void {\r\n    const component = this.node as StructiveComponent;\r\n    component.state[RenderSymbol](this.subName, value);\r\n  }\r\n\r\n}\r\n\r\nexport const createBindingNodeComponent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeComponent(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createBindingNodeAttribute } from \"../DataBinding/BindingNode/BindingNodeAttribute.js\";\r\nimport { createBindingNodeCheckbox } from \"../DataBinding/BindingNode/BindingNodeCheckbox.js\";\r\nimport { createBindingNodeClassList } from \"../DataBinding/BindingNode/BindingNodeClassList.js\";\r\nimport { createBindingNodeClassName } from \"../DataBinding/BindingNode/BindingNodeClassName.js\";\r\nimport { createBindingNodeEvent } from \"../DataBinding/BindingNode/BindingNodeEvent.js\";\r\nimport { createBindingNodeIf } from \"../DataBinding/BindingNode/BindingNodeIf.js\";\r\nimport { createBindingNodeFor } from \"../DataBinding/BindingNode/BindingNodeFor.js\";\r\nimport { createBindingNodeProperty } from \"../DataBinding/BindingNode/BindingNodeProperty.js\";\r\nimport { createBindingNodeRadio } from \"../DataBinding/BindingNode/BindingNodeRadio.js\";\r\nimport { createBindingNodeStyle } from \"../DataBinding/BindingNode/BindingNodeStyle.js\";\r\nimport { CreateBindingNodeByNodeFn, CreateBindingNodeFn } from \"../DataBinding/BindingNode/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\nimport { createBindingNodeComponent } from \"../DataBinding/BindingNode/BindingNodeComponent.js\";\r\n\r\ntype NodePropertyConstructorByName = {[key:string]:CreateBindingNodeFn};\r\ntype NodePropertyConstructorByNameByIsComment = {[key:number]:NodePropertyConstructorByName};\r\n\r\nconst nodePropertyConstructorByNameByIsComment:NodePropertyConstructorByNameByIsComment = {\r\n  0: {\r\n    \"class\"   : createBindingNodeClassList,\r\n    \"checkbox\": createBindingNodeCheckbox,\r\n    \"radio\"   : createBindingNodeRadio,\r\n  },\r\n  1: {\r\n    \"if\" : createBindingNodeIf,\r\n  },\r\n};\r\n\r\ntype NodePropertyConstructorByFirstName = {[key:string]:CreateBindingNodeFn};\r\n\r\nconst nodePropertyConstructorByFirstName:NodePropertyConstructorByFirstName = {\r\n  \"class\": createBindingNodeClassName,\r\n  \"attr\" : createBindingNodeAttribute,\r\n  \"style\": createBindingNodeStyle,\r\n  \"state\": createBindingNodeComponent,\r\n//  \"popover\": PopoverTarget,\r\n//  \"commandfor\": CommandForTarget,\r\n};\r\n\r\nfunction _getBindingNodeCreator(isComment:boolean, isElement: boolean, propertyName: string): CreateBindingNodeFn {\r\n  const bindingNodeCreatorByName = nodePropertyConstructorByNameByIsComment[isComment ? 1 : 0][propertyName];\r\n  if (typeof bindingNodeCreatorByName !== \"undefined\") {\r\n    return bindingNodeCreatorByName;\r\n  }\r\n  if (isComment && propertyName === \"for\") {\r\n    return createBindingNodeFor;\r\n  }\r\n  if (isComment) {\r\n    raiseError(`getBindingNodeCreator: unknown node property ${propertyName}`);\r\n  }\r\n  const nameElements = propertyName.split(\".\");\r\n  const bindingNodeCreatorByFirstName = nodePropertyConstructorByFirstName[nameElements[0]];\r\n  if (typeof bindingNodeCreatorByFirstName !== \"undefined\") {\r\n    return bindingNodeCreatorByFirstName;\r\n  }\r\n  if (isElement) {\r\n    if (propertyName.startsWith(\"on\")) {\r\n      return createBindingNodeEvent;\r\n    } else {\r\n      return createBindingNodeProperty;\r\n    }\r\n  } else {\r\n    return createBindingNodeProperty;\r\n  }\r\n}\r\n\r\nconst _cache: {[key:string]:CreateBindingNodeFn} = {};\r\n\r\n/**\r\n * バインドのノードプロパティの生成関数を取得する\r\n * @param node ノード\r\n * @param propertyName プロパティ名\r\n * @returns {CreateBindingNodeFn} ノードプロパティのコンストラクタ\r\n */\r\nexport function getBindingNodeCreator(\r\n  node        : Node, \r\n  propertyName: string,\r\n  filterTexts : IFilterText[],\r\n  decorates   : string[]\r\n): CreateBindingNodeByNodeFn {\r\n  const isComment = node instanceof Comment;\r\n  const isElement = node instanceof Element;\r\n  const key = isComment + \"\\t\" + isElement + \"\\t\" + propertyName;\r\n  const fn = _cache[key] ?? (_cache[key] = _getBindingNodeCreator(isComment, isElement, propertyName));\r\n  return fn(propertyName, filterTexts, decorates);\r\n}\r\n","\r\nconst symbolName = \"state\";\r\n\r\nexport const GetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.GetByRef`);\r\nexport const SetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.SetByRef`);\r\nexport const SetCacheableSymbol        : unique symbol = Symbol.for(`${symbolName}.SetCacheable`);\r\nexport const ConnectedCallbackSymbol   : unique symbol = Symbol.for(`${symbolName}.ConnectedCallback`);\r\nexport const DisconnectedCallbackSymbol: unique symbol = Symbol.for(`${symbolName}.DisconnectedCallback`);\r\nexport const ResolveSymbol             : unique symbol = Symbol.for(`${symbolName}.Resolve`);\r\nexport const GetAllSymbol              : unique symbol = Symbol.for(`${symbolName}.GetAll`);\r\n","import { raiseError } from '../utils.js';\r\nimport { IStructuredPathInfo } from './types';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IStructuredPathInfo } = {};\r\n//const _cache: Map<string, IStructuredPathInfo> = new Map();\r\n\r\n/**\r\n * パターン情報を取得します\r\n * @param pattern パターン\r\n * @returns {IPatternInfo} パターン情報\r\n */\r\nclass StructuredPathInfo implements IStructuredPathInfo {\r\n  static id : number = 0;\r\n  id = ++StructuredPathInfo.id;\r\n  pattern;\r\n  pathSegments;\r\n  lastSegment;\r\n  cumulativePaths;\r\n  cumulativeInfos;\r\n  cumulativeInfoSet;\r\n  wildcardPaths;\r\n  wildcardInfos;\r\n  wildcardInfoSet;\r\n  wildcardParentPaths;\r\n  wildcardParentInfos;\r\n  wildcardParentInfoSet;\r\n  lastWildcardPath;\r\n  lastWildcardInfo;\r\n  parentPath;\r\n  parentInfo;\r\n  wildcardCount;\r\n  children = {};\r\n\r\n  constructor(pattern: string) {\r\n    const getPattern = (_pattern: string): IStructuredPathInfo => {\r\n      return (pattern === _pattern) ? this : getStructuredPathInfo(_pattern);\r\n    };\r\n    const pathSegments = pattern.split(\".\");\r\n    const cumulativePaths = [];\r\n    const cumulativeInfos: IStructuredPathInfo[] = [];\r\n    const wildcardPaths = [];\r\n    const wildcardInfos = [];\r\n    const wildcardParentPaths = [];\r\n    const wildcardParentInfos = [];\r\n    let currentPatternPath = \"\", prevPatternPath = \"\";\r\n    let wildcardCount = 0;\r\n    for(let i = 0; i < pathSegments.length; i++) {\r\n      currentPatternPath += pathSegments[i];\r\n      if (pathSegments[i] === \"*\") {\r\n        wildcardPaths.push(currentPatternPath);\r\n        wildcardInfos.push(getPattern(currentPatternPath));\r\n        wildcardParentPaths.push(prevPatternPath);\r\n        wildcardParentInfos.push(getPattern(prevPatternPath));\r\n        wildcardCount++;\r\n      }\r\n      cumulativePaths.push(currentPatternPath);\r\n      cumulativeInfos.push(getPattern(currentPatternPath));\r\n      prevPatternPath = currentPatternPath;\r\n      currentPatternPath += \".\";\r\n    }\r\n    const lastWildcardPath = wildcardPaths.length > 0 ? wildcardPaths[wildcardPaths.length - 1] : null;\r\n    const parentPath = cumulativePaths.length > 1 ? cumulativePaths[cumulativePaths.length - 2] : null;\r\n    this.pattern = pattern;\r\n    this.pathSegments = pathSegments;\r\n    this.lastSegment = pathSegments[pathSegments.length - 1];\r\n    this.cumulativePaths = cumulativePaths;\r\n    this.cumulativeInfos = cumulativeInfos;\r\n    this.cumulativeInfoSet = new Set(cumulativeInfos);\r\n    this.wildcardPaths = wildcardPaths;\r\n    this.wildcardInfos = wildcardInfos;\r\n    this.wildcardInfoSet = new Set(wildcardInfos);\r\n    this.wildcardParentPaths = wildcardParentPaths;\r\n    this.wildcardParentInfos = wildcardParentInfos;\r\n    this.wildcardParentInfoSet = new Set(wildcardParentInfos);\r\n    this.lastWildcardPath = lastWildcardPath;\r\n    this.lastWildcardInfo = lastWildcardPath ? getPattern(lastWildcardPath) : null;\r\n    this.parentPath = parentPath;\r\n    this.parentInfo = parentPath ? getPattern(parentPath) : null;\r\n    this.wildcardCount = wildcardCount;\r\n    if (this.parentInfo) {\r\n      this.parentInfo.children[this.lastSegment] = this;\r\n    }\r\n  }\r\n}\r\n\r\nconst reservedWords = new Set([\r\n  \"constructor\", \"prototype\", \"__proto__\", \"toString\",\r\n  \"valueOf\", \"hasOwnProperty\", \"isPrototypeOf\",\r\n  \"watch\", \"unwatch\", \"eval\", \"arguments\",\r\n  \"let\", \"var\", \"const\", \"class\", \"function\",\r\n  \"null\", \"true\", \"false\", \"new\", \"return\",\r\n]);\r\n\r\nexport function getStructuredPathInfo(structuredPath: string): IStructuredPathInfo {\r\n  let info: IStructuredPathInfo | undefined;\r\n  info = _cache[structuredPath];\r\n  if (typeof info !== \"undefined\") {\r\n    return info;\r\n  }\r\n  if (reservedWords.has(structuredPath)) {\r\n    raiseError(`getStructuredPathInfo: pattern is reserved word: ${structuredPath}`);\r\n  }\r\n  return (_cache[structuredPath] = new StructuredPathInfo(structuredPath));\r\n}\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { GetByRefSymbol, SetByRefSymbol } from \"../../StateClass/symbols.js\";\r\nimport { IStateProxy } from \"../../StateClass/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\nclass BindingState implements IBindingState {\r\n  #binding     : IBinding;\r\n  #pattern     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return this.#pattern;\r\n  }\r\n  get info() {\r\n    return this.#info;\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#pattern = pattern;\r\n    this.#info = getStructuredPathInfo(pattern);\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.#state[GetByRefSymbol](this.info, this.listIndex);\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    if (this.info.wildcardCount > 0) {\r\n      const lastWildcardPath = this.info.lastWildcardPath ?? \r\n        raiseError(`BindingState.init: wildcardLastParentPath is null`);\r\n      const loopContext = this.binding.parentBindContent.loopContext?.find(lastWildcardPath) ?? \r\n        raiseError(`BindingState.init: loopContext is null`);\r\n      this.#listIndexRef = loopContext.listIndexRef;\r\n    }\r\n    this.binding.engine.saveBinding(this.info, this.listIndex, this.binding);\r\n  }\r\n  assignValue(value: any) {\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n    const engine = this.binding.engine;\r\n    const stateProxy = engine.createWritableStateProxy();\r\n    const bindingState = this.binding.bindingState;\r\n    if (loopContext) {\r\n      engine.setLoopContext(loopContext, async () => {\r\n        // @ts-ignore\r\n        stateProxy[SetByRefSymbol](bindingState.info, bindingState.listIndex, value);\r\n      });\r\n    } else {\r\n      // @ts-ignore\r\n      stateProxy[SetByRefSymbol](bindingState.info, bindingState.listIndex, value);\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBindingState: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n    return new BindingState(binding, state, name, filterFns);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStateProxy } from \"../../StateClass/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\nclass BindingStateIndex implements IBindingState {\r\n  #binding     : IBinding;\r\n  #indexNumber : number;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get info() {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    const indexNumber = Number(pattern.slice(1));\r\n    if (isNaN(indexNumber)) {\r\n      raiseError(\"BindingStateIndex: pattern is not a number\");\r\n    }\r\n    this.#indexNumber = indexNumber;\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.listIndex?.index ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext ??\r\n      raiseError(`BindingState.init: loopContext is null`);\r\n    const loopContexts = loopContext.serialize();\r\n    this.#listIndexRef = loopContexts[this.#indexNumber - 1].listIndexRef ??\r\n      raiseError(`BindingState.init: listIndexRef is null`);\r\n    const listIndex = this.listIndex ?? raiseError(\"listIndex is null\");\r\n    const bindings = this.binding.engine.bindingsByListIndex.get(listIndex);\r\n    if (bindings === undefined) {\r\n      this.binding.engine.bindingsByListIndex.set(listIndex, new Set([this.binding]));\r\n    } else {\r\n      bindings.add(this.binding);\r\n    }\r\n  }\r\n  assignValue(value:any): void {\r\n    raiseError(\"BindingStateIndex: assignValue is not implemented\");\r\n  }\r\n}\r\n\r\nexport const createBindingStateIndex: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n\r\n    return new BindingStateIndex(binding, state, name, filterFns);\r\n  }\r\n","import { createBindingState } from \"../DataBinding/BindingState/BindingState.js\";\r\nimport { createBindingStateIndex } from \"../DataBinding/BindingState/BindingStateIndex.js\";\r\nimport { CreateBindingStateByStateFn } from \"../DataBinding/BindingState/types\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nconst ereg = new RegExp(/^\\$\\d+$/);\r\n\r\nexport function getBindingStateCreator(\r\n  name       : string, \r\n  filterTexts: IFilterText[]\r\n): CreateBindingStateByStateFn {\r\n  if (ereg.test(name)) {\r\n    return createBindingStateIndex(name, filterTexts);\r\n  } else {\r\n    return createBindingState(name, filterTexts);\r\n  }\r\n}","import { COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst COMMENT_EMBED_MARK_LEN = COMMENT_EMBED_MARK.length;\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\nconst getTextFromContent   = (node:Node):string        => node.textContent?.slice(COMMENT_EMBED_MARK_LEN).trim() ?? \"\";\r\nconst getTextFromAttribute = (node:HTMLElement):string => node.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\nconst getTextFromTemplate  = (node:Node):string        => {\r\n  const text = node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN).trim(); \r\n  const id = Number(text);\r\n  const template = getTemplateById(id) ?? raiseError(`Template not found: ${text}`);\r\n  return template.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n};\r\nconst getTextFromSVGElement = (node:SVGElement):string => node.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n\r\nconst getTextByNodeType = {\r\n  \"Text\":        getTextFromContent,\r\n  \"HTMLElement\": getTextFromAttribute,\r\n  \"Template\":    getTextFromTemplate,\r\n  \"SVGElement\":  getTextFromSVGElement\r\n};\r\n\r\nexport function getDataBindText(nodeType: NodeType, node: Node): string {\r\n  const bindText = getTextByNodeType[nodeType](node as any) ?? \"\";\r\n  if (nodeType === \"Text\") {\r\n    return \"textContent:\" + bindText;\r\n  } else {\r\n    return bindText;\r\n  }\r\n}\r\n","import { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst createNodeKey = (node:Node):string => node.constructor.name + \"\\t\" + ((node instanceof Comment) ? (node.textContent?.[2] ?? \"\") : \"\");\r\n\r\ntype NodeTypeByNodeKey = {\r\n  [nodeKey:string]:NodeType;\r\n};\r\n\r\nconst nodeTypeByNodeKey:NodeTypeByNodeKey = {};\r\n\r\nconst getNodeTypeByNode = (node:Node):NodeType =>\r\n  (node instanceof Comment && node.textContent?.[2] === \":\") ? \"Text\" : \r\n  (node instanceof HTMLElement) ? \"HTMLElement\" :\r\n  (node instanceof Comment && node.textContent?.[2] === \"|\") ? \"Template\" : \r\n  (node instanceof SVGElement) ? \"SVGElement\" : raiseError(`Unknown NodeType: ${node.nodeType}`);\r\n\r\n/**\r\n * ノードのタイプを取得\r\n * @param node ノード\r\n * @param nodeKey ノードキー\r\n * @returns {NodeType} ノードタイプ\r\n */\r\nexport function getNodeType(\r\n  node   : Node, \r\n  nodeKey: string = createNodeKey(node)\r\n): NodeType {\r\n  return nodeTypeByNodeKey[nodeKey] ?? (nodeTypeByNodeKey[nodeKey] = getNodeTypeByNode(node));\r\n}\r\n","import { IFilterText, IBindText } from \"./types\";\r\n\r\nconst trim = (s:string):string => s.trim();\r\n\r\nconst has = (s:string):boolean => s.length > 0; // check length\r\n\r\nconst re = new RegExp(/^#(.*)#$/);\r\nconst decode = (s:string):string => {\r\n  const m = re.exec(s);\r\n  return m ? decodeURIComponent(m[1]) : s;\r\n};\r\n\r\n/**\r\n * parse filter part\r\n * \"eq,100|falsey\" ---> [Filter(eq, [100]), Filter(falsey)]\r\n */\r\nconst parseFilter = (text:string): IFilterText => {\r\n  const [name, ...options] = text.split(\",\").map(trim);\r\n  return {name, options:options.map(decode)};\r\n};\r\n\r\ntype ReturnParseStateProperty = {property:string,filters:IFilterText[]};\r\n/**\r\n * parse expression\r\n * \"value|eq,100|falsey\" ---> [\"value\", Filter[]]\r\n */\r\nconst parseProperty = (text:string): ReturnParseStateProperty => {\r\n  const [property, ...filterTexts] = text.split(\"|\").map(trim);\r\n  return {property, filters:filterTexts.map(parseFilter)};\r\n};\r\n\r\n/**\r\n * parse expressions\r\n * \"textContent:value|eq,100|falsey\" ---> [\"textContent\", \"value\", Filter[eq, falsey]]\r\n */\r\nconst parseExpression = (expression:string): IBindText => {\r\n  const [ bindExpression, decoratesExpression = null ] = expression.split(\"@\").map(trim);\r\n  const decorates = decoratesExpression ? decoratesExpression.split(\",\").map(trim) : [];\r\n  const [nodePropertyText, statePropertyText] = bindExpression.split(\":\").map(trim);\r\n  const { property:nodeProperty, filters:inputFilterTexts } = parseProperty(nodePropertyText);\r\n  const { property:stateProperty, filters:outputFilterTexts } = parseProperty(statePropertyText);\r\n  return { nodeProperty, stateProperty, inputFilterTexts, outputFilterTexts, decorates };\r\n};\r\n\r\n/**\r\n * parse bind text and return BindText[]\r\n */\r\nconst parseExpressions = (text:string): IBindText[] => {\r\n  return text.split(\";\").map(trim).filter(has).map(s => parseExpression(s));\r\n};\r\n\r\nconst cache:{[key:string]: IBindText[]} = {};\r\n\r\n/**\r\n * 取得したバインドテキスト(getBindTextByNodeType)を解析して、バインド情報を取得する\r\n * @param text バインドテキスト\r\n * @param defaultName デフォルト名\r\n * @returns {IBindText[]} バインド情報\r\n */\r\nexport function parseBindText(\r\n  text: string\r\n): IBindText[] {\r\n  if (text.trim() === \"\") {\r\n    return [];\r\n  }\r\n  return cache[text] ?? (cache[text] = parseExpressions(text));\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DATASET_BIND_PROPERTY = 'data-bind';\r\n\r\nconst removeAttributeFromElement = (node:Node):void => {\r\n  const element = node as Element;\r\n  element.removeAttribute(DATASET_BIND_PROPERTY);\r\n}\r\n\r\ntype RemoveAttributeByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>void) | undefined;\r\n}\r\n\r\nconst removeAttributeByNodeType:RemoveAttributeByNodeType = {\r\n  HTMLElement: removeAttributeFromElement,\r\n  SVGElement : removeAttributeFromElement,\r\n  Text       : undefined,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * ノードからdata-bind属性を削除\r\n * @param node ノード\r\n * @param nodeType ノードタイプ\r\n * @returns {Node} ノード\r\n */\r\nexport function removeDataBindAttribute(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n):void {\r\n  return removeAttributeByNodeType[nodeType]?.(node);\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst replaceTextNodeText = (node:Node):Node => {\r\n  const textNode = document.createTextNode(\"\");\r\n  node.parentNode?.replaceChild(textNode, node);\r\n  return textNode;\r\n}\r\n\r\ntype ReplaceTextNodeFn = {\r\n  [key in NodeType]: ((node:Node)=>Node) | undefined;\r\n}\r\n\r\nconst replaceTextNodeFn:ReplaceTextNodeFn = {\r\n  Text       : replaceTextNodeText,\r\n  HTMLElement: undefined,\r\n  Template   : undefined,\r\n  SVGElement : undefined\r\n}\r\n\r\n/**\r\n * コメントノードをテキストノードに置き換える\r\n * @param node ノード\r\n * @param nodeType ノードタイプ\r\n * @returns {Node} ノード\r\n */\r\nexport function replaceTextNodeFromComment(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): Node {\r\n  return replaceTextNodeFn[nodeType]?.(node) ?? node;\r\n}\r\n","import { getAbsoluteNodePath } from \"./getAbsoluteNodePath.js\";\r\nimport { getBindingNodeCreator } from \"./getBindingNodeCreator.js\";\r\nimport { getBindingStateCreator } from \"./getBindingStateCreator.js\";\r\nimport { getDataBindText } from \"./getDataBindText.js\";\r\nimport { getNodeType } from \"./getNodeType.js\";\r\nimport { parseBindText } from \"./parseBindText.js\";\r\nimport { removeDataBindAttribute } from \"./removeDataBindAttribute.js\";\r\nimport { replaceTextNodeFromComment } from \"./replaceTextNodeFromComment.js\";\r\nimport { IBindingCreator, IBindText, IDataBindAttributes, NodePath, NodeType } from \"./types\";\r\n\r\nclass DataBindAttributes implements IDataBindAttributes {\r\n  nodeType     : NodeType; // ノードの種別\r\n  nodePath     : NodePath; // ノードのルート\r\n  bindTexts    : IBindText[]; // BINDテキストの解析結果\r\n  creatorByText: Map<IBindText, IBindingCreator> = new Map(); // BINDテキストからバインディングクリエイターを取得\r\n  constructor(node: Node) {\r\n    this.nodeType = getNodeType(node);\r\n    const text = getDataBindText(this.nodeType, node);\r\n    // CommentNodeをTextに置換、template.contentの内容が書き換わることに注意\r\n    node = replaceTextNodeFromComment(node, this.nodeType);\r\n    // data-bind属性を削除する\r\n    removeDataBindAttribute(node, this.nodeType);\r\n\r\n    this.nodePath = getAbsoluteNodePath(node);\r\n    this.bindTexts = parseBindText(text);\r\n    for(let i = 0; i < this.bindTexts.length; i++) {\r\n      const bindText = this.bindTexts[i];\r\n      const creator: IBindingCreator = {\r\n        createBindingNode : getBindingNodeCreator(\r\n          node, \r\n          bindText.nodeProperty, \r\n          bindText.inputFilterTexts,\r\n          bindText.decorates\r\n        ),\r\n        createBindingState: getBindingStateCreator(\r\n          bindText.stateProperty, \r\n          bindText.outputFilterTexts\r\n        ),\r\n      }\r\n      this.creatorByText.set(bindText, creator);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function createDataBindAttributes(node: Node): IDataBindAttributes {\r\n  return new DataBindAttributes(node);\r\n}","import { NodePath } from \"./types\";\r\n\r\nexport function getAbsoluteNodePath(node: Node): NodePath {\r\n  let routeIndexes: NodePath = [];\r\n  while(node.parentNode !== null) {\r\n    const childNodes = Array.from(node.parentNode.childNodes) as Node[];\r\n    routeIndexes = [ childNodes.indexOf(node), ...routeIndexes ];\r\n    node = node.parentNode;\r\n  }\r\n  return routeIndexes;\r\n}","import { DATA_BIND_ATTRIBUTE, COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK } from \"../constants.js\";\r\n\r\n/**\r\n * \"@@:\"もしくは\"@@|\"で始まるコメントノードを取得する\r\n */\r\nfunction isCommentNode(node: Node): boolean {\r\n  return node instanceof Comment && (\r\n    (node.textContent?.indexOf(COMMENT_EMBED_MARK) === 0) || (node.textContent?.indexOf(COMMENT_TEMPLATE_MARK) === 0)\r\n  );\r\n} \r\n\r\nexport function getNodesHavingDataBind(root: Node): Node[] {\r\n  const nodes: Node[] = [];\r\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT, {\r\n    acceptNode(node:Node) {\r\n      return (node instanceof Element) ? \r\n        (node.hasAttribute(DATA_BIND_ATTRIBUTE) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP)\r\n        : (isCommentNode(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP);\r\n    }\r\n  });\r\n  while (walker.nextNode()) {\r\n    nodes.push(walker.currentNode);\r\n  }\r\n  return nodes;\r\n}\r\n\r\n","import { createDataBindAttributes } from \"./createDataBindAttributes.js\";\r\nimport { getNodesHavingDataBind } from \"./getNodesHavingDataBind.js\";\r\nimport { IDataBindAttributes } from \"./types\";\r\n\r\nconst listDataBindAttributesById: {[key:number]:IDataBindAttributes[]} = {};\r\n\r\nconst listPathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nconst pathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nfunction getDataBindAttributesFromTemplate(content: DocumentFragment): IDataBindAttributes[] {\r\n  const nodes = getNodesHavingDataBind(content);\r\n  return nodes.map(node => createDataBindAttributes(node));\r\n}\r\n\r\nexport function registerDataBindAttributes(\r\n  id     : number, \r\n  content: DocumentFragment,\r\n  rootId : number = id\r\n): IDataBindAttributes[] {\r\n  const dataBindAttributes = getDataBindAttributesFromTemplate(content);\r\n  const paths = pathsSetById[rootId] ?? (pathsSetById[rootId] = new Set<string>());\r\n  const listPaths = listPathsSetById[rootId] ?? (listPathsSetById[rootId] = new Set<string>());\r\n  for(let i = 0; i < dataBindAttributes.length; i++) {\r\n    const attribute = dataBindAttributes[i];\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      paths.add(bindText.stateProperty);\r\n      if (bindText.nodeProperty === \"for\") {\r\n        listPaths.add(bindText.stateProperty);\r\n      }\r\n    }\r\n  }\r\n  return listDataBindAttributesById[id] = dataBindAttributes;\r\n}\r\n\r\nexport const getDataBindAttributesById = (id: number): IDataBindAttributes[] => {\r\n  return listDataBindAttributesById[id];\r\n}\r\n\r\nexport const getListPathsSetById = (id: number): Set<string> => {\r\n  return listPathsSetById[id] ?? [];\r\n};\r\n\r\nexport const getPathsSetById = (id: number): Set<string> => {\r\n  return pathsSetById[id] ?? [];\r\n};","import { registerDataBindAttributes } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { removeEmptyTextNodes } from \"./removeEmptyTextNodes.js\";\r\n\r\nconst templateById:Record<number, HTMLTemplateElement> = {};\r\n\r\nexport function registerTemplate(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number\r\n): number {\r\n  removeEmptyTextNodes(template.content);\r\n  registerDataBindAttributes(id, template.content, rootId);  \r\n  templateById[id] = template;\r\n  return id;\r\n}\r\n\r\nexport function getTemplateById(id: number): HTMLTemplateElement {\r\n  return templateById[id] ?? raiseError(`getTemplateById: template not found: ${id}`);\r\n}","\r\nexport function removeEmptyTextNodes(content:DocumentFragment):void {\r\n  Array.from(content.childNodes).forEach(node => {\r\n    if (node.nodeType === Node.TEXT_NODE && !(node.nodeValue ?? \"\").trim()) {\r\n      content.removeChild(node);\r\n    }\r\n  });  \r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { CreateBindingNodeByNodeFn, IBindingNode } from \"./BindingNode/types\";\r\nimport { CreateBindingStateByStateFn, IBindingState } from \"./BindingState/types\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\n\r\nclass Binding implements IBinding {\r\n  parentBindContent: IBindContent;\r\n  node             : Node;\r\n  engine           : IComponentEngine;\r\n  bindingNode      : IBindingNode;\r\n  bindingState     : IBindingState;\r\n  version          : number | undefined;\r\n  constructor(\r\n    parentBindContent : IBindContent,\r\n    node              : Node,\r\n    engine            : IComponentEngine,\r\n    createBindingNode : CreateBindingNodeByNodeFn, \r\n    createBindingState: CreateBindingStateByStateFn,\r\n  ) {\r\n    this.parentBindContent = parentBindContent\r\n    this.node = node;\r\n    this.engine = engine\r\n    this.bindingNode = createBindingNode(this, node, engine.inputFilters);\r\n    this.bindingState = createBindingState(this, engine.readonlyState, engine.outputFilters);\r\n  }\r\n\r\n  get bindContents() {\r\n    return this.bindingNode.bindContents;\r\n  }\r\n\r\n  init() {\r\n    this.bindingNode.init();\r\n    this.bindingState.init();\r\n  }\r\n\r\n  render() {\r\n    if (this.version !== this.engine.updater.version) {\r\n      try {\r\n        this.bindingNode.update();\r\n      } finally {\r\n        this.version = this.engine.updater.version;\r\n      }\r\n    }\r\n  }\r\n\r\n  updateStateValue(value: any) {\r\n    const engine = this.engine;\r\n    const bindingState = this.bindingState;\r\n    engine.updater.addProcess(() => {\r\n      return bindingState.assignValue(value);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createBinding(\r\n  parentBindContent : IBindContent,\r\n  node              : Node, \r\n  engine            : IComponentEngine, \r\n  createBindingNode : CreateBindingNodeByNodeFn, \r\n  createBindingState: CreateBindingStateByStateFn\r\n): IBinding {\r\n  return new Binding(\r\n    parentBindContent, \r\n    node, \r\n    engine, \r\n    createBindingNode, \r\n    createBindingState\r\n  );\r\n}","import { IBindContent } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { ILoopContext } from \"./types\";\r\n\r\nclass LoopContext implements ILoopContext {\r\n  #path     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null;\r\n  #bindContent : IBindContent;\r\n  constructor(\r\n    path    : string | null,\r\n    listIndex  : IListIndex,\r\n    bindContent: IBindContent\r\n  ) {\r\n    this.#path = path ?? raiseError(\"name is required\");\r\n    this.#info = getStructuredPathInfo(this.#path);\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    this.#bindContent = bindContent;\r\n  }\r\n  get path(): string {\r\n    return this.#path;\r\n  }\r\n  get info(): IStructuredPathInfo {\r\n    return this.#info;\r\n  }\r\n  get listIndex(): IListIndex {\r\n    return this.#listIndexRef?.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get listIndexRef(): WeakRef<IListIndex> {\r\n    return this.#listIndexRef ?? raiseError(\"listIndexRef is null\");\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    // 構造は変わらないので、#parentLoopContext、#cacheはクリアする必要はない\r\n  }\r\n  clearListIndex():void {\r\n    this.#listIndexRef = null;\r\n  }\r\n  get bindContent(): IBindContent {\r\n    return this.#bindContent;\r\n  }\r\n\r\n  #parentLoopContext: ILoopContext | null | undefined;\r\n  get parentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#parentLoopContext === \"undefined\") {\r\n      let currentBinding: IBindContent | null = this.bindContent;\r\n      while(currentBinding !== null) {\r\n        if (currentBinding.loopContext !== null && currentBinding.loopContext !== this) {\r\n          this.#parentLoopContext = currentBinding.loopContext;\r\n          break;\r\n        }\r\n        currentBinding = currentBinding.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      if (typeof this.#parentLoopContext === \"undefined\") this.#parentLoopContext = null;\r\n    }\r\n    return this.#parentLoopContext;\r\n  }\r\n\r\n  #cache:Record<string, ILoopContext | null> = {};\r\n  find(name: string): ILoopContext | null {\r\n    let loopContext = this.#cache[name];\r\n    if (typeof loopContext === \"undefined\") {\r\n      let currentLoopContext: ILoopContext | null = this;\r\n      while(currentLoopContext !== null) {\r\n        if (currentLoopContext.path === name) break;\r\n        currentLoopContext = currentLoopContext.parentLoopContext;\r\n      }\r\n      loopContext = this.#cache[name] = currentLoopContext;\r\n    }\r\n    return loopContext;\r\n  }\r\n\r\n  walk(callback: (loopContext: ILoopContext) => void): void {\r\n    let currentLoopContext: ILoopContext | null = this;\r\n    while(currentLoopContext !== null) {\r\n      callback(currentLoopContext);\r\n      currentLoopContext = currentLoopContext.parentLoopContext;\r\n    }\r\n  }\r\n\r\n  serialize(): ILoopContext[] {\r\n    const results: ILoopContext[] = [];\r\n    this.walk((loopContext) => {\r\n      results.unshift(loopContext);\r\n    });\r\n    return results;\r\n  }\r\n\r\n}\r\n\r\n// 生成されたあと、IBindContentのloopContextに登録される\r\n// IBindContentにずっと保持される\r\nexport function createLoopContext(\r\n  pattern: string | null,\r\n  listIndex: IListIndex,\r\n  bindContent: IBindContent\r\n): ILoopContext {\r\n  return new LoopContext(pattern, listIndex, bindContent);\r\n}","import { IBinding } from \"../DataBinding/types\";\r\n\r\nexport function render(bindings: IBinding[]) {\r\n  const bindingsWithSelectElement = [];\r\n  for(let i = 0; i < bindings.length; i++) {\r\n    const binding = bindings[i];\r\n    if (binding.bindingNode.isSelectElement) {\r\n      bindingsWithSelectElement.push(binding);\r\n    } else {\r\n      binding.render();\r\n    }\r\n  }\r\n  for(let i = 0; i < bindingsWithSelectElement.length; i++) {\r\n    bindingsWithSelectElement[i].render();\r\n  }\r\n}\r\n","import { resolveNodeFromPath } from \"../BindingBuilder/resolveNodeFromPath.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { createBinding } from \"./Binding.js\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\nimport { createLoopContext } from \"../LoopContext/createLoopContext.js\";\r\nimport { render } from \"../Render/render.js\";\r\nimport { getDataBindAttributesById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\n\r\nfunction createContent(id: number): DocumentFragment {\r\n  const template = getTemplateById(id) ?? \r\n    raiseError(`BindContent: template is not found: ${id}`);\r\n  return document.importNode(template.content, true);\r\n}\r\n\r\nfunction createBindings(\r\n  bindContent: IBindContent, \r\n  id         : number, \r\n  engine     : IComponentEngine, \r\n  content    : DocumentFragment\r\n): IBinding[] {\r\n  const attributes = getDataBindAttributesById(id) ?? \r\n    raiseError(`BindContent: data-bind is not set`);\r\n  const bindings: IBinding[] = [];\r\n  for(let i = 0; i < attributes.length; i++) {\r\n    const attribute = attributes[i];\r\n    const node = resolveNodeFromPath(content, attribute.nodePath) ?? \r\n      raiseError(`BindContent: node is not found: ${attribute.nodePath}`);\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      const creator = attribute.creatorByText.get(bindText) ?? \r\n        raiseError(`BindContent: creator is not found: ${bindText}`);\r\n      const binding = createBinding(\r\n        bindContent, \r\n        node, \r\n        engine, \r\n        creator.createBindingNode, \r\n        creator.createBindingState\r\n      );\r\n      bindings.push(binding);\r\n    }\r\n  }\r\n  return bindings;\r\n}\r\n\r\nclass BindContent implements IBindContent {\r\n  loopContext  : ILoopContext | null;\r\n  parentBinding: IBinding | null;\r\n  childNodes   : Node[];\r\n  fragment     : DocumentFragment;\r\n  engine       : IComponentEngine | undefined;\r\n  #id;\r\n  get id() {\r\n    return this.#id;\r\n  }\r\n  get isMounted() {\r\n    return this.childNodes.length > 0 && this.childNodes[0].parentNode !== this.fragment;\r\n  }\r\n  get firstChildNode() {\r\n    return this.childNodes[0] ?? null;\r\n  }\r\n  get lastChildNode() {\r\n    return this.childNodes[this.childNodes.length - 1] ?? null;\r\n  }\r\n  getLastNode(parentNode: Node): Node | null {\r\n    const lastBinding = this.bindings[this.bindings.length - 1];\r\n    const lastChildNode = this.lastChildNode;\r\n    if (lastBinding.node === lastChildNode) {\r\n      if (lastBinding.bindContents.size > 0) {\r\n        const childBindContent = Array.from(lastBinding.bindContents).at(-1) ?? raiseError(`BindContent: childBindContent is not found`);\r\n        const lastNode = childBindContent.getLastNode(parentNode);\r\n        if (lastNode !== null) {\r\n          return lastNode;\r\n        }\r\n      }\r\n    }\r\n    if (parentNode !== lastChildNode?.parentNode) {\r\n      return null;\r\n    }\r\n    return lastChildNode;\r\n  }\r\n  #currentLoopContext: ILoopContext | null | undefined;\r\n  get currentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#currentLoopContext === \"undefined\") {\r\n      let bindContent: IBindContent | null = this;\r\n      while(bindContent !== null) {\r\n        if (bindContent.loopContext !== null) break; ;\r\n        bindContent = bindContent.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      this.#currentLoopContext = bindContent?.loopContext ?? null;\r\n    }\r\n    return this.#currentLoopContext;\r\n  }\r\n  constructor(\r\n    parentBinding: IBinding | null,\r\n    id           : number, \r\n    engine       : IComponentEngine, \r\n    loopContext  : string | null,\r\n    listIndex    : IListIndex | null\r\n  ) {\r\n    this.parentBinding = parentBinding;\r\n    this.#id = id;\r\n    this.fragment = createContent(id);\r\n    this.childNodes = Array.from(this.fragment.childNodes);\r\n    this.engine = engine;\r\n    this.loopContext = (listIndex !== null) ? createLoopContext(loopContext, listIndex, this) : null;\r\n    this.bindings = createBindings(\r\n      this, \r\n      id, \r\n      engine, \r\n      this.fragment\r\n    );\r\n  }\r\n  mount(parentNode: Node) {\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        parentNode.appendChild(this.childNodes[i]);\r\n      }\r\n    } else {\r\n      parentNode.appendChild(this.fragment);\r\n    }\r\n  }\r\n  mountBefore(parentNode: Node, beforeNode: Node | null) {\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n      }\r\n    } else {\r\n      parentNode.insertBefore(this.fragment, beforeNode);\r\n    }\r\n  }\r\n  mountAfter(parentNode: Node, afterNode: Node | null) {\r\n    const beforeNode = afterNode?.nextSibling ?? null;\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n      }\r\n    } else {\r\n      parentNode.insertBefore(this.fragment, beforeNode);\r\n    }\r\n  }\r\n  unmount() {\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      this.fragment.appendChild(this.childNodes[i]);\r\n    }\r\n  }\r\n  bindings: IBinding[] = [];\r\n  render() {\r\n    render(this.bindings);\r\n  }\r\n  init() {\r\n    this.bindings.forEach(binding => binding.init());\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    if (this.loopContext == null) raiseError(`BindContent: loopContext is null`);\r\n    this.loopContext.assignListIndex(listIndex);\r\n    this.init();\r\n  }\r\n}\r\n\r\nexport function createBindContent(\r\n  parentBinding: IBinding | null,\r\n  id           : number, \r\n  engine       :IComponentEngine, \r\n  loopContext  : string | null, \r\n  listIndex    :IListIndex | null\r\n):IBindContent {\r\n  const bindContent = new BindContent(\r\n    parentBinding, \r\n    id, \r\n    engine, \r\n    loopContext, \r\n    listIndex\r\n  );\r\n  bindContent.init();\r\n  return bindContent;\r\n}","import { NodePath } from \"./types\";\r\n\r\nexport function resolveNodeFromPath(root: Node, path: NodePath): Node | null {\r\n  return path.reduce((node, index) => node?.childNodes[index] ?? null, root);\r\n}","import { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { DependencyType, IDependencyEdge } from \"./types\";\r\n\r\nexport function createDependencyKey(info: IStructuredPathInfo, type: DependencyType): string {\r\n  return `${info.pattern}@${type}`;\r\n}\r\n\r\nconst cache: {[key:string]:IDependencyEdge} = {};;\r\n\r\nexport function createDependencyEdge(\r\n  info: IStructuredPathInfo,\r\n  type: DependencyType,\r\n): IDependencyEdge {\r\n  const key = createDependencyKey(info, type);\r\n  return cache[key] ?? (cache[key] = { info, type });\r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { createDependencyKey } from \"./createDependencyEdge\";\r\nimport { DependencyType } from \"./types\";\r\n\r\nclass dependencyWalker {\r\n  engine: IComponentEngine;\r\n  entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null };\r\n  traced: Set<string> = new Set<string>();\r\n  constructor(\r\n    engine: IComponentEngine,\r\n    entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null },\r\n  ) {\r\n    this.engine = engine;\r\n    this.entryRef = entryRef;\r\n  }\r\n\r\n  walkSub(\r\n    info: IStructuredPathInfo,\r\n    type: DependencyType,\r\n    callback: (ref: IStatePropertyRef, info: IStructuredPathInfo, type: DependencyType) => void\r\n  ) {\r\n    const key = createDependencyKey(info, type);\r\n    if (this.traced.has(key)) {\r\n      return;\r\n    }\r\n    this.traced.add(key);\r\n    callback(this.entryRef, info, type);\r\n    const edges = this.engine.dependentTree.get(info) ?? [];\r\n    for(const edge of edges) {\r\n      const overridedType = edge.type === \"structured\" ? type : edge.type;\r\n      this.walkSub(edge.info, overridedType, callback);\r\n    }\r\n\r\n  }\r\n  walk(\r\n    callback: (ref: IStatePropertyRef, info: IStructuredPathInfo, type: DependencyType) => void\r\n  ) {\r\n    const traced = new Set<IStructuredPathInfo>();\r\n    this.walkSub(this.entryRef.info, \"structured\", callback);\r\n  } \r\n\r\n}\r\n\r\nexport function createDependencyWalker(\r\n  engine: IComponentEngine,\r\n  entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null },\r\n) {\r\n  return new dependencyWalker(engine, entryRef);\r\n}","import { IListIndex } from \"./types\";\r\n\r\nclass ListIndex implements IListIndex {\r\n  static id: number = 0;\r\n  id              : number = ++ListIndex.id;\r\n  #parentListIndex: IListIndex | null = null;\r\n  get parentListIndex(): IListIndex | null {\r\n    return this.#parentListIndex;\r\n  }\r\n  index: number;\r\n  get indexes(): number[] {\r\n    const indexes = this.parentListIndex?.indexes ?? [];\r\n    indexes.push(this.index);\r\n    return indexes;\r\n  }\r\n\r\n  get position(): number {\r\n    return (this.parentListIndex?.position ?? -1) + 1;\r\n  }\r\n\r\n  get length(): number {\r\n    return (this.parentListIndex?.length ?? 0) + 1;\r\n  }\r\n  \r\n  constructor(\r\n    parentListIndex: IListIndex | null,\r\n    index: number\r\n  ) {\r\n    this.#parentListIndex = parentListIndex;\r\n    this.index = index;\r\n  }\r\n  \r\n  truncate(length: number): IListIndex | null {\r\n    let listIndex: IListIndex | null = this;\r\n    while(listIndex !== null) {\r\n      if (listIndex.position < length) return listIndex;\r\n      listIndex = listIndex.parentListIndex;\r\n    }\r\n    return null;\r\n  }\r\n  add(value: number): IListIndex {\r\n    return new ListIndex(this, value);\r\n  }\r\n\r\n  *reverseIterator(): Generator<IListIndex> {\r\n    yield this;\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.reverseIterator();\r\n    }\r\n    return;\r\n  }\r\n\r\n  *iterator(): Generator<IListIndex> {\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.iterator();\r\n    }\r\n    yield this;\r\n    return;\r\n  }\r\n\r\n  toString(): string {\r\n    const parentListIndex = this.parentListIndex?.toString();\r\n    return (parentListIndex !== null) ? parentListIndex + \",\" + this.index.toString() : this.index.toString();\r\n  }\r\n\r\n  #atcache:{[key:number]:(WeakRef<IListIndex> | null)} = {};\r\n  at(position: number): IListIndex | null {\r\n    const value = this.#atcache[position];\r\n    if (value !== undefined) {\r\n      return value ? (value.deref() ?? null) : null;\r\n    }\r\n    let iterator;\r\n    if (position >= 0) {\r\n      iterator = this.iterator();\r\n    } else {\r\n      position = - position - 1 \r\n      iterator = this.reverseIterator();\r\n    }\r\n    let next;\r\n    while(position >= 0) {\r\n      next = iterator.next();\r\n      position--;\r\n    }\r\n    const lisIndex = next?.value ?? null;\r\n    this.#atcache[position] = lisIndex ? new WeakRef(lisIndex) : null;\r\n    return lisIndex;\r\n  }\r\n  \r\n}\r\n\r\nexport function createListIndex(\r\n  parentListIndex: IListIndex | null,\r\n  index          : number\r\n): IListIndex {\r\n  return new ListIndex(parentListIndex, index);\r\n}\r\n\r\nexport function getMaxListIndexId(): number {\r\n  return ListIndex.id;\r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\n\r\nfunction listWalkerSub(\r\n  engine: IComponentEngine,\r\n  info: IStructuredPathInfo, \r\n  listIndex: IListIndex | null, \r\n  callback:(info: IStructuredPathInfo, listIndex: IListIndex | null)=> void\r\n) {\r\n  const listIndexLen = listIndex?.length ?? 0;\r\n  if (info.wildcardCount === listIndexLen) {\r\n    callback(info, listIndex);\r\n  } else {\r\n    const parentInfo = info.wildcardParentInfos[listIndexLen] ?? raiseError(\"Invalid state property info\");\r\n    const listIndexes = engine.getListIndexesSet(parentInfo, listIndex);\r\n    for(const subListIndex of listIndexes ?? []) {\r\n      listWalkerSub(engine, info, subListIndex, callback);\r\n    }\r\n  }\r\n}\r\n\r\nexport function listWalker(\r\n  engine: IComponentEngine,\r\n  info:IStructuredPathInfo, \r\n  listIndex: IListIndex | null,\r\n  callback:(info: IStructuredPathInfo, listIndex: IListIndex | null)=> void\r\n) {\r\n  listWalkerSub(engine, info, listIndex, callback);\r\n}\r\n","import { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\n\r\nexport function createRefKey(\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n) {\r\n  return info.id + \":\" + (listIndex?.id ?? 0);\r\n}\r\n\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { createDependencyWalker } from \"../DependencyWalker/createDependencyWalker\";\r\nimport { createListIndex } from \"../ListIndex/createListIndex\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { listWalker } from \"../ListWalker/listWalker\";\r\nimport { GetByRefSymbol } from \"../StateClass/symbols\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { createRefKey } from \"../StatePropertyRef/getStatePropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst BLANK_LISTINDEXES_SET = new Set<IListIndex>();\r\n\r\nfunction buildListIndexTree(\r\n  engine   : IComponentEngine, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value: any[]\r\n): void {\r\n  const oldValue = engine.getList(info, listIndex) ?? [];\r\n  if (oldValue === value) {\r\n    return;\r\n  }\r\n  const newListIndexesSet:Set<IListIndex> = new Set();\r\n  const oldListIndexesSet = engine.getListIndexesSet(info, listIndex) ?? BLANK_LISTINDEXES_SET;\r\n  const oldListIndexesByItem = Map.groupBy(oldListIndexesSet, listIndex => oldValue[listIndex.index]);\r\n  for(let i = 0; i < value.length; i++) {\r\n    // リスト要素から古いリストインデックスを取得して、リストインデックスを更新する\r\n    // もし古いリストインデックスがなければ、新しいリストインデックスを作成する\r\n    let curListIndex = oldListIndexesByItem.get(value[i])?.shift() ?? createListIndex(listIndex, i);\r\n    if (curListIndex.index !== i) {\r\n      curListIndex.index = i;\r\n      // リストインデックスのインデックスを更新したので、リストインデックスを登録する\r\n      engine.updater.addUpdatedListIndex(curListIndex);\r\n    }\r\n    // リストインデックスを新しいリストインデックスセットに追加する\r\n    newListIndexesSet.add(curListIndex);\r\n  }\r\n  // 新しいリストインデックスセットを保存する\r\n  engine.saveListIndexesSet(info, listIndex, newListIndexesSet);\r\n  engine.saveList(info, listIndex, value.slice(0)); // コピーを保存\r\n\r\n}\r\n\r\nexport function restructListIndexes(\r\n  infos: IStatePropertyRef[],\r\n  engine: IComponentEngine,\r\n  updateValues: {[key:string]: any[]},\r\n  refKeys: Set<string>,\r\n  cache: Map<IStructuredPathInfo, Set<IListIndex|null>>,\r\n) {\r\n  for(const {info, listIndex} of infos) {\r\n    if (config.optimizeListElements && engine.elementInfoSet.has(info)) {\r\n      // スワップ処理のためスキップ\r\n      continue;\r\n    }\r\n    const dependentWalker = createDependencyWalker(engine, {info, listIndex});\r\n    const nowOnList = config.optimizeList && engine.listInfoSet.has(info);\r\n    dependentWalker.walk((ref, refInfo, type) => {\r\n      if (nowOnList && type === \"structured\" && ref.info !== refInfo) {\r\n        if (refInfo.cumulativeInfoSet.has(ref.info)) {\r\n          return;\r\n        }\r\n      }\r\n      const wildcardMatchPaths = Array.from(ref.info.wildcardInfoSet.intersection(refInfo.wildcardInfoSet));\r\n      const longestMatchAt = (wildcardMatchPaths.at(-1)?.wildcardCount ?? 0) - 1;\r\n      const listIndex = (longestMatchAt >= 0) ? (ref.listIndex?.at(longestMatchAt) ?? null) : null;\r\n      listWalker(engine, refInfo, listIndex, (_info, _listIndex) => {\r\n        if (!engine.existsBindingsByInfo(_info)) {\r\n          return;\r\n        }\r\n        const refKey = createRefKey(_info, _listIndex);\r\n        if (refKeys.has(refKey)) {\r\n          return;\r\n        }\r\n        let cacheListIndexSet = cache.get(_info);\r\n        if (!cacheListIndexSet) {\r\n          cacheListIndexSet = new Set<IListIndex|null>();\r\n          cache.set(_info, cacheListIndexSet);\r\n        }\r\n        cacheListIndexSet.add(_listIndex);\r\n        refKeys.add(refKey);\r\n        if (engine.listInfoSet.has(_info)) {\r\n          const values = updateValues[refKey] ?? engine.readonlyState[GetByRefSymbol](_info, _listIndex);\r\n          buildListIndexTree(engine, _info, _listIndex, values);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n","import { IBinding } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { render } from \"../Render/render.js\";\r\nimport { SetCacheableSymbol } from \"../StateClass/symbols.js\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { getGlobalConfig } from \"../WebComponents/getGlobalConfig.js\";\r\nimport { IUpdater } from \"./types\";\r\nimport { restructListIndexes } from \"./restructListIndex\";\r\nimport { createRefKey } from \"../StatePropertyRef/getStatePropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\n\r\ntype UpdatedArrayElementBinding = {\r\n  parentRef: IStatePropertyRef;\r\n  binding: IBinding;\r\n  listIndexes: IListIndex[];\r\n  values: any[];\r\n};\r\n\r\nclass Updater implements IUpdater {\r\n  processList      : (() => Promise<void> | void)[] = [];\r\n  updatedProperties: Set<IStatePropertyRef | IListIndex> = new Set;\r\n  updatedValues    : {[key:string]: any} = {};\r\n  engine           : IComponentEngine;\r\n  #version         : number = 0;\r\n\r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  get version(): number {\r\n    return this.#version;\r\n  }\r\n\r\n  addProcess(process: () => Promise<void> | void): void {\r\n    this.processList.push(process);\r\n    this.waitForQueueEntry.resolve();\r\n  }\r\n\r\n  addUpdatedStatePropertyRefValue(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any\r\n  ): void {\r\n    const refKey = createRefKey(info, listIndex);\r\n    this.updatedProperties.add({info, listIndex});\r\n    this.updatedValues[refKey] = value;\r\n    this.waitForQueueEntry.resolve();\r\n  }\r\n\r\n  addUpdatedListIndex(listIndex: IListIndex): void {\r\n    this.updatedProperties.add(listIndex);\r\n    this.waitForQueueEntry.resolve();\r\n  }\r\n\r\n  terminate(): PromiseWithResolvers<void> {\r\n    const waitForMainLoopTerminate = Promise.withResolvers<void>();\r\n    this.waitForQueueEntry.resolve(waitForMainLoopTerminate);\r\n    return waitForMainLoopTerminate;\r\n  }\r\n\r\n  waitForQueueEntry: PromiseWithResolvers<PromiseWithResolvers<void> | void> = \r\n    Promise.withResolvers<PromiseWithResolvers<void> | void>();\r\n  async main(waitForComponentInit: PromiseWithResolvers<void>) {\r\n    await waitForComponentInit.promise;\r\n    const config = getGlobalConfig();\r\n    while (true) {\r\n      try {\r\n        const waitForMainLoopTerminate: (PromiseWithResolvers<void> | void) = \r\n          await this.waitForQueueEntry.promise;\r\n          config.debug && performance.mark(`start`);\r\n        Updater.updatingCount++;\r\n        try {\r\n          await this.exec();\r\n          if (config.debug) {\r\n            performance.mark(`end`);\r\n            performance.measure(`exec`, `start`, `end`);\r\n            console.log(performance.getEntriesByType(\"measure\"));    \r\n            performance.clearMeasures(`exec`);\r\n            performance.clearMarks(`start`);\r\n            performance.clearMarks(`end`);\r\n          }\r\n        } finally {\r\n          Updater.updatingCount--;\r\n          if (waitForMainLoopTerminate) {\r\n            waitForMainLoopTerminate.resolve();\r\n            break;\r\n          }\r\n        }\r\n      } catch(e) {\r\n        console.error(e);\r\n      } finally {\r\n        this.waitForQueueEntry = Promise.withResolvers<PromiseWithResolvers<void> | void>();\r\n      }\r\n    }\r\n  }\r\n\r\n  async updateState() {\r\n    while(this.processList.length > 0) {\r\n      const processList = this.processList;\r\n      this.processList = [];\r\n      for(let i = 0; i < processList.length; i++) {\r\n        const process = processList[i];\r\n        await process();\r\n      }\r\n    }\r\n  }\r\n\r\n  async rebuild(): Promise<{bindings: IBinding[], arrayElementBindings: UpdatedArrayElementBinding[]}> {\r\n    const retArrayElementBindings: UpdatedArrayElementBinding[] = [];\r\n    const retBindings: IBinding[] = [];\r\n    const engine = this.engine;\r\n    while(this.updatedProperties.size > 0) {\r\n      const updatedProiperties = Array.from(this.updatedProperties.values());\r\n      this.updatedProperties.clear();\r\n      const bindingsByListIndex: IBinding[] = [];\r\n      const updatedRefs: IStatePropertyRef[] = []; // 更新されたプロパティ参照のリスト\r\n      const arrayElementBindingByParentRefKey = new Map<string, Partial<UpdatedArrayElementBinding>>();\r\n      for(let i = 0; i < updatedProiperties.length; i++) {\r\n        const item = updatedProiperties[i];\r\n        if (\"index\" in item) {\r\n          const bindings = engine.bindingsByListIndex.get(item as IListIndex) ?? [];\r\n          bindingsByListIndex.push(...bindings);\r\n        } else {\r\n          updatedRefs.push(item as IStatePropertyRef);\r\n          if (engine.elementInfoSet.has(item.info)) {\r\n            const parentInfo = item.info.parentInfo ?? raiseError(\"info is null\"); // リストのパス情報\r\n            const parentListIndex = item.listIndex?.at(-2) ?? null; // リストのインデックス\r\n            const parentRef = {info: parentInfo, listIndex: parentListIndex};\r\n            const parentRefKey = createRefKey(parentInfo, parentListIndex);\r\n            let info = arrayElementBindingByParentRefKey.get(parentRefKey);\r\n            if (!info) {\r\n              info = {\r\n                parentRef,\r\n                listIndexes: [],\r\n                values: []\r\n              };\r\n              arrayElementBindingByParentRefKey.set(parentRefKey, info);\r\n            }\r\n            const refKey = createRefKey(item.info, item.listIndex);\r\n            const value = this.updatedValues[refKey] ?? null;\r\n            info.values?.push(value);\r\n            info.listIndexes?.push(item.listIndex as IListIndex);\r\n          }\r\n        }\r\n      }\r\n      // リストインデックスの構築\r\n      const builtStatePropertyRefKeySet = new Set<string>();\r\n      const affectedRefs = new Map<IStructuredPathInfo, Set<IListIndex|null>>();\r\n      restructListIndexes(updatedRefs, engine, this.updatedValues, builtStatePropertyRefKeySet, affectedRefs);\r\n\r\n      // スワップの場合の情報を構築する\r\n      for(const [parentRefKey, info] of arrayElementBindingByParentRefKey) {\r\n        const parentInfo = info.parentRef?.info ?? raiseError(\"parentInfo is null\");\r\n        const parentListIndex = info.parentRef?.listIndex ?? null;\r\n        const bindings = engine.getBindings(parentInfo, parentListIndex);\r\n        for(const binding of bindings) {\r\n          if (!binding.bindingNode.isFor) {\r\n            continue;\r\n          }\r\n          const bindingInfo = Object.assign({}, info, { binding });\r\n          retArrayElementBindings.push(bindingInfo as UpdatedArrayElementBinding);\r\n        }\r\n      }\r\n      // 影響する全てのバインド情報を取得する\r\n      for(const [ info, listIndexes ] of affectedRefs.entries()) {\r\n        for(const listIndex of listIndexes) {\r\n          const bindings = engine.getBindings(info, listIndex);\r\n          retBindings.push(...bindings ?? []);\r\n        }\r\n      }\r\n      retBindings.push(...bindingsByListIndex);\r\n    }\r\n    this.updatedValues = {};\r\n    return {bindings: retBindings, arrayElementBindings: retArrayElementBindings};\r\n  }\r\n\r\n  async render(bindings: IBinding[]) {\r\n    this.#version++;\r\n    await this.engine.readonlyState[SetCacheableSymbol](async () => {\r\n      return render(bindings);\r\n    });\r\n  }\r\n\r\n  async exec() {\r\n    while(this.processList.length !== 0 || this.updatedProperties.size !== 0) {\r\n      // update state\r\n      await this.updateState();\r\n      // rebuild\r\n      const { bindings, arrayElementBindings } = await this.rebuild();\r\n      // render\r\n      for(const arrayElementBinding of arrayElementBindings) {\r\n        arrayElementBinding.binding.bindingNode.updateElements(arrayElementBinding.listIndexes, arrayElementBinding.values);\r\n      }\r\n      if (bindings.length > 0) {\r\n        await this.render(bindings);\r\n      }\r\n    }\r\n  }\r\n\r\n  static updatingCount = 0;\r\n}\r\n\r\nexport function createUpdater(engine: IComponentEngine): IUpdater {\r\n  return new Updater(engine);\r\n}\r\n\r\nexport function getUpdatingCount(): number {\r\n  return Updater.updatingCount;\r\n}","import { raiseError } from \"../utils.js\";\r\nimport { IComponentConfig } from \"../WebComponents/types\";\r\nimport { canHaveShadowRoot } from \"./canHaveShadowRoot.js\";\r\n\r\nfunction getParentShadowRoot(parentNode: Node | null): ShadowRoot|undefined{\r\n  let node: Node | null = parentNode;\r\n  while(node) {\r\n    if (node instanceof ShadowRoot) {\r\n      return node;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n}\r\n\r\nexport function attachShadow(element: HTMLElement, config: IComponentConfig, styleSheet: CSSStyleSheet): void {\r\n    if (config.enableShadowDom) {\r\n      if (config.extends === null || canHaveShadowRoot(config.extends)) {\r\n        const shadowRoot = element.attachShadow({ mode: 'open' });\r\n        shadowRoot.adoptedStyleSheets = [styleSheet];\r\n      } else {\r\n        raiseError(`ComponentEngine: Shadow DOM not supported for builtin components that extend ${config.extends}`);\r\n      }\r\n    } else {\r\n      const shadowRootOrDocument = getParentShadowRoot(element.parentNode) || document;\r\n      const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n      if (!styleSheets.includes(styleSheet)) {\r\n        shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, styleSheet];\r\n      }\r\n    }\r\n\r\n}","export function canHaveShadowRoot(tagName: string): boolean {\r\n  try {\r\n    // 一時的に要素を作成\r\n    const element = document.createElement(tagName);\r\n    // `attachShadow` メソッドが存在し、実行可能かを確認\r\n    return typeof element.attachShadow === \"function\";\r\n  } catch {\r\n    // 無効なタグ名などが渡された場合は false を返す\r\n    return false;\r\n  }\r\n}","import { createListIndex } from \"../ListIndex/createListIndex.js\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { GetByRefSymbol } from \"./symbols.js\";\r\n\r\nconst BLANK_LISTINDEXES_SET = new Set<IListIndex>();\r\n\r\nfunction buildListIndexTreeSub(\r\n  engine   : IComponentEngine, \r\n  listInfos: Set<IStructuredPathInfo>,\r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value: any[]\r\n): void {\r\n  const oldValue = engine.getList(info, listIndex) ?? [];\r\n  if (oldValue === value) {\r\n    return;\r\n  }\r\n  const newListIndexesSet:Set<IListIndex> = new Set();\r\n  const oldListIndexesSet = engine.getListIndexesSet(info, listIndex) ?? BLANK_LISTINDEXES_SET;\r\n  const oldListIndexesByItem = Map.groupBy(oldListIndexesSet, listIndex => oldValue[listIndex.index]);\r\n  for(let i = 0; i < value.length; i++) {\r\n    // リスト要素から古いリストインデックスを取得して、リストインデックスを更新する\r\n    // もし古いリストインデックスがなければ、新しいリストインデックスを作成する\r\n    let curListIndex = oldListIndexesByItem.get(value[i])?.shift() ?? createListIndex(listIndex, i);\r\n    if (curListIndex.index !== i) {\r\n      curListIndex.index = i;\r\n      // リストインデックスのインデックスを更新したので、リストインデックスを登録する\r\n      engine.updater.addUpdatedListIndex(curListIndex);\r\n    }\r\n    // リストインデックスを新しいリストインデックスセットに追加する\r\n    newListIndexesSet.add(curListIndex);\r\n  }\r\n  // 新しいリストインデックスセットを保存する\r\n  engine.saveListIndexesSet(info, listIndex, newListIndexesSet);\r\n  engine.saveList(info, listIndex, value.slice(0)); // コピーを保存\r\n\r\n  // サブ要素のリストインデックスを構築する\r\n  const searchPath = info.pattern + \".*\";\r\n  for(const info of listInfos) {\r\n    if (searchPath !== info.lastWildcardPath) {\r\n      continue;\r\n    }\r\n    for(const subListIndex of newListIndexesSet) {\r\n      const subValue = engine.readonlyState[GetByRefSymbol](info, subListIndex);\r\n      buildListIndexTreeSub(\r\n        engine, \r\n        listInfos, \r\n        info, \r\n        subListIndex, \r\n        subValue ?? []\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function buildListIndexTree(\r\n  engine   : IComponentEngine, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value    : any\r\n): void {\r\n  const listInfos = engine.listInfoSet;\r\n  // 配列じゃなければ何もしない\r\n  if (!engine.listInfoSet.has(info)) {\r\n    return;\r\n  }\r\n  const values = (value ?? []) as any[];\r\n  buildListIndexTreeSub(\r\n    engine, \r\n    engine.listInfoSet, \r\n    info, \r\n    listIndex, \r\n    values\r\n  );\r\n}\r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { createRefKey } from \"../../StatePropertyRef/getStatePropertyRef\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setTracking } from \"./setTracking.js\";\r\n\r\nfunction _getByRef(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  receiver : IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  if (handler.lastTrackingStack != null && handler.lastTrackingStack !== info) {\r\n    const lastPattern = handler.lastTrackingStack;\r\n    if (lastPattern.parentInfo !== info) {\r\n      handler.engine.addDependentProp(lastPattern, info, \"reference\");\r\n    }\r\n  }\r\n\r\n  let refKey = '';\r\n  if (handler.cacheable) {\r\n    refKey = createRefKey(info, listIndex);\r\n    const value = handler.cache[refKey];\r\n    if (typeof value !== \"undefined\") {\r\n      return value;\r\n    }\r\n    if (refKey in handler.cache) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  let value;\r\n  try {\r\n    if (info.pattern in target) {\r\n      return (value = handler.engine.setStatePropertyRef(info, listIndex, () => {\r\n        return Reflect.get(target, info.pattern, receiver);\r\n      }));\r\n    } else {\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRef(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return (value = Reflect.get(parentValue, index));\r\n      } else {\r\n        return (value = Reflect.get(parentValue, lastSegment));\r\n      }\r\n    }\r\n  } finally {\r\n    if (handler.cacheable && !(refKey in handler.cache)) {\r\n      handler.cache[refKey] = value;\r\n    }\r\n  }\r\n}\r\n\r\nexport function getByRef(\r\n    target   : Object, \r\n    info     : IStructuredPathInfo,\r\n    listIndex: IListIndex | null,\r\n    receiver : IStateProxy,\r\n    handler  : IStateHandler\r\n  ): any {\r\n    if (handler.engine.trackedGetters.has(info.pattern)) {\r\n      return setTracking(info, handler, () => {\r\n        return _getByRef(target, info, listIndex, receiver, handler);\r\n      });\r\n    } else {\r\n      return _getByRef(target, info, listIndex, receiver, handler);\r\n    }\r\n\r\n  }\r\n","import { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function setTracking(info: IStructuredPathInfo, handler: IStateHandler, callback: () => any): any {\r\n  handler.trackingStack.push(info);\r\n  handler.lastTrackingStack = info;\r\n  try {\r\n    return callback();\r\n  } finally {\r\n    handler.trackingStack.pop();\r\n    handler.lastTrackingStack = handler.trackingStack[handler.trackingStack.length - 1] ?? null;\r\n  }\r\n}\r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef as methodGetByRef } from \"../methods/getByRef.js\";\r\n\r\nexport function getByRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (pattern: IStructuredPathInfo, listIndex: IListIndex | null) => \r\n    methodGetByRef(target, pattern, listIndex, receiver, handler);\r\n} \r\n","import { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setCacheable as methodSetChargeable } from \"../methods/setCacheable.js\";\r\n\r\nexport function setCacheable(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async (callback: () => Promise<void>) => {\r\n    await methodSetChargeable(handler, callback);\r\n  }\r\n}","import { IStateHandler } from \"../types\";\r\n\r\nexport async function setCacheable(handler: IStateHandler, callback: () => Promise<void>): Promise<void> {\r\n  handler.cacheable = true;\r\n  handler.cache = {}\r\n  try {\r\n    await callback();\r\n  } finally {\r\n    handler.cacheable = false;\r\n  }\r\n}\r\n","import { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst CONNECTED_CALLBACK = \"$connectedCallback\";\r\n\r\nexport function connectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, CONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","import { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst DISCONNECTED_CALLBACK = \"$disconnectedCallback\";\r\n\r\nexport function disconnectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, DISCONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef } from \"./getByRef.js\";\r\n\r\nexport function setByRef(\r\n    target   : Object, \r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any, \r\n    receiver : IStateProxy,\r\n    handler  : IStateHandler\r\n): any {\r\n  try {\r\n    if (info.pattern in target) {\r\n      if (info.wildcardCount > 0) {\r\n        if (listIndex === null) {\r\n          raiseError(`propRef.listIndex is null`);\r\n        }\r\n        return handler.engine.setStatePropertyRef(info, listIndex, () => {\r\n          return Reflect.set(target, info.pattern, value, receiver);\r\n        });\r\n      } else {\r\n        return Reflect.set(target, info.pattern, value, receiver);\r\n      }\r\n    } else {\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRef(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return Reflect.set(parentValue, index, value);\r\n      } else {\r\n        return Reflect.set(parentValue, lastSegment, value);\r\n      }\r\n    }\r\n  } finally {\r\n    handler.engine.updater.addUpdatedStatePropertyRefValue(info, listIndex, value);\r\n  }\r\n}\r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef } from \"../methods/getByRef.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\n\r\nexport function resolve(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (path: string, indexes: number[], value?:any): any => {\r\n    const info = getStructuredPathInfo(path);\r\n    let listIndex: IListIndex | null = null;\r\n    for(let i = 0; i < info.wildcardParentInfos.length; i++) {\r\n      const wildcardParentPattern = info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPath is null`);\r\n      const listIndexes: IListIndex[] = Array.from(handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? []);\r\n      const index = indexes[i] ?? raiseError(`index is null`);\r\n      listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    if (typeof value === \"undefined\") {\r\n      return getByRef(target, info, listIndex, receiver, handler);\r\n    } else {\r\n      return setByRef(target, info, listIndex, value, receiver, handler);\r\n    }\r\n  };\r\n} ","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { resolve as _resolve } from \"./resolve.js\";\r\n\r\nexport function getAll(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n    const resolve = _resolve(target, prop, receiver, handler);\r\n    return (path: string, indexes?: number[]): any[] => {\r\n      const info = getStructuredPathInfo(path);\r\n      if (handler.lastTrackingStack != null && handler.lastTrackingStack !== info) {\r\n        const lastPattern = handler.lastTrackingStack;\r\n        if (lastPattern.parentInfo !== info) {\r\n          handler.engine.addDependentProp(lastPattern, info, \"reference\");\r\n        }\r\n      }\r\n  \r\n      if (typeof indexes === \"undefined\") {\r\n        for(let i = 0; i < info.wildcardInfos.length; i++) {\r\n          const wildcardPattern = info.wildcardInfos[i] ?? raiseError(`wildcardPattern is null`);\r\n          const listIndex = handler.engine.getContextListIndex(wildcardPattern.pattern);\r\n          if (listIndex) {\r\n            indexes = listIndex.indexes;\r\n            break;\r\n          }\r\n        }\r\n        if (typeof indexes === \"undefined\") {\r\n          indexes = [];\r\n        }\r\n      }\r\n      const walkWildcardPattern = (\r\n        wildcardParentInfos: IStructuredPathInfo[],\r\n        wildardIndexPos: number,\r\n        listIndex: IListIndex | null,\r\n        indexes: number[],\r\n        indexPos: number,\r\n        parentIndexes: number[],\r\n        results: number[][]\r\n      ) => {\r\n        const wildcardParentPattern = wildcardParentInfos[wildardIndexPos] ?? null;\r\n        if (wildcardParentPattern === null) {\r\n          results.push(parentIndexes);\r\n          return;\r\n        }\r\n        const listIndexSet = handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n        const listIndexes = Array.from(listIndexSet);\r\n        const index = indexes[indexPos] ?? null;\r\n        if (index === null) {\r\n          for(let i = 0; i < listIndexes.length; i++) {\r\n            const listIndex = listIndexes[i];\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results);\r\n          }\r\n        } else {\r\n          const listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n          if ((wildardIndexPos + 1) < wildcardParentInfos.length) {\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results\r\n            );\r\n          }\r\n        }\r\n      }\r\n      const resultIndexes: number[][] = [];\r\n      walkWildcardPattern(\r\n        info.wildcardParentInfos, \r\n        0, \r\n        null, \r\n        indexes, \r\n        0, \r\n        [], \r\n        resultIndexes\r\n      );\r\n      const resultValues: any[] = [];\r\n      for(let i = 0; i < resultIndexes.length; i++) {\r\n        resultValues.push(resolve(\r\n          info.pattern,\r\n          resultIndexes[i]\r\n        ));\r\n      }\r\n      return resultValues;\r\n    }\r\n  }","\r\nimport { IResolvedPathInfo, WildcardType } from './types';\r\nimport { getStructuredPathInfo } from './getStructuredPathInfo.js';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IResolvedPathInfo } = {};\r\n//const _cache: Map<string, IResolvedPathInfo> = new Map();\r\n\r\nclass ResolvedPathInfo implements IResolvedPathInfo {\r\n  static id : number = 0;\r\n  id = ++ResolvedPathInfo.id;\r\n  name;\r\n  elements;\r\n  paths;\r\n  wildcardCount;\r\n  wildcardType;\r\n  wildcardIndexes;\r\n  info;\r\n  constructor(name: string) {\r\n    const elements = name.split(\".\");\r\n    const tmpPatternElements = elements.slice();\r\n    const paths = [];\r\n    let incompleteCount = 0;\r\n    let completeCount = 0;\r\n    let lastPath = \"\";\r\n    let wildcardCount = 0;\r\n    let wildcardType: WildcardType = \"none\";\r\n    let wildcardIndexes: (number | null)[] = [];\r\n    for(let i = 0; i < elements.length; i++) {\r\n      const element = elements[i];\r\n      if (element === \"*\") {\r\n        tmpPatternElements[i] = \"*\";\r\n        wildcardIndexes.push(null);\r\n        incompleteCount++;\r\n        wildcardCount++;\r\n      } else {\r\n        const number = Number(element);\r\n        if (!Number.isNaN(number)) {\r\n          tmpPatternElements[i] = \"*\";\r\n          wildcardIndexes.push(number);\r\n          completeCount++;\r\n          wildcardCount++;\r\n        }\r\n      }\r\n      lastPath += element;\r\n      paths.push(lastPath);\r\n      lastPath += (i < elements.length - 1 ? \".\" : \"\");\r\n    }\r\n    const pattern = tmpPatternElements.join(\".\");\r\n    const info = getStructuredPathInfo(pattern);\r\n    if (incompleteCount > 0 || completeCount > 0) {\r\n      if (incompleteCount === wildcardCount) {\r\n        wildcardType = \"context\";\r\n      } else if (completeCount === wildcardCount) {\r\n        wildcardType = \"all\";\r\n      } else {\r\n        wildcardType = \"partial\";\r\n      }\r\n    }\r\n    this.name = name;\r\n    this.elements = elements;\r\n    this.paths = paths;\r\n    this.wildcardCount = wildcardCount;\r\n    this.wildcardType = wildcardType;\r\n    this.wildcardIndexes = wildcardIndexes;\r\n    this.info = info;\r\n  }\r\n}\r\n\r\nexport function getResolvedPathInfo(name:string):IResolvedPathInfo {\r\n  let nameInfo: IResolvedPathInfo | undefined;\r\n//  return _cache.get(name) ?? (_cache.set(name, nameInfo = new ResolvedPathInfo(name)), nameInfo);\r\n  return _cache[name] ?? (_cache[name] = new ResolvedPathInfo(name));\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IResolvedPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nexport function getListIndex(\r\n  info: IResolvedPathInfo, \r\n  engine: IComponentEngine\r\n): IListIndex | null {\r\n  if (info.info.wildcardCount === 0) {\r\n    return null;\r\n  }\r\n  let listIndex: IListIndex | null = null;\r\n  const lastWildcardPath = info.info.lastWildcardPath ?? \r\n    raiseError(`lastWildcardPath is null`);\r\n  if (info.wildcardType === \"context\") {\r\n    listIndex = engine.getContextListIndex(lastWildcardPath) ?? \r\n      raiseError(`ListIndex not found: ${info.info.pattern}`);\r\n  } else if (info.wildcardType === \"all\") {\r\n    let parentListIndex = null;\r\n    for(let i = 0; i < info.info.wildcardCount; i++) {\r\n      const wildcardParentPattern = info.info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPattern is null`);\r\n      const listIndexes: IListIndex[] = Array.from(engine.getListIndexesSet(wildcardParentPattern, parentListIndex) ?? []);\r\n      const wildcardIndex = info.wildcardIndexes[i] ?? raiseError(`wildcardIndex is null`);\r\n      parentListIndex = listIndexes[wildcardIndex] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    listIndex = parentListIndex;\r\n  } else if (info.wildcardType === \"partial\") {\r\n    // ToDo:listIndexを取得する必要がある\r\n  } else if (info.wildcardType === \"none\") {\r\n  }\r\n  return listIndex;\r\n}\r\n","import { getRouter } from \"../../Router/Router.js\";\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { getAll } from \"../apis/getAll.js\";\r\nimport { resolve } from \"../apis/resolve.js\";\r\nimport { getListIndex } from \"../getListIndex.js\";\r\nimport { getByRef } from \"../methods/getByRef.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nexport function get(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  let value;\r\n  if (typeof prop === \"string\") {\r\n    if (prop.charCodeAt(0) === 36) {\r\n      if (prop.length === 2) {\r\n        const d = prop.charCodeAt(1) - 48;\r\n        if (d >= 1 && d <= 9) {\r\n          const ref = handler.engine.getLastStatePropertyRef() ?? \r\n            raiseError(`get: this.engine.getLastStatePropertyRef() is null`);\r\n          return ref.listIndex?.at(d - 1)?.index ?? raiseError(`ListIndex not found: ${prop}`);\r\n        }\r\n      }\r\n      if (prop === \"$resolve\") {\r\n        return resolve(target, prop, receiver, handler);\r\n      } else if (prop === \"$getAll\") {\r\n        return getAll(target, prop, receiver, handler);\r\n      } else if (prop === \"$router\") {\r\n        return getRouter();\r\n      }\r\n    }\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, handler.engine);\r\n    value = getByRef(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      receiver,\r\n      handler\r\n    );\r\n\r\n  } else if (typeof prop === \"symbol\") {\r\n    if (prop in handler.callableApi) {\r\n      return handler.callableApi[prop](target, prop, receiver, handler);\r\n    }\r\n    value = Reflect.get(\r\n      target, \r\n      prop, \r\n      receiver\r\n    );\r\n  }\r\n  return value;\r\n}\r\n","import { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetAllSymbol, GetByRefSymbol, ResolveSymbol, SetByRefSymbol, SetCacheableSymbol } from \"./symbols.js\";\r\nimport { IReadonlyStateHandler, IState, IStateHandler, IStateProxy, IWritableStateHandler } from \"./types\";\r\nimport { getByRef as apiGetByRef } from \"./apis/getByRef.js\";\r\nimport { setByRef as apiSetByRef } from \"./apis/setByRef.js\";\r\nimport { setCacheable as apiSetCacheable } from \"./apis/setCacheable.js\";\r\nimport { connectedCallback } from \"./apis/connectedCallback.js\";\r\nimport { disconnectedCallback } from \"./apis/disconnectedCallback.js\";\r\nimport { resolve } from \"./apis/resolve.js\";\r\nimport { getAll } from \"./apis/getAll.js\";\r\nimport { get as trapGet } from \"./traps/get.js\";\r\nimport { set as trapSet } from \"./traps/set.js\";\r\nimport { raiseError } from \"../utils\";\r\n\r\nclass StateHandler implements IReadonlyStateHandler {\r\n  engine   : IComponentEngine;\r\n  cacheable: boolean = false;\r\n  cache    : {[key:number]:any} = {};\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: IStructuredPathInfo[] = [];\r\n  \r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  callableApi: { [key:symbol]: Function } = {\r\n    [GetByRefSymbol]: apiGetByRef, \r\n    [SetCacheableSymbol]: apiSetCacheable, \r\n    [ConnectedCallbackSymbol]: connectedCallback, \r\n    [DisconnectedCallbackSymbol]: disconnectedCallback, \r\n    [ResolveSymbol]: resolve, \r\n    [GetAllSymbol]: getAll,\r\n  };\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IStateProxy\r\n  ): boolean {\r\n    raiseError(`Cannot set property ${String(prop)} of readonly state.`);\r\n  }\r\n}\r\n\r\nexport function createReadonlyStateProxy(\r\n  engine: IComponentEngine, \r\n  state: Object\r\n): IStateProxy {\r\n  return new Proxy<IState>(state, new StateHandler(engine)) as IStateProxy;\r\n}\r\n\r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setByRef as methodSetByRef } from \"../methods/setByRef.js\";\r\n\r\nexport function setByRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (pattern: IStructuredPathInfo, listIndex: IListIndex | null, value: any) => \r\n    methodSetByRef(target, pattern, listIndex, value, receiver, handler);\r\n}","import { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetAllSymbol, GetByRefSymbol, ResolveSymbol, SetByRefSymbol, SetCacheableSymbol } from \"./symbols.js\";\r\nimport { IState, IStateHandler, IStateProxy, IWritableStateHandler } from \"./types\";\r\nimport { getByRef as apiGetByRef } from \"./apis/getByRef.js\";\r\nimport { setByRef as apiSetByRef } from \"./apis/setByRef.js\";\r\nimport { setCacheable as apiSetCacheable } from \"./apis/setCacheable.js\";\r\nimport { connectedCallback } from \"./apis/connectedCallback.js\";\r\nimport { disconnectedCallback } from \"./apis/disconnectedCallback.js\";\r\nimport { resolve } from \"./apis/resolve.js\";\r\nimport { getAll } from \"./apis/getAll.js\";\r\nimport { get as trapGet } from \"./traps/get.js\";\r\nimport { set as trapSet } from \"./traps/set.js\";\r\n\r\nclass StateHandler implements IWritableStateHandler {\r\n  engine   : IComponentEngine;\r\n  cacheable: boolean = false;\r\n  cache    : {[key:number]:any} = {};\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: IStructuredPathInfo[] = [];\r\n  \r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  callableApi: { [key:symbol]: Function } = {\r\n    [GetByRefSymbol]: apiGetByRef, \r\n    [SetByRefSymbol]: apiSetByRef, \r\n    [ConnectedCallbackSymbol]: connectedCallback, \r\n    [DisconnectedCallbackSymbol]: disconnectedCallback, \r\n    [ResolveSymbol]: resolve, \r\n    [GetAllSymbol]: getAll,\r\n  };\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IStateProxy\r\n  ): boolean {\r\n    return trapSet(target, prop, value, receiver, this);\r\n  }\r\n}\r\n\r\nexport function createWritableStateProxy(\r\n  engine: IComponentEngine, \r\n  state: Object\r\n): IStateProxy {\r\n  return new Proxy<IState>(state, new StateHandler(engine)) as IStateProxy;\r\n}\r\n\r\n","import { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { getListIndex } from \"../getListIndex.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nexport function set(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  value   : any, \r\n  receiver: IStateProxy,\r\n  handler : IStateHandler\r\n): boolean {\r\n  if (typeof prop === \"string\") {\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, handler.engine);\r\n    return setByRef(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      value, \r\n      receiver,\r\n      handler\r\n    );\r\n  } else {\r\n    return Reflect.set(\r\n      target, \r\n      prop, \r\n      value, \r\n      receiver\r\n    );\r\n  }\r\n}\r\n","import { createBindContent } from \"../DataBinding/BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../DataBinding/types\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { IState, IStateProxy, IStructiveState } from \"../StateClass/types\";\r\nimport { IUpdater } from \"../Updater/types\";\r\nimport { createUpdater } from \"../Updater/updater.js\";\r\nimport { ComponentType, IComponentConfig, IComponentStatic, StructiveComponent } from \"../WebComponents/types\";\r\nimport { attachShadow } from \"./attachShadow.js\";\r\nimport { ISaveInfoByResolvedPathInfo, IComponentEngine } from \"./types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { buildListIndexTree } from \"../StateClass/buildListIndexTree.js\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetByRefSymbol, SetCacheableSymbol } from \"../StateClass/symbols.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { BindParentComponentSymbol } from \"../ComponentState/symbols.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { DependencyType, IDependencyEdge } from \"../DependencyWalker/types.js\";\r\nimport { createDependencyEdge } from \"../DependencyWalker/createDependencyEdge.js\";\r\nimport { createReadonlyStateProxy } from \"../StateClass/createReadonlyStateProxy.js\";\r\nimport { createWritableStateProxy } from \"../StateClass/createWritableStateProxy.js\";\r\n\r\nexport class ComponentEngine implements IComponentEngine {\r\n  type          : ComponentType = 'autonomous';\r\n  config        : IComponentConfig;\r\n  template      : HTMLTemplateElement;\r\n  styleSheet    : CSSStyleSheet;\r\n  stateClass    : IStructiveState;\r\n  state         : IState;\r\n  readonlyState : IStateProxy;\r\n  updater       : IUpdater;\r\n  inputFilters  : FilterWithOptions;\r\n  outputFilters : FilterWithOptions;\r\n  bindContent   : IBindContent;\r\n  baseClass     : typeof HTMLElement = HTMLElement;\r\n  owner         : StructiveComponent;\r\n  trackedGetters: Set<string>;\r\n\r\n  listInfoSet         : Set<IStructuredPathInfo> = new Set();\r\n  elementInfoSet      : Set<IStructuredPathInfo> = new Set();\r\n  bindingsByListIndex : WeakMap<IListIndex, Set<IBinding>> = new WeakMap();\r\n  dependentTree       : Map<IStructuredPathInfo, Set<IDependencyEdge>> = new Map();\r\n\r\n  bindingsByComponent: WeakMap<StructiveComponent, Set<IBinding>> = new WeakMap();\r\n\r\n  #waitForInitialize : PromiseWithResolvers<void> = Promise.withResolvers<void>();\r\n  #loopContext       : ILoopContext | null = null;\r\n  #stackStructuredPathInfo  : IStructuredPathInfo[] = [];\r\n  #stackListIndex    : (IListIndex | null)[] = [];\r\n\r\n  constructor(config: IComponentConfig, owner: StructiveComponent) {\r\n    this.config = config;\r\n    if (this.config.extends) {\r\n      this.type = 'builtin';\r\n    }\r\n    const componentClass = owner.constructor as IComponentStatic;\r\n    this.template = componentClass.template;\r\n    this.styleSheet = componentClass.styleSheet;\r\n    this.stateClass = componentClass.stateClass;\r\n    this.state = new this.stateClass();\r\n    this.readonlyState = createReadonlyStateProxy(this, this.state);\r\n    this.updater = createUpdater(this);\r\n    this.inputFilters = componentClass.inputFilters;\r\n    this.outputFilters = componentClass.outputFilters;\r\n    this.owner = owner;\r\n    this.trackedGetters = componentClass.trackedGetters;\r\n    // 依存関係の木を作成する\r\n    const checkDependentProp = (info: IStructuredPathInfo) => {\r\n      const parentInfo = info.parentInfo;\r\n      if (parentInfo === null) return;\r\n      this.addDependentProp(info, parentInfo, \"structured\");\r\n      checkDependentProp(parentInfo);\r\n    }\r\n    for(const path of componentClass.paths) {\r\n      const info = getStructuredPathInfo(path);\r\n      checkDependentProp(info);\r\n    }\r\n    // 配列のプロパティ、配列要素のプロパティを登録する\r\n    for(const listPath of componentClass.listPaths) {\r\n      this.listInfoSet.add(getStructuredPathInfo(listPath));\r\n      this.elementInfoSet.add(getStructuredPathInfo(listPath + \".*\"));\r\n    }\r\n    this.bindContent = createBindContent(null, componentClass.id, this, null, null); // this.stateArrayPropertyNamePatternsが変更になる可能性がある\r\n    for(const info of this.listInfoSet) {\r\n      if (info.wildcardCount > 0) continue;\r\n      const value = this.readonlyState[GetByRefSymbol](info, null)\r\n      buildListIndexTree(this, info, null, value);\r\n    }\r\n  \r\n    this.updater.main(this.#waitForInitialize);\r\n  }\r\n\r\n  async connectedCallback(): Promise<void> {\r\n    if (this.owner.dataset.state) {\r\n      try {\r\n        const writableState = createWritableStateProxy(this, this.state);\r\n        const json = JSON.parse(this.owner.dataset.state);\r\n        for(const [key, value] of Object.entries(json)) {\r\n          const info = getStructuredPathInfo(key);\r\n          if (info.wildcardCount > 0) continue;\r\n          writableState[SetByRefSymbol](info, null, value);\r\n        }\r\n      } catch(e) {\r\n        raiseError(\"Failed to parse state from dataset\");\r\n      }\r\n    }\r\n    this.owner.state[BindParentComponentSymbol]();\r\n    attachShadow(this.owner, this.config, this.styleSheet);\r\n    await this.readonlyState[ConnectedCallbackSymbol]();\r\n    await this.readonlyState[SetCacheableSymbol](async () => {\r\n      this.bindContent.render();\r\n    });\r\n    this.bindContent.mount(this.owner.shadowRoot ?? this.owner);\r\n    this.#waitForInitialize.resolve();\r\n  }\r\n\r\n  async disconnectedCallback(): Promise<void> {\r\n    await this.readonlyState[DisconnectedCallbackSymbol]();\r\n  }\r\n\r\n  async setLoopContext(loopContext: ILoopContext, callback: ()=>Promise<void>): Promise<void> {\r\n    try {\r\n      if (this.#loopContext !== null) {\r\n        throw new Error(\"loopContext is already set\");\r\n      }\r\n      this.#loopContext = loopContext;\r\n      await this.asyncSetStatePropertyRef(loopContext.info, loopContext.listIndex, async () => {\r\n        await callback();\r\n      });\r\n    } finally {\r\n      this.#loopContext = null;\r\n    }\r\n  }\r\n\r\n  async asyncSetStatePropertyRef(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    callback : ()=>Promise<any>\r\n  ): Promise<any> {\r\n    this.#stackStructuredPathInfo.push(info);\r\n    this.#stackListIndex.push(listIndex);\r\n    try {\r\n      return await callback();\r\n    } finally {\r\n      this.#stackStructuredPathInfo.pop();\r\n      this.#stackListIndex.pop();\r\n    }\r\n  }\r\n\r\n  setStatePropertyRef(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    callback : ()=>any\r\n  ): any {\r\n    this.#stackStructuredPathInfo.push(info);\r\n    this.#stackListIndex.push(listIndex);\r\n    try {\r\n      return callback();\r\n    } finally {\r\n      this.#stackStructuredPathInfo.pop();\r\n      this.#stackListIndex.pop();\r\n    }\r\n  }\r\n\r\n  getLastStatePropertyRef(): {info:IStructuredPathInfo, listIndex:IListIndex | null} | null {\r\n    if (this.#stackStructuredPathInfo.length === 0) {\r\n      return null;\r\n    }\r\n    const info = this.#stackStructuredPathInfo[this.#stackStructuredPathInfo.length - 1];\r\n    if (typeof info === \"undefined\") {\r\n      return null;\r\n    }\r\n    const listIndex = this.#stackListIndex[this.#stackListIndex.length - 1];\r\n    if (typeof listIndex === \"undefined\") {\r\n      return null;\r\n    }\r\n    return {info, listIndex};\r\n  }\r\n\r\n  getContextListIndex(structuredPath: string): IListIndex | null{\r\n    const lastRef = this.getLastStatePropertyRef();\r\n    if (lastRef === null) {\r\n      return null;\r\n    }\r\n    const info = lastRef.info;\r\n    const index = info.wildcardPaths.indexOf(structuredPath);\r\n    if (index >= 0) {\r\n      return lastRef.listIndex?.at(index) ?? null;\r\n    }\r\n    return null;\r\n  }\r\n  getLoopContexts():ILoopContext[] {\r\n    if (this.#loopContext === null) {\r\n      throw new Error(\"loopContext is null\");\r\n    }\r\n    return this.#loopContext.serialize();\r\n  }\r\n\r\n  #saveInfoByListIndexByResolvedPathInfoId: { [id:number]: WeakMap<IListIndex,ISaveInfoByResolvedPathInfo> } = {};\r\n  #saveInfoByStructuredPathId: { [id:number]: ISaveInfoByResolvedPathInfo } = {};\r\n\r\n  createSaveInfo():ISaveInfoByResolvedPathInfo {\r\n    return {\r\n      list          : null,\r\n      listIndexesSet: null,\r\n      bindings      : [],\r\n    }\r\n  }\r\n\r\n  getSaveInfoByStatePropertyRef(info:IStructuredPathInfo, listIndex:IListIndex | null): ISaveInfoByResolvedPathInfo {\r\n    if (listIndex === null) {\r\n      let saveInfo = this.#saveInfoByStructuredPathId[info.id];\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        this.#saveInfoByStructuredPathId[info.id] = saveInfo;\r\n      }\r\n      return saveInfo;\r\n    } else {\r\n      let saveInfoByListIndex = this.#saveInfoByListIndexByResolvedPathInfoId[info.id];\r\n      if (typeof saveInfoByListIndex === \"undefined\") {\r\n        saveInfoByListIndex = new WeakMap<IListIndex, ISaveInfoByResolvedPathInfo>();\r\n        this.#saveInfoByListIndexByResolvedPathInfoId[info.id] = saveInfoByListIndex;\r\n      }\r\n      let saveInfo = saveInfoByListIndex.get(listIndex);\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        saveInfoByListIndex.set(listIndex, saveInfo);\r\n      }\r\n      return saveInfo;\r\n    }\r\n  }\r\n  \r\n  saveBinding(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    binding  : IBinding\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.bindings.push(binding);\r\n  }\r\n\r\n  saveListIndexesSet(\r\n    info              :IStructuredPathInfo, \r\n    listIndex         :IListIndex | null, \r\n    saveListIndexesSet:Set<IListIndex>\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.listIndexesSet = saveListIndexesSet;\r\n  }\r\n\r\n  saveList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null, \r\n    list     :any[]\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.list = list;\r\n  }\r\n\r\n  getBindings(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): IBinding[] {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.bindings;\r\n  }\r\n\r\n  existsBindingsByInfo(info: IStructuredPathInfo): boolean {\r\n    if (typeof this.#saveInfoByStructuredPathId[info.id] !== \"undefined\") {\r\n      return true;\r\n    }\r\n    if (typeof this.#saveInfoByListIndexByResolvedPathInfoId[info.id] !== \"undefined\") {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getListIndexesSet(info:IStructuredPathInfo, listIndex:IListIndex | null): Set<IListIndex> | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.listIndexesSet;\r\n  }\r\n    \r\n  getList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): any[] | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.list;\r\n  }\r\n\r\n  addDependentProp(info: IStructuredPathInfo, refInfo: IStructuredPathInfo, type: DependencyType) {\r\n    let dependents = this.dependentTree.get(refInfo);\r\n    if (typeof dependents === \"undefined\") {\r\n      dependents = new Set<IDependencyEdge>();\r\n      this.dependentTree.set(refInfo, dependents);\r\n    }\r\n    const edge = createDependencyEdge(info, type);\r\n    dependents.add(edge);\r\n  }\r\n\r\n  getPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex | null): any {\r\n    // プロパティの値を取得する\r\n    const readonlyState = createReadonlyStateProxy(this, this.state);\r\n    return readonlyState[GetByRefSymbol](info, listIndex);\r\n  }\r\n  setPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex | null, value: any): void {\r\n    // プロパティの値を設定する\r\n    this.updater.addProcess(() => {\r\n      // ToDo: ここよく検討すること\r\n      const writableState = createWritableStateProxy(this, this.state);\r\n      writableState[SetByRefSymbol](info, listIndex, value);\r\n    });\r\n  }\r\n  // 読み取り専用の状態プロキシを作成する\r\n  createReadonlyStateProxy(): IStateProxy {\r\n    return createReadonlyStateProxy(this, this.state);\r\n  }\r\n  // 書き込み可能な状態プロキシを作成する\r\n  createWritableStateProxy(): IStateProxy {\r\n    return createWritableStateProxy(this, this.state);\r\n  }\r\n\r\n}\r\n\r\nexport function createComponentEngine(config: IComponentConfig, component: StructiveComponent): IComponentEngine {\r\n  return new ComponentEngine(config, component);\r\n}","import { COMMENT_EMBED_MARK } from \"../constants.js\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nconst MUSTACHE_REGEXP = /\\{\\{([^\\}]+)\\}\\}/g;\r\nconst MUSTACHE_TYPES:Set<string> = new Set(['if', 'for', 'endif', 'endfor', 'elseif', 'else']);\r\n\r\ntype MustacheType = 'if' | 'for' | 'endif' | 'endfor' | 'elseif' | 'else';\r\ntype MustacheInfo = {\r\n  type: MustacheType;\r\n  remain: string; // after first ':'\r\n  expr: string;\r\n}\r\n\r\nexport function replaceMustacheWithTemplateTag(html: string): string {\r\n  const stack:MustacheInfo[] = [];\r\n  return html.replaceAll(MUSTACHE_REGEXP, (match, expr) => {\r\n    expr = expr.trim();\r\n    const [ type ] = expr.split(':');\r\n    if (!MUSTACHE_TYPES.has(type)) {\r\n      // embed\r\n      return `<!--${COMMENT_EMBED_MARK}${expr}-->`;\r\n    }\r\n    const remain = expr.slice(type.length + 1).trim();\r\n    const currentInfo:MustacheInfo = { type, expr, remain };\r\n    if (type === 'if' || type === 'for') {\r\n      stack.push(currentInfo);\r\n      return `<template data-bind=\"${expr}\">`;\r\n    } else if (type === 'endif') {\r\n      const endTags = [];\r\n      do {\r\n        const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        if (info.type === 'if') {\r\n          endTags.push('</template>');\r\n          break;\r\n        } else if (info.type === 'elseif') {\r\n          endTags.push('</template>');\r\n        } else {\r\n          raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        }\r\n      } while(true);\r\n      return endTags.join('');\r\n    } else if (type === 'endfor') {\r\n      const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n      if (info.type === 'for') {\r\n        return '</template>';\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: endfor without for');\r\n      }\r\n    } else if (type === 'elseif') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      if (lastInfo.type === 'if' || lastInfo.type === 'elseif') {\r\n        stack.push(currentInfo);\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\"><template data-bind=\"if:${remain}\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      }\r\n    } else if (type === 'else') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      if (lastInfo.type === 'if') {\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      }\r\n    } else {\r\n      raiseError('replaceMustacheToTemplateOrEmbed: unknown type');\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n","import { COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { registerTemplate } from \"./registerTemplate.js\";\r\n\r\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport function replaceTemplateTagWithComment(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number = id\r\n):number {\r\n  // テンプレートの親ノードが存在する場合は、テンプレートをコメントノードに置き換える\r\n  template.parentNode?.replaceChild(document.createComment(`${COMMENT_TEMPLATE_MARK}${id}`), template);\r\n  if (template.namespaceURI === SVG_NS) {\r\n    // SVGタグ内のtemplateタグを想定\r\n    const newTemplate = document.createElement(\"template\");\r\n    for(let childNode of Array.from(template.childNodes)) {\r\n      newTemplate.content.appendChild(childNode);\r\n    }\r\n    const bindText = template.getAttribute(DATA_BIND_ATTRIBUTE);\r\n    newTemplate.setAttribute(DATA_BIND_ATTRIBUTE, bindText ?? \"\");\r\n    template = newTemplate;\r\n  }\r\n  template.content.querySelectorAll(\"template\").forEach(template => {\r\n    replaceTemplateTagWithComment(generateId(), template, rootId);\r\n  });\r\n  registerTemplate(id, template, rootId);\r\n  return id;\r\n}\r\n","import { replaceMustacheWithTemplateTag } from \"./replaceMustacheWithTemplateTag.js\";\r\nimport { replaceTemplateTagWithComment } from \"./replaceTemplateTagWithComment.js\";\r\n\r\nexport function registerHtml(id: number, html:string) {\r\n  const template = document.createElement(\"template\");\r\n  template.dataset.id = id.toString();\r\n  template.innerHTML = replaceMustacheWithTemplateTag(html);\r\n  replaceTemplateTagWithComment(id, template);\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { BindParentComponentSymbol, RenderSymbol } from \"./symbols.js\";\r\nimport { IComponentState, IComponentStateHandler, IComponentStateProxy } from \"./types\";\r\n\r\nclass ComponentState implements IComponentState {\r\n  engine: IComponentEngine;\r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  bindParentProperty(binding: IBinding): void {\r\n    const propName = binding.bindingNode.subName;\r\n    Object.defineProperty(this.engine.state, propName, {\r\n      get: () => {\r\n        return binding.bindingState.filteredValue;\r\n      },\r\n      set: (value: any) => {\r\n        return binding.updateStateValue(value);\r\n      },\r\n    });\r\n  }\r\n\r\n  unbindParentProperty(binding: IBinding): void {\r\n    const propName = binding.bindingNode.subName;\r\n    Object.defineProperty(this.engine.state, propName, { value:undefined });\r\n  }\r\n  \r\n  bindParentComponent(): void {\r\n    // bindParentComponent\r\n    const parent = this.engine.owner.parentStructiveComponent;\r\n    if (parent === null) {\r\n      return;\r\n    }\r\n    const bindings = parent.getBindingsFromChild(this.engine.owner);\r\n    for (const binding of bindings ?? []) {\r\n      this.bindParentProperty(binding);\r\n    }\r\n  }\r\n\r\n  render(name: string, value:any): void {\r\n    // render\r\n    const info = getStructuredPathInfo(name);\r\n    this.engine.updater.addUpdatedStatePropertyRefValue(info, null, value)\r\n  }\r\n\r\n  getPropertyValue(name: string): any {\r\n    // getPropertyValue\r\n    const info = getStructuredPathInfo(name);\r\n    return this.engine.getPropertyValue(info, null);\r\n  }\r\n\r\n  setPropertyValue(name: string, value: any): void {\r\n    // setPropertyValue\r\n    const info = getStructuredPathInfo(name);\r\n    this.engine.setPropertyValue(info, null, value); \r\n  }\r\n}\r\n\r\nclass ComponentStateHandler implements IComponentStateHandler {\r\n  get(state: IComponentState, prop: PropertyKey, receiver: IComponentState): any {\r\n    if (prop === RenderSymbol) {\r\n      return state.render.bind(state);\r\n    } else if (prop === BindParentComponentSymbol) {\r\n      return state.bindParentComponent.bind(state);\r\n    } else if (typeof prop === 'string') {\r\n      return state.getPropertyValue(prop);\r\n    } else {\r\n      return Reflect.get(state, prop, receiver);\r\n    }\r\n  }\r\n\r\n  set(state: IComponentState, prop: PropertyKey, value: any, receiver: IComponentState): boolean {\r\n    if (typeof prop === 'string') {\r\n      state.setPropertyValue(prop, value);\r\n      return true;\r\n    } else {\r\n      return Reflect.set(state, prop, value, receiver);\r\n    }\r\n  }\r\n};\r\n\r\nexport const createComponentState = (engine: IComponentEngine): IComponentStateProxy => {\r\n  return new Proxy<IComponentState>(new ComponentState(engine), new ComponentStateHandler()) as IComponentStateProxy;\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { getStructuredPathInfo } from \"./getStructuredPathInfo\";\r\nimport { IAccessorFunctions, IStructuredPathInfo } from \"./types\";\r\n\r\nconst checkSegmentRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\r\nconst checkPathRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*(\\.[a-zA-Z_$][0-9a-zA-Z_$]*|\\.\\*)*$/;\r\n\r\nexport function createAccessorFunctions(info: IStructuredPathInfo, getters: Set<string>): IAccessorFunctions {\r\n  const matchPaths = new Set(info.cumulativePaths).intersection(getters);\r\n  let len = -1;\r\n  let matchPath = '';\r\n  for(const curPath of matchPaths) {\r\n    const pathSegments = curPath.split('.');\r\n    if (pathSegments.length === 1) {\r\n      continue;\r\n    }\r\n    if (pathSegments.length > len) {\r\n      len = pathSegments.length;\r\n      matchPath = curPath;\r\n    }\r\n  }\r\n  if (matchPath.length > 0) {\r\n    if (!checkPathRegexp.test(matchPath)) {\r\n      throw new Error(`Invalid path: ${matchPath}`);\r\n    }\r\n    const matchInfo = getStructuredPathInfo(matchPath);\r\n    const segments = [];\r\n    let count = matchInfo.wildcardCount;\r\n    for(let i = matchInfo.pathSegments.length; i < info.pathSegments.length; i++) {\r\n      const segment = info.pathSegments[i];\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          throw new Error(`Invalid segment name: ${segment}`);\r\n        }\r\n        segments.push(\".\" + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this[\"${matchPath}\"]${path};`) as ()=> any,\r\n      set : new Function('value', `this[\"${matchPath}\"]${path} = value;`) as (value: any) => void,\r\n    }\r\n  } else {\r\n    const segments = [];\r\n    let count = 0;\r\n    for(const segment of info.pathSegments) {\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          throw new Error(`Invalid segment name: ${segment}`);\r\n        }\r\n        segments.push((segments.length > 0 ? \".\" : \"\") + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this.${path};`) as ()=> any,\r\n      set : new Function('value', `this.${path} = value;`) as (value: any) => void,\r\n    }\r\n  }\r\n\r\n}\r\n","import { inputBuiltinFilters, outputBuiltinFilters } from \"../Filter/builtinFilters.js\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { getStateClassById, registerStateClass } from \"../StateClass/registerStateClass.js\";\r\nimport { getStyleSheetById } from \"../StyleSheet/registerStyleSheet.js\";\r\nimport { registerCss } from \"../StyleSheet/regsiterCss.js\";\r\nimport { createComponentEngine } from \"../ComponentEngine/ComponentEngine.js\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types.js\";\r\nimport { registerHtml } from \"../Template/registerHtml.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { getBaseClass } from \"./getBaseClass.js\";\r\nimport { getComponentConfig } from \"./getComponentConfig.js\";\r\nimport { IComponent, IUserComponentData, IUserConfig, StructiveComponentClass, StructiveComponent } from \"./types\";\r\nimport { getListPathsSetById, getPathsSetById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { IStructiveState, IStructiveStaticState } from \"../StateClass/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { IComponentStateProxy } from \"../ComponentState/types\";\r\nimport { createComponentState } from \"../ComponentState/createComponentState.js\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { createAccessorFunctions } from \"../StateProperty/createAccessorFunctions.js\";\r\nimport { config as globalConfig } from \"./getGlobalConfig.js\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nfunction findStructiveParent(el:StructiveComponent): IComponent | null {\r\n  let current = el.parentNode;\r\n  while (current) {\r\n    if ((current as StructiveComponent).state && (current as StructiveComponent).isStructive) {\r\n      return current as StructiveComponent;\r\n    }\r\n    current = current.parentNode;\r\n    if (current instanceof ShadowRoot) {\r\n      if (current.host && (current.host as StructiveComponent).state && (current.host as StructiveComponent).isStructive) {\r\n        return current.host as StructiveComponent;\r\n      }\r\n      current = current.host;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function createComponentClass(componentData: IUserComponentData): StructiveComponentClass {\r\n  const config = (componentData.stateClass.$config ?? {})as IUserConfig;\r\n  const componentConfig = getComponentConfig(config);\r\n  const id = generateId();\r\n  const { html, css, stateClass } = componentData;\r\n  const inputFilters:FilterWithOptions = Object.assign({}, inputBuiltinFilters);\r\n  const outputFilters:FilterWithOptions = Object.assign({}, outputBuiltinFilters);\r\n  stateClass.$isStructive = true;\r\n  registerHtml(id, html);\r\n  registerCss(id, css);\r\n  registerStateClass(id, stateClass);\r\n  const baseClass = getBaseClass(componentConfig.extends);\r\n  const extendTagName = componentConfig.extends;\r\n  return class extends baseClass implements IComponent {\r\n    #engine: IComponentEngine;\r\n    #componentState: IComponentStateProxy;\r\n\r\n    constructor() {\r\n      super();\r\n      this.#engine = createComponentEngine(componentConfig, this as StructiveComponent);\r\n      this.#componentState = createComponentState(this.#engine);\r\n    }\r\n\r\n    connectedCallback() {\r\n      this.#engine.connectedCallback();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n      this.#engine.disconnectedCallback();\r\n    }\r\n\r\n    #parentStructiveComponent: IComponent | null | undefined;\r\n    get parentStructiveComponent(): IComponent | null {\r\n      if (typeof this.#parentStructiveComponent === \"undefined\") {\r\n        this.#parentStructiveComponent = findStructiveParent(this as StructiveComponent);\r\n      }\r\n      return this.#parentStructiveComponent;\r\n    }\r\n\r\n    get state(): IComponentStateProxy {\r\n      return this.#componentState;\r\n    }\r\n\r\n    get isStructive(): boolean {\r\n      return this.#engine.stateClass.$isStructive ?? false;\r\n    }\r\n\r\n    getBindingsFromChild(component: IComponent): Set<IBinding> | null {\r\n      return this.#engine.bindingsByComponent.get(component as StructiveComponent) ?? null;\r\n    }\r\n\r\n    static define(tagName:string) {\r\n      if (extendTagName) {\r\n        customElements.define(tagName, this, { extends: extendTagName });\r\n      } else {\r\n        customElements.define(tagName, this);\r\n      }\r\n    }\r\n\r\n    static get id():number {\r\n      return id;\r\n    }\r\n    static #html:string = html;\r\n    static get html():string {\r\n      return this.#html;\r\n    }\r\n    static set html(value:string) {\r\n      this.#html = value;\r\n      registerHtml(this.id, value);\r\n      this.#template = null;\r\n    }\r\n\r\n    static #css:string = css;\r\n    static get css() {\r\n      return this.#css;\r\n    }\r\n    static set css(value:string) {\r\n      this.#css = value;\r\n      registerCss(this.id, value);\r\n      this.#styleSheet = null;\r\n    }\r\n    static #template: HTMLTemplateElement | null = null;\r\n    static get template():HTMLTemplateElement {\r\n      if (!this.#template) {\r\n        this.#template = getTemplateById(this.id);\r\n      }\r\n      return this.#template;\r\n    }\r\n    static #styleSheet: CSSStyleSheet | null = null;\r\n    static get styleSheet():CSSStyleSheet {\r\n      if (!this.#styleSheet) {\r\n        this.#styleSheet = getStyleSheetById(this.id);\r\n      }\r\n      return this.#styleSheet;\r\n    }\r\n    static #stateClass: IStructiveState | null = null;\r\n    static get stateClass():IStructiveState {\r\n      if (!this.#stateClass) {\r\n        this.#stateClass = getStateClassById(this.id) as IStructiveState;\r\n      }\r\n      return this.#stateClass;\r\n    }\r\n    static #inputFilters:FilterWithOptions = inputFilters;\r\n    static get inputFilters():FilterWithOptions {\r\n      return this.#inputFilters;\r\n    }\r\n    static #outputFilters:FilterWithOptions = outputFilters;\r\n    static get outputFilters():FilterWithOptions {\r\n      return this.#outputFilters;\r\n    }\r\n    static get listPaths(): Set<string> {\r\n      return getListPathsSetById(this.id);\r\n    }\r\n    static get paths(): Set<string> {\r\n      return getPathsSetById(this.id);\r\n    }\r\n    static #getters: Set<string> | null = null;\r\n    static get getters(): Set<string> {\r\n      return this.#getters ?? raiseError(\"getters is null\");\r\n    }\r\n    static #trackedGetters: Set<string> | null = null;\r\n    static get trackedGetters(): Set<string> {\r\n      if(this.#trackedGetters === null) {\r\n        this.#trackedGetters = new Set<string>();\r\n        this.#getters = new Set<string>();\r\n        let currentProto = this.stateClass.prototype;\r\n        while (currentProto && currentProto !== Object.prototype) {\r\n          const trackedGetters = Object.getOwnPropertyDescriptors(currentProto);\r\n          if (trackedGetters) {\r\n            for (const [key, desc] of Object.entries(trackedGetters)) {\r\n              if ((desc as PropertyDescriptor).get && !(desc as PropertyDescriptor).set) {\r\n                this.#trackedGetters.add(key);\r\n              }\r\n              this.#getters.add(key);\r\n            }\r\n          }\r\n          currentProto = Object.getPrototypeOf(currentProto);\r\n        }\r\n        if (globalConfig.optimizeAccessor) {\r\n          for(const path of this.paths) {\r\n            const info = getStructuredPathInfo(path);\r\n            if (info.pathSegments.length === 1) {\r\n              continue;\r\n            }\r\n            if (this.#getters.has(path)) {\r\n              continue;\r\n            }\r\n            const funcs = createAccessorFunctions(info, this.#getters);\r\n            Object.defineProperty(this.stateClass.prototype, path, {\r\n              get: funcs.get,\r\n              set: funcs.set,\r\n              enumerable: true,\r\n              configurable: true,\r\n            });\r\n          }\r\n        }\r\n      }\r\n      return this.#trackedGetters;\r\n\r\n    }\r\n  } as StructiveComponentClass;\r\n}\r\n","import { getGlobalConfig } from \"./getGlobalConfig.js\";\r\nimport { IUserConfig, IComponentConfig } from \"./types\";\r\n\r\nexport function getComponentConfig(userConfig: IUserConfig): IComponentConfig {\r\n  const globalConfig = getGlobalConfig();\r\n  return {\r\n    enableShadowDom: userConfig.enableShadowDom ?? globalConfig.enableShadowDom,\r\n    extends        : userConfig.extends ?? null,\r\n  };\r\n}","import { Constructor } from \"./types\";\r\n\r\nexport function getBaseClass(extendTagName: string | null):Constructor<HTMLElement> {\r\n  return extendTagName ? (document.createElement(extendTagName).constructor as Constructor<HTMLElement>) : HTMLElement;\r\n}","import { IStructiveState } from \"../StateClass/types\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nfunction escapeEmbed(html: string): string {\r\n  return html.replaceAll(/\\{\\{([^\\}]+)\\}\\}/g, (match, expr) => {\r\n    return `<!--{{${expr}}}-->`;\r\n  });\r\n}\r\n\r\nfunction unescapeEmbed(html:string):string {\r\n  return html.replaceAll(/<!--\\{\\{([^\\}]+)\\}\\}-->/g, (match, expr) => {\r\n    return `{{${expr}}}`;\r\n  });\r\n}\r\n\r\nexport async function createSingleFileComponent(text: string): Promise<IUserComponentData> {\r\n  const template = document.createElement(\"template\");\r\n  template.innerHTML = escapeEmbed(text);\r\n\r\n  const html = template.content.querySelector(\"template\");\r\n  html?.remove();\r\n\r\n  const script = template.content.querySelector(\"script[type=module]\") as HTMLScriptElement;\r\n  const b64 = btoa(String.fromCodePoint(...new TextEncoder().encode(script.text)));\r\n  const scriptModule = script ? await import(\"data:application/javascript;base64,\" + b64) : {};\r\n//  const scriptModule = script ? await import(\"data:text/javascript;charset=utf-8,\" + script.text) : {};\r\n  script?.remove();\r\n\r\n  const style = template.content.querySelector(\"style\");\r\n  style?.remove();\r\n\r\n  const stateClass = (scriptModule.default ?? class {}) as IStructiveState;\r\n  \r\n  return {\r\n    text,\r\n    html      : unescapeEmbed(html?.innerHTML ?? \"\").trim(),\r\n    css       : style?.textContent ?? \"\",\r\n    stateClass,\r\n  }\r\n}","import { createSingleFileComponent } from \"./createSingleFileComponent.js\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nexport async function loadSingleFileComponent(path: string): Promise<IUserComponentData> {\r\n  const response = await fetch(import.meta.resolve(path));\r\n  const text = await response.text();\r\n  return createSingleFileComponent(text);\r\n}\r\n","import { StructiveComponentClass } from \"./types\";\r\n\r\nexport function registerComponentClass(tagName: string, componentClass: StructiveComponentClass) {\r\n  componentClass.define(tagName);\r\n}","import { raiseError } from \"../utils\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst SLOT_KEY = \"router\";\r\nconst DEFAULT_LAYOUT = `<slot name=\"${SLOT_KEY}\"></slot>`;\r\n\r\nexport class MainWrapper extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n    if (config.enableShadowDom) {\r\n      this.attachShadow({ mode: 'open' });\r\n    }\r\n  }\r\n\r\n  async connectedCallback() {\r\n    await this.loadLayout();\r\n    this.render();\r\n  }\r\n\r\n  get root(): ShadowRoot | HTMLElement {\r\n    return this.shadowRoot ?? this;\r\n  }\r\n\r\n  async loadLayout() {\r\n    if (config.layoutPath) {\r\n      const response = await fetch(config.layoutPath);\r\n      if (response.ok) {\r\n        const layoutText = await response.text();\r\n        const workTemplate = document.createElement(\"template\");\r\n        workTemplate.innerHTML = layoutText;\r\n      \r\n        const template = workTemplate.content.querySelector(\"template\");\r\n        const style = workTemplate.content.querySelector(\"style\") as CSSStyleSheet | null;\r\n      \r\n        this.root.appendChild(template?.content ?? document.createDocumentFragment());\r\n        if (style) {\r\n          const shadowRootOrDocument = this.shadowRoot ?? document;\r\n          const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n          if (!styleSheets.includes(style)) {\r\n            shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, style];\r\n          }\r\n        }\r\n      } else {\r\n        raiseError(`Failed to load layout from ${config.layoutPath}`);\r\n      }\r\n    } else {\r\n      this.root.innerHTML = DEFAULT_LAYOUT;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // add router\r\n    if (config.enableRouter) {\r\n      const router = document.createElement(config.routerTagName);\r\n      router.setAttribute('slot', SLOT_KEY);\r\n      this.root.appendChild(router);\r\n    }\r\n  }\r\n}\r\n","import { entryRoute } from \"../Router/Router\";\r\nimport { createComponentClass } from \"./createComponentClass\";\r\nimport { loadImportmap } from \"./loadImportmap\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent\";\r\nimport { registerComponentClass } from \"./registerComponentClass\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nconst ROUTES_KEY = \"@routes/\";\r\nconst COMPONENTS_KEY = \"@components/\";\r\n\r\nexport async function loadFromImportMap(): Promise<void> {\r\n  const importmap = loadImportmap();\r\n  if (importmap.imports) {\r\n    for (const [alias, value] of Object.entries(importmap.imports)) {\r\n      let tagName;\r\n      if (alias.startsWith(ROUTES_KEY)) {\r\n        const path = alias.slice(ROUTES_KEY.length - 1); // remove the prefix '@routes'\r\n        const pathWithoutParams = path.replace(/:[^\\s/]+/g, \"\"); // remove the params\r\n        tagName = \"routes\" + pathWithoutParams.replace(/\\//g, \"-\"); // replace '/' with '-'\r\n        entryRoute(tagName, path === \"/root\" ? \"/\" : path); // routing\r\n      } if (alias.startsWith(COMPONENTS_KEY)) {\r\n        tagName = alias.slice(COMPONENTS_KEY.length - 1); // remove the prefix '@components'\r\n      }\r\n      if (!tagName) {\r\n        continue;\r\n      }\r\n\r\n      let componentData : IUserComponentData | null = null;\r\n      componentData = await loadSingleFileComponent(alias);\r\n      const componentClass = createComponentClass(componentData);\r\n      registerComponentClass(tagName, componentClass);\r\n    }\r\n  }\r\n\r\n} \r\n","import { IImportMap } from \"./types\";\r\n\r\nexport function loadImportmap():IImportMap {\r\n  const importmap: IImportMap = {};\r\n  document.querySelectorAll(\"script[type='importmap']\").forEach(script => {\r\n    const scriptImportmap = JSON.parse(script.innerHTML);\r\n    if (scriptImportmap.imports) {\r\n      importmap.imports = Object.assign(importmap.imports || {}, scriptImportmap.imports);\r\n    }\r\n  });\r\n  return importmap;\r\n}\r\n\r\n","import { registerSingleFileComponents } from \"./WebComponents/registerSingleFIleComponents.js\";\r\nimport { bootstrap } from \"./bootstrap.js\";\r\nimport { config as _config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { IConfig } from \"./WebComponents/types\";\r\n\r\nexport const config: IConfig = _config;\r\n\r\nlet initialized = false;\r\nexport async function defineComponents(singleFileComponents: Record<string, string>):Promise<void> {\r\n  await registerSingleFileComponents(singleFileComponents);\r\n  if (config.autoInit) {\r\n    await bootstrapStructive();\r\n  }\r\n}\r\n\r\nexport async function bootstrapStructive():Promise<void> {\r\n  if (!initialized) {\r\n    await bootstrap();\r\n    initialized = true;\r\n  }\r\n}\r\n\r\n","import { entryRoute } from \"../Router/Router.js\";\r\nimport { createComponentClass } from \"./createComponentClass.js\";\r\nimport { config } from \"./getGlobalConfig.js\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent.js\";\r\nimport { registerComponentClass } from \"./registerComponentClass.js\";\r\nimport { IUserComponentData, SingleFileComponents } from \"./types\";\r\n\r\nexport async function registerSingleFileComponents(singleFileComponents:SingleFileComponents):Promise<void> {\r\n  for(const [ tagName, path ] of Object.entries(singleFileComponents)) {\r\n    let componentData : IUserComponentData | null = null;\r\n    if (config.enableRouter) {\r\n      const routePath = path.startsWith(\"@routes\") ? path.slice(7) : path; // remove the prefix 'routes:'\r\n      entryRoute(tagName, routePath === \"/root\" ? \"/\" : routePath); // routing\r\n    }\r\n    componentData = await loadSingleFileComponent(path);\r\n    const componentClass = createComponentClass(componentData);\r\n    registerComponentClass(tagName, componentClass);\r\n  }\r\n}","import { MainWrapper } from \"./MainWrapper/MainWrapper.js\";\r\nimport { Router } from \"./Router/Router.js\";\r\nimport { config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { loadFromImportMap } from \"./WebComponents/loadFromImportMap.js\";\r\n\r\nexport async function bootstrap(): Promise<void> {\r\n  if (config.autoLoadFromImportMap) {\r\n    await loadFromImportMap();\r\n  }\r\n\r\n  if (config.enableRouter) {\r\n    customElements.define(config.routerTagName, Router);\r\n  }\r\n\r\n  if (config.enableMainWrapper) {\r\n    customElements.define(config.mainTagName, MainWrapper);\r\n    if (config.autoInsertMainWrapper) {\r\n      const mainWrapper = document.createElement(config.mainTagName);\r\n      document.body.appendChild(mainWrapper);\r\n    }\r\n  }\r\n}"],"names":["ROUTE_PATH_PREFIX","routeEntries","globalRouter","Router","HTMLElement","_popstateHandler","constructor","super","this","popstateHandler","bind","connectedCallback","innerHTML","window","addEventListener","dispatchEvent","Event","disconnectedCallback","removeEventListener","event","preventDefault","render","navigate","to","history","pushState","Array","from","childNodes","filter","n","getAttribute","forEach","removeChild","routePath","location","pathname","tagName","params","path","tag","regex","RegExp","replace","test","matches","match","key","index","substring","customElement","document","createElement","setAttribute","JSON","stringify","appendChild","messageElement","textContent","entryRoute","startsWith","push","globalConfig","debug","locale","enableShadowDom","enableMainWrapper","enableRouter","autoInsertMainWrapper","autoInit","mainTagName","routerTagName","layoutPath","autoLoadFromImportMap","optimizeList","optimizeListElements","optimizeAccessor","getGlobalConfig","config","optionsRequired","fnName","Error","optionMustBeNumber","valueMustBeNumber","valueMustBeDate","builtinFilters","eq","options","opt","optValue","Number","isNaN","value","ne","not","valueMustBeBoolean","lt","le","gt","ge","inc","dec","mul","div","fix","toFixed","toLocaleString","uc","toString","toUpperCase","lc","toLowerCase","cap","v","length","charAt","slice","trim","substr","opt1","opt1Value","opt2","opt2Value","pad","padStart","rep","repeat","rev","split","reverse","join","int","parseInt","float","parseFloat","round","Math","pow","floor","ceil","percent","date","Date","toLocaleDateString","time","toLocaleTimeString","datetime","ymd","year","getFullYear","month","getMonth","day","getDate","falsy","truthy","defaults","boolean","Boolean","number","string","String","null","outputBuiltinFilters","inputBuiltinFilters","id","generateId","raiseError","message","stateClassById","styleSheetById","registerCss","css","styleSheet","CSSStyleSheet","replaceSync","registerStyleSheet","textToFilter","filters","text","name","cache","Map","createFilters","texts","result","get","i","set","BindingNode","binding","node","decorates","bindContents","Set","subName","init","update","assignValue","bindingState","filteredValue","updateElements","listIndexes","values","isSelectElement","HTMLSelectElement","isFor","BindingNodeAttribute","BindingNodeCheckbox","isArray","element","checked","map","_val","includes","BindingNodeClassList","className","BindingNodeClassName","classList","add","remove","BindingNodeEvent","e","handler","engine","stateProxy","createWritableStateProxy","updater","loopContext","parentBindContent","currentLoopContext","indexes","serialize","context","listIndex","stopPropagation","addProcess","async","typeOfValue","setLoopContext","Reflect","apply","createBindingNodeEvent","filterTexts","filterFns","DATA_BIND_ATTRIBUTE","COMMENT_EMBED_MARK","COMMENT_TEMPLATE_MARK","BindingNodeBlock","BindingNodeIf","bindContent","trueBindContents","falseBindContents","createBindContent","parentNode","mountAfter","nextSibling","unmount","BindingNodeFor","bindContentsSet","bindContentByListIndex","WeakMap","bindContentPool","bindContentLastIndex","lastListIndexSet","assignListIndex","pattern","deleteBindContent","clearListIndex","poolLength","listIndexesSet","getListIndexesSet","info","newBindContensSet","lastBindContent","removeBindContentsSet","diff","difference","firstNode","lastNode","getLastNode","firstChildNode","oldListValues","getList","currentBindContents","targetBindContents","lastChildNode","oldValue","targetIndex","indexOf","prevBindContent","saveList","createBindingNodeFor","DEFAULT_PROPERTY","defaultPropertyByElementType","Rt","Ft","button","_cache","getDefaultPropertyByNodeType","HTMLTextAreaElement","HTMLOptionElement","HTMLButtonElement","HTMLAnchorElement","HTMLFormElement","HTMLInputElement","type","SVGElement","undefined","Text","Template","defaultEventByName","selected","BindingNodeProperty","defaultName","nodeType","getDefaultName","eventName","updateStateValue","createBindingNodeProperty","BindingNodeRadio","BindingNodeStyle","style","setProperty","symbolName","RenderSymbol","Symbol","for","BindParentComponentSymbol","BindingNodeComponent","bindings","bindingsByComponent","state","nodePropertyConstructorByNameByIsComment","Ht","jt","nodePropertyConstructorByFirstName","Wt","getBindingNodeCreator","propertyName","isComment","Comment","isElement","Element","fn","bindingNodeCreatorByName","nameElements","bindingNodeCreatorByFirstName","_getBindingNodeCreator","GetByRefSymbol","SetByRefSymbol","SetCacheableSymbol","ConnectedCallbackSymbol","DisconnectedCallbackSymbol","ResolveSymbol","GetAllSymbol","StructuredPathInfo","static","pathSegments","lastSegment","cumulativePaths","cumulativeInfos","cumulativeInfoSet","wildcardPaths","wildcardInfos","wildcardInfoSet","wildcardParentPaths","wildcardParentInfos","wildcardParentInfoSet","lastWildcardPath","lastWildcardInfo","parentPath","parentInfo","wildcardCount","children","getPattern","_pattern","getStructuredPathInfo","currentPatternPath","prevPatternPath","reservedWords","structuredPath","has","BindingState","listIndexRef","deref","find","saveBinding","BindingStateIndex","indexNumber","loopContexts","bindingsByListIndex","ereg","getBindingStateCreator","createBindingStateIndex","createBindingState","getTextByNodeType","Vt","getTemplateById","nodeTypeByNodeKey","getNodeType","nodeKey","createNodeKey","getNodeTypeByNode","s","re","decode","m","exec","decodeURIComponent","parseFilter","parseProperty","property","parseExpressions","expression","bindExpression","decoratesExpression","nodePropertyText","statePropertyText","nodeProperty","inputFilterTexts","stateProperty","outputFilterTexts","parseExpression","removeAttributeFromElement","removeAttribute","removeAttributeByNodeType","replaceTextNodeFn","textNode","createTextNode","replaceChild","DataBindAttributes","nodePath","bindTexts","creatorByText","bindText","getDataBindText","removeDataBindAttribute","replaceTextNodeFromComment","routeIndexes","getAbsoluteNodePath","parseBindText","creator","createBindingNode","getNodesHavingDataBind","root","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","acceptNode","hasAttribute","FILTER_ACCEPT","FILTER_SKIP","isCommentNode","nextNode","currentNode","listDataBindAttributesById","listPathsSetById","pathsSetById","getDataBindAttributesFromTemplate","content","createDataBindAttributes","templateById","registerTemplate","template","rootId","Node","TEXT_NODE","nodeValue","dataBindAttributes","paths","listPaths","attribute","j","registerDataBindAttributes","Binding","bindingNode","version","inputFilters","readonlyState","outputFilters","createBinding","LoopContext","WeakRef","parentLoopContext","currentBinding","parentBinding","walk","callback","results","unshift","bindingsWithSelectElement","createBindings","attributes","getDataBindAttributesById","reduce","BindContent","fragment","isMounted","lastBinding","size","at","importNode","createContent","createLoopContext","mount","mountBefore","beforeNode","insertBefore","afterNode","createDependencyKey","dependencyWalker","entryRef","traced","walkSub","edges","dependentTree","edge","overridedType","createDependencyWalker","ListIndex","parentListIndex","position","truncate","reverseIterator","iterator","atcache","next","lisIndex","createListIndex","listWalkerSub","listIndexLen","subListIndex","listWalker","createRefKey","BLANK_LISTINDEXES_SET","buildListIndexTree","newListIndexesSet","oldListIndexesSet","oldListIndexesByItem","groupBy","curListIndex","shift","addUpdatedListIndex","saveListIndexesSet","restructListIndexes","infos","updateValues","refKeys","wt","elementInfoSet","dependentWalker","nowOnList","listInfoSet","ref","refInfo","wildcardMatchPaths","intersection","longestMatchAt","_info","_listIndex","existsBindingsByInfo","refKey","cacheListIndexSet","Updater","processList","updatedProperties","updatedValues","process","waitForQueueEntry","resolve","addUpdatedStatePropertyRefValue","terminate","waitForMainLoopTerminate","Promise","withResolvers","main","waitForComponentInit","promise","performance","mark","updatingCount","measure","console","log","getEntriesByType","clearMeasures","clearMarks","error","updateState","rebuild","retArrayElementBindings","retBindings","updatedProiperties","clear","updatedRefs","arrayElementBindingByParentRefKey","item","parentRef","parentRefKey","builtStatePropertyRefKeySet","affectedRefs","getBindings","bindingInfo","Object","assign","entries","arrayElementBindings","$e","Xe","arrayElementBinding","attachShadow","extends","canHaveShadowRoot","mode","adoptedStyleSheets","shadowRootOrDocument","ShadowRoot","getParentShadowRoot","styleSheets","buildListIndexTreeSub","listInfos","searchPath","subValue","_getByRef","target","receiver","lastTrackingStack","lastPattern","addDependentProp","cacheable","setStatePropertyRef","parentValue","getByRef","trackedGetters","trackingStack","pop","setTracking","prop","methodGetByRef","setCacheable","methodSetChargeable","call","setByRef","wildcardParentPattern","getAll","_resolve","wildcardPattern","getContextListIndex","walkWildcardPattern","wildardIndexPos","indexPos","parentIndexes","listIndexSet","concat","resultIndexes","resultValues","ResolvedPathInfo","elements","wildcardType","wildcardIndexes","tmpPatternElements","incompleteCount","completeCount","lastPath","getResolvedPathInfo","getListIndex","charCodeAt","d","getLastStatePropertyRef","resolvedInfo","callableApi","StateHandler$1","apiGetByRef","apiSetCacheable","trapGet","createReadonlyStateProxy","Proxy","StateHandler","methodSetByRef","apiSetByRef","trapSet","ComponentEngine","stateClass","baseClass","owner","waitForInitialize","stackStructuredPathInfo","stackListIndex","componentClass","checkDependentProp","listPath","dataset","writableState","json","parse","shadowRoot","asyncSetStatePropertyRef","lastRef","getLoopContexts","saveInfoByListIndexByResolvedPathInfoId","saveInfoByStructuredPathId","createSaveInfo","list","getSaveInfoByStatePropertyRef","saveInfo","saveInfoByListIndex","dependents","createDependencyEdge","getPropertyValue","setPropertyValue","MUSTACHE_REGEXP","MUSTACHE_TYPES","replaceTemplateTagWithComment","createComment","namespaceURI","newTemplate","childNode","querySelectorAll","registerHtml","html","stack","replaceAll","expr","remain","currentInfo","endTags","lastInfo","replaceMustacheWithTemplateTag","ComponentState","bindParentProperty","propName","defineProperty","unbindParentProperty","bindParentComponent","parent","parentStructiveComponent","getBindingsFromChild","ComponentStateHandler","checkSegmentRegexp","checkPathRegexp","createAccessorFunctions","getters","matchPaths","len","matchPath","curPath","matchInfo","segments","count","segment","Function","createComponentClass","componentData","componentConfig","userConfig","Ye","getComponentConfig","$config","Rn","Fn","mn","$isStructive","registerStateClass","extendTagName","getBaseClass","componentState","component","createComponentEngine","el","current","isStructive","host","findStructiveParent","define","customElements","getStyleSheetById","getStateClassById","getListPathsSetById","getPathsSetById","currentProto","prototype","getOwnPropertyDescriptors","desc","getPrototypeOf","funcs","enumerable","configurable","unescapeEmbed","loadSingleFileComponent","response","fetch","escapeEmbed","querySelector","script","b64","btoa","fromCodePoint","TextEncoder","encode","scriptModule","import","default","createSingleFileComponent","registerComponentClass","SLOT_KEY","DEFAULT_LAYOUT","MainWrapper","loadLayout","ok","layoutText","workTemplate","createDocumentFragment","router","ROUTES_KEY","COMPONENTS_KEY","loadFromImportMap","importmap","scriptImportmap","imports","loadImportmap","alias","_config","initialized","defineComponents","singleFileComponents","registerSingleFileComponents","bootstrapStructive","mainWrapper","body","bootstrap"],"mappings":"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"}
{"version":3,"file":"structive.min.js","sources":["../src/WebComponents/getGlobalConfig.ts","../src/Filter/errorMessages.ts","../src/Filter/builtinFilters.ts","../src/GlobalId/generateId.ts","../src/utils.ts","../src/StateClass/registerStateClass.ts","../src/StyleSheet/registerStyleSheet.ts","../src/StyleSheet/regsiterCss.ts","../src/BindingBuilder/resolveNodeFromPath.ts","../src/BindingBuilder/createFilters.ts","../src/DataBinding/BindingNode/BindingNode.ts","../src/DataBinding/BindingNode/BindingNodeAttribute.ts","../src/DataBinding/BindingNode/BindingNodeCheckbox.ts","../src/DataBinding/BindingNode/BindingNodeClassList.ts","../src/DataBinding/BindingNode/BindingNodeClassName.ts","../src/constants.ts","../src/StateProperty/getStructuredPathInfo.ts","../src/StateProperty/getResolvedPathInfo.ts","../src/StatePropertyRef/StatepropertyRef.ts","../src/StateClass/methods/getContextListIndex.ts","../src/StateClass/methods/getListIndex.ts","../src/StateClass/symbols.ts","../src/StateClass/methods/checkDependency.ts","../src/StateClass/methods/setStatePropertyRef.ts","../src/StateClass/methods/getByRefWritable.ts","../src/StateClass/methods/setByRef.ts","../src/StateClass/apis/resolveWritable.ts","../src/StateClass/apis/trackDependency.ts","../src/StateClass/traps/indexByIndexName.ts","../src/StateClass/traps/getWritable.ts","../src/StateClass/apis/getAllWritable.ts","../src/StateClass/apis/connectedCallback.ts","../src/StateClass/apis/disconnectedCallback.ts","../src/StateClass/useWritableStateProxy.ts","../src/StateClass/traps/set.ts","../src/StateClass/methods/setLoopContext.ts","../src/StateClass/methods/asyncSetStatePropertyRef.ts","../src/ListIndex/ListIndex.ts","../src/PathTree/PathNode.ts","../src/StateClass/methods/getByRefReadonly.ts","../src/StateClass/apis/resolveReadonly.ts","../src/StateClass/traps/getReadonly.ts","../src/StateClass/apis/getAllReadonly.ts","../src/StateClass/methods/setCacheable.ts","../src/StateClass/createReadonlyStateProxy.ts","../src/Updater/Renderer.ts","../src/ListDiff/ListDiff.ts","../src/Updater/Updater.ts","../src/DataBinding/BindingNode/BindingNodeEvent.ts","../src/DataBinding/BindingNode/BindingNodeBlock.ts","../src/DataBinding/BindingNode/BindingNodeIf.ts","../src/DataBinding/BindingNode/BindingNodeFor.ts","../src/BindingBuilder/getDefaultName.ts","../src/DataBinding/BindingNode/BindingNodeProperty.ts","../src/DataBinding/BindingNode/BindingNodeRadio.ts","../src/DataBinding/BindingNode/BindingNodeStyle.ts","../src/ComponentStateInput/symbols.ts","../src/WebComponents/findStructiveParent.ts","../src/DataBinding/BindingNode/BindingNodeComponent.ts","../src/BindingBuilder/getBindingNodeCreator.ts","../src/DataBinding/BindingState/BindingState.ts","../src/DataBinding/BindingState/BindingStateIndex.ts","../src/BindingBuilder/getBindingStateCreator.ts","../src/BindingBuilder/getNodeType.ts","../src/BindingBuilder/parseBindText.ts","../src/BindingBuilder/removeDataBindAttribute.ts","../src/BindingBuilder/replaceTextNodeFromComment.ts","../src/BindingBuilder/createDataBindAttributes.ts","../src/BindingBuilder/getDataBindText.ts","../src/BindingBuilder/getAbsoluteNodePath.ts","../src/BindingBuilder/getNodesHavingDataBind.ts","../src/BindingBuilder/registerDataBindAttributes.ts","../src/Template/registerTemplate.ts","../src/Template/removeEmptyTextNodes.ts","../src/DataBinding/Binding.ts","../src/LoopContext/createLoopContext.ts","../src/DataBinding/BindContent.ts","../src/WebComponents/loadFromImportMap.ts","../src/ComponentEngine/attachShadow.ts","../src/ComponentEngine/canHaveShadowRoot.ts","../src/ComponentStateBinding/createComponentStateBinding.ts","../src/ComponentStateInput/createComponentStateInput.ts","../src/ComponentStateOutput/createComponentStateOutput.ts","../src/ComponentEngine/ComponentEngine.ts","../src/Template/replaceMustacheWithTemplateTag.ts","../src/Template/replaceTemplateTagWithComment.ts","../src/Template/registerHtml.ts","../src/StateProperty/createAccessorFunctions.ts","../src/PathManager/PathManager.ts","../src/WebComponents/createComponentClass.ts","../src/WebComponents/getComponentConfig.ts","../src/WebComponents/getBaseClass.ts","../src/WebComponents/createSingleFileComponent.ts","../src/WebComponents/loadSingleFileComponent.ts","../src/WebComponents/registerComponentClass.ts","../src/WebComponents/loadImportmap.ts","../src/Router/Router.ts","../src/MainWrapper/MainWrapper.ts","../src/exports.ts","../src/WebComponents/registerSingleFIleComponents.ts","../src/bootstrap.ts"],"sourcesContent":["/**\r\n * getGlobalConfig.ts\r\n *\r\n * Structive全体で利用するグローバル設定（IConfig）を定義・取得するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - globalConfig: デフォルトのグローバル設定値（debug, locale, enableShadowDom等）を定義\r\n * - getGlobalConfig: グローバル設定オブジェクトを返す関数\r\n * - config: getGlobalConfig()のエイリアスとして即時取得用にエクスポート\r\n *\r\n * 設計ポイント:\r\n * - コンポーネント全体で共通利用する設定値を一元管理\r\n * - デフォルト値を明示し、拡張やカスタマイズにも対応しやすい設計\r\n */\r\nimport { IConfig } from \"./types\";\r\n\r\nconst globalConfig: IConfig = {\r\n  \"debug\"                : false,\r\n  \"locale\"               : \"en-US\", // The locale of the component, ex. \"en-US\", default is \"en-US\"\r\n  \"enableShadowDom\"      : true, // Whether to use Shadow DOM or not\r\n  \"enableMainWrapper\"    : true, // Whether to use the main wrapper or not\r\n  \"enableRouter\"         : true, // Whether to use the router or not\r\n  \"autoInsertMainWrapper\": false, // Whether to automatically insert the main wrapper or not\r\n  \"autoInit\"             : true, // Whether to automatically initialize the component or not\r\n  \"mainTagName\"          : \"app-main\", // The tag name of the main wrapper, default is \"app-main\"\r\n  \"routerTagName\"        : \"view-router\", // The tag name of the router, default is \"view-router\"\r\n  \"layoutPath\"           : \"\", // The path to the layout file, default is \"\"\r\n  \"autoLoadFromImportMap\": false, // Whether to automatically load the component from the import map or not\r\n  \"optimizeList\"         : true, // Whether to optimize the list or not\r\n  \"optimizeListElements\" : true, // Whether to optimize the list elements or not\r\n  \"optimizeAccessor\"     : true, // Whether to optimize the accessors or not\r\n};\r\n\r\n\r\nexport function getGlobalConfig():IConfig {\r\n  return globalConfig;\r\n}\r\n\r\nexport const config = getGlobalConfig();\r\n","/**\r\n * errorMessages.ts\r\n *\r\n * フィルタ関数などで利用するエラーメッセージ生成ユーティリティです。\r\n *\r\n * 主な役割:\r\n * - フィルタのオプションや値の型チェックで条件を満たさない場合に、分かりやすいエラーメッセージを投げる\r\n * - 関数名を引数に取り、どのフィルタでエラーが発生したかを明示\r\n *\r\n * 設計ポイント:\r\n * - optionsRequired: オプションが必須なフィルタで未指定時にエラー\r\n * - optionMustBeNumber: オプション値が数値でない場合にエラー\r\n * - valueMustBeNumber: 値が数値でない場合にエラー\r\n * - valueMustBeBoolean: 値がbooleanでない場合にエラー\r\n * - valueMustBeDate: 値がDateでない場合にエラー\r\n */\r\nexport function optionsRequired(fnName:string): never {\r\n  throw new Error(`${fnName} requires at least one option`);\r\n}\r\n\r\nexport function optionMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number as option`);\r\n}\r\n\r\nexport function valueMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number value`);\r\n}\r\n\r\nexport function valueMustBeBoolean(fnName:string): never {\r\n  throw new Error(`${fnName} requires a boolean value`);\r\n}\r\n\r\nexport function valueMustBeDate(fnName:string): never {\r\n  throw new Error(`${fnName} requires a date value`);\r\n}","/**\r\n * builtinFilters.ts\r\n *\r\n * Structiveで利用可能な組み込みフィルタ関数群の実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - 数値・文字列・日付・真偽値などの変換・比較・整形・判定用フィルタを提供\r\n * - フィルタ名ごとにオプション付きの関数を定義し、バインディング時に柔軟に利用可能\r\n * - input/output両方のフィルタとして共通利用できる設計\r\n *\r\n * 設計ポイント:\r\n * - eq, ne, lt, gt, inc, fix, locale, uc, lc, cap, trim, slice, pad, int, float, round, date, time, ymd, falsy, truthy, defaults, boolean, number, string, null など多彩なフィルタを網羅\r\n * - オプション値の型チェックやエラーハンドリングも充実\r\n * - FilterWithOptions型でフィルタ関数群を一元管理し、拡張も容易\r\n * - builtinFilterFnでフィルタ名・オプションからフィルタ関数を動的に取得可能\r\n */\r\nimport { getGlobalConfig } from \"../WebComponents/getGlobalConfig.js\";\r\nimport { optionMustBeNumber, optionsRequired, valueMustBeBoolean, valueMustBeDate, valueMustBeNumber } from \"./errorMessages.js\";\r\nimport { FilterWithOptions } from \"./types\";\r\n\r\nconst config = getGlobalConfig();\r\n\r\nconst eq = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('eq');\r\n  return (value: any) => {\r\n    // 型を揃えて比較\r\n    if (typeof value === 'number') {\r\n      const optValue = Number(opt);\r\n      if (isNaN(optValue)) optionMustBeNumber('eq');\r\n      return value === optValue;\r\n    }\r\n    if (typeof value === 'string') {\r\n      return value === opt;\r\n    }\r\n    // その他は厳密等価\r\n    return value === opt;\r\n  }\r\n}\r\n\r\nconst ne = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ne');\r\n  return (value: any) => {\r\n    // 型を揃えて比較\r\n    if (typeof value === 'number') {\r\n      const optValue = Number(opt);\r\n      if (isNaN(optValue)) optionMustBeNumber('eq');\r\n      return value !== optValue;\r\n    }\r\n    if (typeof value === 'string') {\r\n      return value !== opt;\r\n    }\r\n    // その他は厳密等価\r\n    return value !== opt;\r\n  }\r\n}\r\n\r\nconst not = (options?:string[]) => {\r\n  return (value: any) => {\r\n    if (typeof value !== 'boolean') valueMustBeBoolean('not');\r\n    return !value;\r\n  }\r\n}\r\n\r\nconst lt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('lt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('lt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('lt');\r\n    return value < optValue;\r\n  }\r\n}\r\n\r\nconst le = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('le');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('le');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('le');\r\n    return value <= optValue;\r\n  }\r\n}\r\n\r\nconst gt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('gt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('gt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('gt');\r\n    return value > optValue;\r\n  }\r\n}\r\n\r\nconst ge = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ge');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ge');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ge');\r\n    return value >= optValue;\r\n  }\r\n}\r\n\r\nconst inc = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('inc');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('inc');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('inc');\r\n    return value + optValue;\r\n  }\r\n}\r\n\r\nconst dec = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('dec');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('dec');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('dec');\r\n    return value - optValue;\r\n  }\r\n}\r\n\r\nconst mul = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('mul');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('mul');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('mul');\r\n    return value * optValue;\r\n  }\r\n}\r\n\r\nconst div = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('div');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value / optValue;\r\n  }\r\n}\r\n\r\nconst fix = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value.toFixed(optValue);\r\n  }\r\n}\r\n\r\nconst locale = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('locale');\r\n    return value.toLocaleString(opt);\r\n  }\r\n}\r\n\r\nconst uc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toUpperCase();\r\n  }\r\n}\r\n\r\nconst lc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toLowerCase();\r\n  }\r\n}\r\n\r\nconst cap = (options?:string[]) => {\r\n  return (value: any) => {\r\n    const v = value.toString();\r\n    if (v.length === 0) return v;\r\n    if (v.length === 1) return v.toUpperCase();\r\n    return v.charAt(0).toUpperCase() + v.slice(1);\r\n  }\r\n}\r\n\r\nconst trim = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().trim();\r\n  }\r\n}\r\n\r\nconst slice = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('slice');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('slice');\r\n  return (value: any) => {\r\n    return value.toString().slice(optValue);\r\n  }\r\n}\r\n\r\nconst substr = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('substr');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('substr');\r\n  const opt2 = options?.[1] ?? optionsRequired('substr');\r\n  const opt2Value = Number(opt2);\r\n  if (isNaN(opt2Value)) optionMustBeNumber('substr');\r\n  return (value: any) => {\r\n    return value.toString().substr(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst pad = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('pad');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('pad');\r\n  const opt2 = options?.[1] ?? '0';\r\n  const opt2Value = opt2;\r\n  return (value: any) => {\r\n    return value.toString().padStart(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst rep = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('rep');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('rep');\r\n  return (value: any) => {\r\n    return value.toString().repeat(optValue);\r\n  }\r\n}\r\n\r\nconst rev = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().split('').reverse().join('');\r\n  }\r\n}\r\n\r\nconst int = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseInt(value, 10);\r\n  }\r\n}\r\n\r\nconst float = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseFloat(value);\r\n  }\r\n}\r\n\r\nconst round = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('round');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('round');\r\n    return Math.round(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst floor = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('floor');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('floor');\r\n    return Math.floor(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst ceil = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('ceil');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ceil');\r\n    return Math.ceil(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst percent = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('percent');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('percent');\r\n    return value.toFixed(optValue) + '%';\r\n  }\r\n}\r\n\r\nconst date = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date))  valueMustBeDate('date');\r\n    return value.toLocaleDateString(opt);\r\n  }\r\n}\r\n\r\nconst time = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('time');\r\n    return value.toLocaleTimeString(opt);\r\n  }\r\n}\r\n\r\nconst datetime = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('datetime');\r\n    return value.toLocaleString(opt);\r\n  }\r\n}\r\n\r\nconst ymd = (options?:string[]) => {\r\n  const opt = options?.[0] ?? '-';\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('ymd');\r\n    const year = value.getFullYear().toString();\r\n    const month = (value.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = value.getDate().toString().padStart(2, '0');\r\n    return `${year}${opt}${month}${opt}${day}`;\r\n  }\r\n}\r\n\r\nconst falsy = (options?:string[]) => {\r\n  return (value: any) => value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value);\r\n}\r\n\r\nconst truthy = (options?:string[]) => {\r\n  return (value: any) =>value !== false && value !== null && value !== undefined && value !== 0 && value !== '' && !Number.isNaN(value);\r\n}\r\n\r\nconst defaults = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('defaults');\r\n  return (value: any) => {\r\n    if (value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value)) return opt;\r\n    return value;\r\n  }\r\n}\r\n\r\nconst boolean = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Boolean(value);\r\n  }\r\n}\r\n\r\nconst number = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Number(value);\r\n  }\r\n}\r\n\r\nconst string = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return String(value);\r\n  }\r\n}\r\n\r\nconst _null = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return (value === \"\") ? null : value;\r\n  } \r\n}\r\n\r\nconst builtinFilters: FilterWithOptions = {\r\n  \"eq\": eq,\r\n  \"ne\": ne,\r\n  \"not\": not,\r\n\r\n  \"lt\": lt,\r\n  \"le\": le,\r\n  \"gt\": gt,\r\n  \"ge\": ge,\r\n\r\n  \"inc\": inc,\r\n  \"dec\": dec,\r\n  \"mul\": mul,\r\n  \"div\": div,\r\n\r\n  \"fix\": fix,\r\n  \"locale\": locale,\r\n  \"uc\": uc,\r\n  \"lc\": lc,\r\n  \"cap\": cap,\r\n  \"trim\": trim,\r\n  \"slice\": slice,\r\n  \"substr\": substr,\r\n  \"pad\": pad,\r\n  \"rep\": rep,\r\n  \"rev\": rev,\r\n\r\n  \"int\": int,\r\n  \"float\": float,\r\n  \"round\": round,\r\n  \"floor\": floor,\r\n  \"ceil\": ceil,\r\n  \"percent\": percent,\r\n\r\n  \"date\": date,\r\n  \"time\": time,\r\n  \"datetime\": datetime,\r\n  \"ymd\": ymd,\r\n\r\n  \"falsy\": falsy,\r\n  \"truthy\": truthy,\r\n  \"defaults\": defaults,\r\n\r\n  \"boolean\": boolean,\r\n  \"number\": number,\r\n  \"string\": string,\r\n  \"null\": _null,\r\n};\r\n\r\nexport const outputBuiltinFilters = builtinFilters;\r\nexport const inputBuiltinFilters = builtinFilters;\r\n\r\nexport const builtinFilterFn = (name:string, options: string[]) => (filters: FilterWithOptions) => {\r\n  const filter = filters[name];\r\n  if (!filter) throw new Error(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(options);\r\n}\r\n\r\n","\r\nlet id = 0;\r\n\r\nexport function generateId(): number {\r\n  return ++id;\r\n}","\r\nexport function raiseError(message: string): never {\r\n  throw new Error(message);\r\n}\r\n","/**\r\n * registerStateClass.ts\r\n *\r\n * StateClassインスタンスをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - stateClassById: IDをキーにStateClassインスタンスを管理するレコード\r\n * - registerStateClass: 指定IDでStateClassインスタンスを登録\r\n * - getStateClassById: 指定IDのStateClassインスタンスを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - グローバルにStateClassインスタンスを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IStructiveState } from \"./types\";\r\n\r\nconst stateClassById: Record<number,IStructiveState> = {};\r\n\r\nexport function registerStateClass(id: number, stateClass: IStructiveState) {\r\n  stateClassById[id] = stateClass;\r\n}\r\n\r\nexport function getStateClassById(id: number): IStructiveState {\r\n  return stateClassById[id] ?? raiseError(`getStateClassById: stateClass not found: ${id}`);\r\n}\r\n","/**\r\n * registerStyleSheet.ts\r\n *\r\n * CSSStyleSheetインスタンスをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - styleSheetById: IDをキーにCSSStyleSheetインスタンスを管理するレコード\r\n * - registerStyleSheet: 指定IDでCSSStyleSheetインスタンスを登録\r\n * - getStyleSheetById: 指定IDのCSSStyleSheetインスタンスを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - グローバルにCSSStyleSheetインスタンスを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nconst styleSheetById: Record<number,CSSStyleSheet> = {};\r\n\r\nexport function registerStyleSheet(id: number, css: CSSStyleSheet) {\r\n  styleSheetById[id] = css;\r\n}\r\n\r\nexport function getStyleSheetById(id: number): CSSStyleSheet {\r\n  return styleSheetById[id] ?? raiseError(`getStyleSheetById: stylesheet not found: ${id}`);\r\n}","/**\r\n * regsiterCss.ts\r\n *\r\n * CSS文字列をCSSStyleSheetとして生成し、IDで登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - CSS文字列からCSSStyleSheetインスタンスを生成\r\n * - registerStyleSheetを利用して、指定IDでCSSStyleSheetを登録\r\n *\r\n * 設計ポイント:\r\n * - styleSheet.replaceSyncで同期的にCSSを適用\r\n * - グローバルなスタイル管理や動的スタイル適用に利用可能\r\n */\r\nimport { registerStyleSheet } from \"./registerStyleSheet.js\";\r\n\r\nexport function registerCss(id: number, css: string) {\r\n  const styleSheet = new CSSStyleSheet();\r\n  styleSheet.replaceSync(css);\r\n  registerStyleSheet(id, styleSheet);\r\n}","import { NodePath } from \"./types\";\r\n\r\n/**\r\n * ルートノードとノードパス（インデックス配列）から、該当するノードを辿って取得するユーティリティ関数。\r\n *\r\n * - NodePathは各階層でのchildNodesのインデックスを表す配列\r\n * - ルートから順にchildNodes[index]を辿り、該当ノードを返す\r\n * - パスが不正な場合やノードが存在しない場合はnullを返す\r\n *\r\n * @param root  探索の起点となるルートノード\r\n * @param path  各階層のインデックス配列（NodePath）\r\n * @returns     パスで指定されたノード、またはnull\r\n */\r\nexport function resolveNodeFromPath(root: Node, path: NodePath): Node | null {\r\n  let node = root;\r\n  if (path.length === 0) return node;\r\n  // path.reduce()だと途中でnullになる可能性があるので、\r\n  for(let i = 0; i < path.length; i++) {\r\n    node = node?.childNodes[path[i]] ?? null;\r\n    if (node === null) break;\r\n  }\r\n  return node;\r\n}","import { FilterFn, Filters, FilterWithOptions } from \"../Filter/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\n\r\n/**\r\n * フィルターテキスト（nameとoptionsを持つ）から、実際のフィルター関数（FilterFn）を生成する。\r\n * \r\n * - textToFilter: フィルターテキストから対応するフィルター関数を取得し、オプションを適用して返す。\r\n * - createFilters: フィルターテキスト配列からフィルター関数配列を生成し、同じ入力にはキャッシュを利用する。\r\n */\r\nfunction textToFilter(filters:FilterWithOptions, text: IFilterText): FilterFn {\r\n  const filter = filters[text.name];\r\n  if (!filter) raiseError(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(text.options);\r\n}\r\n\r\nconst cache : Map<IFilterText[], Filters> = new Map();\r\n\r\n/**\r\n * フィルターテキスト配列（texts）からフィルター関数配列（Filters）を生成する。\r\n * すでに同じtextsがキャッシュされていればそれを返す。\r\n * \r\n * @param filters フィルター名→関数の辞書\r\n * @param texts   フィルターテキスト配列\r\n * @returns       フィルター関数配列\r\n */\r\nexport function createFilters(filters:FilterWithOptions, texts: IFilterText[]): Filters {\r\n  let result = cache.get(texts);\r\n  if (typeof result === \"undefined\") {\r\n    result = [];\r\n    for(let i = 0; i < texts.length; i++) {\r\n      result.push(textToFilter(filters, texts[i]));\r\n    }\r\n    cache.set(texts, result);\r\n  }\r\n  return result;\r\n}\r\n","import { Filters } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IReadonlyStateProxy } from \"../../StateClass/types\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { IRenderer } from \"../../Updater/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { IBindingNode } from \"./types\";\r\n\r\n/**\r\n * BindingNodeクラスは、1つのバインディング対象ノード（ElementやTextなど）に対する\r\n * バインディング処理の基底クラスです。\r\n *\r\n * 主な役割:\r\n * - ノード・プロパティ名・フィルタ・デコレータ・バインディング情報の保持\r\n * - バインディング値の更新（update）、値の割り当て（assignValue）のインターフェース提供\r\n * - 複数バインド内容（bindContents）の管理\r\n * - サブクラスでassignValueやupdateElementsを実装し、各種ノード・プロパティごとのバインディング処理を拡張\r\n *\r\n * 設計ポイント:\r\n * - assignValue, updateElementsは未実装（サブクラスでオーバーライド必須）\r\n * - isSelectElement, value, filteredValue, isForなどはサブクラスで用途に応じて拡張\r\n * - フィルタやデコレータ、バインド内容の管理も柔軟に対応\r\n */\r\nexport class BindingNode implements IBindingNode {\r\n  #binding: IBinding;\r\n  #node: Node;\r\n  #name: string;\r\n  #filters: Filters;\r\n  #decorates: string[];\r\n  #bindContents: IBindContent[] = [];\r\n  get node(): Node {\r\n    return this.#node;\r\n  }\r\n  get name(): string {\r\n    return this.#name;\r\n  }\r\n  get subName(): string {\r\n    return this.#name;\r\n  }\r\n  get binding(): IBinding {\r\n    return this.#binding;\r\n  }\r\n  get decorates(): string[] {\r\n    return this.#decorates;\r\n  }\r\n  get filters(): Filters {\r\n    return this.#filters;\r\n  }\r\n  get bindContents(): IBindContent[] {\r\n    return this.#bindContents;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#node = node;\r\n    this.#name = name;\r\n    this.#filters = filters;\r\n    this.#decorates = decorates;\r\n  }\r\n  init():void {\r\n    // サブクラスで初期化処理を実装可能\r\n  }\r\n  assignValue(value: any): void {\r\n    raiseError(`BindingNode: assignValue not implemented`);\r\n  }\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    raiseError(`BindingNode: updateElements not implemented`);\r\n  }\r\n  notifyRedraw(refs: IStatePropertyRef[]): void {\r\n    // サブクラスで親子関係を考慮してバインディングの更新を通知する実装が可能\r\n  }\r\n  applyChange(renderer: IRenderer): void {\r\n    if (renderer.updatedBindings.has(this.binding)) return;\r\n    const filteredValue = this.binding.bindingState.getFilteredValue(renderer.readonlyState);\r\n    this.assignValue(filteredValue);\r\n    renderer.updatedBindings.add(this.binding);\r\n  }\r\n\r\n  get isSelectElement(): boolean {\r\n    return this.node instanceof HTMLSelectElement;\r\n  }\r\n  get value():any {\r\n    return null;\r\n  }\r\n  get filteredValue():any {\r\n    return null;\r\n  }\r\n  get isFor(): boolean {\r\n    return false;\r\n  }\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeAttributeクラスは、属性バインディング（例: attr.src, attr.alt など）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - ノード属性名（subName）を抽出し、値を属性としてElementにセット\r\n * - null/undefined/NaNの場合は空文字列に変換してセット\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameから属性名（subName）を抽出（例: \"attr.src\" → \"src\"）\r\n * - assignValueで属性値を常に文字列として設定\r\n * - createBindingNodeAttributeファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeAttribute extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as Element;\r\n    element.setAttribute(this.subName, value.toString());\r\n  }\r\n}\r\n\r\n/**\r\n * 属性バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeAttributeインスタンスを生成\r\n */\r\nexport const createBindingNodeAttribute: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeAttribute(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeCheckboxクラスは、チェックボックス（input[type=\"checkbox\"]）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（配列）に現在のvalueが含まれているかどうかでchecked状態を制御\r\n * - 値が配列でない場合はエラーを投げる\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで配列内にvalueが含まれていればchecked=true\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeCheckbox extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeCheckbox.update: value is not array`, );\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.map(_val => _val.toString()).includes(element.value);\r\n  }\r\n}\r\n\r\n/**\r\n * チェックボックス用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeCheckboxインスタンスを生成\r\n */\r\nexport const createBindingNodeCheckbox: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeCheckbox(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeClassListクラスは、class属性（classList）のバインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（配列）を空白区切りのclass属性値としてElementにセット\r\n * - 値が配列でない場合はエラーを投げる\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで配列を受け取り、join(\" \")でclassNameに反映\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeClassList extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeClassList.update: value is not array`);\r\n    }\r\n    const element = this.node as Element;\r\n    element.className = value.join(\" \");\r\n  }\r\n}\r\n\r\n/**\r\n * classList用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeClassListインスタンスを生成\r\n */\r\nexport const createBindingNodeClassList: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassList(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeClassNameクラスは、class属性の個別クラス名（例: class.active など）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（boolean）に応じて、指定クラス名（subName）をElementに追加・削除\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからクラス名（subName）を抽出（例: \"class.active\" → \"active\"）\r\n * - assignValueでboolean値のみ許容し、型が異なる場合はエラー\r\n * - trueならclassList.add、falseならclassList.removeでクラス操作\r\n * - ファクトリ関数でフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeClassName extends BindingNode {\r\n  #subName: string;\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeClassName.update: value is not boolean`);\r\n    }\r\n    const element = this.node as Element;\r\n    if (value) {\r\n      element.classList.add(this.subName);\r\n    } else {\r\n      element.classList.remove(this.subName);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * class名バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeClassNameインスタンスを生成\r\n */\r\nexport const createBindingNodeClassName: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassName(binding, node, name, filterFns, decorates);\r\n  }\r\n","export const DATA_BIND_ATTRIBUTE = \"data-bind\";\r\nexport const COMMENT_EMBED_MARK = \"@@:\"; // 埋め込み変数のマーク\r\nexport const COMMENT_TEMPLATE_MARK = \"@@|\"; // テンプレートのマーク\r\nexport const MAX_WILDCARD_DEPTH = 32; // ワイルドカードの最大深度\r\nexport const WILDCARD = \"*\"; // ワイルドカード\r\nexport const RESERVED_WORD_SET = new Set([\r\n  \"constructor\", \"prototype\", \"__proto__\", \"toString\",\r\n  \"valueOf\", \"hasOwnProperty\", \"isPrototypeOf\",\r\n  \"watch\", \"unwatch\", \"eval\", \"arguments\",\r\n  \"let\", \"var\", \"const\", \"class\", \"function\",\r\n  \"null\", \"true\", \"false\", \"new\", \"return\",\r\n]);\r\n\r\n","/**\r\n * getStructuredPathInfo.ts\r\n *\r\n * Stateプロパティのパス文字列から、詳細な構造化パス情報（IStructuredPathInfo）を生成・キャッシュするユーティリティです。\r\n *\r\n * 主な役割:\r\n * - パス文字列を分割し、各セグメントやワイルドカード（*）の位置・親子関係などを解析\r\n * - cumulativePaths/wildcardPaths/parentPathなど、パス階層やワイルドカード階層の情報を構造化\r\n * - 解析結果をIStructuredPathInfoとしてキャッシュし、再利用性とパフォーマンスを両立\r\n * - reservedWords（予約語）チェックで安全性を担保\r\n *\r\n * 設計ポイント:\r\n * - パスごとにキャッシュし、同じパスへの複数回アクセスでも高速に取得可能\r\n * - ワイルドカードや親子関係、階層構造を厳密に解析し、バインディングや多重ループに最適化\r\n * - childrenプロパティでパス階層のツリー構造も構築\r\n * - 予約語や危険なパスはraiseErrorで例外を発生\r\n */\r\nimport { RESERVED_WORD_SET } from '../constants.js';\r\nimport { raiseError } from '../utils.js';\r\nimport { IStructuredPathInfo } from './types';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IStructuredPathInfo } = {};\r\n\r\n/**\r\n * パターン情報を取得します\r\n * @param pattern パターン\r\n * @returns {IPatternInfo} パターン情報\r\n */\r\nclass StructuredPathInfo implements IStructuredPathInfo {\r\n  static id : number = 0;\r\n  id = ++StructuredPathInfo.id;\r\n  sid = this.id.toString();\r\n  pattern;\r\n  pathSegments;\r\n  lastSegment;\r\n  cumulativePaths;\r\n  cumulativePathSet;\r\n  cumulativeInfos;\r\n  cumulativeInfoSet;\r\n  wildcardPaths;\r\n  wildcardPathSet;\r\n  wildcardInfos;\r\n  indexByWildcardPath;\r\n  wildcardInfoSet;\r\n  wildcardParentPaths;\r\n  wildcardParentPathSet;\r\n  wildcardParentInfos;\r\n  wildcardParentInfoSet;\r\n  lastWildcardPath;\r\n  lastWildcardInfo;\r\n  parentPath;\r\n  parentInfo;\r\n  wildcardCount;\r\n  children = {};\r\n\r\n  constructor(pattern: string) {\r\n    const getPattern = (_pattern: string): IStructuredPathInfo => {\r\n      return (pattern === _pattern) ? this : getStructuredPathInfo(_pattern);\r\n    };\r\n    const pathSegments = pattern.split(\".\");\r\n    const cumulativePaths = [];\r\n    const cumulativeInfos: IStructuredPathInfo[] = [];\r\n    const wildcardPaths = [];\r\n    const indexByWildcardPath: Record<string, number> = {};\r\n    const wildcardInfos = [];\r\n    const wildcardParentPaths = [];\r\n    const wildcardParentInfos = [];\r\n    let currentPatternPath = \"\", prevPatternPath = \"\";\r\n    let wildcardCount = 0;\r\n    for(let i = 0; i < pathSegments.length; i++) {\r\n      currentPatternPath += pathSegments[i];\r\n      if (pathSegments[i] === \"*\") {\r\n        wildcardPaths.push(currentPatternPath);\r\n        indexByWildcardPath[currentPatternPath] = wildcardCount;\r\n        wildcardInfos.push(getPattern(currentPatternPath));\r\n        wildcardParentPaths.push(prevPatternPath);\r\n        wildcardParentInfos.push(getPattern(prevPatternPath));\r\n        wildcardCount++;\r\n      }\r\n      cumulativePaths.push(currentPatternPath);\r\n      cumulativeInfos.push(getPattern(currentPatternPath));\r\n      prevPatternPath = currentPatternPath;\r\n      currentPatternPath += \".\";\r\n    }\r\n    const lastWildcardPath = wildcardPaths.length > 0 ? wildcardPaths[wildcardPaths.length - 1] : null;\r\n    const parentPath = cumulativePaths.length > 1 ? cumulativePaths[cumulativePaths.length - 2] : null;\r\n    this.pattern = pattern;\r\n    this.pathSegments = pathSegments;\r\n    this.lastSegment = pathSegments[pathSegments.length - 1];\r\n    this.cumulativePaths = cumulativePaths;\r\n    this.cumulativePathSet = new Set(cumulativePaths);\r\n    this.cumulativeInfos = cumulativeInfos;\r\n    this.cumulativeInfoSet = new Set(cumulativeInfos);\r\n    this.wildcardPaths = wildcardPaths;\r\n    this.wildcardPathSet = new Set(wildcardPaths);\r\n    this.indexByWildcardPath = indexByWildcardPath;\r\n    this.wildcardInfos = wildcardInfos;\r\n    this.wildcardInfoSet = new Set(wildcardInfos);\r\n    this.wildcardParentPaths = wildcardParentPaths;\r\n    this.wildcardParentPathSet = new Set(wildcardParentPaths);\r\n    this.wildcardParentInfos = wildcardParentInfos;\r\n    this.wildcardParentInfoSet = new Set(wildcardParentInfos);\r\n    this.lastWildcardPath = lastWildcardPath;\r\n    this.lastWildcardInfo = lastWildcardPath ? getPattern(lastWildcardPath) : null;\r\n    this.parentPath = parentPath;\r\n    this.parentInfo = parentPath ? getPattern(parentPath) : null;\r\n    this.wildcardCount = wildcardCount;\r\n    if (this.parentInfo) {\r\n      this.parentInfo.children[this.lastSegment] = this;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function getStructuredPathInfo(structuredPath: string): IStructuredPathInfo {\r\n  if (RESERVED_WORD_SET.has(structuredPath)) {\r\n    raiseError(`getStructuredPathInfo: pattern is reserved word: ${structuredPath}`);\r\n  }\r\n  const info = _cache[structuredPath];\r\n  if (typeof info !== \"undefined\") {\r\n    return info;\r\n  }\r\n  return (_cache[structuredPath] = new StructuredPathInfo(structuredPath));\r\n}\r\n","/**\r\n * getResolvedPathInfo.ts\r\n *\r\n * Stateプロパティ名（パス文字列）から、ワイルドカードやインデックス情報を含む\r\n * 詳細なパス情報（IResolvedPathInfo）を解析・生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - プロパティ名を分解し、ワイルドカードやインデックスの有無・種別を判定\r\n * - context/all/partial/none のワイルドカード種別を自動判定\r\n * - パスごとにキャッシュし、再利用性とパフォーマンスを両立\r\n * - getStructuredPathInfoで構造化パス情報も取得\r\n *\r\n * 設計ポイント:\r\n * - \"constructor\"や\"toString\"などの予約語も扱えるよう、Mapではなくオブジェクトでキャッシュ\r\n * - ワイルドカード（*）や数値インデックスを柔軟に判定し、wildcardIndexesに格納\r\n * - context型は未確定インデックス、all型は全て確定インデックス、partial型は混在を示す\r\n * - ResolvedPathInfoクラスでパス解析・情報保持を一元化\r\n */\r\nimport { IResolvedPathInfo, WildcardType } from './types';\r\nimport { getStructuredPathInfo } from './getStructuredPathInfo.js';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: Map<string, IResolvedPathInfo> = new Map();\r\n\r\nclass ResolvedPathInfo implements IResolvedPathInfo {\r\n  static id : number = 0;\r\n  id = ++ResolvedPathInfo.id;\r\n  name;\r\n  elements;\r\n  paths;\r\n  wildcardCount;\r\n  wildcardType;\r\n  wildcardIndexes;\r\n  info;\r\n  constructor(name: string) {\r\n    const elements = name.split(\".\");\r\n    const tmpPatternElements = elements.slice();\r\n    const paths = [];\r\n    let incompleteCount = 0;\r\n    let completeCount = 0;\r\n    let lastPath = \"\";\r\n    let wildcardCount = 0;\r\n    let wildcardType: WildcardType = \"none\";\r\n    let wildcardIndexes: (number | null)[] = [];\r\n    for(let i = 0; i < elements.length; i++) {\r\n      const element = elements[i];\r\n      if (element === \"*\") {\r\n        tmpPatternElements[i] = \"*\";\r\n        wildcardIndexes.push(null);\r\n        incompleteCount++;\r\n        wildcardCount++;\r\n      } else {\r\n        const number = Number(element);\r\n        if (!Number.isNaN(number)) {\r\n          tmpPatternElements[i] = \"*\";\r\n          wildcardIndexes.push(number);\r\n          completeCount++;\r\n          wildcardCount++;\r\n        }\r\n      }\r\n      lastPath += element;\r\n      paths.push(lastPath);\r\n      lastPath += (i < elements.length - 1 ? \".\" : \"\");\r\n    }\r\n    const pattern = tmpPatternElements.join(\".\");\r\n    const info = getStructuredPathInfo(pattern);\r\n    if (incompleteCount > 0 || completeCount > 0) {\r\n      if (incompleteCount === wildcardCount) {\r\n        wildcardType = \"context\";\r\n      } else if (completeCount === wildcardCount) {\r\n        wildcardType = \"all\";\r\n      } else {\r\n        wildcardType = \"partial\";\r\n      }\r\n    }\r\n    this.name = name;\r\n    this.elements = elements;\r\n    this.paths = paths;\r\n    this.wildcardCount = wildcardCount;\r\n    this.wildcardType = wildcardType;\r\n    this.wildcardIndexes = wildcardIndexes;\r\n    this.info = info;\r\n  }\r\n}\r\n\r\nexport function getResolvedPathInfo(name:string):IResolvedPathInfo {\r\n  let nameInfo: IResolvedPathInfo | undefined;\r\n  return _cache.get(name) ?? (_cache.set(name, nameInfo = new ResolvedPathInfo(name)), nameInfo);\r\n}","import { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IStatePropertyRef } from \"./types\";\r\n\r\nfunction createRefKey(\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n) {\r\n  return (listIndex == null) ? info.sid : (info.sid + \"#\" + listIndex.sid);\r\n}\r\n\r\nclass StatePropertyRef implements IStatePropertyRef {\r\n  info: IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null;\r\n  get listIndex(): IListIndex | null {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  key: string;\r\n  constructor(\r\n    info: IStructuredPathInfo,\r\n    listIndex: IListIndex | null,\r\n  ) {\r\n    this.info = info;\r\n    this.#listIndexRef = listIndex !== null ? new WeakRef(listIndex) : null;\r\n    this.key = createRefKey(info, listIndex);\r\n  }\r\n}\r\n\r\nconst refByInfoByListIndex = new WeakMap<IListIndex, Map<IStructuredPathInfo, IStatePropertyRef>>();\r\nconst refByInfoByNull = new Map<IStructuredPathInfo, IStatePropertyRef>();\r\n\r\nexport function getStatePropertyRef(\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n): IStatePropertyRef {\r\n  let ref = null;\r\n  if (listIndex !== null) {\r\n    let refByInfo = refByInfoByListIndex.get(listIndex);\r\n    if (typeof refByInfo === \"undefined\") {\r\n      refByInfo = new Map<IStructuredPathInfo, IStatePropertyRef>();\r\n      refByInfoByListIndex.set(listIndex, refByInfo);\r\n    }\r\n    ref = refByInfo.get(info);\r\n    if (typeof ref === \"undefined\") {\r\n      ref = new StatePropertyRef(info, listIndex);\r\n      refByInfo.set(info, ref);\r\n    }\r\n    return ref;\r\n  } else {\r\n    ref = refByInfoByNull.get(info);\r\n    if (typeof ref === \"undefined\") {\r\n      ref = new StatePropertyRef(info, null);\r\n      refByInfoByNull.set(info, ref);\r\n    }\r\n    return ref;\r\n  }\r\n}\r\n","/**\r\n * getContextListIndex.ts\r\n *\r\n * StateClassの内部APIとして、現在のプロパティ参照スコープにおける\r\n * 指定したstructuredPath（ワイルドカード付きプロパティパス）に対応する\r\n * リストインデックス（IListIndex）を取得する関数です。\r\n *\r\n * 主な役割:\r\n * - handlerの最後にアクセスされたStatePropertyRefから、指定パスに対応するリストインデックスを取得\r\n * - ワイルドカード階層に対応し、多重ループやネストした配列バインディングにも利用可能\r\n *\r\n * 設計ポイント:\r\n * - 直近のプロパティ参照情報を取得\r\n * - info.wildcardPathsからstructuredPathのインデックスを特定\r\n * - listIndex.at(index)で該当階層のリストインデックスを取得\r\n * - パスが一致しない場合や参照が存在しない場合はnullを返す\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function getContextListIndex(\r\n  handler: IStateHandler,\r\n  structuredPath: string\r\n): IListIndex | null {\r\n  const ref = handler.refStack[handler.refIndex];\r\n  if (ref == null) {\r\n    return null;\r\n  }\r\n  if (ref.info == null) {\r\n    return null;\r\n  }\r\n  if (ref.listIndex == null) {\r\n    return null;\r\n  }\r\n  const index = ref.info.indexByWildcardPath[structuredPath];\r\n  if (typeof index !== \"undefined\") {\r\n    return ref.listIndex.at(index);\r\n  }\r\n  return null;\r\n}\r\n","/**\r\n * getListIndex.ts\r\n *\r\n * StateClassの内部APIとして、パス情報（IResolvedPathInfo）から\r\n * 対応するリストインデックス（IListIndex）を取得する関数です。\r\n *\r\n * 主な役割:\r\n * - パスのワイルドカード種別（context/all/partial/none）に応じてリストインデックスを解決\r\n * - context型は現在のループコンテキストからリストインデックスを取得\r\n * - all型は各階層のリストインデックス集合からインデックスを辿って取得\r\n * - partial型やnone型は未実装またはnullを返す\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードや多重ループ、ネストした配列バインディングに柔軟に対応\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n * - エラー時はraiseErrorで詳細な例外を投げる\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IResolvedPathInfo } from \"../../StateProperty/types\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IReadonlyStateProxy, IStateProxy } from \"../types\";\r\nimport { getContextListIndex } from \"./getContextListIndex\";\r\n\r\nexport function getListIndex(\r\n  resolvedPath: IResolvedPathInfo, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): IListIndex | null {\r\n  switch (resolvedPath.wildcardType) {\r\n    case \"none\":\r\n      return null;\r\n    case \"context\":\r\n      const lastWildcardPath = resolvedPath.info.lastWildcardPath ?? \r\n        raiseError(`lastWildcardPath is null`);\r\n      return getContextListIndex(handler, lastWildcardPath) ?? \r\n        raiseError(`ListIndex not found: ${resolvedPath.info.pattern}`);\r\n    case \"all\":\r\n      let parentListIndex: IListIndex | null = null;\r\n      for(let i = 0; i < resolvedPath.info.wildcardCount; i++) {\r\n        const wildcardParentPattern = resolvedPath.info.wildcardParentInfos[i] ?? \r\n          raiseError(`wildcardParentPattern is null`);\r\n        const wildcardRef = getStatePropertyRef(wildcardParentPattern, parentListIndex);\r\n        const listIndexes: IListIndex[] = handler.engine.getListIndexes(wildcardRef) ?? \r\n          raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n        const wildcardIndex = resolvedPath.wildcardIndexes[i] ?? \r\n          raiseError(`wildcardIndex is null`);\r\n        parentListIndex = listIndexes[wildcardIndex] ?? \r\n          raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n      }\r\n      return parentListIndex;\r\n    case \"partial\":\r\n      raiseError(`Partial wildcard type is not supported yet: ${resolvedPath.info.pattern}`);\r\n  }\r\n}\r\n","\r\nconst symbolName = \"state\";\r\n\r\nexport const GetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.GetByRef`);\r\nexport const SetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.SetByRef`);\r\nexport const SetCacheableSymbol        : unique symbol = Symbol.for(`${symbolName}.SetCacheable`);\r\nexport const ConnectedCallbackSymbol   : unique symbol = Symbol.for(`${symbolName}.ConnectedCallback`);\r\nexport const DisconnectedCallbackSymbol: unique symbol = Symbol.for(`${symbolName}.DisconnectedCallback`);\r\n","import { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function checkDependency(\r\n  handler: IStateHandler,\r\n  ref: IStatePropertyRef,\r\n): void {\r\n  // 動的依存関係の登録\r\n  if (handler.refIndex >= 0) {\r\n    const lastInfo = handler.refStack[handler.refIndex]?.info ?? null;\r\n    if (lastInfo !== null) {\r\n      if (handler.engine.pathManager.getters.has(lastInfo.pattern) &&\r\n        !handler.engine.pathManager.setters.has(lastInfo.pattern) &&\r\n        lastInfo.pattern !== ref.info.pattern) {\r\n        handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, ref.info.pattern);\r\n      }\r\n    }\r\n  }\r\n}","/**\r\n * setStatePropertyRef.ts\r\n *\r\n * StateClassの内部APIとして、状態プロパティ参照（IStructuredPathInfo, IListIndex）のスコープを\r\n * 一時的に設定し、指定したコールバックをそのスコープ内で実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.structuredPathInfoStackとhandler.listIndexStackにinfoとlistIndexをpushしてスコープを設定\r\n * - 指定したcallbackをそのスコープ内で実行\r\n * - finallyで必ずスタックからpopし、スコープ外への影響を防止\r\n *\r\n * 設計ポイント:\r\n * - コールバック実行中のみスコープを切り替え、例外発生時も状態復元を保証\r\n * - ネストしたスコープにも対応可能\r\n */\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function setStatePropertyRef(\r\n  handler: IStateHandler,\r\n  ref: IStatePropertyRef,\r\n  callback: () => void\r\n): void {\r\n  handler.refIndex++;\r\n  if (handler.refIndex >= handler.refStack.length) {\r\n    handler.refStack.push(null);\r\n  }\r\n  handler.refStack[handler.refIndex] = ref;\r\n  try {\r\n    return callback();\r\n  } finally {\r\n    handler.refStack[handler.refIndex] = null;\r\n    handler.refIndex--;\r\n  }\r\n}\r\n","/**\r\n * getByRef.ts\r\n *\r\n * StateClassの内部APIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * 状態オブジェクト（target）から値を取得するための関数（getByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定されたパス・インデックスに対応するState値を取得（多重ループやワイルドカードにも対応）\r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyで値をキャッシュ）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * - 存在しない場合は親infoやlistIndexを辿って再帰的に値を取得\r\n *\r\n * 設計ポイント:\r\n * - handler.engine.trackedGettersに含まれる場合はsetTrackingで依存追跡を有効化\r\n * - キャッシュ有効時はrefKeyで値をキャッシュし、取得・再利用を最適化\r\n * - ワイルドカードや多重ループにも柔軟に対応し、再帰的な値取得を実現\r\n * - finallyでキャッシュへの格納を保証\r\n */\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IWritableStateHandler, IWritableStateProxy } from \"../types\";\r\nimport { checkDependency } from \"./checkDependency\";\r\nimport { setStatePropertyRef } from \"./setStatePropertyRef\";\r\n\r\n/**\r\n * 構造化パス情報(info, listIndex)をもとに、状態オブジェクト(target)から値を取得する。\r\n * \r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyでキャッシュ）\r\n * - ネスト・ワイルドカード対応（親infoやlistIndexを辿って再帰的に値を取得）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * \r\n * @param target    状態オブジェクト\r\n * @param info      構造化パス情報\r\n * @param listIndex リストインデックス（多重ループ対応）\r\n * @param receiver  プロキシ\r\n * @param handler   状態ハンドラ\r\n * @returns         対象プロパティの値\r\n */\r\nexport function getByRefWritable(\r\n  target   : Object, \r\n  ref      : IStatePropertyRef,\r\n  receiver : IWritableStateProxy,\r\n  handler  : IWritableStateHandler\r\n): any {\r\n  checkDependency(handler, ref);\r\n\r\n  // 親子関係のあるgetterが存在する場合は、外部依存から取得\r\n  // ToDo: stateにgetterが存在する（パスの先頭が一致する）場合はgetter経由で取得\r\n  if (handler.engine.stateOutput.startsWith(ref.info) && handler.engine.pathManager.getters.intersection(ref.info.cumulativePathSet).size === 0) {\r\n    return handler.engine.stateOutput.get(ref);\r\n  }\r\n\r\n  // パターンがtargetに存在する場合はgetter経由で取得\r\n  if (ref.info.pattern in target) {\r\n    return setStatePropertyRef(handler, ref, () => {\r\n      return Reflect.get(target, ref.info.pattern, receiver);\r\n    });\r\n  } else {\r\n    // 存在しない場合は親infoを辿って再帰的に取得\r\n    const parentInfo = ref.info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n    const parentListIndex = parentInfo.wildcardCount < ref.info.wildcardCount ? (ref.listIndex?.parentListIndex ?? null) : ref.listIndex;\r\n    const parentRef = getStatePropertyRef(parentInfo, parentListIndex);\r\n    const parentValue = getByRefWritable(target, parentRef, receiver, handler);\r\n    const lastSegment = ref.info.lastSegment;\r\n    if (lastSegment === \"*\") {\r\n      // ワイルドカードの場合はlistIndexのindexでアクセス\r\n      const index = ref.listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n      return Reflect.get(parentValue, index);\r\n    } else {\r\n      // 通常のプロパティアクセス\r\n      return Reflect.get(parentValue, lastSegment);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * setByRef.ts\r\n *\r\n * StateClassの内部APIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * 状態オブジェクト（target）に値を設定するための関数（setByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定されたパス・インデックスに対応するState値を設定（多重ループやワイルドカードにも対応）\r\n * - getter/setter経由で値設定時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * - 存在しない場合は親infoやlistIndexを辿って再帰的に値を設定\r\n * - 設定後はengine.updater.addUpdatedStatePropertyRefValueで更新情報を登録\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードや多重ループにも柔軟に対応し、再帰的な値設定を実現\r\n * - finallyで必ず更新情報を登録し、再描画や依存解決に利用\r\n * - getter/setter経由のスコープ切り替えも考慮した設計\r\n */\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IWritableStateProxy, IWritableStateHandler } from \"../types\";\r\nimport { getByRefWritable } from \"./getByRefWritable\";\r\nimport { setStatePropertyRef } from \"./setStatePropertyRef\";\r\n\r\nexport function setByRef(\r\n    target   : Object, \r\n    ref      : IStatePropertyRef,\r\n    value    : any, \r\n    receiver : IWritableStateProxy,\r\n    handler  : IWritableStateHandler\r\n): any {\r\n  try {\r\n    // 親子関係のあるgetterが存在する場合は、外部依存を通じて値を設定\r\n    // ToDo: stateにgetterが存在する（パスの先頭が一致する）場合はgetter経由で取得\r\n    if (handler.engine.stateOutput.startsWith(ref.info) && handler.engine.pathManager.setters.intersection(ref.info.cumulativePathSet).size === 0) {\r\n      return handler.engine.stateOutput.set(ref, value);\r\n    }\r\n    if (ref.info.pattern in target) {\r\n      return setStatePropertyRef(handler, ref, () => {\r\n        return Reflect.set(target, ref.info.pattern, value, receiver);\r\n      });\r\n    } else {\r\n      const parentInfo = ref.info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < ref.info.wildcardCount ? (ref.listIndex?.parentListIndex ?? null) : ref.listIndex;\r\n      const parentRef = getStatePropertyRef(parentInfo, parentListIndex);\r\n      const parentValue = getByRefWritable(target, parentRef, receiver, handler);\r\n      const lastSegment = ref.info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = ref.listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return Reflect.set(parentValue, index, value);\r\n      } else {\r\n        return Reflect.set(parentValue, lastSegment, value);\r\n      }\r\n    }\r\n  } finally {\r\n    handler.updater.enqueueRef(ref);\r\n  }\r\n}\r\n","/**\r\n * resolve.ts\r\n *\r\n * StateClassのAPIとして、パス（path）とインデックス（indexes）を指定して\r\n * Stateの値を取得・設定するための関数（resolve）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列パス（path）とインデックス配列（indexes）から、該当するState値の取得・設定を行う\r\n * - ワイルドカードや多重ループを含むパスにも対応\r\n * - value未指定時は取得（getByRef）、指定時は設定（setByRef）を実行\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパスを解析し、ワイルドカード階層ごとにリストインデックスを解決\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n * - getByRef/setByRefで値の取得・設定を一元的に処理\r\n * - 柔軟なバインディングやAPI経由での利用が可能\r\n */\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IWritableStateProxy, IWritableStateHandler } from \"../types\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { getByRefWritable } from \"../methods/getByRefWritable\";\r\nimport { IListIndex } from \"../../ListIndex/types.js\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\n\r\nexport function resolveWritable(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IWritableStateProxy,\r\n  handler: IWritableStateHandler\r\n): Function {\r\n  return (path: string, indexes: number[], value?: any): any => {\r\n    const info = getStructuredPathInfo(path);\r\n    const lastInfo = handler.refStack[handler.refIndex]?.info ?? null;\r\n    if (lastInfo !== null && lastInfo.pattern !== info.pattern) {\r\n      // gettersに含まれる場合は依存関係を登録\r\n      if (handler.engine.pathManager.getters.has(lastInfo.pattern) &&\r\n        !handler.engine.pathManager.setters.has(lastInfo.pattern)) {\r\n        handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, info.pattern);\r\n      }\r\n    }\r\n\r\n    let listIndex: IListIndex | null = null;\r\n    for(let i = 0; i < info.wildcardParentInfos.length; i++) {\r\n      const wildcardParentPattern = info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPath is null`);\r\n      const wildcardRef = getStatePropertyRef(wildcardParentPattern, listIndex);\r\n      const listIndexes: IListIndex[] = handler.engine.getListIndexes(wildcardRef) ?? [];\r\n      const index = indexes[i] ?? raiseError(`index is null`);\r\n      listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    const ref = getStatePropertyRef(info, listIndex);\r\n    if (typeof value === \"undefined\") {\r\n      return getByRefWritable(target, ref, receiver, handler);\r\n    } else {\r\n      return setByRef(target, ref, value, receiver, handler);\r\n    }\r\n  };\r\n} ","import { raiseError } from \"../../utils\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nexport function trackDependency(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (path: string): void => {\r\n    const lastInfo = handler.refStack[handler.refIndex]?.info ?? raiseError(\"Internal error: refStack is null.\");\r\n    if (handler.engine.pathManager.getters.has(lastInfo.pattern) &&\r\n      lastInfo.pattern !== path) {\r\n      handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, path);\r\n    }\r\n  };\r\n}\r\n","import { MAX_WILDCARD_DEPTH } from \"../../constants\";\r\n\r\n/**\r\n * stackIndexByIndexName\r\n * インデックス名からスタックインデックスへのマッピング\r\n * $1 => 0\r\n * $2 => 1\r\n * :\r\n * ${i + 1} => i\r\n * i < MAX_WILDCARD_DEPTH\r\n */\r\nexport const indexByIndexName: { [key: PropertyKey]: number } = {};\r\nfor (let i = 0; i < MAX_WILDCARD_DEPTH; i++) {\r\n  indexByIndexName[`$${i+1}`] = i;\r\n}\r\n","/**\r\n * get.ts\r\n *\r\n * StateClassのProxyトラップとして、プロパティアクセス時の値取得処理を担う関数（get）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列プロパティの場合、特殊プロパティ（$1〜$9, $resolve, $getAll, $navigate）に応じた値やAPIを返却\r\n * - 通常のプロパティはgetResolvedPathInfoでパス情報を解決し、getListIndexでリストインデックスを取得\r\n * - getByRefで構造化パス・リストインデックスに対応した値を取得\r\n * - シンボルプロパティの場合はhandler.callableApi経由でAPIを呼び出し\r\n * - それ以外はReflect.getで通常のプロパティアクセスを実行\r\n *\r\n * 設計ポイント:\r\n * - $1〜$9は直近のStatePropertyRefのリストインデックス値を返す特殊プロパティ\r\n * - $resolve, $getAll, $navigateはAPI関数やルーターインスタンスを返す\r\n * - 通常のプロパティアクセスもバインディングや多重ループに対応\r\n * - シンボルAPIやReflect.getで拡張性・互換性も確保\r\n */\r\nimport { getRouter } from \"../../Router/Router.js\";\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { getListIndex } from \"../methods/getListIndex.js\";\r\nimport { IWritableStateHandler, IWritableStateProxy } from \"../types.js\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetByRefSymbol } from \"../symbols.js\";\r\nimport { getByRefWritable } from \"../methods/getByRefWritable.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { resolveWritable } from \"../apis/resolveWritable.js\";\r\nimport { getAllWritable } from \"../apis/getAllWritable.js\";\r\nimport { connectedCallback } from \"../apis/connectedCallback.js\";\r\nimport { disconnectedCallback } from \"../apis/disconnectedCallback.js\";\r\nimport { trackDependency } from \"../apis/trackDependency.js\";\r\nimport { indexByIndexName } from \"./indexByIndexName.js\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types.js\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\n\r\nexport function getWritable(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  receiver: IWritableStateProxy,\r\n  handler : IWritableStateHandler\r\n): any {\r\n  const index = indexByIndexName[prop];\r\n  if (typeof index !== \"undefined\") {\r\n    const listIndex = handler.refStack[handler.refIndex]?.listIndex;\r\n    return listIndex?.indexes[index] ?? raiseError(`ListIndex not found: ${prop.toString()}`);\r\n  }\r\n  if (typeof prop === \"string\") {\r\n    if (prop[0] === \"$\") {\r\n      switch (prop) {\r\n        case \"$resolve\":\r\n          return resolveWritable(target, prop, receiver, handler);\r\n        case \"$getAll\":\r\n          return getAllWritable(target, prop, receiver, handler);\r\n        case \"$trackDependency\":\r\n          return trackDependency(target, prop, receiver, handler);\r\n        case \"$navigate\":\r\n          return (to:string) => getRouter()?.navigate(to);\r\n        case \"$component\":\r\n          return handler.engine.owner;\r\n      }\r\n    }\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, receiver, handler);\r\n    const ref = getStatePropertyRef(resolvedInfo.info, listIndex);\r\n    return getByRefWritable(\r\n      target, \r\n      ref,\r\n      receiver,\r\n      handler\r\n    );\r\n\r\n  } else if (typeof prop === \"symbol\") {\r\n    switch (prop) {\r\n      case GetByRefSymbol: \r\n        return (ref: IStatePropertyRef) => \r\n          getByRefWritable(target, ref, receiver, handler);\r\n      case SetByRefSymbol: \r\n        return (ref: IStatePropertyRef, value: any) => \r\n          setByRef(target, ref, value, receiver, handler);\r\n      case ConnectedCallbackSymbol:\r\n        return () => connectedCallback(target, prop, receiver, handler);\r\n      case DisconnectedCallbackSymbol: \r\n        return () => disconnectedCallback(target, prop, receiver, handler);\r\n      default:\r\n        return Reflect.get(\r\n          target, \r\n          prop, \r\n          receiver\r\n        );\r\n    }\r\n  }\r\n}\r\n","/**\r\n * getAll.ts\r\n *\r\n * StateClassのAPIとして、ワイルドカードを含むStateプロパティパスに対応した\r\n * 全要素取得関数（getAll）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定パス（path）に一致する全てのState要素を配列で取得\r\n * - 多重ループやワイルドカード（*）を含むパスにも対応\r\n * - indexes未指定時は現在のループコンテキストから自動でインデックスを解決\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパス情報を解析し、依存関係も自動で登録\r\n * - walkWildcardPatternでワイルドカード階層を再帰的に探索し、全インデックス組み合わせを列挙\r\n * - resolveで各インデックス組み合わせに対応する値を取得し、配列で返却\r\n * - getContextListIndexで現在のループインデックスを取得\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n */\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IWritableStateHandler, IWritableStateProxy } from \"../types\";\r\nimport { resolveWritable } from \"./resolveWritable.js\";\r\nimport { getContextListIndex } from \"../methods/getContextListIndex\";\r\nimport { IListIndex } from \"../../ListIndex/types.js\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\n\r\nexport function getAllWritable(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IWritableStateProxy,\r\n  handler: IWritableStateHandler\r\n):Function {\r\n    const resolve = resolveWritable(target, prop, receiver, handler);\r\n    return (path: string, indexes?: number[]): any[] => {\r\n      const info = getStructuredPathInfo(path);\r\n      const lastInfo = handler.refStack[handler.refIndex]?.info ?? null;\r\n      if (lastInfo !== null && lastInfo.pattern !== info.pattern) {\r\n        // gettersに含まれる場合は依存関係を登録\r\n        if (handler.engine.pathManager.getters.has(lastInfo.pattern) &&\r\n          !handler.engine.pathManager.setters.has(lastInfo.pattern)) {\r\n          handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, info.pattern);\r\n        }\r\n      }\r\n  \r\n      if (typeof indexes === \"undefined\") {\r\n        for(let i = 0; i < info.wildcardInfos.length; i++) {\r\n          const wildcardPattern = info.wildcardInfos[i] ?? raiseError(`wildcardPattern is null`);\r\n          const listIndex = getContextListIndex(handler, wildcardPattern.pattern);\r\n          if (listIndex) {\r\n            indexes = listIndex.indexes;\r\n            break;\r\n          }\r\n        }\r\n        if (typeof indexes === \"undefined\") {\r\n          indexes = [];\r\n        }\r\n      }\r\n      const walkWildcardPattern = (\r\n        wildcardParentInfos: IStructuredPathInfo[],\r\n        wildardIndexPos: number,\r\n        listIndex: IListIndex | null,\r\n        indexes: number[],\r\n        indexPos: number,\r\n        parentIndexes: number[],\r\n        results: number[][]\r\n      ) => {\r\n        const wildcardParentPattern = wildcardParentInfos[wildardIndexPos] ?? null;\r\n        if (wildcardParentPattern === null) {\r\n          results.push(parentIndexes);\r\n          return;\r\n        }\r\n        const wildcardRef = getStatePropertyRef(wildcardParentPattern, listIndex);\r\n        const listIndexes = handler.engine.getListIndexes(wildcardRef) ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n        const index = indexes[indexPos] ?? null;\r\n        if (index === null) {\r\n          for(let i = 0; i < listIndexes.length; i++) {\r\n            const listIndex = listIndexes[i];\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results);\r\n          }\r\n        } else {\r\n          const listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n          if ((wildardIndexPos + 1) < wildcardParentInfos.length) {\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results\r\n            );\r\n          } else {\r\n            // 最終ワイルドカード層まで到達しているので、結果を確定\r\n            results.push(parentIndexes.concat(listIndex.index));\r\n          }\r\n        }\r\n      }\r\n      const resultIndexes: number[][] = [];\r\n      walkWildcardPattern(\r\n        info.wildcardParentInfos, \r\n        0, \r\n        null, \r\n        indexes, \r\n        0, \r\n        [], \r\n        resultIndexes\r\n      );\r\n      const resultValues: any[] = [];\r\n      for(let i = 0; i < resultIndexes.length; i++) {\r\n        resultValues.push(resolve(\r\n          info.pattern,\r\n          resultIndexes[i]\r\n        ));\r\n      }\r\n      return resultValues;\r\n    }\r\n  }","/**\r\n * connectedCallback.ts\r\n *\r\n * StateClassのライフサイクルフック「$connectedCallback」を呼び出すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - オブジェクト（target）に$connectedCallbackメソッドが定義されていれば呼び出す\r\n * - コールバックはtargetのthisコンテキストで呼び出し、IReadonlyStateProxy（receiver）を引数として渡す\r\n * - 非同期関数として実行可能（await対応）\r\n *\r\n * 設計ポイント:\r\n * - Reflect.getで$connectedCallbackプロパティを安全に取得\r\n * - 存在しない場合は何もしない\r\n * - ライフサイクル管理やカスタム初期化処理に利用\r\n */\r\nimport { IWritableStateProxy, IWritableStateHandler } from \"../types\";\r\n\r\nconst CONNECTED_CALLBACK = \"$connectedCallback\";\r\n\r\nexport async function connectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IWritableStateProxy,\r\n  handler: IWritableStateHandler\r\n):Promise<void> {\r\n  const callback = Reflect.get(target, CONNECTED_CALLBACK);\r\n  if (typeof callback === \"function\") {\r\n    await callback.call(receiver);\r\n  }\r\n}","/**\r\n * disconnectedCallback.ts\r\n *\r\n * StateClassのライフサイクルフック「$disconnectedCallback」を呼び出すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - オブジェクト（target）に$disconnectedCallbackメソッドが定義されていれば呼び出す\r\n * - コールバックはtargetのthisコンテキストで呼び出し、IReadonlyStateProxy（receiver）を引数として渡す\r\n * - 非同期関数として実行可能（await対応）\r\n *\r\n * 設計ポイント:\r\n * - Reflect.getで$disconnectedCallbackプロパティを安全に取得\r\n * - 存在しない場合は何もしない\r\n * - ライフサイクル管理やクリーンアップ処理に利用\r\n */\r\nimport { IWritableStateProxy, IWritableStateHandler } from \"../types\";\r\n\r\nconst DISCONNECTED_CALLBACK = \"$disconnectedCallback\";\r\n\r\nexport async function disconnectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IWritableStateProxy,\r\n  handler: IWritableStateHandler\r\n):Promise<void> {\r\n  const callback = Reflect.get(target, DISCONNECTED_CALLBACK);\r\n  if (typeof callback === \"function\") {\r\n    await callback.call(receiver);\r\n  }\r\n}","/**\r\n * createWritableStateProxy.ts\r\n *\r\n * StateClassの「書き込み可能」プロキシを生成するための実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - Stateオブジェクトに対して、書き込み可能なProxyを作成\r\n * - StateHandlerクラスで各種APIやトラップ（get/set）を実装\r\n * - getトラップでバインディングやAPI呼び出し、依存解決などに対応\r\n * - setトラップで値の書き込みや副作用（依存解決・再描画）を一元管理\r\n *\r\n * 設計ポイント:\r\n * - StateHandlerはIWritableStateHandlerを実装し、状態管理やAPI呼び出しの基盤となる\r\n * - callableApiに各種APIシンボルと関数をマッピングし、柔軟なAPI拡張が可能\r\n * - createWritableStateProxyで一貫した生成・利用が可能\r\n * - 依存解決やキャッシュ、ループ・プロパティ参照スコープ管理など多機能な設計\r\n */\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IState, IWritableStateHandler, IWritableStateProxy } from \"./types\";\r\nimport { getWritable as trapGet } from \"./traps/getWritable.js\";\r\nimport { set as trapSet } from \"./traps/set.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { setLoopContext } from \"./methods/setLoopContext\";\r\nimport { IUpdater } from \"../Updater/types\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\n\r\nconst STACK_DEPTH = 32;\r\n\r\nclass StateHandler implements IWritableStateHandler {\r\n  engine   : IComponentEngine;\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: (IStructuredPathInfo | null)[] = Array(STACK_DEPTH).fill(null);\r\n  trackingIndex: number = -1;\r\n  refStack: (IStatePropertyRef | null)[] = Array(STACK_DEPTH).fill(null);\r\n  refIndex: number = -1;\r\n  loopContext: ILoopContext | null = null;\r\n  updater: IUpdater;\r\n  \r\n  constructor(engine: IComponentEngine, updater: IUpdater) {\r\n    this.engine = engine;\r\n    this.updater = updater;\r\n  }\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IWritableStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IWritableStateProxy\r\n  ): boolean {\r\n    return trapSet(target, prop, value, receiver, this);\r\n  }\r\n}\r\n\r\nexport async function useWritableStateProxy(\r\n  engine: IComponentEngine, \r\n  updater: IUpdater,\r\n  state: Object,\r\n  loopContext: ILoopContext | null,\r\n  callback: (stateProxy: IWritableStateProxy) => Promise<void>\r\n): Promise<void> {\r\n  const handler = new StateHandler(engine, updater);\r\n  const stateProxy = new Proxy<IState>(state, handler) as IWritableStateProxy;\r\n  return setLoopContext(handler, loopContext, async () => {\r\n    await callback(stateProxy);\r\n  });\r\n}\r\n\r\n","/**\r\n * set.ts\r\n *\r\n * StateClassのProxyトラップとして、プロパティ設定時の値セット処理を担う関数（set）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列プロパティの場合、getResolvedPathInfoでパス情報を解決し、getListIndexでリストインデックスを取得\r\n * - setByRefで構造化パス・リストインデックスに対応した値設定を実行\r\n * - それ以外（シンボル等）の場合はReflect.setで通常のプロパティ設定を実行\r\n *\r\n * 設計ポイント:\r\n * - バインディングや多重ループ、ワイルドカードを含むパスにも柔軟に対応\r\n * - setByRefを利用することで、依存解決や再描画などの副作用も一元管理\r\n * - Reflect.setで標準的なプロパティ設定の互換性も確保\r\n */\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\nimport { getListIndex } from \"../methods/getListIndex.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { IStateHandler, IReadonlyStateProxy, IWritableStateProxy, IWritableStateHandler } from \"../types\";\r\n\r\nexport function set(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  value   : any, \r\n  receiver: IWritableStateProxy,\r\n  handler : IWritableStateHandler\r\n): boolean {\r\n  if (typeof prop === \"string\") {\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, receiver, handler);\r\n    const ref = getStatePropertyRef(resolvedInfo.info, listIndex);\r\n    return setByRef(\r\n      target, \r\n      ref,\r\n      value, \r\n      receiver,\r\n      handler\r\n    );\r\n  } else {\r\n    return Reflect.set(\r\n      target, \r\n      prop, \r\n      value, \r\n      receiver\r\n    );\r\n  }\r\n}\r\n","/**\r\n * setLoopContext.ts\r\n *\r\n * StateClassの内部APIとして、ループコンテキスト（ILoopContext）を一時的に設定し、\r\n * 指定した非同期コールバックをそのスコープ内で実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.loopContextにループコンテキストを一時的に設定\r\n * - 既にループコンテキストが設定されている場合はエラーを投げる\r\n * - loopContextが存在する場合はasyncSetStatePropertyRefでスコープを設定しコールバックを実行\r\n * - loopContextがnullの場合はそのままコールバックを実行\r\n * - finallyで必ずloopContextをnullに戻し、スコープ外への影響を防止\r\n *\r\n * 設計ポイント:\r\n * - ループバインディングや多重ループ時のスコープ管理を安全に行う\r\n * - finallyで状態復元を保証し、例外発生時も安全\r\n * - 非同期処理にも対応\r\n */\r\nimport { ILoopContext } from \"../../LoopContext/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IWritableStateHandler } from \"../types\";\r\nimport { asyncSetStatePropertyRef } from \"./asyncSetStatePropertyRef\";\r\n\r\nexport async function setLoopContext(\r\n  handler: IWritableStateHandler,\r\n  loopContext: ILoopContext | null,\r\n  callback: () => Promise<void>\r\n): Promise<void> {\r\n  if (handler.loopContext) {\r\n    raiseError('already in loop context');\r\n  }\r\n  handler.loopContext = loopContext;\r\n  try {\r\n    if (loopContext) {\r\n      await asyncSetStatePropertyRef(handler, loopContext.ref, callback);\r\n    } else {\r\n      await callback();\r\n    }\r\n  } finally {\r\n    handler.loopContext = null;\r\n  }\r\n}\r\n","/**\r\n * asyncSetStatePropertyRef.ts\r\n *\r\n * 状態プロパティ参照のスコープを一時的に設定し、非同期コールバックを実行するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - handlerのstructuredPathInfoStackとlistIndexStackに、infoとlistIndexをpushしてスコープを設定\r\n * - 指定した非同期コールバック（callback）をそのスコープ内で実行\r\n * - callback実行後は必ずpopしてスコープを元に戻す（finallyで保証）\r\n *\r\n * 設計ポイント:\r\n * - 非同期処理中も正しいスコープ情報（パス・リストインデックス）が維持される\r\n * - ネストした非同期処理にも対応可能\r\n * - スコープのpush/popは例外発生時も確実に実行される\r\n */\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\n/**\r\n * 状態プロパティ参照のスコープを一時的に設定し、非同期コールバックを実行します。\r\n * \r\n * @param handler   スコープ管理用のハンドラ\r\n * @param info      現在の構造化パス情報\r\n * @param listIndex 現在のリストインデックス（ネスト対応用）\r\n * @param callback  スコープ内で実行する非同期処理\r\n * \r\n * スタックに info と listIndex をpushし、callback実行後に必ずpopします。\r\n * これにより、非同期処理中も正しいスコープ情報が維持されます。\r\n */\r\nexport async function asyncSetStatePropertyRef(\r\n  handler: IStateHandler,\r\n  ref: IStatePropertyRef,\r\n  callback: () => Promise<void>\r\n): Promise<void> {\r\n  handler.refIndex++;\r\n  if (handler.refIndex >= handler.refStack.length) {\r\n    handler.refStack.push(null);\r\n  }\r\n  handler.refStack[handler.refIndex] = ref;\r\n  try {\r\n    await callback();\r\n  } finally {\r\n    handler.refStack[handler.refIndex] = null;\r\n    handler.refIndex--;\r\n  }\r\n}\r\n","import { IListIndex } from \"./types\";\r\n\r\n\r\nlet version = 0;\r\nlet id = 0;\r\nclass ListIndex implements IListIndex {\r\n  #parentListIndex: IListIndex | null = null;\r\n  #pos: number = 0;\r\n  #index: number = 0;\r\n  #version: number;\r\n  #id = ++id;\r\n  #sid = this.#id.toString();\r\n  constructor(parentListIndex: IListIndex | null, index: number) {\r\n    this.#parentListIndex = parentListIndex;\r\n    this.#pos = parentListIndex ? parentListIndex.position + 1 : 0;\r\n    this.#index = index;\r\n    this.#version = version;\r\n  }\r\n\r\n  get parentListIndex() {\r\n    return this.#parentListIndex;\r\n  }\r\n\r\n  get id() {\r\n    return this.#id;\r\n  }\r\n\r\n  get sid() {\r\n    return this.#sid;\r\n  }\r\n\r\n  get position() {\r\n    return this.#pos;\r\n  }\r\n\r\n  get length() {\r\n    return this.#pos + 1;\r\n  }\r\n\r\n  get index() {\r\n    return this.#index;\r\n  }\r\n  set index(value: number) {\r\n    this.#index = value;\r\n    this.#version = ++version;\r\n    this.indexes[this.#pos] = value;\r\n  }\r\n\r\n  get version(): number {\r\n    return this.#version;\r\n  }\r\n\r\n  get dirty(): boolean {\r\n    if (this.#parentListIndex === null) {\r\n      return false;\r\n    } else {\r\n      return this.#parentListIndex.dirty || this.#parentListIndex.version > this.#version;\r\n    }\r\n  }\r\n\r\n  #indexes: number[] | undefined;\r\n  get indexes(): number[] {\r\n    if (this.#parentListIndex === null) {\r\n      if (typeof this.#indexes === \"undefined\") {\r\n        this.#indexes = [this.#index];\r\n      }\r\n    } else {\r\n      if (typeof this.#indexes === \"undefined\" || this.dirty) {\r\n        this.#indexes = [...this.#parentListIndex.indexes, this.#index];\r\n        this.#version = version;\r\n      }\r\n    }\r\n    return this.#indexes;\r\n  }\r\n\r\n  #listIndexes: WeakRef<IListIndex>[] | undefined;\r\n  get listIndexes(): WeakRef<IListIndex>[] {\r\n    if (this.#parentListIndex === null) {\r\n      if (typeof this.#listIndexes === \"undefined\") {\r\n        this.#listIndexes = [new WeakRef(this)];\r\n      }\r\n    } else {\r\n      if (typeof this.#listIndexes === \"undefined\") {\r\n        this.#listIndexes = [...this.#parentListIndex.listIndexes, new WeakRef(this)];\r\n      }\r\n    }\r\n    return this.#listIndexes;\r\n  }\r\n\r\n  get varName(): string {\r\n    return `${this.position + 1}`;\r\n  }\r\n\r\n  at(pos: number): IListIndex | null {\r\n    if (pos >= 0) {\r\n      return this.listIndexes[pos]?.deref() || null;\r\n    } else {\r\n      return this.listIndexes[this.listIndexes.length + pos]?.deref() || null;\r\n    }\r\n  }\r\n}\r\n\r\nexport function createListIndex(parentListIndex: IListIndex | null, index: number): IListIndex {\r\n  return new ListIndex(parentListIndex, index);\r\n}\r\n","import { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IPathNode } from \"./types\";\r\n\r\nclass NodePath implements IPathNode {\r\n  parentPath: string;\r\n  currentPath: string;\r\n  name: string;\r\n  childNodeByName: Map<string, IPathNode>;\r\n  level: number;\r\n\r\n  constructor(parentPath: string, name: string, level: number) {\r\n    this.parentPath = parentPath;\r\n    this.currentPath = parentPath ? parentPath + \".\" + name : name;\r\n    this.name = name;\r\n    this.level = level;\r\n    this.childNodeByName = new Map<string, IPathNode>();\r\n  }\r\n\r\n  find(segments: string[], segIndex: number = 0): IPathNode | null {\r\n    if (segIndex >= segments.length) {\r\n      return null;\r\n    }\r\n\r\n    const currentSegment = segments[segIndex];\r\n    const childNode = this.childNodeByName.get(currentSegment);\r\n\r\n    if (childNode) {\r\n      if (segIndex === segments.length - 1) {\r\n        return childNode;\r\n      }\r\n      return childNode.find(segments, segIndex + 1);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  appendChild(childName: string): IPathNode {\r\n    let childNode = this.childNodeByName.get(childName);\r\n    if (!childNode) {\r\n      const currentPath = this.parentPath ? this.parentPath + \".\" + this.name : this.name;\r\n      childNode = new NodePath(currentPath, childName, this.level + 1);\r\n      this.childNodeByName.set(childName, childNode);\r\n    }\r\n    return childNode;\r\n  }\r\n}\r\n\r\nexport function createRootNode(): IPathNode {\r\n  return new NodePath(\"\", \"\", 0);\r\n}\r\n\r\nconst cache = new Map<IPathNode, Map<string, IPathNode | null>>();\r\nexport function findPathNodeByPath(rootNode: IPathNode, path: string): IPathNode | null {\r\n  let nodeCache = cache.get(rootNode);\r\n  if (!nodeCache) {\r\n    nodeCache = new Map<string, IPathNode>();\r\n    cache.set(rootNode, nodeCache);\r\n  }\r\n  let cachedNode = nodeCache.get(path) ?? null;\r\n  if (cachedNode) {\r\n    return cachedNode;\r\n  }\r\n  const info = getStructuredPathInfo(path);\r\n  cachedNode = rootNode.find(info.pathSegments);\r\n  nodeCache.set(path, cachedNode);\r\n  return cachedNode;\r\n}\r\n\r\nexport function addPathNode(rootNode: IPathNode, path: string): IPathNode {\r\n  const info = getStructuredPathInfo(path);\r\n  if (info.parentPath === null) {\r\n    return rootNode.appendChild(path);\r\n  } else {\r\n    let parentNode = findPathNodeByPath(rootNode, info.parentPath);\r\n    if (parentNode === null) {\r\n      parentNode = addPathNode(rootNode, info.parentPath);\r\n    }\r\n    return parentNode.appendChild(info.lastSegment);\r\n  }\r\n}\r\n","/**\r\n * getByRef.ts\r\n *\r\n * StateClassの内部APIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * 状態オブジェクト（target）から値を取得するための関数（getByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定されたパス・インデックスに対応するState値を取得（多重ループやワイルドカードにも対応）\r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyで値をキャッシュ）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * - 存在しない場合は親infoやlistIndexを辿って再帰的に値を取得\r\n *\r\n * 設計ポイント:\r\n * - handler.engine.trackedGettersに含まれる場合はsetTrackingで依存追跡を有効化\r\n * - キャッシュ有効時はrefKeyで値をキャッシュし、取得・再利用を最適化\r\n * - ワイルドカードや多重ループにも柔軟に対応し、再帰的な値取得を実現\r\n * - finallyでキャッシュへの格納を保証\r\n */\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IReadonlyStateProxy, IReadonlyStateHandler } from \"../types\";\r\nimport { checkDependency } from \"./checkDependency\";\r\nimport { setStatePropertyRef } from \"./setStatePropertyRef\";\r\n\r\n/**\r\n * 構造化パス情報(info, listIndex)をもとに、状態オブジェクト(target)から値を取得する。\r\n * \r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyでキャッシュ）\r\n * - ネスト・ワイルドカード対応（親infoやlistIndexを辿って再帰的に値を取得）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * \r\n * @param target    状態オブジェクト\r\n * @param info      構造化パス情報\r\n * @param listIndex リストインデックス（多重ループ対応）\r\n * @param receiver  プロキシ\r\n * @param handler   状態ハンドラ\r\n * @returns         対象プロパティの値\r\n */\r\nexport function getByRefReadonly(\r\n  target   : Object, \r\n  ref      : IStatePropertyRef,\r\n  receiver : IReadonlyStateProxy,\r\n  handler  : IReadonlyStateHandler\r\n): any {\r\n  checkDependency(handler, ref);\r\n\r\n  let value;\r\n  try {\r\n    // キャッシュが有効な場合はrefKeyで値をキャッシュ\r\n    if (handler.cache !== null) {\r\n      value = handler.cache.get(ref);\r\n      if (typeof value !== \"undefined\") {\r\n        return value;\r\n      }\r\n      if (handler.cache.has(ref)) {\r\n        return undefined;\r\n      }\r\n    }\r\n    try {\r\n      // 親子関係のあるgetterが存在する場合は、外部依存から取得\r\n      // ToDo: stateにgetterが存在する（パスの先頭が一致する）場合はgetter経由で取得\r\n      if (handler.engine.stateOutput.startsWith(ref.info) && handler.engine.pathManager.getters.intersection(ref.info.cumulativePathSet).size === 0) {\r\n        return (value = handler.engine.stateOutput.get(ref));\r\n      }\r\n      // パターンがtargetに存在する場合はgetter経由で取得\r\n      if (ref.info.pattern in target) {\r\n        return (value = setStatePropertyRef(handler, ref, () => {\r\n          return Reflect.get(target, ref.info.pattern, receiver);\r\n        }));\r\n      } else {\r\n        // 存在しない場合は親infoを辿って再帰的に取得\r\n        const parentInfo = ref.info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n        const parentListIndex = parentInfo.wildcardCount < ref.info.wildcardCount ? (ref.listIndex?.parentListIndex ?? null) : ref.listIndex;\r\n        const parentRef = getStatePropertyRef(parentInfo, parentListIndex);\r\n        const parentValue = getByRefReadonly(target, parentRef, receiver, handler);\r\n        const lastSegment = ref.info.lastSegment;\r\n        if (lastSegment === \"*\") {\r\n          // ワイルドカードの場合はlistIndexのindexでアクセス\r\n          const index = ref.listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n          return (value = Reflect.get(parentValue, index));\r\n        } else {\r\n          // 通常のプロパティアクセス\r\n          return (value = Reflect.get(parentValue, lastSegment));\r\n        }\r\n      }\r\n    } finally {\r\n      // キャッシュが有効な場合は取得値をキャッシュ\r\n      if (handler.cache !== null) {\r\n        handler.cache.set(ref, value);\r\n      }\r\n    }\r\n  } finally {\r\n    // リストの場合、リスト差分計算\r\n    if (handler.renderer != null) {\r\n      if (handler.engine.pathManager.lists.has(ref.info.pattern)) {\r\n        handler.renderer.calcListDiff(ref, value as any[] | undefined | null, true);\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * resolve.ts\r\n *\r\n * StateClassのAPIとして、パス（path）とインデックス（indexes）を指定して\r\n * Stateの値を取得・設定するための関数（resolve）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列パス（path）とインデックス配列（indexes）から、該当するState値の取得・設定を行う\r\n * - ワイルドカードや多重ループを含むパスにも対応\r\n * - value未指定時は取得（getByRef）、指定時は設定（setByRef）を実行\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパスを解析し、ワイルドカード階層ごとにリストインデックスを解決\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n * - getByRef/setByRefで値の取得・設定を一元的に処理\r\n * - 柔軟なバインディングやAPI経由での利用が可能\r\n */\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IReadonlyStateProxy, IReadonlyStateHandler } from \"../types\";\r\nimport { getByRefReadonly } from \"../methods/getByRefReadonly\";\r\nimport { IListIndex } from \"../../ListIndex/types.js\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\n\r\nexport function resolveReadonly(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IReadonlyStateProxy,\r\n  handler: IReadonlyStateHandler\r\n): Function {\r\n  return (path: string, indexes: number[], value?: any): any => {\r\n    const info = getStructuredPathInfo(path);\r\n    const lastInfo = handler.refStack[handler.refIndex]?.info ?? null;\r\n    if (lastInfo !== null && lastInfo.pattern !== info.pattern) {\r\n      // gettersに含まれる場合は依存関係を登録\r\n      if (handler.engine.pathManager.getters.has(lastInfo.pattern) &&\r\n        !handler.engine.pathManager.setters.has(lastInfo.pattern)) {\r\n        handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, info.pattern);\r\n      }\r\n    }\r\n\r\n    let listIndex: IListIndex | null = null;\r\n    for(let i = 0; i < info.wildcardParentInfos.length; i++) {\r\n      const wildcardParentPattern = info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPath is null`);\r\n      const wildcardRef = getStatePropertyRef(wildcardParentPattern, listIndex);\r\n      const listIndexes: IListIndex[] = handler.engine.getListIndexes(wildcardRef) ?? [];\r\n      const index = indexes[i] ?? raiseError(`index is null`);\r\n      listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    const ref = getStatePropertyRef(info, listIndex);\r\n    if (typeof value === \"undefined\") {\r\n      return getByRefReadonly(target, ref, receiver, handler);\r\n    } else {\r\n      raiseError(`Cannot set value on a readonly proxy: ${path}`);\r\n    }\r\n  };\r\n} ","/**\r\n * get.ts\r\n *\r\n * StateClassのProxyトラップとして、プロパティアクセス時の値取得処理を担う関数（get）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列プロパティの場合、特殊プロパティ（$1〜$9, $resolve, $getAll, $navigate）に応じた値やAPIを返却\r\n * - 通常のプロパティはgetResolvedPathInfoでパス情報を解決し、getListIndexでリストインデックスを取得\r\n * - getByRefで構造化パス・リストインデックスに対応した値を取得\r\n * - シンボルプロパティの場合はhandler.callableApi経由でAPIを呼び出し\r\n * - それ以外はReflect.getで通常のプロパティアクセスを実行\r\n *\r\n * 設計ポイント:\r\n * - $1〜$9は直近のStatePropertyRefのリストインデックス値を返す特殊プロパティ\r\n * - $resolve, $getAll, $navigateはAPI関数やルーターインスタンスを返す\r\n * - 通常のプロパティアクセスもバインディングや多重ループに対応\r\n * - シンボルAPIやReflect.getで拡張性・互換性も確保\r\n */\r\nimport { getRouter } from \"../../Router/Router.js\";\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { getListIndex } from \"../methods/getListIndex.js\";\r\nimport { IReadonlyStateHandler, IReadonlyStateProxy } from \"../types.js\";\r\nimport { resolveReadonly } from \"../apis/resolveReadonly.js\";\r\nimport { GetByRefSymbol, SetCacheableSymbol } from \"../symbols.js\";\r\nimport { getByRefReadonly } from \"../methods/getByRefReadonly.js\";\r\nimport { setCacheable } from \"../methods/setCacheable.js\";\r\nimport { getAllReadonly } from \"../apis/getAllReadonly.js\";\r\nimport { trackDependency } from \"../apis/trackDependency.js\";\r\nimport { indexByIndexName } from \"./indexByIndexName.js\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types.js\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\n\r\n\r\nexport function getReadonly(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  receiver: IReadonlyStateProxy,\r\n  handler : IReadonlyStateHandler\r\n): any {\r\n  const index = indexByIndexName[prop];\r\n  if (typeof index !== \"undefined\") {\r\n    const listIndex = handler.refStack[handler.refIndex]?.listIndex;\r\n    return listIndex?.indexes[index] ?? raiseError(`ListIndex not found: ${prop.toString()}`);\r\n  }\r\n  if (typeof prop === \"string\") {\r\n    if (prop[0] === \"$\") {\r\n      switch (prop) {\r\n        case \"$resolve\":\r\n          return resolveReadonly(target, prop, receiver, handler);\r\n        case \"$getAll\":\r\n          return getAllReadonly(target, prop, receiver, handler);\r\n        case \"$trackDependency\":\r\n          return trackDependency(target, prop, receiver, handler);\r\n        case \"$navigate\":\r\n          return (to:string) => getRouter()?.navigate(to);\r\n        case \"$component\":\r\n          return handler.engine.owner;\r\n      }\r\n    }\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, receiver, handler);\r\n    const ref = getStatePropertyRef(resolvedInfo.info, listIndex);\r\n    return getByRefReadonly(\r\n      target, \r\n      ref,\r\n      receiver,\r\n      handler\r\n    );\r\n\r\n  } else if (typeof prop === \"symbol\") {\r\n    switch (prop) {\r\n      case GetByRefSymbol: \r\n        return (ref: IStatePropertyRef) => \r\n          getByRefReadonly(target, ref, receiver, handler);\r\n      case SetCacheableSymbol:\r\n        return (callback: () => void) => setCacheable(handler, callback)\r\n      default:\r\n        return Reflect.get(\r\n          target, \r\n          prop, \r\n          receiver\r\n        );\r\n    }\r\n  }\r\n}\r\n","/**\r\n * getAll.ts\r\n *\r\n * StateClassのAPIとして、ワイルドカードを含むStateプロパティパスに対応した\r\n * 全要素取得関数（getAll）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定パス（path）に一致する全てのState要素を配列で取得\r\n * - 多重ループやワイルドカード（*）を含むパスにも対応\r\n * - indexes未指定時は現在のループコンテキストから自動でインデックスを解決\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパス情報を解析し、依存関係も自動で登録\r\n * - walkWildcardPatternでワイルドカード階層を再帰的に探索し、全インデックス組み合わせを列挙\r\n * - resolveで各インデックス組み合わせに対応する値を取得し、配列で返却\r\n * - getContextListIndexで現在のループインデックスを取得\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n */\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IReadonlyStateProxy, IReadonlyStateHandler } from \"../types\";\r\nimport { resolveReadonly } from \"./resolveReadonly.js\";\r\nimport { getContextListIndex } from \"../methods/getContextListIndex\";\r\nimport { IListIndex } from \"../../ListIndex/types.js\";\r\nimport { GetByRefSymbol } from \"../symbols.js\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\n\r\nexport function getAllReadonly(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IReadonlyStateProxy,\r\n  handler: IReadonlyStateHandler\r\n):Function {\r\n    const resolve = resolveReadonly(target, prop, receiver, handler);\r\n    return (path: string, indexes?: number[]): any[] => {\r\n      const info = getStructuredPathInfo(path);\r\n      const lastInfo = handler.refStack[handler.refIndex]?.info ?? null;\r\n      if (lastInfo !== null && lastInfo.pattern !== info.pattern) {\r\n        // gettersに含まれる場合は依存関係を登録\r\n        if (handler.engine.pathManager.getters.has(lastInfo.pattern) &&\r\n          !handler.engine.pathManager.setters.has(lastInfo.pattern)) {\r\n          handler.engine.pathManager.addDynamicDependency(lastInfo.pattern, info.pattern);\r\n        }\r\n      }\r\n  \r\n      if (typeof indexes === \"undefined\") {\r\n        for(let i = 0; i < info.wildcardInfos.length; i++) {\r\n          const wildcardPattern = info.wildcardInfos[i] ?? raiseError(`wildcardPattern is null`);\r\n          const listIndex = getContextListIndex(handler, wildcardPattern.pattern);\r\n          if (listIndex) {\r\n            indexes = listIndex.indexes;\r\n            break;\r\n          }\r\n        }\r\n        if (typeof indexes === \"undefined\") {\r\n          indexes = [];\r\n        }\r\n      }\r\n      const walkWildcardPattern = (\r\n        wildcardParentInfos: IStructuredPathInfo[],\r\n        wildardIndexPos: number,\r\n        listIndex: IListIndex | null,\r\n        indexes: number[],\r\n        indexPos: number,\r\n        parentIndexes: number[],\r\n        results: number[][]\r\n      ) => {\r\n        const wildcardParentPattern = wildcardParentInfos[wildardIndexPos] ?? null;\r\n        if (wildcardParentPattern === null) {\r\n          results.push(parentIndexes);\r\n          return;\r\n        }\r\n        const wildcardRef = getStatePropertyRef(wildcardParentPattern, listIndex);\r\n        let listIndexes = handler.engine.getListIndexes(wildcardRef);\r\n        if (listIndexes === null) {\r\n          receiver[GetByRefSymbol](wildcardRef);// 依存関係登録のために一度取得\r\n          listIndexes = handler.engine.getListIndexes(wildcardRef);\r\n          if (listIndexes === null) {\r\n            raiseError(`ListIndex is not found: ${wildcardParentPattern.pattern}`);\r\n          }\r\n        }\r\n        const index = indexes[indexPos] ?? null;\r\n        if (index === null) {\r\n          for(let i = 0; i < listIndexes.length; i++) {\r\n            const listIndex = listIndexes[i];\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results);\r\n          }\r\n        } else {\r\n          const listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n          if ((wildardIndexPos + 1) < wildcardParentInfos.length) {\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results\r\n            );\r\n          } else {\r\n            // 最終ワイルドカード層まで到達しているので、結果を確定\r\n            results.push(parentIndexes.concat(listIndex.index));\r\n          }\r\n        }\r\n      }\r\n      const resultIndexes: number[][] = [];\r\n      walkWildcardPattern(\r\n        info.wildcardParentInfos, \r\n        0, \r\n        null, \r\n        indexes, \r\n        0, \r\n        [], \r\n        resultIndexes\r\n      );\r\n      const resultValues: any[] = [];\r\n      for(let i = 0; i < resultIndexes.length; i++) {\r\n        resultValues.push(resolve(\r\n          info.pattern,\r\n          resultIndexes[i]\r\n        ));\r\n      }\r\n      return resultValues;\r\n    }\r\n  }","/**\r\n * setCacheable.ts\r\n *\r\n * StateClassの内部APIとして、キャッシュ可能なスコープを一時的に有効化し、\r\n * 指定したコールバック処理をキャッシュ付きで実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.cacheableをtrueに設定し、キャッシュ用オブジェクトを初期化\r\n * - 指定したcallbackをキャッシュ有効状態で実行\r\n * - finallyで必ずcacheableをfalseに戻し、スコープ外ではキャッシュを無効化\r\n *\r\n * 設計ポイント:\r\n * - コールバック実行中のみキャッシュを有効化し、スコープ外への影響を防止\r\n * - finallyで状態復元を保証し、例外発生時も安全\r\n */\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { IReadonlyStateHandler } from \"../types\";\r\n\r\nexport function setCacheable(handler: IReadonlyStateHandler, callback: () => void): void {\r\n  handler.cache = new Map<IStatePropertyRef, any>();\r\n  try {\r\n    callback();\r\n  } finally {\r\n    handler.cache = null;\r\n  }\r\n}\r\n","/**\r\n * createReadonlyStateProxy.ts\r\n *\r\n * StateClassの「読み取り専用」プロキシを生成するための実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - Stateオブジェクトに対して、読み取り専用のProxyを作成\r\n * - StateHandlerクラスで各種APIやトラップ（get/set）を実装\r\n * - getトラップでバインディングやAPI呼び出し、依存解決などに対応\r\n * - setトラップではエラーを投げて書き込みを禁止\r\n *\r\n * 設計ポイント:\r\n * - StateHandlerはIReadonlyStateHandlerを実装し、状態管理やAPI呼び出しの基盤となる\r\n * - callableApiに各種APIシンボルと関数をマッピングし、柔軟なAPI拡張が可能\r\n * - createReadonlyStateProxyで一貫した生成・利用が可能\r\n * - 依存解決やキャッシュ、ループ・プロパティ参照スコープ管理など多機能な設計\r\n */\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IReadonlyStateHandler, IState, IReadonlyStateProxy } from \"./types\";\r\nimport { getReadonly as trapGet } from \"./traps/getReadonly.js\";\r\nimport { raiseError } from \"../utils\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IRenderer } from \"../Updater/types\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\n\r\nconst STACK_DEPTH = 32;\r\n\r\nclass StateHandler implements IReadonlyStateHandler {\r\n  engine   : IComponentEngine;\r\n  cache    : Map<IStatePropertyRef, any> | null = null;\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: (IStructuredPathInfo | null)[] = Array(STACK_DEPTH).fill(null);\r\n  trackingIndex: number = -1;\r\n  refStack: (IStatePropertyRef | null)[] = Array(STACK_DEPTH).fill(null);\r\n  refIndex: number = -1;\r\n  loopContext: ILoopContext | null = null;\r\n  renderer : IRenderer | null = null;\r\n\r\n  constructor(engine: IComponentEngine, renderer: IRenderer | null) {\r\n    this.engine = engine;\r\n    this.renderer = renderer;\r\n  }\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IReadonlyStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IReadonlyStateProxy\r\n  ): boolean {\r\n    raiseError(`Cannot set property ${String(prop)} of readonly state.`);\r\n  }\r\n}\r\n\r\nexport function createReadonlyStateProxy(\r\n  engine: IComponentEngine, \r\n  state: Object,\r\n  renderer: IRenderer | null = null,\r\n): IReadonlyStateProxy {\r\n  return new Proxy<IState>(state, new StateHandler(engine, renderer)) as IReadonlyStateProxy;\r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { WILDCARD } from \"../constants\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { calcListDiff } from \"../ListDiff/ListDiff\";\r\nimport { IListDiff } from \"../ListDiff/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { findPathNodeByPath } from \"../PathTree/PathNode\";\r\nimport { IPathNode } from \"../PathTree/types\";\r\nimport { createReadonlyStateProxy } from \"../StateClass/createReadonlyStateProxy\";\r\nimport { GetByRefSymbol, SetCacheableSymbol } from \"../StateClass/symbols\";\r\nimport { IReadonlyStateProxy } from \"../StateClass/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { getStatePropertyRef } from \"../StatePropertyRef/StatepropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IRenderer } from \"./types\";\r\n\r\nclass Renderer implements IRenderer {\r\n  #updatedBindings: Set<IBinding> = new Set();\r\n  #trackedRefs: Set<IStatePropertyRef> = new Set();\r\n  #engine: IComponentEngine;\r\n  #readonlyState: IReadonlyStateProxy | null = null;\r\n  #listDiffByRef: Map<IStatePropertyRef, IListDiff> = new Map();\r\n\r\n  constructor(engine: IComponentEngine) {\r\n    this.#engine = engine;\r\n  }\r\n\r\n  get updatedBindings(): Set<IBinding> {\r\n    return this.#updatedBindings;\r\n  }\r\n\r\n  get trackedRefs(): Set<IStatePropertyRef> {\r\n    return this.#trackedRefs;\r\n  }\r\n\r\n  get readonlyState(): IReadonlyStateProxy {\r\n    if (!this.#readonlyState) {\r\n      raiseError(\"ReadonlyState is not initialized.\");\r\n    }\r\n    return this.#readonlyState;\r\n  }\r\n\r\n  get engine(): IComponentEngine {\r\n    if (!this.#engine) {\r\n      raiseError(\"Engine is not initialized.\");\r\n    }\r\n    return this.#engine;\r\n  }\r\n\r\n  render(items: IStatePropertyRef[]): void {\r\n    this.#listDiffByRef.clear();\r\n    this.#trackedRefs.clear();\r\n    this.#updatedBindings.clear();\r\n\r\n    // 実際のレンダリングロジックを実装\r\n    const readonlyState = this.#readonlyState = createReadonlyStateProxy(this.#engine, this.#engine.state, this);\r\n    try {\r\n      readonlyState[SetCacheableSymbol](() => {\r\n        for(let i = 0; i < items.length; i++) {\r\n          const ref = items[i];\r\n          const node = findPathNodeByPath(this.#engine.pathManager.rootNode, ref.info.pattern);\r\n          if (node === null) {\r\n            raiseError(`PathNode not found: ${ref.info.pattern}`);\r\n          }\r\n          this.renderItem(ref, node);\r\n        }\r\n      });\r\n\r\n    } finally {\r\n      this.#readonlyState = null;\r\n    }\r\n  }\r\n\r\n  calcListDiff(ref: IStatePropertyRef, _newListValue: any[] | undefined | null = undefined, isNewValue: boolean = false): IListDiff {\r\n    let listDiff = this.#listDiffByRef.get(ref);\r\n    if (typeof listDiff === \"undefined\") {\r\n      const [ oldListValue, oldListIndexes ] = this.engine.getListAndListIndexes(ref);\r\n      let newListValue = isNewValue ? _newListValue : this.readonlyState[GetByRefSymbol](ref);\r\n      listDiff = calcListDiff(ref.listIndex, oldListValue, newListValue, oldListIndexes);\r\n      this.#listDiffByRef.set(ref, listDiff);\r\n      if (oldListValue !== newListValue) {\r\n        this.engine.saveListAndListIndexes(ref, newListValue, listDiff.newIndexes);\r\n      }\r\n    }\r\n    return listDiff;\r\n  }\r\n\r\n  renderItem(\r\n    ref: IStatePropertyRef,\r\n    node: IPathNode,\r\n  ): void {\r\n    if (this.trackedRefs.has(ref)) {\r\n      return; // すでに処理済みのRef情報はスキップ\r\n    }\r\n    this.trackedRefs.add(ref);\r\n\r\n    // バインディングに変更を適用する\r\n    // 変更があったバインディングはupdatedBindingsに追加する\r\n    const bindings = this.#engine.getBindings(ref);\r\n    for(let i = 0; i < bindings.length; i++) {\r\n      const binding = bindings[i];\r\n      if (this.updatedBindings.has(binding)) {\r\n        continue; // すでに更新済みのバインディングはスキップ\r\n      }\r\n      binding.applyChange(this);\r\n    }\r\n\r\n    // 静的な依存関係を辿る\r\n    for(const [ name, childNode ] of node.childNodeByName) {\r\n      const childInfo = getStructuredPathInfo(childNode.currentPath);\r\n      if (name === WILDCARD) {\r\n        const diff = this.calcListDiff(ref);\r\n        for(const listIndex of diff.adds ?? []) {\r\n          const childRef = getStatePropertyRef(childInfo, listIndex);\r\n          this.renderItem(childRef, childNode);\r\n        }\r\n      } else {\r\n        const childRef = getStatePropertyRef(childInfo, ref.listIndex);\r\n        this.renderItem(childRef, childNode);\r\n      }\r\n    }\r\n\r\n    // 動的な依存関係を辿る\r\n    const deps = this.#engine.pathManager.dynamicDependencies.get(ref.info.pattern);\r\n    if (deps) {\r\n      for(const depPath of deps) {\r\n        const depInfo = getStructuredPathInfo(depPath);\r\n        const depNode = findPathNodeByPath(this.#engine.pathManager.rootNode, depInfo.pattern);\r\n        if (depNode === null) {\r\n          raiseError(`PathNode not found: ${depInfo.pattern}`);\r\n        }\r\n        if (depInfo.wildcardCount > 0) {\r\n          const infos = depInfo.wildcardParentInfos;\r\n          const walk = (depRef: IStatePropertyRef, index: number, nextInfo: IStructuredPathInfo) => {\r\n            const listIndexes = this.#engine.getListIndexes(depRef) || [];\r\n            if ((index + 1) < infos.length) {\r\n              for(let i = 0; i < listIndexes.length; i++) {\r\n                const nextRef = getStatePropertyRef(nextInfo, listIndexes[i]);\r\n                walk(nextRef, index + 1, infos[index + 1]);\r\n              }\r\n            } else {\r\n              for(let i = 0; i < listIndexes.length; i++) {\r\n                const subDepRef = getStatePropertyRef(depInfo, listIndexes[i]);\r\n                this.renderItem(subDepRef, depNode);\r\n              }\r\n            }\r\n          }\r\n          const startRef = getStatePropertyRef(depInfo.wildcardParentInfos[0], null);\r\n          walk(startRef, 0, depInfo.wildcardParentInfos[1] || null);\r\n        } else {\r\n          const depRef = getStatePropertyRef(depInfo, null);\r\n          this.renderItem(depRef, depNode);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function render(refs: IStatePropertyRef[], engine: IComponentEngine): void {\r\n  const renderer = new Renderer(engine);\r\n  renderer.render(refs);\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { createListIndex } from \"../ListIndex/ListIndex\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IListDiff } from \"./types\";\r\n\r\nexport function calcListDiff(\r\n  parentListIndex: IListIndex | null,\r\n  oldListValue: any[] | undefined | null,\r\n  newListValue: any[] | undefined | null,\r\n  oldIndexes: IListIndex[] | undefined | null,\r\n): IListDiff {\r\n  const _newListValue = newListValue || [];\r\n  const _oldListValue = oldListValue || [];\r\n  const _oldIndexes = oldIndexes || [];\r\n  if (_newListValue === _oldListValue || (_newListValue.length === 0 && _oldListValue.length === 0)) {\r\n    return {\r\n      oldListValue,\r\n      newListValue,\r\n      oldIndexes: _oldIndexes,\r\n      newIndexes: _oldIndexes,\r\n    };\r\n  }\r\n  if (_newListValue.length === 0) {\r\n    return {\r\n      oldListValue,\r\n      newListValue,\r\n      oldIndexes: _oldIndexes,\r\n      newIndexes: [],\r\n      removes: new Set(_oldIndexes),\r\n    };\r\n  } else if (_oldListValue.length === 0) {\r\n    const newIndexes = [];\r\n    for(let i = 0; i< _newListValue.length; i++) {\r\n      newIndexes.push(createListIndex(parentListIndex, i));\r\n    }\r\n    return {\r\n      oldListValue,\r\n      newListValue,\r\n      oldIndexes: _oldIndexes,\r\n      newIndexes,\r\n      adds: new Set(newIndexes),\r\n    };\r\n  } else {\r\n    const listIndexByListValue = new Map<any, IListIndex>();\r\n    for(let i = 0; i< _oldListValue.length; i++) {\r\n      listIndexByListValue.set(_oldListValue[i], _oldIndexes[i]);\r\n    }\r\n    const adds = new Set<IListIndex>();\r\n    const removes = new Set<IListIndex>(oldIndexes);\r\n    const overwrites = new Set<IListIndex>();\r\n    const changeIndexes = new Set<IListIndex>();\r\n    const newIndexes: IListIndex[] = [];\r\n    for(let i = 0; i< _newListValue.length; i++) {\r\n      const newValue = _newListValue[i];\r\n      let newListIndex = listIndexByListValue.get(newValue);\r\n      if (typeof newListIndex === \"undefined\") {\r\n        newListIndex = createListIndex(parentListIndex, i);\r\n        adds.add(newListIndex);\r\n      } else {\r\n        if (newListIndex.index !== i) {\r\n          newListIndex.index = i;\r\n          changeIndexes.add(newListIndex);\r\n        }\r\n        removes.delete(newListIndex);\r\n      }\r\n      newIndexes.push(newListIndex);\r\n    }\r\n    return {\r\n      oldListValue,\r\n      newListValue,\r\n      oldIndexes: _oldIndexes,\r\n      newIndexes,\r\n      adds,\r\n      removes,\r\n      overwrites,\r\n      changeIndexes,\r\n    };\r\n  }\r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IWritableStateProxy } from \"../StateClass/types\";\r\nimport { useWritableStateProxy } from \"../StateClass/useWritableStateProxy\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { render } from \"./Renderer\";\r\nimport { IUpdater } from \"./types\";\r\n\r\n\r\n/**\r\n * Updater2クラスは、状態管理と更新の中心的な役割を果たします。\r\n * 状態更新が必要な場合に、都度インスタンスを作成して使用します。\r\n * 主な機能は以下の通りです:\r\n */\r\nclass Updater implements IUpdater {\r\n  queue: IStatePropertyRef[] = [];\r\n  #updating: boolean = false;\r\n  #rendering: boolean = false;\r\n  #engine: IComponentEngine | null = null;\r\n\r\n  // Ref情報をキューに追加\r\n  enqueueRef(ref: IStatePropertyRef): void {\r\n    this.queue.push(ref);\r\n    if (this.#rendering) return;\r\n    this.#rendering = true;\r\n    queueMicrotask(() => {\r\n      this.rendering();\r\n    });\r\n  }\r\n\r\n  // 状態更新開始\r\n  async beginUpdate(engine: IComponentEngine, loopContext: ILoopContext | null, callback: (state: IWritableStateProxy) => Promise<void>): Promise<void> {\r\n    try {\r\n      this.#updating = true;\r\n      this.#engine = engine;\r\n      await useWritableStateProxy(engine, this, engine.state, loopContext, async (state:IWritableStateProxy) => {\r\n        // 状態更新処理\r\n        await callback(state);\r\n      });\r\n    } finally {\r\n      this.#updating = false;\r\n    }\r\n  }\r\n\r\n  // レンダリング\r\n  rendering(): void {\r\n    try {\r\n      while( this.queue.length > 0 ) {\r\n        // キュー取得\r\n        const queue = this.queue;\r\n        this.queue = [];\r\n        if (!this.#engine) raiseError(\"Engine is not initialized.\");\r\n        // レンダリング実行\r\n        render(queue, this.#engine);\r\n      }\r\n    } finally {\r\n      this.#rendering = false;\r\n    }\r\n  }\r\n}\r\n\r\nexport async function update(engine: IComponentEngine, loopContext: ILoopContext | null, callback: (updater: IUpdater, state: IWritableStateProxy) => Promise<void>): Promise<void> {\r\n  const updater = new Updater();\r\n  await updater.beginUpdate(engine, loopContext, async (state) => {\r\n    await callback(updater, state);\r\n  });\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IRenderer } from \"../../Updater/types.js\";\r\nimport { update } from \"../../Updater/Updater.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeEventクラスは、イベントバインディング（onClick, onInputなど）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - 指定イベント（on～）に対して、バインディングされた関数をイベントリスナーとして登録\r\n * - デコレータ（preventDefault, stopPropagation）によるイベント制御に対応\r\n * - ループコンテキストやリストインデックスも引数としてイベントハンドラに渡す\r\n * - ハンドラ実行時はstateProxyを生成し、Updater経由で非同期的に状態を更新\r\n *\r\n * 設計ポイント:\r\n * - nameからイベント名（subName）を抽出し、addEventListenerで登録\r\n * - バインディング値が関数でない場合はエラー\r\n * - デコレータでpreventDefault/stopPropagationを柔軟に制御\r\n * - ループ内イベントにも対応し、リストインデックスを引数展開\r\n */\r\nclass BindingNodeEvent extends BindingNode {\r\n  #subName    : string;\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#subName = this.name.slice(2); // on～\r\n    const element = node as HTMLElement;\r\n    element.addEventListener(this.subName, (e:Event) => this.handler(e));\r\n  }\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  update() {\r\n    // 何もしない（イベントバインディングは初期化時のみ）\r\n  }\r\n\r\n  async handler(e: Event) {\r\n    const engine = this.binding.engine;\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n    const indexes = loopContext?.serialize().map((context) => context.listIndex.index) ?? [];\r\n    const options = this.decorates;\r\n    if (options.includes(\"preventDefault\")) {\r\n      e.preventDefault();\r\n    }\r\n    if (options.includes(\"stopPropagation\")) {\r\n      e.stopPropagation();\r\n    }\r\n    await update(engine, loopContext, async (updater, state) => {\r\n      // stateProxyを生成し、バインディング値を実行\r\n      const func = this.binding.bindingState.getValue(state);\r\n      if (typeof func !== \"function\") {\r\n        raiseError(`BindingNodeEvent: ${this.name} is not a function.`);\r\n      }\r\n      await Reflect.apply(func, state, [e, ...indexes]);\r\n    });\r\n  }\r\n  applyChange(renderer: IRenderer): void {\r\n    // イベントバインディングは初期化時のみで、状態変更時に何もしない\r\n  }\r\n}\r\n\r\n/**\r\n * イベントバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeEventインスタンスを生成\r\n */\r\nexport const createBindingNodeEvent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeEvent(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { COMMENT_TEMPLATE_MARK } from \"../../constants.js\";\r\nimport { Filters } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\n\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\n/**\r\n * BindingNodeBlockクラスは、テンプレートブロック（コメントノードによるテンプレート挿入部）を\r\n * バインディング対象とするためのバインディングノード実装です。\r\n *\r\n * 主な役割:\r\n * - コメントノード内のテンプレートIDを抽出し、idプロパティとして保持\r\n * - テンプレートブロックのバインディング処理の基盤となる\r\n *\r\n * 設計ポイント:\r\n * - コメントノードのテキストからテンプレートIDを抽出（COMMENT_TEMPLATE_MARK以降を数値変換）\r\n * - IDが取得できない場合はエラーを投げる\r\n * - 他のBindingNode系クラスと同様、フィルタやデコレータにも対応\r\n */\r\nexport class BindingNodeBlock extends BindingNode {\r\n  #id: number;\r\n  get id(): number {\r\n    return this.#id;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const id = this.node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN) ?? raiseError(\"BindingNodeBlock.id: invalid node\");\r\n    this.#id = Number(id);\r\n  }\r\n    \r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\nimport { IRenderer } from \"../../Updater/types.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeIfクラスは、ifバインディング（条件付き描画）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（boolean）に応じて、BindContent（描画内容）のマウント・アンマウントを制御\r\n * - true/false時のBindContent集合を管理し、現在の描画状態をbindContentsで取得可能\r\n *\r\n * 設計ポイント:\r\n * - assignValueでboolean型以外が渡された場合はエラー\r\n * - trueならBindContentをrender・mount、falseならunmount\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeIf extends BindingNodeBlock {\r\n  #bindContent: IBindContent;\r\n  #trueBindContents: IBindContent[];\r\n  #falseBindContents: IBindContent[] = [];\r\n  #bindContents: IBindContent[];\r\n\r\n  get bindContents(): IBindContent[] {\r\n    return this.#bindContents;\r\n  }\r\n\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const blankInfo = getStructuredPathInfo(\"\");\r\n    const blankRef = getStatePropertyRef(blankInfo, null);\r\n    this.#bindContent = createBindContent(\r\n      this.binding, \r\n      this.id, \r\n      this.binding.engine,\r\n      blankRef, \r\n    );\r\n    this.#trueBindContents = this.#bindContents = [this.#bindContent];\r\n  }\r\n\r\n  assignValue(value: any): void {\r\n    raiseError(`BindingNodeIf.assignValue: not implemented`);\r\n  }\r\n  \r\n  applyChange(renderer: IRenderer): void {\r\n    if (renderer.updatedBindings.has(this.binding)) return;\r\n    const filteredValue = this.binding.bindingState.getFilteredValue(renderer.readonlyState);\r\n    if (typeof filteredValue !== \"boolean\") {\r\n      raiseError(`BindingNodeIf.update: value is not boolean`);\r\n    }\r\n    const parentNode = this.node.parentNode;\r\n    if (parentNode == null) {\r\n      raiseError(`BindingNodeIf.update: parentNode is null`);\r\n    }\r\n    if (filteredValue) {\r\n      this.#bindContent.mountAfter(parentNode, this.node);\r\n      this.#bindContent.applyChange(renderer);\r\n      this.#bindContents = this.#trueBindContents;\r\n    } else {\r\n      this.#bindContent.unmount();\r\n      this.#bindContents = this.#falseBindContents;\r\n    }\r\n    renderer.updatedBindings.add(this.binding);\r\n  }\r\n}\r\n\r\n/**\r\n * ifバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeIfインスタンスを生成\r\n */\r\nexport const createBindingNodeIf: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeIf(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types.js\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types.js\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\nimport { IRenderer } from \"../../Updater/types.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nconst EMPTY_SET = new Set<any>();\r\n\r\n/**\r\n * BindingNodeForクラスは、forバインディング（配列やリストの繰り返し描画）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - リストデータの各要素ごとにBindContent（バインディングコンテキスト）を生成・管理\r\n * - 配列の差分検出により、必要なBindContentの生成・再利用・削除・再描画を最適化\r\n * - DOM上での要素の並び替えや再利用、アンマウント・マウント処理を効率的に行う\r\n * - プール機構によりBindContentの再利用を促進し、パフォーマンスを向上\r\n *\r\n * 設計ポイント:\r\n * - assignValueでリストの差分を検出し、BindContentの生成・削除・再利用を管理\r\n * - updateElementsでリストの並び替えやSWAP処理にも対応\r\n * - BindContentのプール・インデックス管理でGCやDOM操作の最小化を図る\r\n * - バインディング状態やリストインデックス情報をエンジンに保存し、再描画や依存解決を容易にする\r\n *\r\n * ファクトリ関数 createBindingNodeFor でフィルタ・デコレータ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeFor extends BindingNodeBlock {\r\n  #bindContents          : IBindContent[] = [];\r\n  #bindContentByListIndex: WeakMap<IListIndex, IBindContent> = new WeakMap();\r\n  #bindContentPool       : IBindContent[] = [];\r\n  #bindContentLastIndex  : number = 0;\r\n  #loopInfo: IStructuredPathInfo | undefined = undefined;\r\n\r\n  get bindContents(): IBindContent[] {\r\n    return this.#bindContents;\r\n  }\r\n\r\n  get isFor(): boolean {\r\n    return true;\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  createBindContent(listIndex: IListIndex): IBindContent {\r\n    let bindContent: IBindContent;\r\n    if (this.#bindContentLastIndex >= 0) {\r\n      // プールの最後の要素を取得して、プールの長さをあとで縮減する\r\n      // 作るたびにプールを縮減すると、パフォーマンスが悪化するため\r\n      // プールの長さを縮減するのは、全ての要素を作った後に行う\r\n      bindContent = this.#bindContentPool[this.#bindContentLastIndex];\r\n      this.#bindContentLastIndex--;\r\n      bindContent.assignListIndex(listIndex);\r\n    } else {\r\n      const loopRef = getStatePropertyRef(this.loopInfo, listIndex);\r\n      bindContent = createBindContent(\r\n        this.binding,\r\n        this.id,\r\n        this.binding.engine,\r\n        loopRef\r\n      );\r\n    }\r\n    // 登録\r\n    this.#bindContentByListIndex.set(listIndex, bindContent);\r\n    return bindContent;\r\n  }\r\n\r\n  deleteBindContent(bindContent: IBindContent): void {\r\n    bindContent.unmount();\r\n    bindContent.loopContext?.clearListIndex();\r\n  }\r\n\r\n  get bindContentLastIndex():number {\r\n    return this.#bindContentLastIndex;\r\n  }\r\n  set bindContentLastIndex(value:number) {\r\n    this.#bindContentLastIndex = value;\r\n  }\r\n\r\n  get poolLength():number {\r\n    return this.#bindContentPool.length;\r\n  }\r\n  set poolLength(length: number) {\r\n    if (length < 0) {\r\n      raiseError(`BindingNodeFor.setPoolLength: length is negative`);\r\n    }\r\n    this.#bindContentPool.length = length;\r\n  }\r\n\r\n  get loopInfo(): IStructuredPathInfo {\r\n    if (typeof this.#loopInfo === \"undefined\") {\r\n      const loopPath = this.binding.bindingState.pattern + \".*\";\r\n      this.#loopInfo = getStructuredPathInfo(loopPath);\r\n    }\r\n    return this.#loopInfo;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    raiseError(\"BindingNodeFor.assignValue: Not implemented. Use update or applyChange.\");\r\n  }\r\n\r\n  applyChange(renderer: IRenderer): void {\r\n    if (renderer.updatedBindings.has(this.binding)) return;\r\n    let newBindContents: IBindContent[] = [];\r\n    // 削除を先にする\r\n    const removeBindContentsSet = new Set<IBindContent>();\r\n    const listDiff = renderer.calcListDiff(this.binding.bindingState.ref);\r\n    const parentNode = this.node.parentNode ?? raiseError(`BindingNodeFor.update: parentNode is null`);\r\n    // 全削除最適化のフラグ\r\n    const isAllRemove = (listDiff.oldListValue?.length === listDiff.removes?.size && (listDiff.oldListValue?.length ?? 0) > 0);\r\n    // 親ノードこのノードだけ持つかのチェック\r\n    let isParentNodeHasOnlyThisNode = false;\r\n    if (isAllRemove) {\r\n      const parentChildNodes = Array.from(parentNode.childNodes);\r\n      const lastContent = this.#bindContents.at(-1) ?? raiseError(`BindingNodeFor.update: lastContent is null`);\r\n      // ブランクノードを飛ばす\r\n      let firstNode: Node | null = parentChildNodes[0];\r\n      while(firstNode && firstNode.nodeType === Node.TEXT_NODE && firstNode.textContent?.trim() === \"\") {\r\n        firstNode = firstNode.nextSibling;\r\n      }\r\n      let lastNode: Node | null = parentChildNodes.at(-1) ?? null;\r\n      while(lastNode && lastNode.nodeType === Node.TEXT_NODE && lastNode.textContent?.trim() === \"\") {\r\n        lastNode = lastNode.previousSibling;\r\n      }\r\n      if (firstNode === this.node && lastNode === lastContent.getLastNode(parentNode)) {\r\n        isParentNodeHasOnlyThisNode = true;\r\n      }\r\n    }\r\n    if (isAllRemove && isParentNodeHasOnlyThisNode) {\r\n      // 全削除最適化\r\n      parentNode.textContent = \"\";\r\n      parentNode.append(this.node);\r\n      for(let i = 0; i < this.#bindContents.length; i++) {\r\n        const bindContent = this.#bindContents[i];\r\n        bindContent.loopContext?.clearListIndex();\r\n      }\r\n      this.#bindContentPool.push(...this.#bindContents);\r\n    } else {\r\n      if (listDiff.removes) {\r\n        for(const listIndex of listDiff.removes) {\r\n          const bindContent = this.#bindContentByListIndex.get(listIndex);\r\n          if (typeof bindContent === \"undefined\") {\r\n            raiseError(`BindingNodeFor.applyChange: bindContent is not found`);\r\n          }\r\n          this.deleteBindContent(bindContent);\r\n          removeBindContentsSet.add(bindContent);\r\n        }\r\n      }\r\n      this.#bindContentPool.push(...removeBindContentsSet);\r\n    }\r\n\r\n    let lastBindContent = null;\r\n    const firstNode = this.node;\r\n    this.bindContentLastIndex = this.poolLength - 1;\r\n    const isAllAppend = listDiff.newListValue?.length === listDiff.adds?.size && (listDiff.newListValue?.length ?? 0) > 0;\r\n//    if (!listDiff.onlySwap) {\r\n      // 全追加の場合、バッファリングしてから一括追加する\r\n      const fragmentParentNode = isAllAppend ? document.createDocumentFragment() : parentNode;\r\n      const fragmentFirstNode = isAllAppend ? null : firstNode;\r\n      const adds = listDiff.adds ?? EMPTY_SET;\r\n      for(const listIndex of listDiff.newIndexes) {\r\n        const lastNode = lastBindContent?.getLastNode(fragmentParentNode) ?? fragmentFirstNode;\r\n        let bindContent;\r\n        if (adds.has(listIndex)) {\r\n          bindContent = this.createBindContent(listIndex);\r\n          bindContent.mountAfter(fragmentParentNode, lastNode);\r\n          bindContent.applyChange(renderer);\r\n        } else {\r\n          bindContent = this.#bindContentByListIndex.get(listIndex);\r\n          if (typeof bindContent === \"undefined\") {\r\n            raiseError(`BindingNodeFor.applyChange: bindContent is not found`);\r\n          }\r\n          if (lastNode?.nextSibling !== bindContent.firstChildNode) {\r\n            bindContent.mountAfter(fragmentParentNode, lastNode);\r\n          }\r\n        }\r\n        newBindContents.push(bindContent);\r\n        lastBindContent = bindContent;\r\n      }\r\n      // 全追加最適化\r\n      if (isAllAppend) {\r\n        const beforeNode = firstNode.nextSibling;\r\n        parentNode.insertBefore(fragmentParentNode, beforeNode);\r\n      }\r\n//    } else {\r\n      // リストインデックスの並び替え\r\n      // リストインデックスの並び替え時、インデックスの変更だけなので、要素の再描画はしたくない\r\n      // 並べ替えはするが、要素の内容は変わらないため\r\n/*\r\n      if (listIndexResults.swapTargets) {\r\n        const bindContents = Array.from(this.#bindContents);\r\n        const targets = Array.from(listIndexResults.swapTargets);\r\n        targets.sort((a, b) => a.index - b.index);\r\n        for(let i = 0; i < targets.length; i++) {\r\n          const targetListIndex = targets[i];\r\n          const targetBindContent = this.#bindContentByListIndex.get(targetListIndex);\r\n          if (typeof targetBindContent === \"undefined\") {\r\n            raiseError(`BindingNodeFor.assignValue2: bindContent is not found`);\r\n          }\r\n          bindContents[targetListIndex.index] = targetBindContent;\r\n          const lastNode = bindContents[targetListIndex.index - 1]?.getLastNode(parentNode) ?? firstNode;\r\n          targetBindContent.mountAfter(parentNode, lastNode);\r\n        }\r\n        newBindContents = bindContents;\r\n      }\r\n*/\r\n//    }\r\n    // リスト要素の上書き\r\n/*    \r\n    if (listDiff.replaces) {\r\n      for (const listIndex of listDiff.replaces) {\r\n        const bindContent = this.#bindContentByListIndex.get(listIndex);\r\n        if (typeof bindContent === \"undefined\") {\r\n          raiseError(`BindingNodeFor.assignValue2: bindContent is not found`);\r\n        }\r\n        bindContent.applyChange(renderer);\r\n      }\r\n    }\r\n*/\r\n    // プールの長さを更新する\r\n    // プールの長さは、プールの最後の要素のインデックス+1であるため、\r\n    this.poolLength = this.bindContentLastIndex + 1;\r\n    this.#bindContents = newBindContents;\r\n  }\r\n}\r\n\r\nexport const createBindingNodeFor: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeFor(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DEFAULT_PROPERTY = \"textContent\";\r\n\r\ntype DefaultPropertyByElementType = {\r\n  [key:string]: string;\r\n}\r\n\r\nconst defaultPropertyByElementType:DefaultPropertyByElementType = {\r\n  \"radio\"   : \"checked\",\r\n  \"checkbox\": \"checked\",\r\n  \"button\"  : \"onclick\",\r\n}\r\n\r\n/**\r\n * HTML要素のデフォルトプロパティを取得\r\n */\r\nconst getDefaultPropertyHTMLElement = (node:Node):string => \r\n  node instanceof HTMLSelectElement || node instanceof HTMLTextAreaElement || node instanceof HTMLOptionElement ? \"value\" : \r\n  node instanceof HTMLButtonElement ? \"onclick\" : \r\n  node instanceof HTMLAnchorElement ? \"onclick\" : \r\n  node instanceof HTMLFormElement ? \"onsubmit\" : \r\n  node instanceof HTMLInputElement ? (defaultPropertyByElementType[node.type] ?? \"value\") :\r\n  DEFAULT_PROPERTY;\r\n\r\ntype DefaultPropertyByKey = {\r\n  [key:string]: string | undefined;\r\n}\r\n\r\nconst _cache: DefaultPropertyByKey = {};\r\n\r\nconst textContentProperty = (node:Node):string => DEFAULT_PROPERTY;\r\n\r\ntype GetDefaultPropertyByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>string) | undefined;\r\n}\r\n\r\nconst getDefaultPropertyByNodeType: GetDefaultPropertyByNodeType = {\r\n  HTMLElement: getDefaultPropertyHTMLElement,\r\n  SVGElement : undefined,\r\n  Text       : textContentProperty,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * バインド情報でノードプロパティが省略された場合に、ノード種別・要素タイプごとに\r\n * 適切なデフォルトプロパティ名（例: textContent, value, checked, onclick など）を返すユーティリティ関数。\r\n *\r\n * - HTMLInputElementやHTMLSelectElementなど、要素ごとに最適なプロパティを判定\r\n * - input要素はtype属性（radio, checkboxなど）も考慮\r\n * - 一度判定した組み合わせはキャッシュし、パフォーマンス向上\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"HTMLElement\" | \"SVGElement\" | \"Text\" | \"Template\"）\r\n * @returns        デフォルトのプロパティ名（例: \"value\", \"checked\", \"textContent\" など）\r\n */\r\nexport function getDefaultName(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): string | undefined {\r\n  const key = node.constructor.name + \"\\t\" + ((node as HTMLInputElement).type ?? \"\"); // type attribute\r\n  return _cache[key] ?? (_cache[key] = getDefaultPropertyByNodeType[nodeType]?.(node));\r\n}\r\n  ","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { getDefaultName } from \"../../BindingBuilder/getDefaultName.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { update } from \"../../Updater/Updater.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nfunction isTwoWayBindable(element: HTMLElement): boolean {\r\n  return element instanceof HTMLInputElement || \r\n    element instanceof HTMLTextAreaElement || \r\n    element instanceof HTMLSelectElement;\r\n}\r\n\r\nconst defaultEventByName: {[key:string]: string} = {\r\n  \"value\"   : \"input\",\r\n  \"checked\" : \"change\",\r\n  \"selected\": \"change\",\r\n};\r\n\r\n/**\r\n * BindingNodePropertyクラスは、ノードのプロパティ（value, checked, selected など）への\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - ノードプロパティへの値の割り当て・取得\r\n * - 双方向バインディング（input, changeイベント等）に対応\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - デフォルトプロパティ名と一致し、かつ双方向バインディング可能な要素の場合のみイベントリスナーを登録\r\n * - デコレータでイベント名を指定可能（onInput, onChangeなど）\r\n * - イベント発火時はUpdater経由でstateを非同期的に更新\r\n * - assignValueでnull/undefined/NaNは空文字列に変換してセット\r\n */\r\nclass BindingNodeProperty extends BindingNode {\r\n  get value(): any {\r\n    // @ts-ignore\r\n    return this.node[this.name];\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.filters.length; i++) {\r\n      value = this.filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n\r\n    const isElement = this.node instanceof HTMLElement;\r\n    if (!isElement) return;\r\n    if (!isTwoWayBindable(this.node)) return;\r\n    const defaultName = getDefaultName(this.node, \"HTMLElement\");\r\n    if (defaultName !== this.name) return;\r\n    if (decorates.length > 1) raiseError(`BindingNodeProperty: ${this.name} has multiple decorators`);\r\n    const event = (decorates[0]?.startsWith(\"on\") ? decorates[0]?.slice(2) : decorates[0]) ?? null;\r\n    const eventName = event ?? defaultEventByName[this.name] ?? \"readonly\";\r\n    if (eventName === \"readonly\" || eventName === \"ro\") return;\r\n\r\n    // 双方向バインディング: イベント発火時にstateを更新\r\n    const engine = this.binding.engine;\r\n    this.node.addEventListener(eventName, async () => {\r\n      const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n      const value = this.filteredValue;\r\n      await update(engine, loopContext, async (updater, state) => {\r\n        binding.updateStateValue(state, value);\r\n      });\r\n    });\r\n  }\r\n\r\n  init() {\r\n    // サブクラスで初期化処理を実装可能\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    // @ts-ignore\r\n    this.node[this.name] = value;\r\n  }\r\n}\r\n\r\n/**\r\n * プロパティバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodePropertyインスタンスを生成\r\n */\r\nexport const createBindingNodeProperty: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeProperty(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeRadioクラスは、ラジオボタン（input[type=\"radio\"]）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値とinput要素のvalueが一致していればchecked=trueにする\r\n * - null/undefined/NaNの場合は空文字列に変換して比較\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで値を文字列化し、input要素のvalueと比較してcheckedを制御\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeRadio extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.toString() === element.value.toString();\r\n  }\r\n}\r\n\r\n/**\r\n * ラジオボタン用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeRadioインスタンスを生成\r\n */\r\nexport const createBindingNodeRadio: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeRadio(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeStyleクラスは、style属性（インラインスタイル）のバインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値を指定のCSSプロパティ（subName）としてHTMLElementにセット\r\n * - null/undefined/NaNの場合は空文字列に変換してセット\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからCSSプロパティ名（subName）を抽出（例: \"style.color\" → \"color\"）\r\n * - assignValueで値を文字列化し、style.setPropertyで反映\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeStyle extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLElement;\r\n    element.style.setProperty(this.subName, value.toString());\r\n  }\r\n}\r\n\r\n/**\r\n * style属性バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeStyleインスタンスを生成\r\n */\r\nexport const createBindingNodeStyle: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeStyle(binding, node, name, filterFns, decorates);\r\n  }\r\n","const symbolName = \"component-state-input\";\r\n\r\nexport const AssignStateSymbol: unique symbol = Symbol.for(`${symbolName}.AssignState`);\r\nexport const NotifyRedrawSymbol: unique symbol = Symbol.for(`${symbolName}.NotifyRedraw`);","import { StructiveComponent } from \"./types\";\r\n\r\nconst parentStructiveComponentByStructiveComponent = new WeakMap<StructiveComponent, StructiveComponent>();\r\n\r\nexport function findStructiveParent(el:StructiveComponent): StructiveComponent | null {\r\n  return parentStructiveComponentByStructiveComponent.get(el) ?? null;\r\n}\r\n\r\nexport function registerStructiveComponent(parentComponent: StructiveComponent, component: StructiveComponent): void {\r\n  parentStructiveComponentByStructiveComponent.set(component, parentComponent);\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { NotifyRedrawSymbol } from \"../../ComponentStateInput/symbols.js\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types.js\";\r\nimport { registerStructiveComponent } from \"../../WebComponents/findStructiveParent.js\";\r\nimport { StructiveComponent } from \"../../WebComponents/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeComponentクラスは、StructiveComponent（カスタムコンポーネント）への\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング対象のコンポーネントのstateプロパティ（subName）に値を反映\r\n * - バインディング情報をコンポーネント単位で管理（bindingsByComponentに登録）\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからstateプロパティ名（subName）を抽出（例: \"state.foo\" → \"foo\"）\r\n * - assignValueでコンポーネントのstateに値をセット（RenderSymbol経由で反映）\r\n * - 初期化時にbindingsByComponentへバインディング情報を登録\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeComponent extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  init(): void {\r\n    const engine = this.binding.engine;\r\n    registerStructiveComponent(engine.owner, this.node as StructiveComponent);\r\n    let bindings = engine.bindingsByComponent.get(this.node as StructiveComponent);\r\n    if (typeof bindings === \"undefined\") {\r\n      engine.bindingsByComponent.set(this.node as StructiveComponent, bindings = new Set<IBinding>());\r\n    }\r\n    bindings.add(this.binding);\r\n  }\r\n\r\n  assignValue(value: any): void {\r\n  }\r\n\r\n  notifyRedraw(refs: IStatePropertyRef[]): void {\r\n    const notifyRefs = [];\r\n    const info = this.binding.bindingState.info;\r\n    const listIndex = this.binding.bindingState.listIndex?.at(info.wildcardCount - 1) ?? null;\r\n    const at = (listIndex?.length ?? 0) - 1;\r\n    for(const ref of refs) {\r\n      if (info.pathSegments.length > ref.info.pathSegments.length) {\r\n        // 親パスが更新された\r\n        // ex values, values.* valuesが更新された場合\r\n        if (info.cumulativePathSet.has(ref.info.pattern)) {\r\n          const thisAt = (ref.listIndex?.length ?? 0) - 1;\r\n          if (thisAt >= 0) {\r\n            if (listIndex === null) continue;\r\n            if (ref.listIndex !== listIndex?.at(thisAt)) continue;\r\n          }\r\n          const newRef = getStatePropertyRef(info, listIndex);\r\n          notifyRefs.push(newRef);\r\n        }\r\n      } else {\r\n        // 子パスが更新された\r\n        // ex values.*.foo values.* values.*.fooが更新された\r\n        if (!ref.info.cumulativePathSet.has(info.pattern)) {\r\n          // リストインデックスが一致しない場合はスキップ\r\n          if (at >= 0) {\r\n            if (ref.listIndex?.at(at) !== listIndex) continue;\r\n          }\r\n          notifyRefs.push(ref);\r\n        }\r\n\r\n      }\r\n    }\r\n    if (notifyRefs.length === 0) {\r\n      return;\r\n    }\r\n    const component = this.node as StructiveComponent;\r\n    component.state[NotifyRedrawSymbol](notifyRefs);\r\n  }\r\n}\r\n\r\n/**\r\n * コンポーネント用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeComponentインスタンスを生成\r\n */\r\nexport const createBindingNodeComponent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeComponent(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createBindingNodeAttribute } from \"../DataBinding/BindingNode/BindingNodeAttribute.js\";\r\nimport { createBindingNodeCheckbox } from \"../DataBinding/BindingNode/BindingNodeCheckbox.js\";\r\nimport { createBindingNodeClassList } from \"../DataBinding/BindingNode/BindingNodeClassList.js\";\r\nimport { createBindingNodeClassName } from \"../DataBinding/BindingNode/BindingNodeClassName.js\";\r\nimport { createBindingNodeEvent } from \"../DataBinding/BindingNode/BindingNodeEvent.js\";\r\nimport { createBindingNodeIf } from \"../DataBinding/BindingNode/BindingNodeIf.js\";\r\nimport { createBindingNodeFor } from \"../DataBinding/BindingNode/BindingNodeFor.js\";\r\nimport { createBindingNodeProperty } from \"../DataBinding/BindingNode/BindingNodeProperty.js\";\r\nimport { createBindingNodeRadio } from \"../DataBinding/BindingNode/BindingNodeRadio.js\";\r\nimport { createBindingNodeStyle } from \"../DataBinding/BindingNode/BindingNodeStyle.js\";\r\nimport { CreateBindingNodeByNodeFn, CreateBindingNodeFn } from \"../DataBinding/BindingNode/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\nimport { createBindingNodeComponent } from \"../DataBinding/BindingNode/BindingNodeComponent.js\";\r\n\r\ntype NodePropertyConstructorByName = {[key:string]:CreateBindingNodeFn};\r\ntype NodePropertyConstructorByNameByIsComment = {[key:number]:NodePropertyConstructorByName};\r\n\r\nconst nodePropertyConstructorByNameByIsComment:NodePropertyConstructorByNameByIsComment = {\r\n  0: {\r\n    \"class\"   : createBindingNodeClassList,\r\n    \"checkbox\": createBindingNodeCheckbox,\r\n    \"radio\"   : createBindingNodeRadio,\r\n  },\r\n  1: {\r\n    \"if\" : createBindingNodeIf,\r\n  },\r\n};\r\n\r\ntype NodePropertyConstructorByFirstName = {[key:string]:CreateBindingNodeFn};\r\n\r\nconst nodePropertyConstructorByFirstName:NodePropertyConstructorByFirstName = {\r\n  \"class\": createBindingNodeClassName,\r\n  \"attr\" : createBindingNodeAttribute,\r\n  \"style\": createBindingNodeStyle,\r\n  \"state\": createBindingNodeComponent,\r\n//  \"popover\": PopoverTarget,\r\n//  \"commandfor\": CommandForTarget,\r\n};\r\n\r\n/**\r\n * バインディング対象ノードのプロパティ名やノード種別（Element/Comment）に応じて、\r\n * 適切なバインディングノード生成関数（CreateBindingNodeFn）を返すユーティリティ。\r\n *\r\n * - ノード種別やプロパティ名ごとに専用の生成関数をマッピング\r\n * - コメントノードや特殊プロパティ（for/if等）にも対応\r\n * - プロパティ名の先頭や\"on\"でイベントバインディングも判別\r\n * - 一度判定した組み合わせはキャッシュし、パフォーマンス向上\r\n *\r\n * これにより、テンプレートのdata-bindやコメントバインディングの各種ケースに柔軟に対応できる。\r\n */\r\nfunction _getBindingNodeCreator(isComment:boolean, isElement: boolean, propertyName: string): CreateBindingNodeFn {\r\n  // コメント/エレメント種別とプロパティ名で専用の生成関数を優先的に取得\r\n  const bindingNodeCreatorByName = nodePropertyConstructorByNameByIsComment[isComment ? 1 : 0][propertyName];\r\n  if (typeof bindingNodeCreatorByName !== \"undefined\") {\r\n    return bindingNodeCreatorByName;\r\n  }\r\n  // コメントノードでforの場合は専用関数\r\n  if (isComment && propertyName === \"for\") {\r\n    return createBindingNodeFor;\r\n  }\r\n  // コメントノードで未対応プロパティはエラー\r\n  if (isComment) {\r\n    raiseError(`getBindingNodeCreator: unknown node property ${propertyName}`);\r\n  }\r\n  // プロパティ名の先頭で判別（class.attr.style.state等）\r\n  const nameElements = propertyName.split(\".\");\r\n  const bindingNodeCreatorByFirstName = nodePropertyConstructorByFirstName[nameElements[0]];\r\n  if (typeof bindingNodeCreatorByFirstName !== \"undefined\") {\r\n    return bindingNodeCreatorByFirstName;\r\n  }\r\n  // エレメントノードでonから始まる場合はイベントバインディング\r\n  if (isElement) {\r\n    if (propertyName.startsWith(\"on\")) {\r\n      return createBindingNodeEvent;\r\n    } else {\r\n      return createBindingNodeProperty;\r\n    }\r\n  } else {\r\n    // それ以外は汎用プロパティバインディング\r\n    return createBindingNodeProperty;\r\n  }\r\n}\r\n\r\nconst _cache: {[key:string]:CreateBindingNodeFn} = {};\r\n\r\n/**\r\n * ノード・プロパティ名・フィルタ・デコレータ情報から\r\n * 適切なバインディングノード生成関数を取得し、呼び出すファクトリ関数。\r\n * \r\n * @param node         バインディング対象ノード\r\n * @param propertyName バインディングプロパティ名\r\n * @param filterTexts  フィルタ情報\r\n * @param decorates    デコレータ情報\r\n * @returns            バインディングノード生成関数の実行結果\r\n */\r\nexport function getBindingNodeCreator(\r\n  node        : Node, \r\n  propertyName: string,\r\n  filterTexts : IFilterText[],\r\n  decorates   : string[]\r\n): CreateBindingNodeByNodeFn {\r\n  const isComment = node instanceof Comment;\r\n  const isElement = node instanceof Element;\r\n  const key = isComment + \"\\t\" + isElement + \"\\t\" + propertyName;\r\n  // キャッシュを利用して生成関数を取得\r\n  const fn = _cache[key] ?? (_cache[key] = _getBindingNodeCreator(isComment, isElement, propertyName));\r\n  return fn(propertyName, filterTexts, decorates);\r\n}\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types.js\";\r\nimport { ILoopContext } from \"../../LoopContext/types.js\";\r\nimport { GetByRefSymbol, SetByRefSymbol } from \"../../StateClass/symbols.js\";\r\nimport { IReadonlyStateProxy, IWritableStateProxy } from \"../../StateClass/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { getStatePropertyRef } from \"../../StatePropertyRef/StatepropertyRef.js\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\n/**\r\n * BindingStateクラスは、バインディング対象の状態（State）プロパティへのアクセス・更新・フィルタ適用を担当する実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング対象の状態プロパティ（pattern, info）やリストインデックス（listIndex）を管理\r\n * - get valueで現在の値を取得し、get filteredValueでフィルタ適用後の値を取得\r\n * - initでリストバインディング時のループコンテキストやインデックス参照を初期化\r\n * - assignValueで状態プロキシに値を書き込む（双方向バインディング対応）\r\n * - バインディング情報をエンジンに登録し、依存解決や再描画を効率化\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードパス（配列バインディング等）にも対応し、ループごとのインデックス管理が可能\r\n * - フィルタ適用は配列で柔軟に対応\r\n * - createBindingStateファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingState implements IBindingState {\r\n  #binding     : IBinding;\r\n  #pattern     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #filters     : Filters;\r\n  #loopContext : ILoopContext | null = null;\r\n  #nullRef     : IStatePropertyRef | null = null;\r\n  #ref         : IStatePropertyRef | null = null;\r\n  get pattern(): string {\r\n    return this.#pattern;\r\n  }\r\n  get info() {\r\n    return this.#info;\r\n  }\r\n  get listIndex() {\r\n    return this.ref.listIndex;\r\n  }\r\n  get ref() {\r\n    if (this.#loopContext !== null) {\r\n      if (this.#ref === null) {\r\n        this.#ref = getStatePropertyRef(this.#info, this.#loopContext.listIndex);\r\n      }\r\n      return this.#ref;\r\n    } else {\r\n      return this.#nullRef ?? raiseError(\"ref is null\");\r\n    }\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#pattern = pattern;\r\n    this.#info = getStructuredPathInfo(pattern);\r\n    this.#nullRef = (this.#info.wildcardCount === 0) ? getStatePropertyRef(this.#info, null) : null;\r\n    this.#filters = filters;\r\n  }\r\n  getValue(state:IReadonlyStateProxy | IWritableStateProxy): any {\r\n    return state[GetByRefSymbol](this.ref);\r\n  }\r\n  getFilteredValue(state:IReadonlyStateProxy | IWritableStateProxy): any {\r\n    let value = state[GetByRefSymbol](this.ref);\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    if (this.info.wildcardCount > 0) {\r\n      const lastWildcardPath = this.info.lastWildcardPath ?? \r\n        raiseError(`BindingState.init: wildcardLastParentPath is null`);\r\n      this.#loopContext = this.binding.parentBindContent.currentLoopContext?.find(lastWildcardPath) ?? \r\n        raiseError(`BindingState.init: loopContext is null`);\r\n      this.#ref = null;\r\n    }\r\n    this.binding.engine.saveBinding(this.ref, this.binding);\r\n  }\r\n  assignValue(writeState: IWritableStateProxy, value: any) {\r\n    writeState[SetByRefSymbol](this.ref, value);\r\n  }\r\n}\r\n\r\nexport const createBindingState: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n    return new BindingState(binding, name, filterFns);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { ILoopContext } from \"../../LoopContext/types.js\";\r\nimport { IReadonlyStateProxy, IWritableStateProxy } from \"../../StateClass/types\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\n/**\r\n * BindingStateIndexクラスは、forバインディング等のループ内で利用される\r\n * インデックス値（$1, $2, ...）のバインディング状態を管理する実装です。\r\n *\r\n * 主な役割:\r\n * - ループコンテキストからインデックス値を取得し、value/filteredValueで参照可能にする\r\n * - バインディング時にbindingsByListIndexへ自身を登録し、依存解決や再描画を効率化\r\n * - フィルタ適用にも対応\r\n *\r\n * 設計ポイント:\r\n * - pattern（例: \"$1\"）からインデックス番号を抽出し、ループコンテキストから該当インデックスを取得\r\n * - initでループコンテキストやlistIndexRefを初期化し、バインディング情報をエンジンに登録\r\n * - assignValueは未実装（インデックスは書き換え不可のため）\r\n * - createBindingStateIndexファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingStateIndex implements IBindingState {\r\n  #binding     : IBinding;\r\n  #indexNumber : number;\r\n  #filters     : Filters;\r\n  #loopContext : ILoopContext | null = null;\r\n  get pattern(): string {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get info() {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get listIndex() {\r\n    return this.#loopContext?.listIndex ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get ref() {\r\n    return this.#loopContext?.ref ?? raiseError(\"ref is null\");\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    const indexNumber = Number(pattern.slice(1));\r\n    if (isNaN(indexNumber)) {\r\n      raiseError(\"BindingStateIndex: pattern is not a number\");\r\n    }\r\n    this.#indexNumber = indexNumber;\r\n    this.#filters = filters;\r\n  }\r\n  getValue(state: IReadonlyStateProxy | IWritableStateProxy) {\r\n    return this.listIndex?.index ?? raiseError(\"listIndex is null\");\r\n  }\r\n  getFilteredValue(state: IReadonlyStateProxy | IWritableStateProxy) {\r\n    let value = this.listIndex?.index ?? raiseError(\"listIndex is null\");\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext ??\r\n      raiseError(`BindingState.init: loopContext is null`);\r\n    const loopContexts = loopContext.serialize();\r\n    this.#loopContext = loopContexts[this.#indexNumber - 1] ??\r\n      raiseError(`BindingState.init: currentLoopContext is null`);\r\n    const bindings = this.binding.engine.bindingsByListIndex.get(this.listIndex);\r\n    if (bindings === undefined) {\r\n      this.binding.engine.bindingsByListIndex.set(this.listIndex, new Set([this.binding]));\r\n    } else {\r\n      bindings.add(this.binding);\r\n    }\r\n  }\r\n  assignValue(writeState:IWritableStateProxy, value:any): void {\r\n    raiseError(\"BindingStateIndex: assignValue is not implemented\");\r\n  }\r\n}\r\n\r\nexport const createBindingStateIndex: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n\r\n    return new BindingStateIndex(binding, name, filterFns);\r\n  }\r\n","import { createBindingState } from \"../DataBinding/BindingState/BindingState.js\";\r\nimport { createBindingStateIndex } from \"../DataBinding/BindingState/BindingStateIndex.js\";\r\nimport { CreateBindingStateByStateFn } from \"../DataBinding/BindingState/types\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nconst ereg = new RegExp(/^\\$\\d+$/);\r\n\r\n/**\r\n * バインディング対象の状態プロパティ名とフィルタ情報から、\r\n * 適切なバインディング状態生成関数（CreateBindingStateByStateFn）を返すユーティリティ。\r\n *\r\n * - プロパティ名が \"$数字\"（例: \"$1\"）の場合は createBindingStateIndex を使用（インデックスバインディング用）\r\n * - それ以外は通常の createBindingState を使用\r\n *\r\n * @param name        バインディング対象の状態プロパティ名\r\n * @param filterTexts フィルタ情報\r\n * @returns           バインディング状態生成関数\r\n */\r\nexport function getBindingStateCreator(\r\n  name       : string, \r\n  filterTexts: IFilterText[]\r\n): CreateBindingStateByStateFn {\r\n  if (ereg.test(name)) {\r\n    // \"$数字\"形式の場合はインデックスバインディング用の生成関数を返す\r\n    return createBindingStateIndex(name, filterTexts);\r\n  } else {\r\n    // 通常のプロパティ名の場合は標準の生成関数を返す\r\n    return createBindingState(name, filterTexts);\r\n  }\r\n}","import { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst createNodeKey = (node:Node):string => node.constructor.name + \"\\t\" + ((node instanceof Comment) ? (node.textContent?.[2] ?? \"\") : \"\");\r\n\r\ntype NodeTypeByNodeKey = {\r\n  [nodeKey:string]:NodeType;\r\n};\r\n\r\nconst nodeTypeByNodeKey:NodeTypeByNodeKey = {};\r\n\r\nconst getNodeTypeByNode = (node:Node):NodeType =>\r\n  (node instanceof Comment && node.textContent?.[2] === \":\") ? \"Text\" : \r\n  (node instanceof HTMLElement) ? \"HTMLElement\" :\r\n  (node instanceof Comment && node.textContent?.[2] === \"|\") ? \"Template\" : \r\n  (node instanceof SVGElement) ? \"SVGElement\" : raiseError(`Unknown NodeType: ${node.nodeType}`);\r\n\r\n/**\r\n * ノードのタイプ（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）を判定・キャッシュするユーティリティ関数。\r\n *\r\n * - コメントノードの場合、3文字目が \":\" なら \"Text\"、\"|\" なら \"Template\" と判定\r\n * - HTMLElement, SVGElement もそれぞれ判定\r\n * - 未知のノード型はエラー\r\n * - ノードごとに一意なキー（constructor名＋コメント種別）でキャッシュし、再判定を省略\r\n *\r\n * @param node    判定対象のノード\r\n * @param nodeKey キャッシュ用のノードキー（省略時は自動生成）\r\n * @returns       ノードタイプ（NodeType）\r\n */\r\nexport function getNodeType(\r\n  node   : Node, \r\n  nodeKey: string = createNodeKey(node)\r\n): NodeType {\r\n  return nodeTypeByNodeKey[nodeKey] ?? (nodeTypeByNodeKey[nodeKey] = getNodeTypeByNode(node));\r\n}\r\n","import { IFilterText, IBindText } from \"./types\";\r\n\r\nconst trim = (s:string):string => s.trim();\r\n\r\nconst has = (s:string):boolean => s.length > 0; // check length\r\n\r\nconst re = new RegExp(/^#(.*)#$/);\r\nconst decode = (s:string):string => {\r\n  const m = re.exec(s);\r\n  return m ? decodeURIComponent(m[1]) : s;\r\n};\r\n\r\n/**\r\n * parse filter part\r\n * \"eq,100|falsey\" ---> [Filter(eq, [100]), Filter(falsey)]\r\n */\r\nconst parseFilter = (text:string): IFilterText => {\r\n  const [name, ...options] = text.split(\",\").map(trim);\r\n  return {name, options:options.map(decode)};\r\n};\r\n\r\ntype ReturnParseStateProperty = {property:string,filters:IFilterText[]};\r\n/**\r\n * parse expression\r\n * \"value|eq,100|falsey\" ---> [\"value\", Filter[]]\r\n */\r\nconst parseProperty = (text:string): ReturnParseStateProperty => {\r\n  const [property, ...filterTexts] = text.split(\"|\").map(trim);\r\n  return {property, filters:filterTexts.map(parseFilter)};\r\n};\r\n\r\n/**\r\n * parse expressions\r\n * \"textContent:value|eq,100|falsey\" ---> [\"textContent\", \"value\", Filter[eq, falsey]]\r\n */\r\nconst parseExpression = (expression:string): IBindText => {\r\n  const [ bindExpression, decoratesExpression = null ] = expression.split(\"@\").map(trim);\r\n  const decorates = decoratesExpression ? decoratesExpression.split(\",\").map(trim) : [];\r\n  const [nodePropertyText, statePropertyText] = bindExpression.split(\":\").map(trim);\r\n  const { property:nodeProperty, filters:inputFilterTexts } = parseProperty(nodePropertyText);\r\n  const { property:stateProperty, filters:outputFilterTexts } = parseProperty(statePropertyText);\r\n  return { nodeProperty, stateProperty, inputFilterTexts, outputFilterTexts, decorates };\r\n};\r\n\r\n/**\r\n * parse bind text and return BindText[]\r\n */\r\nconst parseExpressions = (text:string): IBindText[] => {\r\n  return text.split(\";\").map(trim).filter(has).map(s => parseExpression(s));\r\n};\r\n\r\nconst cache:{[key:string]: IBindText[]} = {};\r\n\r\n/**\r\n * バインドテキスト（data-bind属性やコメント等から取得した文字列）を解析し、\r\n * バインディング情報（IBindText[]）に変換するユーティリティ関数群。\r\n *\r\n * - フィルターやデコレータ、プロパティ名などをパースし、構造化データとして返す\r\n * - \"textContent:value|eq,100|falsey@decorate1,decorate2\" のような複雑な記法にも対応\r\n * - セミコロン区切りで複数バインドもサポート\r\n * - パース結果はキャッシュし、同じ入力の再解析を防止\r\n *\r\n * @param text バインドテキスト\r\n * @returns    解析済みバインディング情報（IBindText[]）\r\n */\r\nexport function parseBindText(\r\n  text: string\r\n): IBindText[] {\r\n  if (text.trim() === \"\") {\r\n    return [];\r\n  }\r\n  return cache[text] ?? (cache[text] = parseExpressions(text));\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DATASET_BIND_PROPERTY = 'data-bind';\r\n\r\nconst removeAttributeFromElement = (node:Node):void => {\r\n  const element = node as Element;\r\n  element.removeAttribute(DATASET_BIND_PROPERTY);\r\n}\r\n\r\ntype RemoveAttributeByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>void) | undefined;\r\n}\r\n\r\nconst removeAttributeByNodeType:RemoveAttributeByNodeType = {\r\n  HTMLElement: removeAttributeFromElement,\r\n  SVGElement : removeAttributeFromElement,\r\n  Text       : undefined,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * 指定ノードから data-bind 属性を削除するユーティリティ関数。\r\n *\r\n * - ノードタイプ（HTMLElement, SVGElement）の場合のみ data-bind 属性を削除\r\n * - Text, Template ノードは対象外\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"HTMLElement\" | \"SVGElement\" | \"Text\" | \"Template\"）\r\n * @returns        なし\r\n */\r\nexport function removeDataBindAttribute(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n):void {\r\n  return removeAttributeByNodeType[nodeType]?.(node);\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst replaceTextNodeText = (node:Node):Node => {\r\n  const textNode = document.createTextNode(\"\");\r\n  node.parentNode?.replaceChild(textNode, node);\r\n  return textNode;\r\n}\r\n\r\ntype ReplaceTextNodeFn = {\r\n  [key in NodeType]: ((node:Node)=>Node) | undefined;\r\n}\r\n\r\nconst replaceTextNodeFn:ReplaceTextNodeFn = {\r\n  Text       : replaceTextNodeText,\r\n  HTMLElement: undefined,\r\n  Template   : undefined,\r\n  SVGElement : undefined\r\n}\r\n\r\n/**\r\n * コメントノードをテキストノードに置き換えるユーティリティ関数。\r\n *\r\n * - ノードタイプが \"Text\" の場合のみ、コメントノードを空のテキストノードに置換する\r\n * - それ以外のノードタイプ（HTMLElement, Template, SVGElement）は何もしない\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）\r\n * @returns        置換後のノード（または元のノード）\r\n */\r\nexport function replaceTextNodeFromComment(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): Node {\r\n  return replaceTextNodeFn[nodeType]?.(node) ?? node;\r\n}\r\n","import { getAbsoluteNodePath } from \"./getAbsoluteNodePath.js\";\r\nimport { getBindingNodeCreator } from \"./getBindingNodeCreator.js\";\r\nimport { getBindingStateCreator } from \"./getBindingStateCreator.js\";\r\nimport { getDataBindText } from \"./getDataBindText.js\";\r\nimport { getNodeType } from \"./getNodeType.js\";\r\nimport { parseBindText } from \"./parseBindText.js\";\r\nimport { removeDataBindAttribute } from \"./removeDataBindAttribute.js\";\r\nimport { replaceTextNodeFromComment } from \"./replaceTextNodeFromComment.js\";\r\nimport { IBindingCreator, IBindText, IDataBindAttributes, NodePath, NodeType } from \"./types\";\r\n\r\n/**\r\n * DataBindAttributesクラスは、DOMノードからバインディング情報を抽出・解析し、\r\n * バインディング生成に必要な情報（ノード種別・パス・バインドテキスト・クリエイター）を管理します。\r\n *\r\n * - ノード種別やパスを特定\r\n * - data-bind属性やコメントノードからバインドテキストを取得・解析\r\n * - バインドテキストごとにバインディング生成関数（ノード用・状態用）を用意\r\n * - data-bind属性やコメントノードはパース後に削除・置換\r\n *\r\n * これにより、テンプレート内のバインディング定義を一元的に管理し、後続のバインディング構築処理を効率化します。\r\n */\r\nclass DataBindAttributes implements IDataBindAttributes {\r\n  nodeType     : NodeType; // ノードの種別\r\n  nodePath     : NodePath; // ノードのルート\r\n  bindTexts    : IBindText[]; // BINDテキストの解析結果\r\n  creatorByText: Map<IBindText, IBindingCreator> = new Map(); // BINDテキストからバインディングクリエイターを取得\r\n  constructor(node: Node) {\r\n    this.nodeType = getNodeType(node);\r\n    const text = getDataBindText(this.nodeType, node);\r\n\r\n    // コメントノードの場合はTextノードに置換（template.contentが書き換わる点に注意）\r\n    node = replaceTextNodeFromComment(node, this.nodeType);\r\n\r\n    // data-bind属性を削除（パース後は不要なため）\r\n    removeDataBindAttribute(node, this.nodeType);\r\n\r\n    this.nodePath = getAbsoluteNodePath(node);\r\n    this.bindTexts = parseBindText(text);\r\n\r\n    // 各バインドテキストごとにバインディング生成関数を用意\r\n    for(let i = 0; i < this.bindTexts.length; i++) {\r\n      const bindText = this.bindTexts[i];\r\n      const creator: IBindingCreator = {\r\n        createBindingNode : getBindingNodeCreator(\r\n          node, \r\n          bindText.nodeProperty, \r\n          bindText.inputFilterTexts,\r\n          bindText.decorates\r\n        ),\r\n        createBindingState: getBindingStateCreator(\r\n          bindText.stateProperty, \r\n          bindText.outputFilterTexts\r\n        ),\r\n      }\r\n      this.creatorByText.set(bindText, creator);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * 指定ノードからDataBindAttributesインスタンスを生成するファクトリ関数。\r\n */\r\nexport function createDataBindAttributes(node: Node): IDataBindAttributes {\r\n  return new DataBindAttributes(node);\r\n}","import { COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst COMMENT_EMBED_MARK_LEN = COMMENT_EMBED_MARK.length;\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\n/**\r\n * ノード種別ごとにdata-bindテキスト（バインディング定義文字列）を取得するユーティリティ関数。\r\n *\r\n * - Textノード: コメントマーク以降のテキストを取得し、\"textContent:\"を付与\r\n * - HTMLElement: data-bind属性値を取得\r\n * - Templateノード: コメントマーク以降のIDからテンプレートを取得し、そのdata-bind属性値を取得\r\n * - SVGElement: data-bind属性値を取得\r\n *\r\n * @param nodeType ノード種別（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）\r\n * @param node     対象ノード\r\n * @returns        バインディング定義文字列\r\n */\r\nexport function getDataBindText(nodeType: NodeType, node: Node): string {\r\n  switch (nodeType) {\r\n    case \"Text\": {\r\n      const text = node.textContent?.slice(COMMENT_EMBED_MARK_LEN).trim() ?? \"\";\r\n      return \"textContent:\" + text;\r\n    }\r\n    case \"HTMLElement\": {\r\n      return (node as HTMLElement).getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n    }\r\n    case \"Template\": {\r\n      const text = node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN).trim();\r\n      const id = Number(text);\r\n      const template = getTemplateById(id) ?? raiseError(`Template not found: ${text}`);\r\n      return template.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n    }\r\n    case \"SVGElement\": {\r\n      return (node as SVGElement).getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n    }\r\n    default:\r\n      return \"\";\r\n  }\r\n}","import { NodePath } from \"./types\";\r\n\r\n/**\r\n * 指定ノードの「親からのインデックス」をルートまで辿り、絶対パス（NodePath）として返すユーティリティ関数。\r\n *\r\n * 例: ルートから見て [0, 2, 1] のような配列を返す。\r\n *     これは「親→子→孫…」とたどったときの各階層でのインデックスを表す。\r\n *\r\n * @param node 対象のDOMノード\r\n * @returns    ルートからこのノードまでのインデックス配列（NodePath）\r\n */\r\nexport function getAbsoluteNodePath(node: Node): NodePath {\r\n  let routeIndexes: NodePath = [];\r\n  while(node.parentNode !== null) {\r\n    const childNodes = Array.from(node.parentNode.childNodes) as Node[];\r\n    routeIndexes = [ childNodes.indexOf(node), ...routeIndexes ];\r\n    node = node.parentNode;\r\n  }\r\n  return routeIndexes;\r\n}","import { DATA_BIND_ATTRIBUTE, COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK } from \"../constants.js\";\r\n\r\n/**\r\n * \"@@:\"もしくは\"@@|\"で始まるコメントノードを取得する\r\n */\r\nfunction isCommentNode(node: Node): boolean {\r\n  return node instanceof Comment && (\r\n    (node.textContent?.indexOf(COMMENT_EMBED_MARK) === 0) || (node.textContent?.indexOf(COMMENT_TEMPLATE_MARK) === 0)\r\n  );\r\n} \r\n\r\n/**\r\n * 指定ノード以下のツリーから「data-bind属性を持つ要素」または\r\n * 「特定のマーク（@@: または @@|）で始まるコメントノード」をすべて取得するユーティリティ関数。\r\n *\r\n * - Elementノードの場合: data-bind属性があるものだけを抽出\r\n * - Commentノードの場合: COMMENT_EMBED_MARK または COMMENT_TEMPLATE_MARK で始まるものだけを抽出\r\n * - DOMツリー全体をTreeWalkerで効率的に走査\r\n *\r\n * @param root 探索の起点となるノード\r\n * @returns    条件に合致したノードの配列\r\n */\r\nexport function getNodesHavingDataBind(root: Node): Node[] {\r\n  const nodes: Node[] = [];\r\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT, {\r\n    acceptNode(node:Node) {\r\n      return (node instanceof Element) ? \r\n        (node.hasAttribute(DATA_BIND_ATTRIBUTE) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP)\r\n        : (isCommentNode(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP);\r\n    }\r\n  });\r\n  while (walker.nextNode()) {\r\n    nodes.push(walker.currentNode);\r\n  }\r\n  return nodes;\r\n}\r\n\r\n","import { createDataBindAttributes } from \"./createDataBindAttributes.js\";\r\nimport { getNodesHavingDataBind } from \"./getNodesHavingDataBind.js\";\r\nimport { IDataBindAttributes } from \"./types\";\r\n\r\nconst listDataBindAttributesById: {[key:number]:IDataBindAttributes[]} = {};\r\n\r\nconst listPathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nconst pathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nfunction getDataBindAttributesFromTemplate(content: DocumentFragment): IDataBindAttributes[] {\r\n  const nodes = getNodesHavingDataBind(content);\r\n  return nodes.map(node => createDataBindAttributes(node));\r\n}\r\n\r\n/**\r\n * テンプレート（DocumentFragment）内のバインディング情報（data-bind属性やコメント）を解析・登録し、\r\n * 各テンプレートIDごとにバインディング属性情報・状態パス集合を管理するユーティリティ。\r\n *\r\n * - getNodesHavingDataBindで対象ノードを抽出し、createDataBindAttributesで解析\r\n * - 各テンプレートIDごとにバインディング属性リスト・状態パス集合・リストパス集合をキャッシュ\r\n * - forバインディング（ループ）のstatePropertyはlistPathsにも登録\r\n *\r\n * @param id      テンプレートID\r\n * @param content テンプレートのDocumentFragment\r\n * @param rootId  ルートテンプレートID（省略時はidと同じ）\r\n * @returns       解析済みバインディング属性リスト\r\n */\r\nexport function registerDataBindAttributes(\r\n  id     : number, \r\n  content: DocumentFragment,\r\n  rootId : number = id\r\n): IDataBindAttributes[] {\r\n  const dataBindAttributes = getDataBindAttributesFromTemplate(content);\r\n  const paths = pathsSetById[rootId] ?? (pathsSetById[rootId] = new Set<string>());\r\n  const listPaths = listPathsSetById[rootId] ?? (listPathsSetById[rootId] = new Set<string>());\r\n  for(let i = 0; i < dataBindAttributes.length; i++) {\r\n    const attribute = dataBindAttributes[i];\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      paths.add(bindText.stateProperty);\r\n      if (bindText.nodeProperty === \"for\") {\r\n        listPaths.add(bindText.stateProperty);\r\n      }\r\n    }\r\n  }\r\n  return listDataBindAttributesById[id] = dataBindAttributes;\r\n}\r\n\r\n/**\r\n * テンプレートIDからバインディング属性リストを取得\r\n */\r\nexport const getDataBindAttributesById = (id: number): IDataBindAttributes[] => {\r\n  return listDataBindAttributesById[id];\r\n}\r\n\r\n/**\r\n * テンプレートIDからforバインディングのstateProperty集合を取得\r\n */\r\nexport const getListPathsSetById = (id: number): Set<string> => {\r\n  return listPathsSetById[id] ?? [];\r\n};\r\n\r\n/**\r\n * テンプレートIDから全バインディングのstateProperty集合を取得\r\n */\r\nexport const getPathsSetById = (id: number): Set<string> => {\r\n  return pathsSetById[id] ?? [];\r\n};","/**\r\n * registerTemplate.ts\r\n *\r\n * HTMLTemplateElementをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - templateById: IDをキーにHTMLTemplateElementを管理するレコード\r\n * - registerTemplate: 指定IDでテンプレートを登録し、空テキストノード除去やデータバインド属性の登録も実行\r\n * - getTemplateById: 指定IDのテンプレートを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - テンプレート登録時にremoveEmptyTextNodesで空テキストノードを除去し、クリーンなDOMを維持\r\n * - registerDataBindAttributesでデータバインド属性を自動付与\r\n * - グローバルにテンプレートを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { registerDataBindAttributes } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { removeEmptyTextNodes } from \"./removeEmptyTextNodes.js\";\r\n\r\nconst templateById:Record<number, HTMLTemplateElement> = {};\r\n\r\nexport function registerTemplate(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number\r\n): number {\r\n  removeEmptyTextNodes(template.content);\r\n  registerDataBindAttributes(id, template.content, rootId);  \r\n  templateById[id] = template;\r\n  return id;\r\n}\r\n\r\nexport function getTemplateById(id: number): HTMLTemplateElement {\r\n  return templateById[id] ?? raiseError(`getTemplateById: template not found: ${id}`);\r\n}","/**\r\n * removeEmptyTextNodes.ts\r\n *\r\n * DocumentFragment内の空テキストノードを削除するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - content（DocumentFragment）の直下にある空白のみのテキストノードを検出し、削除する\r\n *\r\n * 設計ポイント:\r\n * - childNodesをArray.fromで配列化し、forEachで全ノードを走査\r\n * - nodeTypeがTEXT_NODEかつ、nodeValueが空白のみの場合にremoveChildで削除\r\n * - テンプレート処理やクリーンなDOM生成時に利用\r\n */\r\nexport function removeEmptyTextNodes(content:DocumentFragment):void {\r\n  Array.from(content.childNodes).forEach(node => {\r\n    if (node.nodeType === Node.TEXT_NODE && !(node.nodeValue ?? \"\").trim()) {\r\n      content.removeChild(node);\r\n    }\r\n  });  \r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IReadonlyStateProxy, IWritableStateProxy } from \"../StateClass/types\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { IRenderer } from \"../Updater/types\";\r\nimport { CreateBindingNodeByNodeFn, IBindingNode } from \"./BindingNode/types\";\r\nimport { CreateBindingStateByStateFn, IBindingState } from \"./BindingState/types\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\n\r\n/**\r\n * Bindingクラスは、1つのバインディング（ノードと状態の対応）を管理する中核的な実装です。\r\n *\r\n * 主な役割:\r\n * - DOMノードと状態（State）を結びつけるバインディングノード（bindingNode）とバインディング状態（bindingState）の生成・管理\r\n * - バインディングの初期化（init）、再描画（render）、状態値の更新（updateStateValue）などの処理を提供\r\n * - バージョン管理により、不要な再描画を防止\r\n *\r\n * 設計ポイント:\r\n * - createBindingNode, createBindingStateファクトリで柔軟なバインディング構造に対応\r\n * - renderでバージョン差分がある場合のみバインディングノードを更新\r\n * - 双方向バインディング時はupdateStateValueで状態プロキシに値を反映\r\n * - createBinding関数で一貫したバインディング生成を提供\r\n */\r\nclass Binding implements IBinding {\r\n  parentBindContent: IBindContent;\r\n  node             : Node;\r\n  engine           : IComponentEngine;\r\n  bindingNode      : IBindingNode;\r\n  bindingState     : IBindingState;\r\n  version          : number | undefined;\r\n  constructor(\r\n    parentBindContent : IBindContent,\r\n    node              : Node,\r\n    engine            : IComponentEngine,\r\n    createBindingNode : CreateBindingNodeByNodeFn, \r\n    createBindingState: CreateBindingStateByStateFn,\r\n  ) {\r\n    this.parentBindContent = parentBindContent\r\n    this.node = node;\r\n    this.engine = engine\r\n    this.bindingNode = createBindingNode(this, node, engine.inputFilters);\r\n    this.bindingState = createBindingState(this, engine.outputFilters);\r\n  }\r\n\r\n  get bindContents(): IBindContent[] {\r\n    return this.bindingNode.bindContents;\r\n  }\r\n\r\n  init() {\r\n    this.bindingNode.init();\r\n    this.bindingState.init();\r\n  }\r\n\r\n  updateStateValue(writeState:IWritableStateProxy, value: any) {\r\n    return this.bindingState.assignValue(writeState, value);\r\n  }\r\n\r\n  notifyRedraw(refs: IStatePropertyRef[]) {\r\n    this.bindingNode.notifyRedraw(refs);\r\n  }\r\n\r\n  applyChange(renderer: IRenderer): void {\r\n    if (renderer.updatedBindings.has(this)) return;\r\n    this.bindingNode.applyChange(renderer);\r\n  }\r\n}\r\n\r\n/**\r\n * バインディング生成用ファクトリ関数\r\n * - 各種ファクトリ・エンジン・ノード情報からBindingインスタンスを生成\r\n */\r\nexport function createBinding(\r\n  parentBindContent : IBindContent,\r\n  node              : Node, \r\n  engine            : IComponentEngine, \r\n  createBindingNode : CreateBindingNodeByNodeFn, \r\n  createBindingState: CreateBindingStateByStateFn\r\n): IBinding {\r\n  return new Binding(\r\n    parentBindContent, \r\n    node, \r\n    engine, \r\n    createBindingNode, \r\n    createBindingState\r\n  );\r\n}","/**\r\n * createLoopContext.ts\r\n *\r\n * ループバインディング（for等）で利用するLoopContext（ループコンテキスト）管理クラスとファクトリ関数の実装です。\r\n *\r\n * 主な役割:\r\n * - ループごとのプロパティパス・インデックス・BindContentを紐付けて管理\r\n * - 親ループコンテキストの探索やキャッシュ、インデックスの再割り当て・クリアなどを提供\r\n * - ループ階層をたどるwalk/serializeや、名前でのfind検索も可能\r\n *\r\n * 設計ポイント:\r\n * - WeakRefでlistIndexを保持し、GCフレンドリーな設計\r\n * - parentLoopContextで親ループを遅延探索・キャッシュし、効率的な親子関係管理を実現\r\n * - findで名前からループコンテキストを高速検索（キャッシュ付き）\r\n * - walk/serializeでループ階層をたどる処理を簡潔に記述可能\r\n * - createLoopContextファクトリで一貫した生成・管理が可能\r\n */\r\nimport { IBindContent } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { getStatePropertyRef } from \"../StatePropertyRef/StatepropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { ILoopContext } from \"./types\";\r\n\r\nclass LoopContext implements ILoopContext {\r\n  #ref: IStatePropertyRef | null;\r\n  #info: IStructuredPathInfo;\r\n  #bindContent : IBindContent;\r\n  constructor(\r\n    ref: IStatePropertyRef,\r\n    bindContent: IBindContent\r\n  ) {\r\n    this.#ref = ref;\r\n    this.#info = ref.info;\r\n    this.#bindContent = bindContent;\r\n  }\r\n  get ref(): IStatePropertyRef {\r\n    return this.#ref ?? raiseError(\"ref is null\");\r\n  }\r\n  get path(): string {\r\n    return this.ref.info.pattern;\r\n  }\r\n  get info(): IStructuredPathInfo {\r\n    return this.ref.info;\r\n  }\r\n  get listIndex(): IListIndex {\r\n    return this.ref.listIndex ?? raiseError(\"listIndex is required\");\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    this.#ref = getStatePropertyRef(this.#info, listIndex);\r\n    // 構造は変わらないので、#parentLoopContext、#cacheはクリアする必要はない\r\n  }\r\n  clearListIndex():void {\r\n    this.#ref = null;\r\n  }\r\n  get bindContent(): IBindContent {\r\n    return this.#bindContent;\r\n  }\r\n\r\n  #parentLoopContext: ILoopContext | null | undefined;\r\n  get parentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#parentLoopContext === \"undefined\") {\r\n      let currentBindContent: IBindContent | null = this.bindContent;\r\n      while(currentBindContent !== null) {\r\n        if (currentBindContent.loopContext !== null && currentBindContent.loopContext !== this) {\r\n          this.#parentLoopContext = currentBindContent.loopContext;\r\n          break;\r\n        }\r\n        currentBindContent = currentBindContent.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      if (typeof this.#parentLoopContext === \"undefined\") this.#parentLoopContext = null;\r\n    }\r\n    return this.#parentLoopContext;\r\n  }\r\n\r\n  #cache:Record<string, ILoopContext | null> = {};\r\n  find(name: string): ILoopContext | null {\r\n    let loopContext = this.#cache[name];\r\n    if (typeof loopContext === \"undefined\") {\r\n      let currentLoopContext: ILoopContext | null = this;\r\n      while(currentLoopContext !== null) {\r\n        if (currentLoopContext.path === name) break;\r\n        currentLoopContext = currentLoopContext.parentLoopContext;\r\n      }\r\n      loopContext = this.#cache[name] = currentLoopContext;\r\n    }\r\n    return loopContext;\r\n  }\r\n\r\n  walk(callback: (loopContext: ILoopContext) => void): void {\r\n    let currentLoopContext: ILoopContext | null = this;\r\n    while(currentLoopContext !== null) {\r\n      callback(currentLoopContext);\r\n      currentLoopContext = currentLoopContext.parentLoopContext;\r\n    }\r\n  }\r\n\r\n  serialize(): ILoopContext[] {\r\n    const results: ILoopContext[] = [];\r\n    this.walk((loopContext) => {\r\n      results.unshift(loopContext);\r\n    });\r\n    return results;\r\n  }\r\n\r\n}\r\n\r\n// 生成されたあと、IBindContentのloopContextに登録される\r\n// IBindContentにずっと保持される\r\nexport function createLoopContext(\r\n  ref: IStatePropertyRef,\r\n  bindContent: IBindContent\r\n): ILoopContext {\r\n  return new LoopContext(ref, bindContent);\r\n}","import { resolveNodeFromPath } from \"../BindingBuilder/resolveNodeFromPath.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { createBinding } from \"./Binding.js\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\nimport { createLoopContext } from \"../LoopContext/createLoopContext.js\";\r\nimport { getDataBindAttributesById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { hasLazyLoadComponents, loadLazyLoadComponent } from \"../WebComponents/loadFromImportMap.js\";\r\nimport { IListIndex } from \"../ListIndex/types.js\";\r\nimport { IRenderer } from \"../Updater/types.js\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types.js\";\r\n\r\nfunction createContent(id: number): DocumentFragment {\r\n  const template = getTemplateById(id) ?? \r\n    raiseError(`BindContent: template is not found: ${id}`);\r\n  const fragment = document.importNode(template.content, true);\r\n  if (hasLazyLoadComponents()) {\r\n    const lazyLoadElements = fragment.querySelectorAll(\":not(:defined)\");\r\n    for(let i = 0; i < lazyLoadElements.length; i++) {\r\n      const tagName = lazyLoadElements[i].tagName.toLowerCase();\r\n      loadLazyLoadComponent(tagName);\r\n    }\r\n  }\r\n  return fragment;\r\n}\r\n\r\nfunction createBindings(\r\n  bindContent: IBindContent, \r\n  id         : number, \r\n  engine     : IComponentEngine, \r\n  content    : DocumentFragment\r\n): IBinding[] {\r\n  const attributes = getDataBindAttributesById(id) ?? \r\n    raiseError(`BindContent: data-bind is not set`);\r\n  const bindings: IBinding[] = [];\r\n  for(let i = 0; i < attributes.length; i++) {\r\n    const attribute = attributes[i];\r\n    const node = resolveNodeFromPath(content, attribute.nodePath) ?? \r\n      raiseError(`BindContent: node is not found: ${attribute.nodePath}`);\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      const creator = attribute.creatorByText.get(bindText) ?? \r\n        raiseError(`BindContent: creator is not found: ${bindText}`);\r\n      const binding = createBinding(\r\n        bindContent, \r\n        node, \r\n        engine, \r\n        creator.createBindingNode, \r\n        creator.createBindingState\r\n      );\r\n      bindings.push(binding);\r\n    }\r\n  }\r\n  return bindings;\r\n}\r\n\r\n/**\r\n * BindContentクラスは、テンプレートから生成されたDOM断片（DocumentFragment）と\r\n * そのバインディング情報（IBinding配列）を管理するための実装です。\r\n *\r\n * 主な役割:\r\n * - テンプレートIDからDOM断片を生成し、バインディング情報を構築\r\n * - mount/mountBefore/mountAfter/unmountでDOMへの挿入・削除を制御\r\n * - renderでバインディングの再描画、initで初期化処理を実行\r\n * - ループバインディング時のLoopContextやリストインデックス管理にも対応\r\n * - getLastNodeで再帰的に最後のノードを取得し、リスト描画や差し替えに利用\r\n * - assignListIndexでループ内のリストインデックスを再割り当てし、再初期化\r\n *\r\n * 設計ポイント:\r\n * - fragmentとchildNodesの両方を管理し、効率的なDOM操作を実現\r\n * - バインディング情報はテンプレートごとに動的に生成され、各ノードに紐付く\r\n * - ループや条件分岐など複雑なバインディング構造にも柔軟に対応\r\n * - createBindContentファクトリ関数で一貫した生成・初期化を提供\r\n */\r\nclass BindContent implements IBindContent {\r\n  loopContext  : ILoopContext | null;\r\n  parentBinding: IBinding | null;\r\n  childNodes   : Node[];\r\n  fragment     : DocumentFragment;\r\n  engine       : IComponentEngine | undefined;\r\n  #id;\r\n  get id() {\r\n    return this.#id;\r\n  }\r\n  get isMounted() {\r\n    return this.childNodes.length > 0 && this.childNodes[0].parentNode !== this.fragment;\r\n  }\r\n  get firstChildNode() {\r\n    return this.childNodes[0] ?? null;\r\n  }\r\n  get lastChildNode() {\r\n    return this.childNodes[this.childNodes.length - 1] ?? null;\r\n  }\r\n  getLastNode(parentNode: Node): Node | null {\r\n    const lastBinding = this.bindings[this.bindings.length - 1];\r\n    const lastChildNode = this.lastChildNode;\r\n    if (typeof lastBinding !== \"undefined\" && lastBinding.node === lastChildNode) {\r\n      if (lastBinding.bindContents.length > 0) {\r\n        const childBindContent = lastBinding.bindContents.at(-1) ?? raiseError(`BindContent: childBindContent is not found`);\r\n        const lastNode = childBindContent.getLastNode(parentNode);\r\n        if (lastNode !== null) {\r\n          return lastNode;\r\n        }\r\n      }\r\n    }\r\n    if (parentNode !== lastChildNode?.parentNode) {\r\n      return null;\r\n    }\r\n    return lastChildNode;\r\n  }\r\n  #currentLoopContext: ILoopContext | null | undefined;\r\n  get currentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#currentLoopContext === \"undefined\") {\r\n      let bindContent: IBindContent | null = this;\r\n      while(bindContent !== null) {\r\n        if (bindContent.loopContext !== null) break; ;\r\n        bindContent = bindContent.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      this.#currentLoopContext = bindContent?.loopContext ?? null;\r\n    }\r\n    return this.#currentLoopContext;\r\n  }\r\n  constructor(\r\n    parentBinding: IBinding | null,\r\n    id           : number, \r\n    engine       : IComponentEngine, \r\n    loopRef      : IStatePropertyRef,\r\n  ) {\r\n    this.parentBinding = parentBinding;\r\n    this.#id = id;\r\n    this.fragment = createContent(id);\r\n    this.childNodes = Array.from(this.fragment.childNodes);\r\n    this.engine = engine;\r\n    this.loopContext = (loopRef.listIndex !== null) ? createLoopContext(loopRef, this) : null;\r\n    this.bindings = createBindings(\r\n      this, \r\n      id, \r\n      engine, \r\n      this.fragment\r\n    );\r\n  }\r\n  mount(parentNode: Node) {\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      parentNode.appendChild(this.childNodes[i]);\r\n    }\r\n  }\r\n  mountBefore(parentNode: Node, beforeNode: Node | null) {\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n    }\r\n  }\r\n  mountAfter(parentNode: Node, afterNode: Node | null) {\r\n    const beforeNode = afterNode?.nextSibling ?? null;\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n    }\r\n  }\r\n  unmount() {\r\n    const parentElement = this.childNodes[0]?.parentElement ?? null;\r\n    if (parentElement === null) {\r\n      return; // すでにDOMから削除されている場合は何もしない\r\n    }\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      parentElement.removeChild(this.childNodes[i]);\r\n    }\r\n  }\r\n  bindings: IBinding[] = [];\r\n  init() {\r\n    for(let i = 0; i < this.bindings.length; i++) {\r\n      this.bindings[i].init();\r\n    }\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    if (this.loopContext == null) raiseError(`BindContent: loopContext is null`);\r\n    this.loopContext.assignListIndex(listIndex);\r\n    this.init();\r\n  }\r\n  applyChange(renderer: IRenderer): void {\r\n    for(let i = 0; i < this.bindings.length; i++) {\r\n      const binding = this.bindings[i];\r\n      if (renderer.updatedBindings.has(binding)) continue;\r\n      binding.applyChange(renderer);\r\n    }\r\n  }\r\n}\r\n\r\nexport function createBindContent(\r\n  parentBinding: IBinding | null,\r\n  id           : number, \r\n  engine       :IComponentEngine, \r\n  loopRef      : IStatePropertyRef,\r\n):IBindContent {\r\n  const bindContent = new BindContent(\r\n    parentBinding, \r\n    id, \r\n    engine, \r\n    loopRef,\r\n  );\r\n  bindContent.init();\r\n  return bindContent;\r\n}","/**\r\n * loadFromImportMap.ts\r\n *\r\n * importmapの情報をもとに、Structiveのルートやコンポーネントを動的にロード・登録するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - importmap.imports内のエイリアスを走査し、@routes/や@components/のプレフィックスで判定\r\n * - @routes/の場合はルーティング情報をentryRouteで登録\r\n * - @components/の場合はloadSingleFileComponentでSFCをロードし、createComponentClassでクラス化してregisterComponentClassで登録\r\n *\r\n * 設計ポイント:\r\n * - importmapのエイリアスを利用して、ルーティングやコンポーネントの自動登録を実現\r\n * - パスやタグ名の正規化、パラメータ除去なども自動で処理\r\n * - 非同期でSFCをロードし、動的なWeb Components登録に対応\r\n */\r\nimport { entryRoute } from \"../Router/Router\";\r\nimport { raiseError } from \"../utils\";\r\nimport { createComponentClass } from \"./createComponentClass\";\r\nimport { loadImportmap } from \"./loadImportmap\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent\";\r\nimport { registerComponentClass } from \"./registerComponentClass\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nconst ROUTES_KEY = \"@routes/\";\r\nconst COMPONENTS_KEY = \"@components/\";\r\nconst LAZY_LOAD_SUFFIX = \"#lazy\";\r\nconst LAZY_LOAD_SUFFIX_LEN = LAZY_LOAD_SUFFIX.length;\r\n\r\nconst lazyLoadComponentAliasByTagName: Record<string, string> = {};\r\n\r\nexport async function loadFromImportMap(): Promise<void> {\r\n  const importmap = loadImportmap();\r\n  if (importmap.imports) {\r\n    const loadAliasByTagName: Map<string, string> = new Map();\r\n    for (const [alias, value] of Object.entries(importmap.imports)) {\r\n      let tagName, isLazyLoad;\r\n      if (alias.startsWith(ROUTES_KEY)) {\r\n        isLazyLoad = alias.endsWith(LAZY_LOAD_SUFFIX);\r\n        // remove the prefix '@routes' and the suffix '#lazy' if it exists\r\n        const path = alias.slice(ROUTES_KEY.length - 1, isLazyLoad ? -LAZY_LOAD_SUFFIX_LEN : undefined); \r\n        const pathWithoutParams = path.replace(/:[^\\s/]+/g, \"\"); // remove the params\r\n        tagName = \"routes\" + pathWithoutParams.replace(/\\//g, \"-\"); // replace '/' with '-'\r\n        entryRoute(tagName, path === \"/root\" ? \"/\" : path); // routing\r\n      } if (alias.startsWith(COMPONENTS_KEY)) {\r\n        isLazyLoad = alias.endsWith(LAZY_LOAD_SUFFIX);\r\n        // remove the prefix '@components/' and the suffix '#lazy' if it exists\r\n        tagName = alias.slice(COMPONENTS_KEY.length, isLazyLoad ? -LAZY_LOAD_SUFFIX_LEN : undefined);\r\n      }\r\n      if (!tagName) {\r\n        continue;\r\n      }\r\n      if (isLazyLoad) {\r\n        // Lazy Load用のコンポーネントのエイリアスを格納\r\n        lazyLoadComponentAliasByTagName[tagName] = alias;\r\n        continue; // Lazy Loadの場合はここでスキップ\r\n      }\r\n      loadAliasByTagName.set(tagName, alias);\r\n    }\r\n    for (const [tagName, alias] of loadAliasByTagName.entries()) {\r\n      // 非Lazy Loadのコンポーネントはここで登録\r\n      const componentData = await loadSingleFileComponent(alias);\r\n      const componentClass = createComponentClass(componentData);\r\n      registerComponentClass(tagName, componentClass);\r\n    }\r\n  }\r\n}\r\n\r\nexport function hasLazyLoadComponents(): boolean {\r\n  return Object.keys(lazyLoadComponentAliasByTagName).length > 0;\r\n}\r\n\r\nexport function isLazyLoadComponent(tagName: string): boolean {\r\n  return lazyLoadComponentAliasByTagName.hasOwnProperty(tagName);\r\n}\r\n\r\nexport function loadLazyLoadComponent(tagName: string): void {\r\n  const alias = lazyLoadComponentAliasByTagName[tagName];\r\n  if (!alias) {\r\n    console.warn(`loadLazyLoadComponent: alias not found for tagName: ${tagName}`);\r\n    return;\r\n  }\r\n  delete lazyLoadComponentAliasByTagName[tagName]; // 一度ロードしたら削除\r\n  queueMicrotask(async () => {\r\n    const componentData = await loadSingleFileComponent(alias);\r\n    const componentClass = createComponentClass(componentData);\r\n    registerComponentClass(tagName, componentClass);\r\n  });\r\n}\r\n","import { raiseError } from \"../utils.js\";\r\nimport { IComponentConfig } from \"../WebComponents/types\";\r\nimport { canHaveShadowRoot } from \"./canHaveShadowRoot.js\";\r\n\r\nfunction getParentShadowRoot(parentNode: Node | null): ShadowRoot|undefined{\r\n  let node: Node | null = parentNode;\r\n  while(node) {\r\n    if (node instanceof ShadowRoot) {\r\n      return node;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n}\r\n\r\n/**\r\n * 指定したHTMLElementにShadow DOMをアタッチし、スタイルシートを適用するユーティリティ関数。\r\n *\r\n * - config.enableShadowDomがtrueの場合は、ShadowRootを生成し、adoptedStyleSheetsでスタイルを適用\r\n * - extends指定がある場合はcanHaveShadowRootで拡張可能かチェック\r\n * - Shadow DOMを使わない場合は、親のShadowRootまたはdocumentにスタイルシートを追加\r\n * - すでに同じスタイルシートが含まれていれば重複追加しない\r\n *\r\n * @param element    対象のHTMLElement\r\n * @param config     コンポーネント設定\r\n * @param styleSheet 適用するCSSStyleSheet\r\n * @throws           Shadow DOM非対応の組み込み要素を拡張しようとした場合はエラー\r\n */\r\nexport function attachShadow(element: HTMLElement, config: IComponentConfig, styleSheet: CSSStyleSheet): void {\r\n    if (config.enableShadowDom) {\r\n      if (config.extends === null || canHaveShadowRoot(config.extends)) {\r\n        if (!element.shadowRoot) {\r\n          const shadowRoot = element.attachShadow({ mode: 'open' });\r\n          shadowRoot.adoptedStyleSheets = [styleSheet];\r\n        }\r\n      } else {\r\n        raiseError(`ComponentEngine: Shadow DOM not supported for builtin components that extend ${config.extends}`);\r\n      }\r\n    } else {\r\n      const shadowRootOrDocument = getParentShadowRoot(element.parentNode) || document;\r\n      const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n      if (!styleSheets.includes(styleSheet)) {\r\n        shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, styleSheet];\r\n      }\r\n    }\r\n\r\n}","/**\r\n * 指定したタグ名の要素がShadowRootを持てるかどうかを判定するユーティリティ関数。\r\n *\r\n * - 指定タグ名で要素を生成し、attachShadowメソッドが存在するかどうかで判定\r\n * - 無効なタグ名やattachShadow未対応の場合はfalseを返す\r\n *\r\n * @param tagName 判定したい要素のタグ名（例: \"div\", \"span\", \"input\" など）\r\n * @returns       ShadowRootを持てる場合はtrue、持てない場合はfalse\r\n */\r\nexport function canHaveShadowRoot(tagName: string): boolean {\r\n  try {\r\n    // 一時的に要素を作成\r\n    const element = document.createElement(tagName);\r\n    // `attachShadow` メソッドが存在し、実行可能かを確認\r\n    if (typeof element.attachShadow !== \"function\") {\r\n      return false;\r\n    }\r\n    // 一時的にShadowRootをアタッチしてみる\r\n    const shadowRoot = element.attachShadow({ mode: 'open' });\r\n    return true;\r\n  } catch {\r\n    // 無効なタグ名などが渡された場合は false を返す\r\n    return false;\r\n  }\r\n}\r\n","import { IBinding } from \"../DataBinding/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { StructiveComponent } from \"../WebComponents/types\";\r\nimport { IComponentStateBinding } from \"./types\";\r\n\r\nclass ComponentStateBinding implements IComponentStateBinding {\r\n  parentPaths: Set<string> = new Set<string>();\r\n  childPaths: Set<string> = new Set<string>();\r\n  childPathByParentPath: Map<string, string> = new Map();\r\n  parentPathByChildPath: Map<string, string> = new Map();\r\n  bindingByParentPath: Map<string, IBinding> = new Map();\r\n  bindingByChildPath: Map<string, IBinding> = new Map();\r\n  bindings: WeakSet<IBinding> = new WeakSet();\r\n\r\n  addBinding(binding: IBinding): void {\r\n    if (this.bindings.has(binding)) {\r\n      return; // 既にバインディングが追加されている場合は何もしない\r\n    }\r\n    const parentPath = binding.bindingState.pattern;\r\n    const childPath = binding.bindingNode.subName;\r\n    if (this.childPathByParentPath.has(parentPath)) {\r\n      throw new Error(`Parent path \"${parentPath}\" already has a child path.`);\r\n    }\r\n    if (this.parentPathByChildPath.has(childPath)) {\r\n      throw new Error(`Child path \"${childPath}\" already has a parent path.`);\r\n    }\r\n    this.childPathByParentPath.set(parentPath, childPath);\r\n    this.parentPathByChildPath.set(childPath, parentPath);\r\n    this.parentPaths.add(parentPath);\r\n    this.childPaths.add(childPath);\r\n    this.bindingByParentPath.set(parentPath, binding);\r\n    this.bindingByChildPath.set(childPath, binding);\r\n    this.bindings.add(binding);\r\n  }\r\n  \r\n  getChildPath(parentPath: string): string | undefined {\r\n    return this.childPathByParentPath.get(parentPath);\r\n  }\r\n\r\n  getParentPath(childPath: string): string | undefined {\r\n    return this.parentPathByChildPath.get(childPath);\r\n  }\r\n\r\n  toParentPathFromChildPath(childPath: string): string {\r\n    const childPathInfo = getStructuredPathInfo(childPath);\r\n    const matchPaths = childPathInfo.cumulativePathSet.intersection(this.childPaths);\r\n    if (matchPaths.size === 0) {\r\n      raiseError(`No parent path found for child path \"${childPath}\".`);\r\n    }\r\n    const matchPathArray = Array.from(matchPaths);\r\n    const longestMatchPath = matchPathArray[matchPathArray.length - 1];\r\n    const remainPath = childPath.slice(longestMatchPath.length); // include the dot\r\n    const matchParentPath = this.parentPathByChildPath.get(longestMatchPath);\r\n    if (typeof matchParentPath === \"undefined\") {\r\n      raiseError(`No parent path found for child path \"${childPath}\".`);\r\n    }\r\n    return matchParentPath + remainPath;\r\n  }\r\n\r\n  toChildPathFromParentPath(parentPath: string): string {\r\n     const parentPathInfo = getStructuredPathInfo(parentPath);\r\n    const matchPaths = parentPathInfo.cumulativePathSet.intersection(this.parentPaths);\r\n    if (matchPaths.size === 0) {\r\n      raiseError(`No child path found for parent path \"${parentPath}\".`);\r\n    }\r\n    const matchPathArray = Array.from(matchPaths);\r\n    const longestMatchPath = matchPathArray[matchPathArray.length - 1];\r\n    const remainPath = parentPath.slice(longestMatchPath.length); // include the dot\r\n    const matchChildPath = this.childPathByParentPath.get(longestMatchPath);\r\n    if (typeof matchChildPath === \"undefined\") {\r\n      raiseError(`No child path found for parent path \"${parentPath}\".`);\r\n    }\r\n    return matchChildPath + remainPath;\r\n  }\r\n\r\n  startsWithByChildPath(childPathInfo: IStructuredPathInfo): string | null {\r\n    if (this.childPaths.size === 0) {\r\n      return null;\r\n    }\r\n    const matchPaths = childPathInfo.cumulativePathSet.intersection(this.childPaths);\r\n    if (matchPaths.size === 0) {\r\n      return null;\r\n    } else {\r\n      const matches = Array.from(matchPaths);\r\n      const longestMatchPath = matches[matches.length - 1];\r\n      return longestMatchPath;\r\n    }\r\n  }\r\n\r\n  bind(parentComponent: StructiveComponent, childComponent: StructiveComponent): void {\r\n    // bindParentComponent\r\n    const bindings = parentComponent.getBindingsFromChild(childComponent);\r\n    for (const binding of bindings ?? []) {\r\n      this.addBinding(binding);\r\n    }\r\n  }\r\n}\r\n\r\nexport function createComponentStateBinding(): IComponentStateBinding {\r\n  return new ComponentStateBinding();\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IComponentStateBinding } from \"../ComponentStateBinding/types\";\r\nimport { SetByRefSymbol } from \"../StateClass/symbols\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { getStatePropertyRef } from \"../StatePropertyRef/StatepropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { update } from \"../Updater/Updater\";\r\nimport { raiseError } from \"../utils\";\r\nimport { AssignStateSymbol, NotifyRedrawSymbol } from \"./symbols\";\r\nimport { IComponentStateInput, IComponentStateInputHandler } from \"./types\";\r\n\r\nclass ComponentStateInputHandler implements IComponentStateInputHandler {\r\n  private componentStateBinding: IComponentStateBinding;\r\n  private engine: IComponentEngine;\r\n  constructor(engine:IComponentEngine, componentStateBinding: IComponentStateBinding) {\r\n    this.componentStateBinding = componentStateBinding;\r\n    this.engine = engine;\r\n  }\r\n\r\n  assignState(object: any): void {\r\n    update(this.engine, null, async (updater, stateProxy) => {\r\n      for(const [key, value] of Object.entries(object)) {\r\n        const childPathInfo = getStructuredPathInfo(key);\r\n        const childRef = getStatePropertyRef(childPathInfo, null);\r\n        stateProxy[SetByRefSymbol](childRef, value);\r\n      }     \r\n    });\r\n  }\r\n\r\n  /**\r\n   * listindexに一致するかどうかは事前にスクリーニングしておく\r\n   * @param refs \r\n   */\r\n  notifyRedraw(refs: IStatePropertyRef[]): void {\r\n    for(const parentPathRef of refs) {\r\n      try {\r\n        const childPath = this.componentStateBinding.toChildPathFromParentPath(parentPathRef.info.pattern);\r\n        const childPathInfo = getStructuredPathInfo(childPath);\r\n        const childListIndex = parentPathRef.listIndex;\r\n        const childRef = getStatePropertyRef(childPathInfo, childListIndex);\r\n        const value = this.engine.getPropertyValue(childRef);\r\n        // Ref情報をもとに状態更新キューに追加\r\n        update(this.engine, null, async (updater, stateProxy) => {\r\n          const childRef = getStatePropertyRef(childPathInfo, childListIndex);\r\n          updater.enqueueRef(childRef);\r\n        });\r\n      } catch(e) {\r\n        // 対象でないものは何もしない\r\n      }\r\n    }\r\n  }\r\n\r\n  get(target:any, prop:PropertyKey, receiver:IComponentStateInput) {\r\n    if (prop === AssignStateSymbol) {\r\n      return this.assignState.bind(this);\r\n    } else if (prop === NotifyRedrawSymbol) {\r\n      return this.notifyRedraw.bind(this);\r\n    } else if (typeof prop === \"string\") {\r\n      const ref = getStatePropertyRef(getStructuredPathInfo(prop), null);\r\n      return this.engine.getPropertyValue(ref);\r\n    }\r\n    raiseError(`Property \"${String(prop)}\" is not supported in ComponentStateInput.`);\r\n  }\r\n\r\n  set(target:any, prop:PropertyKey, value:any, receiver:IComponentStateInput): boolean {\r\n    if (typeof prop === \"string\") {\r\n      const ref = getStatePropertyRef(getStructuredPathInfo(prop), null);\r\n      this.engine.setPropertyValue(ref, value);\r\n      return true;\r\n    }\r\n    raiseError(`Property \"${String(prop)}\" is not supported in ComponentStateInput.`);\r\n  }\r\n}\r\n\r\nexport function createComponentStateInput(\r\n  engine: IComponentEngine,\r\n  componentStateBinding: IComponentStateBinding\r\n): IComponentStateInput {\r\n  const handler = new ComponentStateInputHandler(engine, componentStateBinding);\r\n  return new Proxy({}, handler) as IComponentStateInput;\r\n}","import { IComponentStateBinding } from \"../ComponentStateBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { SetByRefSymbol } from \"../StateClass/symbols\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { getStatePropertyRef } from \"../StatePropertyRef/StatepropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { update } from \"../Updater/Updater\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IComponentStateOutput } from \"./types\";\r\n\r\nclass ComponentStateOutput implements IComponentStateOutput {\r\n  binding: IComponentStateBinding;\r\n  constructor(binding: IComponentStateBinding) {\r\n    this.binding = binding;\r\n  }\r\n\r\n  get(ref: IStatePropertyRef): any {\r\n    const childPath = this.binding.startsWithByChildPath(ref.info);\r\n    if (childPath === null) {\r\n      raiseError(`No child path found for path \"${ref.info.toString()}\".`);\r\n    }\r\n    const binding = this.binding.bindingByChildPath.get(childPath);\r\n    if (typeof binding === \"undefined\") {\r\n      raiseError(`No binding found for child path \"${childPath}\".`);\r\n    }\r\n    const parentPathInfo = getStructuredPathInfo(this.binding.toParentPathFromChildPath(ref.info.pattern));\r\n    const parentRef = getStatePropertyRef(parentPathInfo, ref.listIndex ?? binding.bindingState.listIndex);\r\n    return binding.engine.getPropertyValue(parentRef);\r\n  }\r\n\r\n  set(ref: IStatePropertyRef, value: any): boolean {\r\n    const childPath = this.binding.startsWithByChildPath(ref.info);\r\n    if (childPath === null) {\r\n      raiseError(`No child path found for path \"${ref.info.toString()}\".`);\r\n    }\r\n    const binding = this.binding.bindingByChildPath.get(childPath);\r\n    if (typeof binding === \"undefined\") {\r\n      raiseError(`No binding found for child path \"${childPath}\".`);\r\n    }\r\n    const parentPathInfo = getStructuredPathInfo(this.binding.toParentPathFromChildPath(ref.info.pattern));\r\n    const engine = binding.engine;\r\n    const parentRef = getStatePropertyRef(parentPathInfo, ref.listIndex ?? binding.bindingState.listIndex);\r\n    update(engine, null, async (updater, stateProxy) => {\r\n      stateProxy[SetByRefSymbol](parentRef, value);\r\n    });\r\n    return true;\r\n  }\r\n\r\n  startsWith(pathInfo: IStructuredPathInfo): boolean {\r\n    return this.binding.startsWithByChildPath(pathInfo) !== null;\r\n  }\r\n\r\n  getListIndexes(ref: IStatePropertyRef): IListIndex[] | null {\r\n    const childPath = this.binding.startsWithByChildPath(ref.info);\r\n    if (childPath === null) {\r\n      raiseError(`No child path found for path \"${ref.info.toString()}\".`);\r\n    }\r\n    const binding = this.binding.bindingByChildPath.get(childPath);\r\n    if (typeof binding === \"undefined\") {\r\n      raiseError(`No binding found for child path \"${childPath}\".`);\r\n    }\r\n    const parentPathInfo = getStructuredPathInfo(this.binding.toParentPathFromChildPath(ref.info.pattern));\r\n    const parentRef = getStatePropertyRef(parentPathInfo, ref.listIndex);\r\n    return binding.engine.getListIndexes(parentRef);\r\n  }\r\n}\r\n\r\nexport function createComponentStateOutput(binding: IComponentStateBinding): IComponentStateOutput {\r\n  return new ComponentStateOutput(binding);\r\n}","import { createBindContent } from \"../DataBinding/BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../DataBinding/types\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { IState, IStructiveState } from \"../StateClass/types\";\r\nimport { ComponentType, IComponentConfig, IComponentStatic, StructiveComponent } from \"../WebComponents/types\";\r\nimport { attachShadow } from \"./attachShadow.js\";\r\nimport { ISaveInfoByResolvedPathInfo, IComponentEngine } from \"./types\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetByRefSymbol, SetCacheableSymbol } from \"../StateClass/symbols.js\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { createReadonlyStateProxy } from \"../StateClass/createReadonlyStateProxy.js\";\r\nimport { IComponentStateBinding } from \"../ComponentStateBinding/types.js\";\r\nimport { createComponentStateBinding } from \"../ComponentStateBinding/createComponentStateBinding.js\";\r\nimport { createComponentStateInput } from \"../ComponentStateInput/createComponentStateInput.js\";\r\nimport { createComponentStateOutput } from \"../ComponentStateOutput/createComponentStateOutput.js\";\r\nimport { IComponentStateInput } from \"../ComponentStateInput/types.js\";\r\nimport { IComponentStateOutput } from \"../ComponentStateOutput/types.js\";\r\nimport { AssignStateSymbol } from \"../ComponentStateInput/symbols.js\";\r\nimport { IListIndex } from \"../ListIndex/types.js\";\r\nimport { IPathManager } from \"../PathManager/types.js\";\r\nimport { update } from \"../Updater/Updater.js\";\r\nimport { getStatePropertyRef } from \"../StatePropertyRef/StatepropertyRef.js\";\r\nimport { RESERVED_WORD_SET } from \"../constants.js\";\r\nimport { addPathNode } from \"../PathTree/PathNode.js\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types.js\";\r\n\r\n/**\r\n * ComponentEngineクラスは、Structiveコンポーネントの状態管理・依存関係管理・\r\n * バインディング・ライフサイクル・レンダリングなどの中核的な処理を担うエンジンです。\r\n *\r\n * 主な役割:\r\n * - 状態インスタンスやプロキシの生成・管理\r\n * - テンプレート・スタイルシート・フィルター・バインディング情報の管理\r\n * - 依存関係グラフ（dependentTree）の構築と管理\r\n * - バインディング情報やリスト情報の保存・取得\r\n * - ライフサイクル（connectedCallback/disconnectedCallback）処理\r\n * - Shadow DOMやスタイルシートの適用\r\n * - 状態プロパティの取得・設定\r\n * - バインディングの追加・存在判定・リスト管理\r\n *\r\n * 構造・設計上の特徴:\r\n * - 状態や依存関係、バインディング情報を効率的に管理するためのキャッシュやマップを多用\r\n * - テンプレートやリスト構造の多重管理に対応\r\n * - 非同期初期化やUpdaterによるバッチ的な状態更新設計\r\n * - 疎結合な設計で、各種ユーティリティやファクトリ関数と連携\r\n *\r\n * 典型的なWeb Componentsのライフサイクルやリアクティブな状態管理を、Structive独自の構造で実現しています。\r\n */\r\nexport class ComponentEngine implements IComponentEngine {\r\n  type          : ComponentType = 'autonomous';\r\n  config        : IComponentConfig;\r\n  template      : HTMLTemplateElement;\r\n  styleSheet    : CSSStyleSheet;\r\n  stateClass    : IStructiveState;\r\n  state         : IState;\r\n  inputFilters  : FilterWithOptions;\r\n  outputFilters : FilterWithOptions;\r\n  #bindContent  :IBindContent | null = null;\r\n  get bindContent(): IBindContent {\r\n    if (this.#bindContent === null) {\r\n      raiseError(\"bindContent is not initialized yet\");\r\n    }\r\n    return this.#bindContent;\r\n  }\r\n  baseClass     : typeof HTMLElement = HTMLElement;\r\n  owner         : StructiveComponent;\r\n\r\n  bindingsByListIndex : WeakMap<IListIndex, Set<IBinding>> = new WeakMap();\r\n\r\n  bindingsByComponent: WeakMap<StructiveComponent, Set<IBinding>> = new WeakMap();\r\n  structiveChildComponents: Set<StructiveComponent> = new Set();\r\n\r\n  #waitForInitialize : PromiseWithResolvers<void> = Promise.withResolvers<void>();\r\n  #waitForDisconnected: PromiseWithResolvers<void> | null = null;\r\n  \r\n  #stateBinding: IComponentStateBinding = createComponentStateBinding();\r\n  stateInput: IComponentStateInput;\r\n  stateOutput: IComponentStateOutput;\r\n  #blockPlaceholder: Comment | null = null; // ブロックプレースホルダー\r\n  #blockParentNode: Node | null = null; // ブロックプレースホルダーの親ノード\r\n  #ignoreDissconnectedCallback: boolean = false; // disconnectedCallbackを無視するフラグ\r\n\r\n  constructor(config: IComponentConfig, owner: StructiveComponent) {\r\n    this.config = config;\r\n    if (this.config.extends) {\r\n      this.type = 'builtin';\r\n    }\r\n    const componentClass = owner.constructor as IComponentStatic;\r\n    this.template = componentClass.template;\r\n    this.styleSheet = componentClass.styleSheet;\r\n    this.stateClass = componentClass.stateClass;\r\n    this.state = new this.stateClass();\r\n    this.inputFilters = componentClass.inputFilters;\r\n    this.outputFilters = componentClass.outputFilters;\r\n    this.owner =  owner;\r\n    this.stateInput = createComponentStateInput(this, this.#stateBinding);\r\n    this.stateOutput = createComponentStateOutput(this.#stateBinding);\r\n  }\r\n\r\n  get pathManager(): IPathManager {\r\n    return (this.owner.constructor as IComponentStatic).pathManager;\r\n  }\r\n\r\n  setup(): void {\r\n    for(const path in this.state) {\r\n      if (RESERVED_WORD_SET.has(path) || this.pathManager.alls.has(path)) {\r\n        continue;\r\n      }\r\n      this.pathManager.alls.add(path);\r\n      addPathNode(this.pathManager.rootNode, path);\r\n    }\r\n    const componentClass = this.owner.constructor as IComponentStatic;\r\n    const rootRef = getStatePropertyRef(getStructuredPathInfo(''), null);\r\n    this.#bindContent = createBindContent(null, componentClass.id, this, rootRef); // this.stateArrayPropertyNamePatternsが変更になる可能性がある\r\n  }\r\n\r\n  get waitForInitialize(): PromiseWithResolvers<void> {\r\n    return this.#waitForInitialize;\r\n  }\r\n\r\n  async connectedCallback(): Promise<void> {\r\n    await this.#waitForDisconnected?.promise; // disconnectedCallbackが呼ばれている場合は待つ\r\n    await this.owner.parentStructiveComponent?.waitForInitialize.promise;\r\n    // コンポーネントの状態を初期化する\r\n    if (this.owner.dataset.state) {\r\n      // data-state属性から状態を取得する\r\n      try {\r\n        const json = JSON.parse(this.owner.dataset.state);\r\n        this.stateInput[AssignStateSymbol](json);\r\n      } catch(e) {\r\n        raiseError(\"Failed to parse state from dataset\");\r\n      }\r\n    }\r\n    const parentComponent = this.owner.parentStructiveComponent;\r\n    if (parentComponent) {\r\n      // 親コンポーネントの状態をバインドする\r\n      parentComponent.registerChildComponent(this.owner);\r\n      // 親コンポーネントの状態を子コンポーネントにバインドする\r\n      this.#stateBinding.bind(parentComponent, this.owner);\r\n    }\r\n    if (this.config.enableWebComponents) {\r\n      attachShadow(this.owner, this.config, this.styleSheet);\r\n    } else {\r\n      this.#blockParentNode = this.owner.parentNode;\r\n      this.#blockPlaceholder = document.createComment(\"Structive block placeholder\");\r\n      try {\r\n        this.#ignoreDissconnectedCallback = true; // disconnectedCallbackを無視するフラグを立てる\r\n        this.owner.replaceWith(this.#blockPlaceholder); // disconnectCallbackが呼ばれてしまう\r\n      } finally {\r\n        this.#ignoreDissconnectedCallback = false;\r\n      }\r\n    }\r\n\r\n    if (this.config.enableWebComponents) {\r\n      // Shadow DOMにバインドコンテンツをマウントする\r\n      this.bindContent.mount(this.owner.shadowRoot ?? this.owner);\r\n    } else {\r\n      // ブロックプレースホルダーの親ノードにバインドコンテンツをマウントする\r\n      const parentNode = this.#blockParentNode ?? raiseError(\"Block parent node is not set\");\r\n      this.bindContent.mountAfter(parentNode, this.#blockPlaceholder);\r\n    }\r\n\r\n    await update(this, null, async (updater, stateProxy) => {\r\n      // 状態の初期レンダリングを行う\r\n      for(const path of this.pathManager.alls) {\r\n        const info = getStructuredPathInfo(path);\r\n        if (info.pathSegments.length !== 1) continue; // ルートプロパティのみ\r\n        if (this.pathManager.funcs.has(path)) continue; // 関数は除外\r\n        const ref = getStatePropertyRef(info, null);\r\n        updater.enqueueRef(ref);\r\n      }\r\n      await stateProxy[ConnectedCallbackSymbol]();\r\n    });\r\n\r\n    // レンダリングが終わってから実行する\r\n    queueMicrotask(() => {\r\n      this.#waitForInitialize.resolve();\r\n    });\r\n  }\r\n\r\n  async disconnectedCallback(): Promise<void> {\r\n    this.#waitForDisconnected = Promise.withResolvers<void>();\r\n    try {\r\n      if (this.#ignoreDissconnectedCallback) return; // disconnectedCallbackを無視するフラグが立っている場合は何もしない\r\n      await update(this, null, async (updater, stateProxy) => {\r\n        await stateProxy[DisconnectedCallbackSymbol]();\r\n      });\r\n      // 親コンポーネントから登録を解除する\r\n      this.owner.parentStructiveComponent?.unregisterChildComponent(this.owner);\r\n      if (!this.config.enableWebComponents) {\r\n        this.#blockPlaceholder?.remove();\r\n        this.#blockPlaceholder = null;\r\n        this.#blockParentNode = null;\r\n      }\r\n    } finally {\r\n      this.#waitForDisconnected.resolve(); // disconnectedCallbackが呼ばれたことを通知   \r\n    }\r\n  }\r\n\r\n  #saveInfoByStructuredPathId: { [id:number]: ISaveInfoByResolvedPathInfo } = {};\r\n  #saveInfoByResolvedPathInfoIdByListIndex: WeakMap<IListIndex, { [id:number]: ISaveInfoByResolvedPathInfo }> = new WeakMap();\r\n  #saveInfoByRef: WeakMap<IStatePropertyRef, ISaveInfoByResolvedPathInfo> = new WeakMap();\r\n\r\n  createSaveInfo():ISaveInfoByResolvedPathInfo {\r\n    return {\r\n      list          : null,\r\n      listIndexes   : null,\r\n      bindings      : [],\r\n    }\r\n  }\r\n\r\n  getSaveInfoByStatePropertyRef(ref: IStatePropertyRef): ISaveInfoByResolvedPathInfo {\r\n    if (ref.listIndex === null) {\r\n      let saveInfo = this.#saveInfoByStructuredPathId[ref.info.id];\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        this.#saveInfoByStructuredPathId[ref.info.id] = saveInfo;\r\n      }\r\n      return saveInfo;\r\n    } else {\r\n/*\r\n      let saveInfo = this.#saveInfoByRef.get(ref);\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        this.#saveInfoByRef.set(ref, saveInfo);\r\n      }\r\n*/\r\n      let saveInfoByResolvedPathInfoId = this.#saveInfoByResolvedPathInfoIdByListIndex.get(ref.listIndex);\r\n      if (typeof saveInfoByResolvedPathInfoId === \"undefined\") {\r\n        saveInfoByResolvedPathInfoId = {};\r\n        this.#saveInfoByResolvedPathInfoIdByListIndex.set(ref.listIndex, saveInfoByResolvedPathInfoId);\r\n      }\r\n      let saveInfo = saveInfoByResolvedPathInfoId[ref.info.id];\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        saveInfoByResolvedPathInfoId[ref.info.id] = saveInfo;\r\n      }\r\n\r\n      return saveInfo;\r\n    }\r\n  }\r\n  \r\n  saveBinding(\r\n    ref      : IStatePropertyRef,\r\n    binding  : IBinding\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(ref);\r\n    saveInfo.bindings.push(binding);\r\n  }\r\n\r\n  saveListAndListIndexes(\r\n    ref               : IStatePropertyRef,\r\n    list              : any[] | null,\r\n    listIndexes       : IListIndex[] | null\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(ref);\r\n    saveInfo.list = list;\r\n    saveInfo.listIndexes = listIndexes;\r\n  }\r\n\r\n  getBindings(ref: IStatePropertyRef): IBinding[] {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(ref);\r\n    return saveInfo.bindings;\r\n  }\r\n\r\n  getListIndexes(ref: IStatePropertyRef): IListIndex[] | null {\r\n    if (this.stateOutput.startsWith(ref.info)) {\r\n      return this.stateOutput.getListIndexes(ref);\r\n    }\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(ref);\r\n    return saveInfo.listIndexes;\r\n  }\r\n\r\n  getListAndListIndexes(ref: IStatePropertyRef): [any[] | null, IListIndex[] | null] {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(ref);\r\n    return [saveInfo.list, saveInfo.listIndexes];\r\n  }\r\n\r\n  getPropertyValue(ref: IStatePropertyRef): any {\r\n    // プロパティの値を取得する\r\n    const stateProxy = createReadonlyStateProxy(this, this.state);\r\n    return stateProxy[GetByRefSymbol](ref);\r\n  }\r\n  setPropertyValue(ref: IStatePropertyRef, value: any): void {\r\n    // プロパティの値を設定する\r\n    update(this, null, async (updater, stateProxy) => {\r\n      stateProxy[SetByRefSymbol](ref, value);\r\n    });\r\n  }\r\n  // Structive子コンポーネントを登録する\r\n  registerChildComponent(component: StructiveComponent): void {\r\n    this.structiveChildComponents.add(component);\r\n  }\r\n  unregisterChildComponent(component: StructiveComponent): void {\r\n    this.structiveChildComponents.delete(component);\r\n  }\r\n  \r\n}\r\n\r\nexport function createComponentEngine(config: IComponentConfig, component: StructiveComponent): IComponentEngine {\r\n  return new ComponentEngine(config, component);\r\n}","/**\r\n * replaceMustacheWithTemplateTag.ts\r\n *\r\n * Mustache構文（{{if:条件}}, {{for:式}}, {{endif}}, {{endfor}}, {{elseif:条件}}, {{else}} など）を\r\n * <template>タグやコメントノードに変換するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - HTML文字列内のMustache構文を正規表現で検出し、<template data-bind=\"...\">やコメントノードに変換\r\n * - if/for/endif/endfor/elseif/elseなどの制御構文をネスト対応で<template>タグに変換\r\n * - 通常の埋め込み式（{{expr}}）はコメントノード（<!--embed:expr-->）に変換\r\n *\r\n * 設計ポイント:\r\n * - stackでネスト構造を管理し、endif/endfor/elseif/elseの対応関係を厳密にチェック\r\n * - 不正なネストや対応しない構文にはraiseErrorで例外を発生\r\n * - elseif/elseはnot条件のtemplateを自動生成し、条件分岐を表現\r\n * - コメントノードへの変換で埋め込み式の安全なDOM挿入を実現\r\n */\r\nimport { COMMENT_EMBED_MARK } from \"../constants.js\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nconst MUSTACHE_REGEXP = /\\{\\{([^\\}]+)\\}\\}/g;\r\nconst MUSTACHE_TYPES:Set<string> = new Set(['if', 'for', 'endif', 'endfor', 'elseif', 'else']);\r\n\r\ntype MustacheType = 'if' | 'for' | 'endif' | 'endfor' | 'elseif' | 'else';\r\ntype MustacheInfo = {\r\n  type: MustacheType;\r\n  remain: string; // after first ':'\r\n  expr: string;\r\n}\r\n\r\nexport function replaceMustacheWithTemplateTag(html: string): string {\r\n  const stack:MustacheInfo[] = [];\r\n  return html.replaceAll(MUSTACHE_REGEXP, (match, expr) => {\r\n    expr = expr.trim();\r\n    const [ type ] = expr.split(':');\r\n    if (!MUSTACHE_TYPES.has(type)) {\r\n      // embed\r\n      return `<!--${COMMENT_EMBED_MARK}${expr}-->`;\r\n    }\r\n    const remain = expr.slice(type.length + 1).trim();\r\n    const currentInfo:MustacheInfo = { type, expr, remain };\r\n    if (type === 'if' || type === 'for') {\r\n      stack.push(currentInfo);\r\n      return `<template data-bind=\"${expr}\">`;\r\n    } else if (type === 'endif') {\r\n      const endTags = [];\r\n      do {\r\n        const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        if (info.type === 'if') {\r\n          endTags.push('</template>');\r\n          break;\r\n        } else if (info.type === 'elseif') {\r\n          endTags.push('</template>');\r\n        } else {\r\n          raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        }\r\n      } while(true);\r\n      return endTags.join('');\r\n    } else if (type === 'endfor') {\r\n      const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n      if (info.type === 'for') {\r\n        return '</template>';\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: endfor without for');\r\n      }\r\n    } else if (type === 'elseif') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      if (lastInfo.type === 'if' || lastInfo.type === 'elseif') {\r\n        stack.push(currentInfo);\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\"><template data-bind=\"if:${remain}\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      }\r\n    } else if (type === 'else') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      if (lastInfo.type === 'if') {\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      }\r\n    } else {\r\n      raiseError('replaceMustacheToTemplateOrEmbed: unknown type');\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n","/**\r\n * replaceTemplateTagWithComment.ts\r\n *\r\n * <template>タグをコメントノードに置換し、テンプレートを再帰的に登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 指定したHTMLTemplateElementをコメントノード（<!--template:id-->）に置換\r\n * - SVG内のtemplateタグは通常のtemplate要素に変換し、属性や子ノードを引き継ぐ\r\n * - テンプレート内の入れ子templateも再帰的に置換・登録\r\n * - registerTemplateでテンプレートをID付きで管理\r\n *\r\n * 設計ポイント:\r\n * - テンプレートの階層構造を維持しつつ、DOM上はコメントノードでマーク\r\n * - SVG対応や属性引き継ぎなど、汎用的なテンプレート処理に対応\r\n * - generateIdでユニークIDを割り当て、テンプレート管理を一元化\r\n */\r\nimport { COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { registerTemplate } from \"./registerTemplate.js\";\r\n\r\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport function replaceTemplateTagWithComment(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number = id\r\n):number {\r\n  // テンプレートの親ノードが存在する場合は、テンプレートをコメントノードに置き換える\r\n  template.parentNode?.replaceChild(document.createComment(`${COMMENT_TEMPLATE_MARK}${id}`), template);\r\n  if (template.namespaceURI === SVG_NS) {\r\n    // SVGタグ内のtemplateタグを想定\r\n    const newTemplate = document.createElement(\"template\");\r\n    const childNodes = Array.from(template.childNodes);\r\n    for(let i = 0; i < childNodes.length; i++) {\r\n      const childNode = childNodes[i];\r\n      newTemplate.content.appendChild(childNode);\r\n    }\r\n    const bindText = template.getAttribute(DATA_BIND_ATTRIBUTE);\r\n    newTemplate.setAttribute(DATA_BIND_ATTRIBUTE, bindText ?? \"\");\r\n    template = newTemplate;\r\n  }\r\n  template.content.querySelectorAll(\"template\").forEach(template => {\r\n    replaceTemplateTagWithComment(generateId(), template, rootId);\r\n  });\r\n  registerTemplate(id, template, rootId);\r\n  return id;\r\n}\r\n","/**\r\n * registerHtml.ts\r\n *\r\n * HTML文字列をテンプレートとして登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 指定IDでHTMLテンプレートを生成し、data-id属性を付与\r\n * - Mustache構文（{{ }})をテンプレートタグに変換（replaceMustacheWithTemplateTagを利用）\r\n * - テンプレートタグをコメントに置換（replaceTemplateTagWithCommentを利用）\r\n *\r\n * 設計ポイント:\r\n * - テンプレートの動的生成・管理や、構文変換による柔軟なテンプレート処理に対応\r\n * - テンプレートはdocument.createElement(\"template\")で生成し、data-idで識別\r\n */\r\nimport { replaceMustacheWithTemplateTag } from \"./replaceMustacheWithTemplateTag.js\";\r\nimport { replaceTemplateTagWithComment } from \"./replaceTemplateTagWithComment.js\";\r\n\r\nexport function registerHtml(id: number, html:string) {\r\n  const template = document.createElement(\"template\");\r\n  template.dataset.id = id.toString();\r\n  template.innerHTML = replaceMustacheWithTemplateTag(html);\r\n  replaceTemplateTagWithComment(id, template);\r\n}","/**\r\n * createAccessorFunctions.ts\r\n *\r\n * Stateプロパティのパス情報（IStructuredPathInfo）から、動的なgetter/setter関数を生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - パス情報とgetter集合から、最適なアクセサ関数（get/set）を動的に生成\r\n * - ワイルドカード（*）やネストしたプロパティパスにも対応\r\n * - パスやセグメントのバリデーションも実施\r\n *\r\n * 設計ポイント:\r\n * - matchPathsから最長一致のgetterパスを探索し、そこからの相対パスでアクセサを構築\r\n * - パスが一致しない場合はinfo.pathSegmentsから直接アクセサを生成\r\n * - new Functionで高速なgetter/setterを動的生成\r\n * - パスやセグメント名は正規表現で厳密にチェックし、安全性を担保\r\n */\r\nimport { getStructuredPathInfo } from \"./getStructuredPathInfo\";\r\nimport { IAccessorFunctions, IStructuredPathInfo } from \"./types\";\r\n\r\nconst checkSegmentRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\r\nconst checkPathRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*(\\.[a-zA-Z_$][0-9a-zA-Z_$]*|\\.\\*)*$/;\r\n\r\nexport function createAccessorFunctions(info: IStructuredPathInfo, getters: Set<string>): IAccessorFunctions {\r\n  const matchPaths = new Set(info.cumulativePaths).intersection(getters);\r\n  let len = -1;\r\n  let matchPath = '';\r\n  for(const curPath of matchPaths) {\r\n    const pathSegments = curPath.split('.');\r\n    if (pathSegments.length === 1) {\r\n      continue;\r\n    }\r\n    if (pathSegments.length > len) {\r\n      len = pathSegments.length;\r\n      matchPath = curPath;\r\n    }\r\n  }\r\n  if (matchPath.length > 0) {\r\n    if (!checkPathRegexp.test(matchPath)) {\r\n      throw new Error(`Invalid path: ${matchPath}`);\r\n    }\r\n    const matchInfo = getStructuredPathInfo(matchPath);\r\n    const segments = [];\r\n    let count = matchInfo.wildcardCount;\r\n    for(let i = matchInfo.pathSegments.length; i < info.pathSegments.length; i++) {\r\n      const segment = info.pathSegments[i];\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          throw new Error(`Invalid segment name: ${segment}`);\r\n        }\r\n        segments.push(\".\" + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this[\"${matchPath}\"]${path};`) as ()=> any,\r\n      set : new Function('value', `this[\"${matchPath}\"]${path} = value;`) as (value: any) => void,\r\n    }\r\n  } else {\r\n    const segments = [];\r\n    let count = 0;\r\n    for(let i = 0; i < info.pathSegments.length; i++) {\r\n      const segment = info.pathSegments[i];\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          throw new Error(`Invalid segment name: ${segment}`);\r\n        }\r\n        segments.push((segments.length > 0 ? \".\" : \"\") + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this.${path};`) as ()=> any,\r\n      set : new Function('value', `this.${path} = value;`) as (value: any) => void,\r\n    }\r\n  }\r\n\r\n}\r\n","import { getListPathsSetById, getPathsSetById } from \"../BindingBuilder/registerDataBindAttributes\";\r\nimport { RESERVED_WORD_SET } from \"../constants\";\r\nimport { addPathNode, createRootNode } from \"../PathTree/PathNode\";\r\nimport { IPathNode } from \"../PathTree/types\";\r\nimport { createAccessorFunctions } from \"../StateProperty/createAccessorFunctions\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { Constructor } from \"../types\";\r\nimport { StructiveComponentClass } from \"../WebComponents/types\";\r\nimport { Dependencies, IPathManager } from \"./types\";\r\n\r\nclass PathManager implements IPathManager {\r\n  alls: Set<string> = new Set<string>();\r\n  lists: Set<string> = new Set<string>();\r\n  elements: Set<string> = new Set<string>();\r\n  funcs: Set<string> = new Set<string>();\r\n  getters: Set<string> = new Set<string>();\r\n  setters: Set<string> = new Set<string>();\r\n  optimizes: Set<string> = new Set<string>();\r\n  staticDependencies: Dependencies<string> = new Map<string, Set<string>>();\r\n  dynamicDependencies: Dependencies<string> = new Map<string, Set<string>>();\r\n  rootNode: IPathNode = createRootNode();\r\n  #id: number;\r\n  #stateClass: Constructor<any>;\r\n\r\n  constructor(componentClass: StructiveComponentClass) {\r\n    this.#id = componentClass.id;\r\n    this.#stateClass = componentClass.stateClass;\r\n    const alls = getPathsSetById(this.#id);\r\n    for(const path of alls) {\r\n      const info = getStructuredPathInfo(path);\r\n      this.alls = this.alls.union(info.cumulativePathSet);\r\n    }\r\n    const lists = getListPathsSetById(this.#id);\r\n    this.lists = this.lists.union(lists);\r\n    for(const listPath of lists) {\r\n      const elementPath = listPath + \".*\";\r\n      this.elements.add(elementPath);\r\n    }\r\n    let currentProto = this.#stateClass.prototype;\r\n    while (currentProto && currentProto !== Object.prototype) {\r\n      const getters = Object.getOwnPropertyDescriptors(currentProto);\r\n      if (getters) {\r\n        for (const [key, desc] of Object.entries(getters)) {\r\n          if (RESERVED_WORD_SET.has(key)) {\r\n            continue;\r\n          }\r\n          if (typeof desc.value === \"function\") {\r\n            this.funcs.add(key);\r\n            continue;\r\n          }\r\n          const hasGetter = (desc as PropertyDescriptor).get !== undefined;\r\n          const hasSetter = (desc as PropertyDescriptor).set !== undefined;\r\n          const info = getStructuredPathInfo(key);\r\n          this.alls = this.alls.union(info.cumulativePathSet);\r\n          if (hasGetter) {\r\n            this.getters.add(key);\r\n          }\r\n          if (hasSetter) {\r\n            this.setters.add(key);\r\n          }\r\n        }\r\n      }\r\n      currentProto = Object.getPrototypeOf(currentProto);\r\n    }\r\n    // 最適化対象のパスを決定し、最適化する\r\n    for(const path of this.alls) {\r\n      if (this.getters.has(path)) {\r\n        continue;\r\n      }\r\n      if (this.setters.has(path)) {\r\n        continue;\r\n      }\r\n      const info = getStructuredPathInfo(path);\r\n      if (info.pathSegments.length === 1) {\r\n        continue;\r\n      }\r\n      const funcs = createAccessorFunctions(info, this.getters);\r\n      Object.defineProperty(this.#stateClass.prototype, path, {\r\n        get: funcs.get,\r\n        set: funcs.set,\r\n        enumerable: true,\r\n        configurable: true,\r\n      });\r\n      this.optimizes.add(path);\r\n    }\r\n    // 静的依存関係の設定\r\n    for(const path of this.alls) {\r\n      addPathNode(this.rootNode, path);\r\n      const info = getStructuredPathInfo(path);\r\n      if (info.parentPath) {\r\n        this.staticDependencies.get(info.parentPath)?.add(path) ?? \r\n          this.staticDependencies.set(info.parentPath, new Set([path]));\r\n      }\r\n    }\r\n  }\r\n\r\n  addDynamicDependency(target: string, source: string) {\r\n    this.dynamicDependencies.get(source)?.add(target) ?? \r\n      this.dynamicDependencies.set(source, new Set([target]));\r\n  }\r\n}\r\n\r\nexport function createPathManager(componentClass: StructiveComponentClass): IPathManager {\r\n  return new PathManager(componentClass);\r\n}","/**\r\n * createComponentClass.ts\r\n *\r\n * StructiveのWeb Components用カスタム要素クラスを動的に生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - ユーザー定義のcomponentData（stateClass, html, css等）からWeb Componentsクラスを生成\r\n * - StateClass/テンプレート/CSS/バインディング情報などをIDで一元管理・登録\r\n * - 独自のget/setトラップやバインディング、親子コンポーネント探索、フィルター拡張など多機能な基盤を提供\r\n * - 静的プロパティでテンプレート・スタイル・StateClass・フィルター・getter情報などにアクセス可能\r\n * - defineメソッドでカスタム要素として登録\r\n *\r\n * 設計ポイント:\r\n * - findStructiveParentで親Structiveコンポーネントを探索し、階層的な状態管理を実現\r\n * - getter/setter/バインディング最適化やアクセサ自動生成（optimizeAccessor）に対応\r\n * - テンプレート・CSS・StateClass・バインディング情報をIDで一元管理し、再利用性・拡張性を確保\r\n * - フィルターやバインディング情報も静的プロパティで柔軟に拡張可能\r\n */\r\nimport { inputBuiltinFilters, outputBuiltinFilters } from \"../Filter/builtinFilters.js\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { getStateClassById, registerStateClass } from \"../StateClass/registerStateClass.js\";\r\nimport { getStyleSheetById } from \"../StyleSheet/registerStyleSheet.js\";\r\nimport { registerCss } from \"../StyleSheet/regsiterCss.js\";\r\nimport { createComponentEngine } from \"../ComponentEngine/ComponentEngine.js\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types.js\";\r\nimport { registerHtml } from \"../Template/registerHtml.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { getBaseClass } from \"./getBaseClass.js\";\r\nimport { getComponentConfig } from \"./getComponentConfig.js\";\r\nimport { IComponent, IUserComponentData, IUserConfig, StructiveComponentClass, StructiveComponent } from \"./types\";\r\nimport { getListPathsSetById, getPathsSetById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { IStructiveState } from \"../StateClass/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { createAccessorFunctions } from \"../StateProperty/createAccessorFunctions.js\";\r\nimport { config as globalConfig } from \"./getGlobalConfig.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IComponentStateInput } from \"../ComponentStateInput/types.js\";\r\nimport { findStructiveParent } from \"./findStructiveParent.js\";\r\nimport { IPathManager } from \"../PathManager/types.js\";\r\nimport { createPathManager } from \"../PathManager/PathManager.js\";\r\n\r\n\r\nexport function createComponentClass(componentData: IUserComponentData): StructiveComponentClass {\r\n  const config = (componentData.stateClass.$config ?? {})as IUserConfig;\r\n  const componentConfig = getComponentConfig(config);\r\n  const id = generateId();\r\n  const { html, css, stateClass } = componentData;\r\n  const inputFilters:FilterWithOptions = Object.assign({}, inputBuiltinFilters);\r\n  const outputFilters:FilterWithOptions = Object.assign({}, outputBuiltinFilters);\r\n  stateClass.$isStructive = true;\r\n  registerHtml(id, html);\r\n  registerCss(id, css);\r\n  registerStateClass(id, stateClass);\r\n  const baseClass = getBaseClass(componentConfig.extends);\r\n  const extendTagName = componentConfig.extends;\r\n  return class extends baseClass implements IComponent {\r\n    #engine: IComponentEngine;\r\n\r\n    constructor() {\r\n      super();\r\n      this.#engine = createComponentEngine(componentConfig, this as StructiveComponent);\r\n      this.#engine.setup();\r\n    }\r\n\r\n    connectedCallback() {\r\n      this.#engine.connectedCallback();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n      this.#engine.disconnectedCallback();\r\n    }\r\n\r\n    #parentStructiveComponent: StructiveComponent | null | undefined;\r\n    get parentStructiveComponent(): StructiveComponent | null {\r\n      if (typeof this.#parentStructiveComponent === \"undefined\") {\r\n        this.#parentStructiveComponent = findStructiveParent(this as StructiveComponent);\r\n      }\r\n      return this.#parentStructiveComponent;\r\n    }\r\n\r\n    get state(): IComponentStateInput {\r\n      return this.#engine.stateInput;\r\n    }\r\n\r\n    get isStructive(): boolean {\r\n      return this.#engine.stateClass.$isStructive ?? false;\r\n    }\r\n\r\n    get waitForInitialize(): PromiseWithResolvers<void> {\r\n      return this.#engine.waitForInitialize;\r\n    }\r\n\r\n    getBindingsFromChild(component: IComponent): Set<IBinding> | null {\r\n      return this.#engine.bindingsByComponent.get(component as StructiveComponent) ?? null;\r\n    }\r\n\r\n    registerChildComponent(component:StructiveComponent): void {\r\n      this.#engine.registerChildComponent(component);\r\n    }\r\n    unregisterChildComponent(component:StructiveComponent): void {\r\n      this.#engine.unregisterChildComponent(component);\r\n    }\r\n    static define(tagName:string) {\r\n      if (extendTagName) {\r\n        customElements.define(tagName, this, { extends: extendTagName });\r\n      } else {\r\n        customElements.define(tagName, this);\r\n      }\r\n    }\r\n\r\n    static get id():number {\r\n      return id;\r\n    }\r\n    static #html:string = html;\r\n    static get html():string {\r\n      return this.#html;\r\n    }\r\n    static set html(value:string) {\r\n      this.#html = value;\r\n      registerHtml(this.id, value);\r\n      this.#template = null;\r\n      this.#pathManager = null; // パス情報をリセット\r\n    }\r\n\r\n    static #css:string = css;\r\n    static get css() {\r\n      return this.#css;\r\n    }\r\n    static set css(value:string) {\r\n      this.#css = value;\r\n      registerCss(this.id, value);\r\n      this.#styleSheet = null;\r\n    }\r\n    static #template: HTMLTemplateElement | null = null;\r\n    static get template():HTMLTemplateElement {\r\n      if (!this.#template) {\r\n        this.#template = getTemplateById(this.id);\r\n      }\r\n      return this.#template;\r\n    }\r\n    static #styleSheet: CSSStyleSheet | null = null;\r\n    static get styleSheet():CSSStyleSheet {\r\n      if (!this.#styleSheet) {\r\n        this.#styleSheet = getStyleSheetById(this.id);\r\n      }\r\n      return this.#styleSheet;\r\n    }\r\n    static #stateClass: IStructiveState | null = null;\r\n    static get stateClass():IStructiveState {\r\n      if (!this.#stateClass) {\r\n        this.#stateClass = getStateClassById(this.id) as IStructiveState;\r\n      }\r\n      return this.#stateClass;\r\n    }\r\n    static #inputFilters:FilterWithOptions = inputFilters;\r\n    static get inputFilters():FilterWithOptions {\r\n      return this.#inputFilters;\r\n    }\r\n    static #outputFilters:FilterWithOptions = outputFilters;\r\n    static get outputFilters():FilterWithOptions {\r\n      return this.#outputFilters;\r\n    }\r\n    static #pathManager: IPathManager | null = null;\r\n    static get pathManager(): IPathManager {\r\n      if (!this.#pathManager) {\r\n        this.#pathManager = createPathManager(this as StructiveComponentClass);\r\n      }\r\n      return this.#pathManager;\r\n    }\r\n\r\n  } as StructiveComponentClass;\r\n}\r\n","/**\r\n * getComponentConfig.ts\r\n *\r\n * ユーザー設定（IUserConfig）とグローバル設定を統合し、コンポーネントの設定（IComponentConfig）を生成するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - getGlobalConfigでグローバル設定を取得\r\n * - ユーザー設定が優先され、未指定の場合はグローバル設定値を利用\r\n * - enableShadowDomやextendsなどの設定値を一元的に返却\r\n *\r\n * 設計ポイント:\r\n * - ユーザーごとの個別設定と全体のデフォルト設定を柔軟に統合\r\n * - 設定値のデフォルト化や拡張性を考慮した設計\r\n */\r\nimport { getGlobalConfig } from \"./getGlobalConfig.js\";\r\nimport { IUserConfig, IComponentConfig } from \"./types\";\r\n\r\nexport function getComponentConfig(userConfig: IUserConfig): IComponentConfig {\r\n  const globalConfig = getGlobalConfig();\r\n  return {\r\n    enableWebComponents: typeof userConfig.enableWebComponents === \"undefined\" ? true : userConfig.enableWebComponents,\r\n    enableShadowDom    : userConfig.enableShadowDom ?? globalConfig.enableShadowDom,\r\n    extends            : userConfig.extends ?? null,\r\n  };\r\n}","/**\r\n * getBaseClass.ts\r\n *\r\n * 指定したタグ名（extendTagName）から、その要素のコンストラクタ（基底クラス）を取得するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - extendTagNameが指定されていれば、そのタグのHTMLElementコンストラクタを返す\r\n * - 指定がなければHTMLElementを返す\r\n *\r\n * 設計ポイント:\r\n * - カスタム要素の継承元クラスを動的に取得し、柔軟なWeb Components拡張に対応\r\n */\r\nimport { Constructor } from \"../types\";\r\n\r\nexport function getBaseClass(extendTagName: string | null):Constructor<HTMLElement> {\r\n  return extendTagName ? (document.createElement(extendTagName).constructor as Constructor<HTMLElement>) : HTMLElement;\r\n}","/**\r\n * createSingleFileComponent.ts\r\n *\r\n * Structive用のシングルファイルコンポーネント（SFC）をパースし、各要素（HTML, CSS, StateClass）を抽出・生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - テキストから<template>・<script type=\"module\">・<style>を抽出し、それぞれを分離\r\n * - <script type=\"module\">はBase64エンコードして動的importし、StateClassとして利用\r\n * - {{...}}埋め込み式は一時的にコメントノード化してHTMLパース時の消失を防止し、復元\r\n * - 各要素（html, css, stateClass, text）をIUserComponentDataとして返却\r\n *\r\n * 設計ポイント:\r\n * - escapeEmbed/unescapeEmbedでMustache構文の安全なパースを実現\r\n * - scriptはdata:URL経由で安全に動的import\r\n * - テンプレート・スクリプト・スタイルを柔軟に分離・管理できる設計\r\n */\r\nimport { IStructiveState } from \"../StateClass/types\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nfunction escapeEmbed(html: string): string {\r\n  return html.replaceAll(/\\{\\{([^\\}]+)\\}\\}/g, (match, expr) => {\r\n    return `<!--{{${expr}}}-->`;\r\n  });\r\n}\r\n\r\nfunction unescapeEmbed(html:string):string {\r\n  return html.replaceAll(/<!--\\{\\{([^\\}]+)\\}\\}-->/g, (match, expr) => {\r\n    return `{{${expr}}}`;\r\n  });\r\n}\r\n\r\nexport async function createSingleFileComponent(text: string): Promise<IUserComponentData> {\r\n  const template = document.createElement(\"template\");\r\n  template.innerHTML = escapeEmbed(text);\r\n\r\n  const html = template.content.querySelector(\"template\");\r\n  html?.remove();\r\n\r\n  const script = template.content.querySelector(\"script[type=module]\") as HTMLScriptElement | null;\r\n  let scriptModule: any = {};\r\n  if (script) {\r\n    const b64 = btoa(String.fromCodePoint(...new TextEncoder().encode(script.text)));\r\n    scriptModule = await import(\"data:application/javascript;base64,\" + b64);\r\n  }\r\n//  const scriptModule = script ? await import(\"data:text/javascript;charset=utf-8,\" + script.text) : {};\r\n  script?.remove();\r\n\r\n  const style = template.content.querySelector(\"style\");\r\n  style?.remove();\r\n\r\n  const stateClass = (scriptModule.default ?? class {}) as IStructiveState;\r\n  \r\n  return {\r\n    text,\r\n    html      : unescapeEmbed(html?.innerHTML ?? \"\").trim(),\r\n    css       : style?.textContent ?? \"\",\r\n    stateClass,\r\n  }\r\n}","/**\r\n * loadSingleFileComponent.ts\r\n *\r\n * 指定パスのシングルファイルコンポーネント（SFC）をfetchし、パースしてIUserComponentDataとして返すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - fetchで指定パスのSFCファイルを取得\r\n * - テキストとして読み込み、createSingleFileComponentでパース\r\n * - パース結果（IUserComponentData）を返却\r\n *\r\n * 設計ポイント:\r\n * - import.meta.resolveを利用し、パス解決の柔軟性を確保\r\n * - 非同期処理で動的なコンポーネントロードに対応\r\n */\r\nimport { createSingleFileComponent } from \"./createSingleFileComponent.js\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nexport async function loadSingleFileComponent(path: string): Promise<IUserComponentData> {\r\n  // Node/Vitest 等の SSR 環境では import.meta.resolve が存在しない場合があるためフォールバック\r\n  const resolved = (import.meta as any).resolve ? (import.meta as any).resolve(path) : path;\r\n  const response = await fetch(resolved);\r\n  const text = await response.text();\r\n  return createSingleFileComponent(text);\r\n}\r\n","/**\r\n * registerComponentClass.ts\r\n *\r\n * StructiveのWeb Componentsクラスを指定したタグ名でカスタム要素として登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - registerComponentClass: 渡されたcomponentClassをtagNameでdefineメソッドを使って登録\r\n *\r\n * 設計ポイント:\r\n * - Web Componentsのカスタム要素登録を簡潔にラップし、再利用性を高める設計\r\n */\r\nimport { StructiveComponentClass } from \"./types\";\r\n\r\nexport function registerComponentClass(tagName: string, componentClass: StructiveComponentClass) {\r\n  componentClass.define(tagName);\r\n}","/**\r\n * loadImportmap.ts\r\n *\r\n * HTML内の<script type=\"importmap\">タグからimportmap情報を取得・統合するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 複数のimportmapスクリプトタグを走査し、全てのimportsをマージしてIImportMap型で返却\r\n *\r\n * 設計ポイント:\r\n * - scriptタグのinnerHTMLをJSON.parseでパースし、importsプロパティを統合\r\n * - importmap.importsが複数存在する場合もObject.assignでマージ\r\n * - importmap仕様に準拠し、柔軟なimportエイリアス管理を実現\r\n */\r\nimport { IImportMap } from \"./types\";\r\n\r\nexport function loadImportmap():IImportMap {\r\n  const importmap: IImportMap = {};\r\n  document.querySelectorAll(\"script[type='importmap']\").forEach(script => {\r\n    const scriptImportmap = JSON.parse(script.innerHTML);\r\n    if (scriptImportmap.imports) {\r\n      importmap.imports = Object.assign(importmap.imports || {}, scriptImportmap.imports);\r\n    }\r\n  });\r\n  return importmap;\r\n}\r\n\r\n","/**\r\n * Router.ts\r\n *\r\n * シングルページアプリケーション（SPA）向けのカスタムエレメント Router の実装です。\r\n *\r\n * 主な役割:\r\n * - ルート定義（entryRoute）に基づき、URLパスに応じてカスタム要素を動的に生成・表示\r\n * - pushState/popstateイベントを利用した履歴管理とルーティング制御\r\n * - ルートパラメータの抽出とカスタム要素への受け渡し\r\n * - 404ページ（未定義ルート時）の表示\r\n *\r\n * 設計ポイント:\r\n * - entryRouteでルートパスとカスタム要素タグ名のペアを登録\r\n * - popstateイベントでURL変更時に自動で再描画\r\n * - ルートパスのパラメータ（:id等）も正規表現で抽出し、data-state属性で渡す\r\n * - getRouterでグローバルなRouterインスタンスを取得可能\r\n */\r\nimport { isLazyLoadComponent, loadLazyLoadComponent } from \"../WebComponents/loadFromImportMap\";\r\nimport { IRouter } from \"./types\";\r\n\r\nconst DEFAULT_ROUTE_PATH = '/'; // Default route path\r\nconst ROUTE_PATH_PREFIX = 'routes:'; // Prefix for route paths\r\n/**\r\n * example:\r\n * ```ts\r\n * entryRoute('my-view', '/my-view/:id');\r\n */\r\nconst routeEntries: Array<[string, string]> = [];\r\n\r\nlet globalRouter : Router | null = null;\r\n\r\nexport class Router extends HTMLElement implements IRouter {\r\n  originalPathName = window.location.pathname; // Store the original path name\r\n  originalFileName = window.location.pathname.split('/').pop() || ''; // Store the original file name\r\n  basePath = document.querySelector('base')?.href.replace(window.location.origin, \"\") || DEFAULT_ROUTE_PATH;\r\n\r\n  _popstateHandler: (event: PopStateEvent) => void;\r\n  constructor() {\r\n    super();\r\n    this._popstateHandler = this.popstateHandler.bind(this);\r\n  }\r\n\r\n  connectedCallback() {\r\n    globalRouter = this;\r\n    this.innerHTML = '<slot name=\"content\"></slot>';\r\n    window.addEventListener('popstate', this._popstateHandler);\r\n    window.dispatchEvent(new Event(\"popstate\")); // Dispatch popstate event to trigger the initial render\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('popstate', this._popstateHandler);\r\n    globalRouter = null;\r\n  }\r\n\r\n  popstateHandler(event: PopStateEvent) {\r\n    event.preventDefault();\r\n    this.render();\r\n  }\r\n\r\n  navigate(to: string) {\r\n    const toPath = to[0] === '/' ? (this.basePath + to.slice(1)) : to; // Ensure the path starts with '/'\r\n    history.pushState({}, '', toPath);\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    // スロットコンテントをクリア\r\n    const slotChildren = Array.from(this.childNodes).filter(\r\n      n => (n as HTMLElement).getAttribute?.('slot') === 'content'\r\n    );\r\n    slotChildren.forEach(n => this.removeChild(n));\r\n\r\n    const paths = window.location.pathname.split('/');\r\n    if (paths.at(-1) === this.originalFileName) {\r\n      paths[paths.length - 1] = ''; // Ensure the last path is empty for root\r\n    }\r\n    const pathName = paths.join('/');\r\n    const replacedPath = pathName.replace(this.basePath, ''); // Remove base path and ensure default route\r\n    const currentPath = replacedPath[0] !== '/' ? '/' + replacedPath : replacedPath; // Ensure the path starts with '/'\r\n    let tagName: string | undefined = undefined;\r\n    let params: Record<string, string> = {};\r\n    // Check if the routePath matches any of the defined routes\r\n    for (const [path, tag] of routeEntries) {\r\n      const regex = new RegExp(\"^\" + path.replace(/:[^\\s/]+/g, '([^/]+)') + \"$\");\r\n      if (regex.test(currentPath)) {\r\n        tagName = tag;\r\n        // Extract the parameters from the routePath\r\n        const matches = currentPath.match(regex);\r\n        if (matches) {\r\n          const keys = path.match(/:[^\\s/]+/g) || [];\r\n          keys.forEach((key, index) => {\r\n            params[key.substring(1)] = matches[index + 1]; // +1 to skip the full match\r\n          });\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (tagName) {\r\n      // If a route matches, create the custom element and set its state\r\n      // Create the custom element with the tag name\r\n      // project the custom element into the router slot\r\n      const customElement = document.createElement(tagName) as HTMLElement;\r\n      customElement.setAttribute('data-state', JSON.stringify(params));\r\n      customElement.setAttribute('slot', 'content');\r\n      this.appendChild(customElement);\r\n      if (isLazyLoadComponent(tagName)) {\r\n        loadLazyLoadComponent(tagName); // Load lazy load component if necessary\r\n      }\r\n    } else {\r\n      // If no route matches, show 404 content\r\n      const messageElement = document.createElement('h1') as HTMLElement;\r\n      messageElement.setAttribute('slot', 'content');\r\n      messageElement.textContent = '404 Not Found';\r\n      this.appendChild(messageElement);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function entryRoute(tagName: string, routePath: string): void {\r\n  if (routePath.startsWith(ROUTE_PATH_PREFIX)) {\r\n    routePath = routePath.substring(ROUTE_PATH_PREFIX.length); // Remove 'routes:' prefix\r\n  }\r\n  routeEntries.push([routePath, tagName]);\r\n}\r\n\r\nexport function getRouter(): Router | null {\r\n  return globalRouter;\r\n}\r\n\r\n","/**\r\n * MainWrapper.ts\r\n *\r\n * アプリ全体のレイアウトやルーティングを管理するカスタムエレメント MainWrapper の実装です。\r\n *\r\n * 主な役割:\r\n * - Shadow DOMの有効化やレイアウトテンプレートの動的読み込み\r\n * - レイアウトテンプレートやスタイルの適用\r\n * - ルーター要素（routerTagName）の動的追加\r\n *\r\n * 設計ポイント:\r\n * - config.enableShadowDom でShadow DOMの有効/無効を切り替え\r\n * - config.layoutPath が指定されていればfetchでレイアウトHTMLを取得し、テンプレート・スタイルを適用\r\n * - スタイルはadoptedStyleSheetsでShadowRootまたはdocumentに適用\r\n * - レイアウトが指定されていない場合はデフォルトのslotを挿入\r\n * - config.enableRouter が有効な場合はrouter要素をslotに追加\r\n */\r\nimport { raiseError } from \"../utils\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst SLOT_KEY = \"router\";\r\nconst DEFAULT_LAYOUT = `<slot name=\"${SLOT_KEY}\"></slot>`;\r\n\r\nexport class MainWrapper extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n    if (config.enableShadowDom) {\r\n      this.attachShadow({ mode: 'open' });\r\n    }\r\n  }\r\n\r\n  async connectedCallback() {\r\n    await this.loadLayout();\r\n    this.render();\r\n  }\r\n\r\n  get root(): ShadowRoot | HTMLElement {\r\n    return this.shadowRoot ?? this;\r\n  }\r\n\r\n  async loadLayout() {\r\n    if (config.layoutPath) {\r\n      const response = await fetch(config.layoutPath);\r\n      if (response.ok) {\r\n        const layoutText = await response.text();\r\n        const workTemplate = document.createElement(\"template\");\r\n        workTemplate.innerHTML = layoutText;\r\n      \r\n        const template = workTemplate.content.querySelector(\"template\");\r\n        const style = workTemplate.content.querySelector(\"style\") as CSSStyleSheet | null;\r\n      \r\n        this.root.appendChild(template?.content ?? document.createDocumentFragment());\r\n        if (style) {\r\n          const shadowRootOrDocument = this.shadowRoot ?? document;\r\n          const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n          if (!styleSheets.includes(style)) {\r\n            shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, style];\r\n          }\r\n        }\r\n      } else {\r\n        raiseError(`Failed to load layout from ${config.layoutPath}`);\r\n      }\r\n    } else {\r\n      this.root.innerHTML = DEFAULT_LAYOUT;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // add router\r\n    if (config.enableRouter) {\r\n      const router = document.createElement(config.routerTagName);\r\n      router.setAttribute('slot', SLOT_KEY);\r\n      this.root.appendChild(router);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * exports.ts\r\n *\r\n * Structiveの主要なエントリーポイント・APIを外部公開するモジュールです。\r\n *\r\n * 主な役割:\r\n * - registerSingleFileComponents, bootstrap, config などの主要APIをエクスポート\r\n * - defineComponents: SFC群をまとめて登録し、autoInitが有効なら自動で初期化\r\n * - bootstrapStructive: 初期化処理を一度だけ実行\r\n *\r\n * 設計ポイント:\r\n * - グローバル設定(config)を外部から参照・変更可能\r\n * - 初期化処理の多重実行を防止し、安全な起動を保証\r\n */\r\nimport { registerSingleFileComponents } from \"./WebComponents/registerSingleFIleComponents.js\";\r\nimport { bootstrap } from \"./bootstrap.js\";\r\nimport { config as _config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { IConfig } from \"./WebComponents/types\";\r\n\r\nexport const config: IConfig = _config;\r\n\r\nlet initialized = false;\r\nexport async function defineComponents(singleFileComponents: Record<string, string>):Promise<void> {\r\n  await registerSingleFileComponents(singleFileComponents);\r\n  if (config.autoInit) {\r\n    await bootstrapStructive();\r\n  }\r\n}\r\n\r\nexport async function bootstrapStructive():Promise<void> {\r\n  if (!initialized) {\r\n    await bootstrap();\r\n    initialized = true;\r\n  }\r\n}\r\n\r\n","/**\r\n * registerSingleFileComponents.ts\r\n *\r\n * 複数のシングルファイルコンポーネント（SFC）をまとめてStructiveのWeb Componentsとして登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - singleFileComponents（tagNameとパスのマップ）を走査し、各SFCを非同期で取得・パース\r\n * - enableRouterが有効な場合はentryRouteでルーティング情報も登録\r\n * - createComponentClassでWeb Componentsクラスを生成し、registerComponentClassでカスタム要素として登録\r\n *\r\n * 設計ポイント:\r\n * - SFCのロードからWeb Components登録、ルーティング登録までを一括で自動化\r\n * - 非同期処理で複数コンポーネントの動的登録に対応\r\n * - ルートパス\"/root\"の正規化や、@routesプレフィックスの除去など柔軟なパス処理\r\n */\r\nimport { entryRoute } from \"../Router/Router.js\";\r\nimport { createComponentClass } from \"./createComponentClass.js\";\r\nimport { config } from \"./getGlobalConfig.js\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent.js\";\r\nimport { registerComponentClass } from \"./registerComponentClass.js\";\r\nimport { IUserComponentData, SingleFileComponents } from \"./types\";\r\n\r\nexport async function registerSingleFileComponents(singleFileComponents:SingleFileComponents):Promise<void> {\r\n  for(const [ tagName, path ] of Object.entries(singleFileComponents)) {\r\n    let componentData : IUserComponentData | null = null;\r\n    if (config.enableRouter) {\r\n      const routePath = path.startsWith(\"@routes\") ? path.slice(7) : path; // remove the prefix 'routes:'\r\n      entryRoute(tagName, routePath === \"/root\" ? \"/\" : routePath); // routing\r\n    }\r\n    componentData = await loadSingleFileComponent(path);\r\n    const componentClass = createComponentClass(componentData);\r\n    registerComponentClass(tagName, componentClass);\r\n  }\r\n}","/**\r\n * bootstrap.ts\r\n *\r\n * Structiveアプリケーションの初期化処理を行うエントリーポイントです。\r\n *\r\n * 主な役割:\r\n * - グローバル設定(config)に従い、必要なコンポーネントやルーター、メインラッパーを登録・初期化\r\n * - autoLoadFromImportMapが有効な場合はimportmapからルートやコンポーネントを動的ロード\r\n * - enableRouterが有効な場合はRouterコンポーネントをカスタム要素として登録\r\n * - enableMainWrapperが有効な場合はMainWrapperをカスタム要素として登録し、autoInsertMainWrapperが有効ならbodyに自動挿入\r\n *\r\n * 設計ポイント:\r\n * - 設定値に応じて初期化処理を柔軟に制御\r\n * - importmapやカスタム要素の登録、DOMへの自動挿入など、Structiveの起動に必要な処理を一元化\r\n */\r\nimport { MainWrapper } from \"./MainWrapper/MainWrapper.js\";\r\nimport { Router } from \"./Router/Router.js\";\r\nimport { config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { loadFromImportMap } from \"./WebComponents/loadFromImportMap.js\";\r\n\r\nexport async function bootstrap(): Promise<void> {\r\n  if (config.autoLoadFromImportMap) {\r\n    await loadFromImportMap();\r\n  }\r\n\r\n  if (config.enableRouter) {\r\n    customElements.define(config.routerTagName, Router);\r\n  }\r\n\r\n  if (config.enableMainWrapper) {\r\n    customElements.define(config.mainTagName, MainWrapper);\r\n    if (config.autoInsertMainWrapper) {\r\n      const mainWrapper = document.createElement(config.mainTagName);\r\n      document.body.appendChild(mainWrapper);\r\n    }\r\n  }\r\n}"],"names":["globalConfig","debug","locale","enableShadowDom","enableMainWrapper","enableRouter","autoInsertMainWrapper","autoInit","mainTagName","routerTagName","layoutPath","autoLoadFromImportMap","optimizeList","optimizeListElements","optimizeAccessor","getGlobalConfig","config","optionsRequired","fnName","Error","optionMustBeNumber","valueMustBeNumber","valueMustBeDate","builtinFilters","eq","options","opt","value","optValue","Number","isNaN","ne","not","valueMustBeBoolean","lt","le","gt","ge","inc","dec","mul","div","fix","toFixed","toLocaleString","uc","toString","toUpperCase","lc","toLowerCase","cap","v","length","charAt","slice","trim","substr","opt1","opt1Value","opt2","opt2Value","pad","padStart","rep","repeat","rev","split","reverse","join","int","parseInt","float","parseFloat","round","Math","pow","floor","ceil","percent","date","Date","toLocaleDateString","time","toLocaleTimeString","datetime","ymd","year","getFullYear","month","getMonth","day","getDate","falsy","truthy","defaults","boolean","Boolean","number","string","String","null","outputBuiltinFilters","inputBuiltinFilters","id","generateId","raiseError","message","stateClassById","styleSheetById","registerCss","css","styleSheet","CSSStyleSheet","replaceSync","registerStyleSheet","resolveNodeFromPath","root","path","node","i","childNodes","textToFilter","filters","text","filter","name","cache","Map","createFilters","texts","result","get","push","set","BindingNode","binding","decorates","bindContents","this","subName","constructor","init","assignValue","updateElements","listIndexes","values","notifyRedraw","refs","applyChange","renderer","updatedBindings","has","filteredValue","bindingState","getFilteredValue","readonlyState","add","isSelectElement","HTMLSelectElement","isFor","BindingNodeAttribute","super","setAttribute","BindingNodeCheckbox","Array","isArray","element","checked","map","_val","includes","BindingNodeClassList","className","BindingNodeClassName","classList","remove","DATA_BIND_ATTRIBUTE","COMMENT_EMBED_MARK","COMMENT_TEMPLATE_MARK","RESERVED_WORD_SET","Set","_cache","StructuredPathInfo","static","sid","pattern","pathSegments","lastSegment","cumulativePaths","cumulativePathSet","cumulativeInfos","cumulativeInfoSet","wildcardPaths","wildcardPathSet","wildcardInfos","indexByWildcardPath","wildcardInfoSet","wildcardParentPaths","wildcardParentPathSet","wildcardParentInfos","wildcardParentInfoSet","lastWildcardPath","lastWildcardInfo","parentPath","parentInfo","wildcardCount","children","getPattern","_pattern","getStructuredPathInfo","currentPatternPath","prevPatternPath","structuredPath","info","ResolvedPathInfo","elements","paths","wildcardType","wildcardIndexes","tmpPatternElements","incompleteCount","completeCount","lastPath","getResolvedPathInfo","nameInfo","StatePropertyRef","listIndexRef","listIndex","deref","key","WeakRef","createRefKey","refByInfoByListIndex","WeakMap","refByInfoByNull","getStatePropertyRef","ref","refByInfo","getContextListIndex","handler","refStack","refIndex","index","at","getListIndex","resolvedPath","receiver","parentListIndex","wildcardParentPattern","wildcardRef","engine","getListIndexes","symbolName","GetByRefSymbol","Symbol","for","SetByRefSymbol","SetCacheableSymbol","ConnectedCallbackSymbol","DisconnectedCallbackSymbol","checkDependency","lastInfo","pathManager","getters","setters","addDynamicDependency","setStatePropertyRef","callback","getByRefWritable","target","stateOutput","startsWith","intersection","size","Reflect","parentRef","parentValue","setByRef","updater","enqueueRef","resolveWritable","prop","indexes","trackDependency","indexByIndexName","getWritable","resolve","wildcardPattern","walkWildcardPattern","wildardIndexPos","indexPos","parentIndexes","results","concat","resultIndexes","resultValues","getAllWritable","to","getRouter","navigate","owner","resolvedInfo","async","call","connectedCallback","disconnectedCallback","StateHandler$1","lastTrackingStack","trackingStack","fill","trackingIndex","loopContext","trapGet","trapSet","useWritableStateProxy","state","StateHandler","stateProxy","Proxy","asyncSetStatePropertyRef","setLoopContext","version","ListIndex","pos","position","dirty","varName","createListIndex","NodePath","currentPath","childNodeByName","level","find","segments","segIndex","currentSegment","childNode","appendChild","childName","findPathNodeByPath","rootNode","nodeCache","cachedNode","addPathNode","parentNode","getByRefReadonly","lists","calcListDiff","resolveReadonly","getReadonly","getAllReadonly","setCacheable","createReadonlyStateProxy","Renderer","trackedRefs","listDiffByRef","render","items","clear","renderItem","_newListValue","undefined","isNewValue","listDiff","oldListValue","oldListIndexes","getListAndListIndexes","newListValue","oldIndexes","_oldListValue","_oldIndexes","newIndexes","removes","adds","listIndexByListValue","overwrites","changeIndexes","newValue","newListIndex","delete","saveListAndListIndexes","bindings","getBindings","childInfo","diff","childRef","deps","dynamicDependencies","depPath","depInfo","depNode","infos","walk","depRef","nextInfo","nextRef","subDepRef","startRef","Updater","queue","updating","rendering","queueMicrotask","beginUpdate","update","BindingNodeEvent","addEventListener","e","parentBindContent","currentLoopContext","serialize","context","preventDefault","stopPropagation","func","getValue","apply","createBindingNodeEvent","filterTexts","filterFns","BindingNodeBlock","textContent","BindingNodeIf","bindContent","trueBindContents","falseBindContents","blankRef","createBindContent","mountAfter","unmount","EMPTY_SET","BindingNodeFor","bindContentByListIndex","bindContentPool","bindContentLastIndex","loopInfo","assignListIndex","loopRef","deleteBindContent","clearListIndex","poolLength","loopPath","newBindContents","removeBindContentsSet","isAllRemove","isParentNodeHasOnlyThisNode","parentChildNodes","from","lastContent","firstNode","nodeType","Node","TEXT_NODE","nextSibling","lastNode","previousSibling","getLastNode","append","lastBindContent","isAllAppend","fragmentParentNode","document","createDocumentFragment","fragmentFirstNode","firstChildNode","beforeNode","insertBefore","createBindingNodeFor","DEFAULT_PROPERTY","defaultPropertyByElementType","radio","checkbox","button","getDefaultPropertyByNodeType","HTMLElement","HTMLTextAreaElement","HTMLOptionElement","HTMLButtonElement","HTMLAnchorElement","HTMLFormElement","HTMLInputElement","type","SVGElement","Text","Template","defaultEventByName","selected","BindingNodeProperty","defaultName","getDefaultName","eventName","updateStateValue","createBindingNodeProperty","BindingNodeRadio","BindingNodeStyle","style","setProperty","AssignStateSymbol","NotifyRedrawSymbol","parentStructiveComponentByStructiveComponent","BindingNodeComponent","parentComponent","component","bindingsByComponent","notifyRefs","thisAt","newRef","nodePropertyConstructorByNameByIsComment","class","if","nodePropertyConstructorByFirstName","attr","getBindingNodeCreator","propertyName","isComment","Comment","isElement","Element","fn","bindingNodeCreatorByName","nameElements","bindingNodeCreatorByFirstName","_getBindingNodeCreator","BindingState","nullRef","saveBinding","writeState","BindingStateIndex","indexNumber","loopContexts","bindingsByListIndex","ereg","RegExp","getBindingStateCreator","test","createBindingStateIndex","createBindingState","nodeTypeByNodeKey","getNodeType","nodeKey","createNodeKey","getNodeTypeByNode","s","re","decode","m","exec","decodeURIComponent","parseFilter","parseProperty","property","parseExpressions","expression","bindExpression","decoratesExpression","nodePropertyText","statePropertyText","nodeProperty","inputFilterTexts","stateProperty","outputFilterTexts","parseExpression","removeAttributeFromElement","removeAttribute","removeAttributeByNodeType","replaceTextNodeFn","textNode","createTextNode","replaceChild","DataBindAttributes","nodePath","bindTexts","creatorByText","getAttribute","getTemplateById","getDataBindText","removeDataBindAttribute","replaceTextNodeFromComment","routeIndexes","indexOf","getAbsoluteNodePath","parseBindText","bindText","creator","createBindingNode","getNodesHavingDataBind","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","acceptNode","hasAttribute","FILTER_ACCEPT","FILTER_SKIP","isCommentNode","nextNode","currentNode","listDataBindAttributesById","listPathsSetById","pathsSetById","getDataBindAttributesFromTemplate","content","createDataBindAttributes","templateById","registerTemplate","template","rootId","forEach","nodeValue","removeChild","dataBindAttributes","listPaths","attribute","j","registerDataBindAttributes","Binding","bindingNode","inputFilters","outputFilters","createBinding","LoopContext","parentLoopContext","currentBindContent","parentBinding","unshift","createContent","fragment","importNode","Object","keys","lazyLoadComponentAliasByTagName","lazyLoadElements","querySelectorAll","loadLazyLoadComponent","tagName","createBindings","attributes","getDataBindAttributesById","BindContent","isMounted","lastChildNode","lastBinding","mount","mountBefore","afterNode","parentElement","attachShadow","extends","createElement","mode","canHaveShadowRoot","shadowRoot","adoptedStyleSheets","shadowRootOrDocument","ShadowRoot","getParentShadowRoot","styleSheets","ComponentStateBinding","parentPaths","childPaths","childPathByParentPath","parentPathByChildPath","bindingByParentPath","bindingByChildPath","WeakSet","addBinding","childPath","getChildPath","getParentPath","toParentPathFromChildPath","matchPaths","matchPathArray","longestMatchPath","remainPath","matchParentPath","toChildPathFromParentPath","matchChildPath","startsWithByChildPath","childPathInfo","matches","bind","childComponent","getBindingsFromChild","ComponentStateInputHandler","componentStateBinding","assignState","object","entries","parentPathRef","childListIndex","getPropertyValue","setPropertyValue","ComponentStateOutput","parentPathInfo","pathInfo","ComponentEngine","stateClass","baseClass","structiveChildComponents","waitForInitialize","Promise","withResolvers","waitForDisconnected","stateBinding","createComponentStateBinding","stateInput","blockPlaceholder","blockParentNode","ignoreDissconnectedCallback","componentClass","createComponentStateInput","setup","alls","rootRef","promise","parentStructiveComponent","dataset","json","JSON","parse","registerChildComponent","enableWebComponents","createComment","replaceWith","funcs","unregisterChildComponent","saveInfoByStructuredPathId","saveInfoByResolvedPathInfoIdByListIndex","saveInfoByRef","createSaveInfo","list","getSaveInfoByStatePropertyRef","saveInfo","saveInfoByResolvedPathInfoId","MUSTACHE_REGEXP","MUSTACHE_TYPES","SVG_NS","replaceTemplateTagWithComment","namespaceURI","newTemplate","registerHtml","html","innerHTML","stack","replaceAll","match","expr","remain","currentInfo","endTags","pop","replaceMustacheWithTemplateTag","checkSegmentRegexp","checkPathRegexp","createAccessorFunctions","len","matchPath","curPath","matchInfo","count","segment","Function","PathManager","optimizes","staticDependencies","createRootNode","getPathsSetById","union","getListPathsSetById","listPath","elementPath","currentProto","prototype","getOwnPropertyDescriptors","desc","hasGetter","hasSetter","getPrototypeOf","defineProperty","enumerable","configurable","source","createComponentClass","componentData","componentConfig","userConfig","zn","getComponentConfig","$config","Ie","Pe","oe","assign","$isStructive","registerStateClass","extendTagName","getBaseClass","createComponentEngine","el","isStructive","define","customElements","getStyleSheetById","getStateClassById","unescapeEmbed","loadSingleFileComponent","resolved","response","fetch","escapeEmbed","querySelector","script","scriptModule","b64","btoa","fromCodePoint","TextEncoder","encode","import","default","createSingleFileComponent","registerComponentClass","ROUTES_KEY","COMPONENTS_KEY","LAZY_LOAD_SUFFIX","loadFromImportMap","importmap","scriptImportmap","imports","loadImportmap","loadAliasByTagName","alias","isLazyLoad","endsWith","replace","entryRoute","console","warn","ROUTE_PATH_PREFIX","routeEntries","globalRouter","Router","originalPathName","window","location","pathname","originalFileName","basePath","href","origin","_popstateHandler","popstateHandler","dispatchEvent","Event","removeEventListener","event","toPath","history","pushState","n","replacedPath","params","tag","regex","substring","customElement","stringify","hasOwnProperty","isLazyLoadComponent","messageElement","routePath","SLOT_KEY","DEFAULT_LAYOUT","MainWrapper","loadLayout","ok","layoutText","workTemplate","router","_config","initialized","defineComponents","singleFileComponents","registerSingleFileComponents","bootstrapStructive","mainWrapper","body","bootstrap"],"mappings":"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"}
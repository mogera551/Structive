{"version":3,"file":"structive.min.js","sources":["../src/Router/Router.ts","../src/WebComponents/getGlobalConfig.ts","../src/Filter/errorMessages.ts","../src/Filter/builtinFilters.ts","../src/GlobalId/generateId.ts","../src/utils.ts","../src/StateClass/registerStateClass.ts","../src/StyleSheet/registerStyleSheet.ts","../src/StyleSheet/regsiterCss.ts","../src/BindingBuilder/createFilters.ts","../src/DataBinding/BindingNode/BindingNode.ts","../src/DataBinding/BindingNode/BindingNodeAttribute.ts","../src/DataBinding/BindingNode/BindingNodeCheckbox.ts","../src/DataBinding/BindingNode/BindingNodeClassList.ts","../src/DataBinding/BindingNode/BindingNodeClassName.ts","../src/DataBinding/BindingNode/BindingNodeEvent.ts","../src/constants.ts","../src/DataBinding/BindingNode/BindingNodeBlock.ts","../src/DataBinding/BindingNode/BindingNodeIf.ts","../src/DataBinding/BindingNode/BindingNodeFor.ts","../src/BindingBuilder/getDefaultName.ts","../src/DataBinding/BindingNode/BindingNodeProperty.ts","../src/DataBinding/BindingNode/BindingNodeRadio.ts","../src/DataBinding/BindingNode/BindingNodeStyle.ts","../src/ComponentStateInput/symbols.ts","../src/WebComponents/findStructiveParent.ts","../src/DataBinding/BindingNode/BindingNodeComponent.ts","../src/BindingBuilder/getBindingNodeCreator.ts","../src/StateClass/symbols.ts","../src/StateProperty/getStructuredPathInfo.ts","../src/DataBinding/BindingState/BindingState.ts","../src/DataBinding/BindingState/BindingStateIndex.ts","../src/BindingBuilder/getBindingStateCreator.ts","../src/BindingBuilder/getNodeType.ts","../src/BindingBuilder/parseBindText.ts","../src/BindingBuilder/removeDataBindAttribute.ts","../src/BindingBuilder/replaceTextNodeFromComment.ts","../src/BindingBuilder/createDataBindAttributes.ts","../src/BindingBuilder/getDataBindText.ts","../src/BindingBuilder/getAbsoluteNodePath.ts","../src/BindingBuilder/getNodesHavingDataBind.ts","../src/BindingBuilder/registerDataBindAttributes.ts","../src/Template/registerTemplate.ts","../src/Template/removeEmptyTextNodes.ts","../src/DataBinding/Binding.ts","../src/LoopContext/createLoopContext.ts","../src/Updater/render.ts","../src/DataBinding/BindContent.ts","../src/BindingBuilder/resolveNodeFromPath.ts","../src/DependencyWalker/createDependencyEdge.ts","../src/DependencyWalker/createDependencyWalker.ts","../src/ListIndex/createListIndex.ts","../src/ListWalker/listWalker.ts","../src/StatePropertyRef/getStatePropertyRef.ts","../src/Updater/restructListIndex.ts","../src/Updater/updater.ts","../src/ComponentEngine/attachShadow.ts","../src/ComponentEngine/canHaveShadowRoot.ts","../src/StateClass/buildListIndexTree.ts","../src/StateProperty/getResolvedPathInfo.ts","../src/StateClass/methods/getContextListIndex.ts","../src/StateClass/methods/getListIndex.ts","../src/StateClass/methods/setStatePropertyRef.ts","../src/StateClass/methods/setTracking.ts","../src/StateClass/methods/getByRefReadonly.ts","../src/StateClass/apis/resolveReadonly.ts","../src/StateClass/apis/trackDependency.ts","../src/StateClass/traps/getReadonly.ts","../src/StateClass/apis/getAllReadonly.ts","../src/StateClass/methods/setCacheable.ts","../src/StateClass/createReadonlyStateProxy.ts","../src/StateClass/methods/getByRefWritable.ts","../src/StateClass/methods/setByRef.ts","../src/StateClass/apis/resolveWritable.ts","../src/StateClass/traps/getWritable.ts","../src/StateClass/apis/getAllWritable.ts","../src/StateClass/apis/connectedCallback.ts","../src/StateClass/apis/disconnectedCallback.ts","../src/StateClass/useWritableStateProxy.ts","../src/StateClass/traps/set.ts","../src/StateClass/methods/setLoopContext.ts","../src/StateClass/methods/asyncSetStatePropertyRef.ts","../src/ComponentStateBinding/createComponentStateBinding.ts","../src/ComponentStateInput/createComponentStateInput.ts","../src/ComponentStateOutput/createComponentStateOutput.ts","../src/ComponentEngine/ComponentEngine.ts","../src/Template/replaceMustacheWithTemplateTag.ts","../src/Template/replaceTemplateTagWithComment.ts","../src/Template/registerHtml.ts","../src/StateProperty/createAccessorFunctions.ts","../src/WebComponents/createComponentClass.ts","../src/WebComponents/getComponentConfig.ts","../src/WebComponents/getBaseClass.ts","../src/WebComponents/createSingleFileComponent.ts","../src/WebComponents/loadSingleFileComponent.ts","../src/WebComponents/registerComponentClass.ts","../src/MainWrapper/MainWrapper.ts","../src/WebComponents/loadFromImportMap.ts","../src/WebComponents/loadImportmap.ts","../src/exports.ts","../src/WebComponents/registerSingleFIleComponents.ts","../src/bootstrap.ts"],"sourcesContent":["/**\r\n * Router.ts\r\n *\r\n * シングルページアプリケーション（SPA）向けのカスタムエレメント Router の実装です。\r\n *\r\n * 主な役割:\r\n * - ルート定義（entryRoute）に基づき、URLパスに応じてカスタム要素を動的に生成・表示\r\n * - pushState/popstateイベントを利用した履歴管理とルーティング制御\r\n * - ルートパラメータの抽出とカスタム要素への受け渡し\r\n * - 404ページ（未定義ルート時）の表示\r\n *\r\n * 設計ポイント:\r\n * - entryRouteでルートパスとカスタム要素タグ名のペアを登録\r\n * - popstateイベントでURL変更時に自動で再描画\r\n * - ルートパスのパラメータ（:id等）も正規表現で抽出し、data-state属性で渡す\r\n * - getRouterでグローバルなRouterインスタンスを取得可能\r\n */\r\nimport { IRouter } from \"./types\";\r\n\r\nconst DEFAULT_ROUTE_PATH = '/'; // Default route path\r\nconst ROUTE_PATH_PREFIX = 'routes:'; // Prefix for route paths\r\n/**\r\n * example:\r\n * ```ts\r\n * entryRoute('my-view', '/my-view/:id');\r\n */\r\nconst routeEntries: Array<[string, string]> = [];\r\n\r\nlet globalRouter : Router | null = null;\r\n\r\nexport class Router extends HTMLElement implements IRouter {\r\n  _popstateHandler: (event: PopStateEvent) => void;\r\n  constructor() {\r\n    super();\r\n    this._popstateHandler = this.popstateHandler.bind(this);\r\n  }\r\n\r\n  connectedCallback() {\r\n    globalRouter = this;\r\n    this.innerHTML = '<slot name=\"content\"></slot>';\r\n    window.addEventListener('popstate', this._popstateHandler);\r\n    window.dispatchEvent(new Event(\"popstate\")); // Dispatch popstate event to trigger the initial render\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('popstate', this._popstateHandler);\r\n    globalRouter = null;\r\n  }\r\n\r\n  popstateHandler(event: PopStateEvent) {\r\n    event.preventDefault();\r\n    this.render();\r\n  }\r\n\r\n  navigate(to: string) {\r\n    history.pushState({}, '', to);\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    // スロットコンテントをクリア\r\n    const slotChildren = Array.from(this.childNodes).filter(\r\n      n => (n as HTMLElement).getAttribute?.('slot') === 'content'\r\n    );\r\n    slotChildren.forEach(n => this.removeChild(n));\r\n\r\n    const routePath = window.location.pathname || DEFAULT_ROUTE_PATH;\r\n    let tagName: string | undefined = undefined;\r\n    let params: Record<string, string> = {};\r\n    // Check if the routePath matches any of the defined routes\r\n    for (const [path, tag] of routeEntries) {\r\n      const regex = new RegExp(path.replace(/:[^\\s/]+/g, '([^/]+)'));\r\n      if (regex.test(routePath)) {\r\n        tagName = tag;\r\n        // Extract the parameters from the routePath\r\n        const matches = routePath.match(regex);\r\n        if (matches) {\r\n          const keys = path.match(/:[^\\s/]+/g) || [];\r\n          keys.forEach((key, index) => {\r\n            params[key.substring(1)] = matches[index + 1]; // +1 to skip the full match\r\n          });\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (tagName) {\r\n      // If a route matches, create the custom element and set its state\r\n      // Create the custom element with the tag name\r\n      // project the custom element into the router slot\r\n      const customElement = document.createElement(tagName) as HTMLElement;\r\n      customElement.setAttribute('data-state', JSON.stringify(params));\r\n      customElement.setAttribute('slot', 'content');\r\n      this.appendChild(customElement);\r\n    } else {\r\n      // If no route matches, show 404 content\r\n      const messageElement = document.createElement('h1') as HTMLElement;\r\n      messageElement.setAttribute('slot', 'content');\r\n      messageElement.textContent = '404 Not Found';\r\n      this.appendChild(messageElement);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function entryRoute(tagName: string, routePath: string): void {\r\n  if (routePath.startsWith(ROUTE_PATH_PREFIX)) {\r\n    routePath = routePath.substring(ROUTE_PATH_PREFIX.length); // Remove 'routes:' prefix\r\n  }\r\n  routeEntries.push([routePath, tagName]);\r\n}\r\n\r\nexport function getRouter(): Router | null {\r\n  return globalRouter;\r\n}\r\n\r\n","/**\r\n * getGlobalConfig.ts\r\n *\r\n * Structive全体で利用するグローバル設定（IConfig）を定義・取得するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - globalConfig: デフォルトのグローバル設定値（debug, locale, enableShadowDom等）を定義\r\n * - getGlobalConfig: グローバル設定オブジェクトを返す関数\r\n * - config: getGlobalConfig()のエイリアスとして即時取得用にエクスポート\r\n *\r\n * 設計ポイント:\r\n * - コンポーネント全体で共通利用する設定値を一元管理\r\n * - デフォルト値を明示し、拡張やカスタマイズにも対応しやすい設計\r\n */\r\nimport { IConfig } from \"./types\";\r\n\r\nconst globalConfig: IConfig = {\r\n  \"debug\"                : false,\r\n  \"locale\"               : \"en-US\", // The locale of the component, ex. \"en-US\", default is \"en-US\"\r\n  \"enableShadowDom\"      : true, // Whether to use Shadow DOM or not\r\n  \"enableMainWrapper\"    : true, // Whether to use the main wrapper or not\r\n  \"enableRouter\"         : true, // Whether to use the router or not\r\n  \"autoInsertMainWrapper\": false, // Whether to automatically insert the main wrapper or not\r\n  \"autoInit\"             : true, // Whether to automatically initialize the component or not\r\n  \"mainTagName\"          : \"app-main\", // The tag name of the main wrapper, default is \"app-main\"\r\n  \"routerTagName\"        : \"view-router\", // The tag name of the router, default is \"view-router\"\r\n  \"layoutPath\"           : \"\", // The path to the layout file, default is \"\"\r\n  \"autoLoadFromImportMap\": false, // Whether to automatically load the component from the import map or not\r\n  \"optimizeList\"         : true, // Whether to optimize the list or not\r\n  \"optimizeListElements\" : true, // Whether to optimize the list elements or not\r\n  \"optimizeAccessor\"     : true, // Whether to optimize the accessors or not\r\n};\r\n\r\n\r\nexport function getGlobalConfig():IConfig {\r\n  return globalConfig;\r\n}\r\n\r\nexport const config = getGlobalConfig();\r\n","/**\r\n * errorMessages.ts\r\n *\r\n * フィルタ関数などで利用するエラーメッセージ生成ユーティリティです。\r\n *\r\n * 主な役割:\r\n * - フィルタのオプションや値の型チェックで条件を満たさない場合に、分かりやすいエラーメッセージを投げる\r\n * - 関数名を引数に取り、どのフィルタでエラーが発生したかを明示\r\n *\r\n * 設計ポイント:\r\n * - optionsRequired: オプションが必須なフィルタで未指定時にエラー\r\n * - optionMustBeNumber: オプション値が数値でない場合にエラー\r\n * - valueMustBeNumber: 値が数値でない場合にエラー\r\n * - valueMustBeBoolean: 値がbooleanでない場合にエラー\r\n * - valueMustBeDate: 値がDateでない場合にエラー\r\n */\r\nexport function optionsRequired(fnName:string): never {\r\n  throw new Error(`${fnName} requires at least one option`);\r\n}\r\n\r\nexport function optionMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number as option`);\r\n}\r\n\r\nexport function valueMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number value`);\r\n}\r\n\r\nexport function valueMustBeBoolean(fnName:string): never {\r\n  throw new Error(`${fnName} requires a boolean value`);\r\n}\r\n\r\nexport function valueMustBeDate(fnName:string): never {\r\n  throw new Error(`${fnName} requires a date value`);\r\n}","/**\r\n * builtinFilters.ts\r\n *\r\n * Structiveで利用可能な組み込みフィルタ関数群の実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - 数値・文字列・日付・真偽値などの変換・比較・整形・判定用フィルタを提供\r\n * - フィルタ名ごとにオプション付きの関数を定義し、バインディング時に柔軟に利用可能\r\n * - input/output両方のフィルタとして共通利用できる設計\r\n *\r\n * 設計ポイント:\r\n * - eq, ne, lt, gt, inc, fix, locale, uc, lc, cap, trim, slice, pad, int, float, round, date, time, ymd, falsy, truthy, defaults, boolean, number, string, null など多彩なフィルタを網羅\r\n * - オプション値の型チェックやエラーハンドリングも充実\r\n * - FilterWithOptions型でフィルタ関数群を一元管理し、拡張も容易\r\n * - builtinFilterFnでフィルタ名・オプションからフィルタ関数を動的に取得可能\r\n */\r\nimport { getGlobalConfig } from \"../WebComponents/getGlobalConfig.js\";\r\nimport { optionMustBeNumber, optionsRequired, valueMustBeBoolean, valueMustBeDate, valueMustBeNumber } from \"./errorMessages.js\";\r\nimport { FilterWithOptions } from \"./types\";\r\n\r\nconst config = getGlobalConfig();\r\n\r\nconst eq = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('eq');\r\n  return (value: any) => {\r\n    // 型を揃えて比較\r\n    if (typeof value === 'number') {\r\n      const optValue = Number(opt);\r\n      if (isNaN(optValue)) optionMustBeNumber('eq');\r\n      return value === optValue;\r\n    }\r\n    if (typeof value === 'string') {\r\n      return value === opt;\r\n    }\r\n    // その他は厳密等価\r\n    return value === opt;\r\n  }\r\n}\r\n\r\nconst ne = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ne');\r\n  return (value: any) => {\r\n    // 型を揃えて比較\r\n    if (typeof value === 'number') {\r\n      const optValue = Number(opt);\r\n      if (isNaN(optValue)) optionMustBeNumber('eq');\r\n      return value !== optValue;\r\n    }\r\n    if (typeof value === 'string') {\r\n      return value !== opt;\r\n    }\r\n    // その他は厳密等価\r\n    return value !== opt;\r\n  }\r\n}\r\n\r\nconst not = (options?:string[]) => {\r\n  return (value: any) => {\r\n    if (typeof value !== 'boolean') valueMustBeBoolean('not');\r\n    return !value;\r\n  }\r\n}\r\n\r\nconst lt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('lt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('lt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('lt');\r\n    return value < optValue;\r\n  }\r\n}\r\n\r\nconst le = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('le');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('le');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('le');\r\n    return value <= optValue;\r\n  }\r\n}\r\n\r\nconst gt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('gt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('gt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('gt');\r\n    return value > optValue;\r\n  }\r\n}\r\n\r\nconst ge = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ge');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ge');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ge');\r\n    return value >= optValue;\r\n  }\r\n}\r\n\r\nconst inc = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('inc');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('inc');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('inc');\r\n    return value + optValue;\r\n  }\r\n}\r\n\r\nconst dec = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('dec');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('dec');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('dec');\r\n    return value - optValue;\r\n  }\r\n}\r\n\r\nconst mul = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('mul');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('mul');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('mul');\r\n    return value * optValue;\r\n  }\r\n}\r\n\r\nconst div = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('div');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value / optValue;\r\n  }\r\n}\r\n\r\nconst fix = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value.toFixed(optValue);\r\n  }\r\n}\r\n\r\nconst locale = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('locale');\r\n    return value.toLocaleString(opt);\r\n  }\r\n}\r\n\r\nconst uc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toUpperCase();\r\n  }\r\n}\r\n\r\nconst lc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toLowerCase();\r\n  }\r\n}\r\n\r\nconst cap = (options?:string[]) => {\r\n  return (value: any) => {\r\n    const v = value.toString();\r\n    if (v.length === 0) return v;\r\n    if (v.length === 1) return v.toUpperCase();\r\n    return v.charAt(0).toUpperCase() + v.slice(1);\r\n  }\r\n}\r\n\r\nconst trim = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().trim();\r\n  }\r\n}\r\n\r\nconst slice = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('slice');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('slice');\r\n  return (value: any) => {\r\n    return value.toString().slice(optValue);\r\n  }\r\n}\r\n\r\nconst substr = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('substr');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('substr');\r\n  const opt2 = options?.[1] ?? optionsRequired('substr');\r\n  const opt2Value = Number(opt2);\r\n  if (isNaN(opt2Value)) optionMustBeNumber('substr');\r\n  return (value: any) => {\r\n    return value.toString().substr(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst pad = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('pad');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('pad');\r\n  const opt2 = options?.[1] ?? '0';\r\n  const opt2Value = opt2;\r\n  return (value: any) => {\r\n    return value.toString().padStart(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst rep = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('rep');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('rep');\r\n  return (value: any) => {\r\n    return value.toString().repeat(optValue);\r\n  }\r\n}\r\n\r\nconst rev = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().split('').reverse().join('');\r\n  }\r\n}\r\n\r\nconst int = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseInt(value, 10);\r\n  }\r\n}\r\n\r\nconst float = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseFloat(value);\r\n  }\r\n}\r\n\r\nconst round = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('round');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('round');\r\n    return Math.round(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst floor = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('floor');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('floor');\r\n    return Math.floor(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst ceil = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('ceil');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ceil');\r\n    return Math.ceil(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst percent = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('percent');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('percent');\r\n    return value.toFixed(optValue) + '%';\r\n  }\r\n}\r\n\r\nconst date = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date))  valueMustBeDate('date');\r\n    return value.toLocaleDateString(config.locale);\r\n  }\r\n}\r\n\r\nconst time = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('time');\r\n    return value.toLocaleTimeString(config.locale);\r\n  }\r\n}\r\n\r\nconst datetime = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('datetime');\r\n    return value.toLocaleString(config.locale);\r\n  }\r\n}\r\n\r\nconst ymd = (options?:string[]) => {\r\n  const opt = options?.[0] ?? '-';\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('ymd');\r\n    const year = value.getFullYear().toString();\r\n    const month = (value.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = value.getDate().toString().padStart(2, '0');\r\n    return `${year}${opt}${month}${opt}${day}`;\r\n  }\r\n}\r\n\r\nconst falsy = (options?:string[]) => {\r\n  return (value: any) => value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value);\r\n}\r\n\r\nconst truthy = (options?:string[]) => {\r\n  return (value: any) =>value !== false && value !== null && value !== undefined && value !== 0 && value !== '' && !Number.isNaN(value);\r\n}\r\n\r\nconst defaults = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('defaults');\r\n  return (value: any) => {\r\n    if (value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value)) return opt;\r\n    return value;\r\n  }\r\n}\r\n\r\nconst boolean = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Boolean(value);\r\n  }\r\n}\r\n\r\nconst number = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Number(value);\r\n  }\r\n}\r\n\r\nconst string = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return String(value);\r\n  }\r\n}\r\n\r\nconst _null = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return (value === \"\") ? null : value;\r\n  } \r\n}\r\n\r\nconst builtinFilters: FilterWithOptions = {\r\n  \"eq\": eq,\r\n  \"ne\": ne,\r\n  \"not\": not,\r\n\r\n  \"lt\": lt,\r\n  \"le\": le,\r\n  \"gt\": gt,\r\n  \"ge\": ge,\r\n\r\n  \"inc\": inc,\r\n  \"dec\": dec,\r\n  \"mul\": mul,\r\n  \"div\": div,\r\n\r\n  \"fix\": fix,\r\n  \"locale\": locale,\r\n  \"uc\": uc,\r\n  \"lc\": lc,\r\n  \"cap\": cap,\r\n  \"trim\": trim,\r\n  \"slice\": slice,\r\n  \"substr\": substr,\r\n  \"pad\": pad,\r\n  \"rep\": rep,\r\n  \"rev\": rev,\r\n\r\n  \"int\": int,\r\n  \"float\": float,\r\n  \"round\": round,\r\n  \"floor\": floor,\r\n  \"ceil\": ceil,\r\n  \"percent\": percent,\r\n\r\n  \"date\": date,\r\n  \"time\": time,\r\n  \"datetime\": datetime,\r\n  \"ymd\": ymd,\r\n\r\n  \"falsy\": falsy,\r\n  \"truthy\": truthy,\r\n  \"defaults\": defaults,\r\n\r\n  \"boolean\": boolean,\r\n  \"number\": number,\r\n  \"string\": string,\r\n  \"null\": _null,\r\n};\r\n\r\nexport const outputBuiltinFilters = builtinFilters;\r\nexport const inputBuiltinFilters = builtinFilters;\r\n\r\nexport const builtinFilterFn = (name:string, options: string[]) => (filters: FilterWithOptions) => {\r\n  const filter = filters[name];\r\n  if (!filter) throw new Error(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(options);\r\n}\r\n\r\n","\r\nlet id = 0;\r\n\r\nexport function generateId(): number {\r\n  return ++id;\r\n}","\r\nexport function raiseError(message: string): never {\r\n  throw new Error(message);\r\n}\r\n","/**\r\n * registerStateClass.ts\r\n *\r\n * StateClassインスタンスをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - stateClassById: IDをキーにStateClassインスタンスを管理するレコード\r\n * - registerStateClass: 指定IDでStateClassインスタンスを登録\r\n * - getStateClassById: 指定IDのStateClassインスタンスを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - グローバルにStateClassインスタンスを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IStructiveState } from \"./types\";\r\n\r\nconst stateClassById: Record<number,IStructiveState> = {};\r\n\r\nexport function registerStateClass(id: number, stateClass: IStructiveState) {\r\n  stateClassById[id] = stateClass;\r\n}\r\n\r\nexport function getStateClassById(id: number): IStructiveState {\r\n  return stateClassById[id] ?? raiseError(`getStateClassById: stateClass not found: ${id}`);\r\n}\r\n","/**\r\n * registerStyleSheet.ts\r\n *\r\n * CSSStyleSheetインスタンスをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - styleSheetById: IDをキーにCSSStyleSheetインスタンスを管理するレコード\r\n * - registerStyleSheet: 指定IDでCSSStyleSheetインスタンスを登録\r\n * - getStyleSheetById: 指定IDのCSSStyleSheetインスタンスを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - グローバルにCSSStyleSheetインスタンスを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nconst styleSheetById: Record<number,CSSStyleSheet> = {};\r\n\r\nexport function registerStyleSheet(id: number, css: CSSStyleSheet) {\r\n  styleSheetById[id] = css;\r\n}\r\n\r\nexport function getStyleSheetById(id: number): CSSStyleSheet {\r\n  return styleSheetById[id] ?? raiseError(`getStyleSheetById: stylesheet not found: ${id}`);\r\n}","/**\r\n * regsiterCss.ts\r\n *\r\n * CSS文字列をCSSStyleSheetとして生成し、IDで登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - CSS文字列からCSSStyleSheetインスタンスを生成\r\n * - registerStyleSheetを利用して、指定IDでCSSStyleSheetを登録\r\n *\r\n * 設計ポイント:\r\n * - styleSheet.replaceSyncで同期的にCSSを適用\r\n * - グローバルなスタイル管理や動的スタイル適用に利用可能\r\n */\r\nimport { registerStyleSheet } from \"./registerStyleSheet.js\";\r\n\r\nexport function registerCss(id: number, css: string) {\r\n  const styleSheet = new CSSStyleSheet();\r\n  styleSheet.replaceSync(css);\r\n  registerStyleSheet(id, styleSheet);\r\n}","import { FilterFn, Filters, FilterWithOptions } from \"../Filter/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\n\r\n/**\r\n * フィルターテキスト（nameとoptionsを持つ）から、実際のフィルター関数（FilterFn）を生成する。\r\n * \r\n * - textToFilter: フィルターテキストから対応するフィルター関数を取得し、オプションを適用して返す。\r\n * - createFilters: フィルターテキスト配列からフィルター関数配列を生成し、同じ入力にはキャッシュを利用する。\r\n */\r\nfunction textToFilter(filters:FilterWithOptions, text: IFilterText): FilterFn {\r\n  const filter = filters[text.name];\r\n  if (!filter) raiseError(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(text.options);\r\n}\r\n\r\nconst cache : Map<IFilterText[], Filters> = new Map();\r\n\r\n/**\r\n * フィルターテキスト配列（texts）からフィルター関数配列（Filters）を生成する。\r\n * すでに同じtextsがキャッシュされていればそれを返す。\r\n * \r\n * @param filters フィルター名→関数の辞書\r\n * @param texts   フィルターテキスト配列\r\n * @returns       フィルター関数配列\r\n */\r\nexport function createFilters(filters:FilterWithOptions, texts: IFilterText[]): Filters {\r\n  let result = cache.get(texts);\r\n  if (typeof result === \"undefined\") {\r\n    result = [];\r\n    for(let i = 0; i < texts.length; i++) {\r\n      result.push(textToFilter(filters, texts[i]));\r\n    }\r\n    cache.set(texts, result);\r\n  }\r\n  return result;\r\n}\r\n","import { Filters } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { IBindingNode } from \"./types\";\r\n\r\n/**\r\n * BindingNodeクラスは、1つのバインディング対象ノード（ElementやTextなど）に対する\r\n * バインディング処理の基底クラスです。\r\n *\r\n * 主な役割:\r\n * - ノード・プロパティ名・フィルタ・デコレータ・バインディング情報の保持\r\n * - バインディング値の更新（update）、値の割り当て（assignValue）のインターフェース提供\r\n * - 複数バインド内容（bindContents）の管理\r\n * - サブクラスでassignValueやupdateElementsを実装し、各種ノード・プロパティごとのバインディング処理を拡張\r\n *\r\n * 設計ポイント:\r\n * - assignValue, updateElementsは未実装（サブクラスでオーバーライド必須）\r\n * - isSelectElement, value, filteredValue, isForなどはサブクラスで用途に応じて拡張\r\n * - フィルタやデコレータ、バインド内容の管理も柔軟に対応\r\n */\r\nexport class BindingNode implements IBindingNode {\r\n  #binding: IBinding;\r\n  #node: Node;\r\n  #name: string;\r\n  #filters: Filters;\r\n  #decorates: string[];\r\n  #bindContents: Set<IBindContent> = new Set<IBindContent>();\r\n  get node(): Node {\r\n    return this.#node;\r\n  }\r\n  get name(): string {\r\n    return this.#name;\r\n  }\r\n  get subName(): string {\r\n    return this.#name;\r\n  }\r\n  get binding(): IBinding {\r\n    return this.#binding;\r\n  }\r\n  get decorates(): string[] {\r\n    return this.#decorates;\r\n  }\r\n  get filters(): Filters {\r\n    return this.#filters;\r\n  }\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#node = node;\r\n    this.#name = name;\r\n    this.#filters = filters;\r\n    this.#decorates = decorates;\r\n  }\r\n  init():void {\r\n    // サブクラスで初期化処理を実装可能\r\n  }\r\n  update(): void {\r\n    this.assignValue(this.binding.bindingState.filteredValue);\r\n  }\r\n  assignValue(value: any): void {\r\n    raiseError(`BindingNode: assignValue not implemented`);\r\n  }\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    raiseError(`BindingNode: updateElements not implemented`);\r\n  }\r\n  notifyRedraw(refs: IStatePropertyRef[]): void {\r\n    // サブクラスで親子関係を考慮してバインディングの更新を通知する実装が可能\r\n  }\r\n  get isSelectElement(): boolean {\r\n    return this.node instanceof HTMLSelectElement;\r\n  }\r\n  get value():any {\r\n    return null;\r\n  }\r\n  get filteredValue():any {\r\n    return null;\r\n  }\r\n  get isFor(): boolean {\r\n    return false;\r\n  }\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeAttributeクラスは、属性バインディング（例: attr.src, attr.alt など）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - ノード属性名（subName）を抽出し、値を属性としてElementにセット\r\n * - null/undefined/NaNの場合は空文字列に変換してセット\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameから属性名（subName）を抽出（例: \"attr.src\" → \"src\"）\r\n * - assignValueで属性値を常に文字列として設定\r\n * - createBindingNodeAttributeファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeAttribute extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as Element;\r\n    element.setAttribute(this.subName, value.toString());\r\n  }\r\n}\r\n\r\n/**\r\n * 属性バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeAttributeインスタンスを生成\r\n */\r\nexport const createBindingNodeAttribute: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeAttribute(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeCheckboxクラスは、チェックボックス（input[type=\"checkbox\"]）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（配列）に現在のvalueが含まれているかどうかでchecked状態を制御\r\n * - 値が配列でない場合はエラーを投げる\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで配列内にvalueが含まれていればchecked=true\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeCheckbox extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeCheckbox.update: value is not array`, );\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.map(_val => _val.toString()).includes(element.value);\r\n  }\r\n}\r\n\r\n/**\r\n * チェックボックス用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeCheckboxインスタンスを生成\r\n */\r\nexport const createBindingNodeCheckbox: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeCheckbox(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeClassListクラスは、class属性（classList）のバインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（配列）を空白区切りのclass属性値としてElementにセット\r\n * - 値が配列でない場合はエラーを投げる\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで配列を受け取り、join(\" \")でclassNameに反映\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeClassList extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeClassList.update: value is not array`);\r\n    }\r\n    const element = this.node as Element;\r\n    element.className = value.join(\" \");\r\n  }\r\n}\r\n\r\n/**\r\n * classList用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeClassListインスタンスを生成\r\n */\r\nexport const createBindingNodeClassList: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassList(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeClassNameクラスは、class属性の個別クラス名（例: class.active など）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（boolean）に応じて、指定クラス名（subName）をElementに追加・削除\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからクラス名（subName）を抽出（例: \"class.active\" → \"active\"）\r\n * - assignValueでboolean値のみ許容し、型が異なる場合はエラー\r\n * - trueならclassList.add、falseならclassList.removeでクラス操作\r\n * - ファクトリ関数でフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeClassName extends BindingNode {\r\n  #subName: string;\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeClassName.update: value is not boolean`);\r\n    }\r\n    const element = this.node as Element;\r\n    if (value) {\r\n      element.classList.add(this.subName);\r\n    } else {\r\n      element.classList.remove(this.subName);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * class名バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeClassNameインスタンスを生成\r\n */\r\nexport const createBindingNodeClassName: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassName(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeEventクラスは、イベントバインディング（onClick, onInputなど）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - 指定イベント（on～）に対して、バインディングされた関数をイベントリスナーとして登録\r\n * - デコレータ（preventDefault, stopPropagation）によるイベント制御に対応\r\n * - ループコンテキストやリストインデックスも引数としてイベントハンドラに渡す\r\n * - ハンドラ実行時はstateProxyを生成し、Updater経由で非同期的に状態を更新\r\n *\r\n * 設計ポイント:\r\n * - nameからイベント名（subName）を抽出し、addEventListenerで登録\r\n * - バインディング値が関数でない場合はエラー\r\n * - デコレータでpreventDefault/stopPropagationを柔軟に制御\r\n * - ループ内イベントにも対応し、リストインデックスを引数展開\r\n */\r\nclass BindingNodeEvent extends BindingNode {\r\n  #subName    : string;\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#subName = this.name.slice(2); // on～\r\n    const element = node as HTMLElement;\r\n    element.addEventListener(this.subName, (e:Event) => this.handler(e));\r\n  }\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  update() {\r\n    // 何もしない（イベントバインディングは初期化時のみ）\r\n  }\r\n\r\n  async handler(e: Event) {\r\n    const engine = this.binding.engine;\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n    const indexes = loopContext?.serialize().map((context) => context.listIndex.index) ?? [];\r\n    const options = this.decorates;\r\n    const value = this.binding.bindingState.value;\r\n    const typeOfValue = typeof value;\r\n    if (typeOfValue !== \"function\") {\r\n      raiseError(`BindingNodeEvent: ${this.name} is not a function.`);\r\n    }\r\n    if (options.includes(\"preventDefault\")) {\r\n      e.preventDefault();\r\n    }\r\n    if (options.includes(\"stopPropagation\")) {\r\n      e.stopPropagation();\r\n    }\r\n    await engine.useWritableStateProxy(loopContext, async (stateProxy) => {\r\n      // stateProxyを生成し、バインディング値を実行\r\n      await Reflect.apply(value, stateProxy, [e, ...indexes]);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * イベントバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeEventインスタンスを生成\r\n */\r\nexport const createBindingNodeEvent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeEvent(binding, node, name, filterFns, decorates);\r\n  }\r\n","export const DATA_BIND_ATTRIBUTE = \"data-bind\";\r\nexport const COMMENT_EMBED_MARK = \"@@:\"; // 埋め込み変数のマーク\r\nexport const COMMENT_TEMPLATE_MARK = \"@@|\"; // テンプレートのマーク\r\n","import { COMMENT_TEMPLATE_MARK } from \"../../constants.js\";\r\nimport { Filters } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\n\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\n/**\r\n * BindingNodeBlockクラスは、テンプレートブロック（コメントノードによるテンプレート挿入部）を\r\n * バインディング対象とするためのバインディングノード実装です。\r\n *\r\n * 主な役割:\r\n * - コメントノード内のテンプレートIDを抽出し、idプロパティとして保持\r\n * - テンプレートブロックのバインディング処理の基盤となる\r\n *\r\n * 設計ポイント:\r\n * - コメントノードのテキストからテンプレートIDを抽出（COMMENT_TEMPLATE_MARK以降を数値変換）\r\n * - IDが取得できない場合はエラーを投げる\r\n * - 他のBindingNode系クラスと同様、フィルタやデコレータにも対応\r\n */\r\nexport class BindingNodeBlock extends BindingNode {\r\n  #id: number;\r\n  get id(): number {\r\n    return this.#id;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const id = this.node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN) ?? raiseError(\"BindingNodeBlock.id: invalid node\");\r\n    this.#id = Number(id);\r\n  }\r\n    \r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeIfクラスは、ifバインディング（条件付き描画）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（boolean）に応じて、BindContent（描画内容）のマウント・アンマウントを制御\r\n * - true/false時のBindContent集合を管理し、現在の描画状態をbindContentsで取得可能\r\n *\r\n * 設計ポイント:\r\n * - assignValueでboolean型以外が渡された場合はエラー\r\n * - trueならBindContentをrender・mount、falseならunmount\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeIf extends BindingNodeBlock {\r\n  #bindContent: IBindContent;\r\n  #trueBindContents: Set<IBindContent>;\r\n  #falseBindContents: Set<IBindContent> = new Set();\r\n  #bindContents: Set<IBindContent>;\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#bindContent = createBindContent(\r\n      this.binding, \r\n      this.id, \r\n      this.binding.engine, \r\n      \"\", \r\n      null\r\n    );\r\n    this.#trueBindContents = this.#bindContents = new Set([this.#bindContent]);\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeIf.update: value is not boolean`);\r\n    }\r\n    const parentNode = this.node.parentNode;\r\n    if (parentNode == null) {\r\n      raiseError(`BindingNodeIf.update: parentNode is null`);\r\n    }\r\n    if (value) {\r\n      this.#bindContent.render();\r\n      this.#bindContent.mountAfter(parentNode, this.node);\r\n      this.#bindContents = this.#trueBindContents;\r\n    } else {\r\n      this.#bindContent.unmount();\r\n      this.#bindContents = this.#falseBindContents;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * ifバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeIfインスタンスを生成\r\n */\r\nexport const createBindingNodeIf: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeIf(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeForクラスは、forバインディング（配列やリストの繰り返し描画）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - リストデータの各要素ごとにBindContent（バインディングコンテキスト）を生成・管理\r\n * - 配列の差分検出により、必要なBindContentの生成・再利用・削除・再描画を最適化\r\n * - DOM上での要素の並び替えや再利用、アンマウント・マウント処理を効率的に行う\r\n * - プール機構によりBindContentの再利用を促進し、パフォーマンスを向上\r\n *\r\n * 設計ポイント:\r\n * - assignValueでリストの差分を検出し、BindContentの生成・削除・再利用を管理\r\n * - updateElementsでリストの並び替えやSWAP処理にも対応\r\n * - BindContentのプール・インデックス管理でGCやDOM操作の最小化を図る\r\n * - バインディング状態やリストインデックス情報をエンジンに保存し、再描画や依存解決を容易にする\r\n *\r\n * ファクトリ関数 createBindingNodeFor でフィルタ・デコレータ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeFor extends BindingNodeBlock {\r\n  #bindContentsSet       : Set<IBindContent> = new Set<IBindContent>();\r\n  #bindContentByListIndex: WeakMap<IListIndex, IBindContent> = new WeakMap();\r\n  #bindContentPool       : IBindContent[] = [];\r\n  #bindContentLastIndex  : number = 0;\r\n  #lastListIndexSet      : Set<IListIndex> = new Set<IListIndex>();\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContentsSet;\r\n  }\r\n\r\n  get isFor(): boolean {\r\n    return true;\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  createBindContent(listIndex: IListIndex): IBindContent {\r\n    let bindContent: IBindContent;\r\n    if (this.#bindContentLastIndex >= 0) {\r\n      // プールの最後の要素を取得して、プールの長さをあとで縮減する\r\n      // 作るたびにプールを縮減すると、パフォーマンスが悪化するため\r\n      // プールの長さを縮減するのは、全ての要素を作った後に行う\r\n      bindContent = this.#bindContentPool[this.#bindContentLastIndex];\r\n      this.#bindContentLastIndex--;\r\n      bindContent.assignListIndex(listIndex);\r\n    } else {\r\n      bindContent = createBindContent(\r\n        this.binding, \r\n        this.id, \r\n        this.binding.engine, \r\n        this.binding.bindingState.pattern + \".*\", \r\n        listIndex);\r\n    }\r\n    // 登録\r\n    this.#bindContentByListIndex.set(listIndex, bindContent);\r\n    return bindContent;\r\n  }\r\n\r\n  deleteBindContent(bindContent: IBindContent): void {\r\n    bindContent.unmount();\r\n    bindContent.loopContext?.clearListIndex();\r\n  }\r\n\r\n  get bindContentLastIndex():number {\r\n    return this.#bindContentLastIndex;\r\n  }\r\n  set bindContentLastIndex(value:number) {\r\n    this.#bindContentLastIndex = value;\r\n  }\r\n\r\n  get poolLength():number {\r\n    return this.#bindContentPool.length;\r\n  }\r\n  set poolLength(length: number) {\r\n    if (length < 0) {\r\n      raiseError(`BindingNodeFor.setPoolLength: length is negative`);\r\n    }\r\n    this.#bindContentPool.length = length;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeFor.assignValue: value is not array`);\r\n    }\r\n    const listIndexesSet = this.binding.engine.getListIndexesSet(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex\r\n    );\r\n    if (listIndexesSet === null) {\r\n      raiseError(`BindingNodeFor.assignValue: listIndexes is not found`);\r\n    }\r\n    const newBindContensSet = new Set<IBindContent>();\r\n    let lastBindContent = null;\r\n    // 削除を先にする\r\n    const removeBindContentsSet = new Set<IBindContent>();\r\n    const diff = this.#lastListIndexSet.difference(listIndexesSet);\r\n    for(const listIndex of diff) {\r\n      const bindContent = this.#bindContentByListIndex.get(listIndex);\r\n      if (bindContent) {\r\n        this.deleteBindContent(bindContent);\r\n        removeBindContentsSet.add(bindContent);\r\n      }\r\n    }\r\n    this.#bindContentPool.push(...removeBindContentsSet);\r\n\r\n    const parentNode = this.node.parentNode ?? raiseError(`BindingNodeFor.update: parentNode is null`);\r\n    const firstNode = this.node;\r\n\r\n    this.bindContentLastIndex = this.poolLength - 1;\r\n    for(const listIndex of listIndexesSet) {\r\n      const lastNode = lastBindContent?.getLastNode(parentNode) ?? firstNode;\r\n      let bindContent = this.#bindContentByListIndex.get(listIndex);\r\n      if (typeof bindContent === \"undefined\") {\r\n        bindContent = this.createBindContent(listIndex);\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        if (lastNode?.nextSibling !== bindContent.firstChildNode) {\r\n          bindContent.mountAfter(parentNode, lastNode);\r\n        }\r\n      }\r\n      newBindContensSet.add(bindContent);\r\n      lastBindContent = bindContent;\r\n    }\r\n    // プールの長さを更新する\r\n    // プールの長さは、プールの最後の要素のインデックス+1であるため、\r\n    this.poolLength = this.bindContentLastIndex + 1;\r\n    this.#bindContentsSet = newBindContensSet;\r\n    this.#lastListIndexSet = new Set<IListIndex>(listIndexesSet);\r\n  }\r\n\r\n  /**\r\n   * SWAP処理を想定\r\n   * \r\n   * @param listIndexes \r\n   * @param values \r\n   * @returns \r\n   */\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    if (typeof values[0] !== \"object\") return;\r\n    const engine = this.binding.engine;\r\n    const oldListValues = \r\n      engine.getList(\r\n        this.binding.bindingState.info, \r\n        this.binding.bindingState.listIndex\r\n      ) ?? raiseError(`BindingNodeFor.updateElements: oldValues is not found`); \r\n    const parentNode = this.node.parentNode ?? raiseError(`BindingNodeFor.update: parentNode is null`);\r\n\r\n    // DOMから削除\r\n    const currentBindContents = Array.from(this.#bindContentsSet);\r\n    const targetBindContents: IBindContent[] = [];\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const bindContent = currentBindContents[listIndex.index];\r\n      bindContent.unmount();\r\n      targetBindContents.push(bindContent);\r\n    }\r\n\r\n    // DOMに追加、listIndexを更新\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const index = listIndex.index;\r\n\r\n      const lastBindContent = currentBindContents[index - 1] ?? null;\r\n      const lastNode = lastBindContent?.lastChildNode ?? this.node;\r\n\r\n      const oldValue = oldListValues[index];\r\n      const targetIndex = values.indexOf(oldValue);\r\n      const prevBindContent = targetBindContents[targetIndex];\r\n\r\n      if (typeof prevBindContent === \"undefined\") {\r\n        // 入れ替えるBindContentがない場合は再描画\r\n        const bindContent = targetBindContents[index];\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        prevBindContent.assignListIndex(listIndex);\r\n        prevBindContent.mountAfter(parentNode, lastNode);\r\n        this.#bindContentByListIndex.set(listIndex, prevBindContent);\r\n        currentBindContents[index] = prevBindContent;\r\n      }\r\n      if (targetIndex >= 0) {\r\n        values[targetIndex] = -1;\r\n      }\r\n    }\r\n    this.#bindContentsSet = new Set<IBindContent>(currentBindContents);\r\n    engine.saveList(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex, \r\n      this.binding.bindingState.value.slice(0)\r\n    );\r\n  }\r\n}\r\n\r\nexport const createBindingNodeFor: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeFor(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DEFAULT_PROPERTY = \"textContent\";\r\n\r\ntype DefaultPropertyByElementType = {\r\n  [key:string]: string;\r\n}\r\n\r\nconst defaultPropertyByElementType:DefaultPropertyByElementType = {\r\n  \"radio\"   : \"checked\",\r\n  \"checkbox\": \"checked\",\r\n  \"button\"  : \"onclick\",\r\n}\r\n\r\n/**\r\n * HTML要素のデフォルトプロパティを取得\r\n */\r\nconst getDefaultPropertyHTMLElement = (node:Node):string => \r\n  node instanceof HTMLSelectElement || node instanceof HTMLTextAreaElement || node instanceof HTMLOptionElement ? \"value\" : \r\n  node instanceof HTMLButtonElement ? \"onclick\" : \r\n  node instanceof HTMLAnchorElement ? \"onclick\" : \r\n  node instanceof HTMLFormElement ? \"onsubmit\" : \r\n  node instanceof HTMLInputElement ? (defaultPropertyByElementType[node.type] ?? \"value\") :\r\n  DEFAULT_PROPERTY;\r\n\r\ntype DefaultPropertyByKey = {\r\n  [key:string]: string | undefined;\r\n}\r\n\r\nconst _cache: DefaultPropertyByKey = {};\r\n\r\nconst textContentProperty = (node:Node):string => DEFAULT_PROPERTY;\r\n\r\ntype GetDefaultPropertyByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>string) | undefined;\r\n}\r\n\r\nconst getDefaultPropertyByNodeType: GetDefaultPropertyByNodeType = {\r\n  HTMLElement: getDefaultPropertyHTMLElement,\r\n  SVGElement : undefined,\r\n  Text       : textContentProperty,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * バインド情報でノードプロパティが省略された場合に、ノード種別・要素タイプごとに\r\n * 適切なデフォルトプロパティ名（例: textContent, value, checked, onclick など）を返すユーティリティ関数。\r\n *\r\n * - HTMLInputElementやHTMLSelectElementなど、要素ごとに最適なプロパティを判定\r\n * - input要素はtype属性（radio, checkboxなど）も考慮\r\n * - 一度判定した組み合わせはキャッシュし、パフォーマンス向上\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"HTMLElement\" | \"SVGElement\" | \"Text\" | \"Template\"）\r\n * @returns        デフォルトのプロパティ名（例: \"value\", \"checked\", \"textContent\" など）\r\n */\r\nexport function getDefaultName(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): string | undefined {\r\n  const key = node.constructor.name + \"\\t\" + ((node as HTMLInputElement).type ?? \"\"); // type attribute\r\n  return _cache[key] ?? (_cache[key] = getDefaultPropertyByNodeType[nodeType]?.(node));\r\n}\r\n  ","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { getDefaultName } from \"../../BindingBuilder/getDefaultName.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nfunction isTwoWayBindable(element: HTMLElement): boolean {\r\n  return element instanceof HTMLInputElement || \r\n    element instanceof HTMLTextAreaElement || \r\n    element instanceof HTMLSelectElement;\r\n}\r\n\r\nconst defaultEventByName: {[key:string]: string} = {\r\n  \"value\"   : \"input\",\r\n  \"checked\" : \"change\",\r\n  \"selected\": \"change\",\r\n};\r\n\r\n/**\r\n * BindingNodePropertyクラスは、ノードのプロパティ（value, checked, selected など）への\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - ノードプロパティへの値の割り当て・取得\r\n * - 双方向バインディング（input, changeイベント等）に対応\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - デフォルトプロパティ名と一致し、かつ双方向バインディング可能な要素の場合のみイベントリスナーを登録\r\n * - デコレータでイベント名を指定可能（onInput, onChangeなど）\r\n * - イベント発火時はUpdater経由でstateを非同期的に更新\r\n * - assignValueでnull/undefined/NaNは空文字列に変換してセット\r\n */\r\nclass BindingNodeProperty extends BindingNode {\r\n  get value(): any {\r\n    // @ts-ignore\r\n    return this.node[this.name];\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.filters.length; i++) {\r\n      value = this.filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n\r\n    const isElement = this.node instanceof HTMLElement;\r\n    if (!isElement) return;\r\n    if (!isTwoWayBindable(this.node)) return;\r\n    const defaultName = getDefaultName(this.node, \"HTMLElement\");\r\n    if (defaultName !== this.name) return;\r\n    if (decorates.length > 1) raiseError(`BindingNodeProperty: ${this.name} has multiple decorators`);\r\n    const event = (decorates[0]?.startsWith(\"on\") ? decorates[0]?.slice(2) : decorates[0]) ?? null;\r\n    const eventName = event ?? defaultEventByName[this.name] ?? \"readonly\";\r\n    if (eventName === \"readonly\" || eventName === \"ro\") return;\r\n\r\n    // 双方向バインディング: イベント発火時にstateを更新\r\n    const engine = this.binding.engine;\r\n    this.node.addEventListener(eventName, async () => {\r\n      const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n      const value = this.filteredValue;\r\n      await engine.useWritableStateProxy(loopContext, async (stateProxy) => {\r\n        // stateProxyを生成し、バインディング値を更新\r\n        binding.updateStateValue(stateProxy, value);\r\n      });\r\n    });\r\n  }\r\n\r\n  init() {\r\n    // サブクラスで初期化処理を実装可能\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    // @ts-ignore\r\n    this.node[this.name] = value;\r\n  }\r\n}\r\n\r\n/**\r\n * プロパティバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodePropertyインスタンスを生成\r\n */\r\nexport const createBindingNodeProperty: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeProperty(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeRadioクラスは、ラジオボタン（input[type=\"radio\"]）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値とinput要素のvalueが一致していればchecked=trueにする\r\n * - null/undefined/NaNの場合は空文字列に変換して比較\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで値を文字列化し、input要素のvalueと比較してcheckedを制御\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeRadio extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.toString() === element.value.toString();\r\n  }\r\n}\r\n\r\n/**\r\n * ラジオボタン用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeRadioインスタンスを生成\r\n */\r\nexport const createBindingNodeRadio: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeRadio(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeStyleクラスは、style属性（インラインスタイル）のバインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値を指定のCSSプロパティ（subName）としてHTMLElementにセット\r\n * - null/undefined/NaNの場合は空文字列に変換してセット\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからCSSプロパティ名（subName）を抽出（例: \"style.color\" → \"color\"）\r\n * - assignValueで値を文字列化し、style.setPropertyで反映\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeStyle extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLElement;\r\n    element.style.setProperty(this.subName, value.toString());\r\n  }\r\n}\r\n\r\n/**\r\n * style属性バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeStyleインスタンスを生成\r\n */\r\nexport const createBindingNodeStyle: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeStyle(binding, node, name, filterFns, decorates);\r\n  }\r\n","const symbolName = \"component-state-input\";\r\n\r\nexport const AssignStateSymbol: unique symbol = Symbol.for(`${symbolName}.AssignState`);\r\nexport const NotifyRedrawSymbol: unique symbol = Symbol.for(`${symbolName}.NotifyRedraw`);","import { StructiveComponent } from \"./types\";\r\n\r\nconst parentStructiveComponentByStructiveComponent = new WeakMap<StructiveComponent, StructiveComponent>();\r\n\r\nexport function findStructiveParent(el:StructiveComponent): StructiveComponent | null {\r\n  return parentStructiveComponentByStructiveComponent.get(el) ?? null;\r\n}\r\n\r\nexport function registerStructiveComponent(parentComponent: StructiveComponent, component: StructiveComponent): void {\r\n  parentStructiveComponentByStructiveComponent.set(component, parentComponent);\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { NotifyRedrawSymbol } from \"../../ComponentStateInput/symbols.js\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types.js\";\r\nimport { registerStructiveComponent } from \"../../WebComponents/findStructiveParent.js\";\r\nimport { StructiveComponent } from \"../../WebComponents/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeComponentクラスは、StructiveComponent（カスタムコンポーネント）への\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング対象のコンポーネントのstateプロパティ（subName）に値を反映\r\n * - バインディング情報をコンポーネント単位で管理（bindingsByComponentに登録）\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからstateプロパティ名（subName）を抽出（例: \"state.foo\" → \"foo\"）\r\n * - assignValueでコンポーネントのstateに値をセット（RenderSymbol経由で反映）\r\n * - 初期化時にbindingsByComponentへバインディング情報を登録\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeComponent extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  init(): void {\r\n    const engine = this.binding.engine;\r\n    registerStructiveComponent(engine.owner, this.node as StructiveComponent);\r\n    let bindings = engine.bindingsByComponent.get(this.node as StructiveComponent);\r\n    if (typeof bindings === \"undefined\") {\r\n      engine.bindingsByComponent.set(this.node as StructiveComponent, bindings = new Set<IBinding>());\r\n    }\r\n    bindings.add(this.binding);\r\n  }\r\n\r\n  assignValue(value: any): void {\r\n  }\r\n\r\n  notifyRedraw(refs: IStatePropertyRef[]): void {\r\n    const notifyRefs = [];\r\n    const info = this.binding.bindingState.info;\r\n    const listIndex = this.binding.bindingState.listIndex?.at(info.wildcardCount - 1) ?? null;\r\n    const at = (listIndex?.length ?? 0) - 1;\r\n    for(const ref of refs) {\r\n      if (listIndex !== null && ref.listIndex?.at(at) !== listIndex) {\r\n        continue;\r\n      }\r\n      if (!ref.info.cumulativePathSet.has(info.pattern)) {\r\n        continue;\r\n      }\r\n      notifyRefs.push(ref);\r\n    }\r\n    if (notifyRefs.length === 0) {\r\n      return;\r\n    }\r\n    const component = this.node as StructiveComponent;\r\n    component.state[NotifyRedrawSymbol](notifyRefs);\r\n  }\r\n}\r\n\r\n/**\r\n * コンポーネント用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeComponentインスタンスを生成\r\n */\r\nexport const createBindingNodeComponent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeComponent(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createBindingNodeAttribute } from \"../DataBinding/BindingNode/BindingNodeAttribute.js\";\r\nimport { createBindingNodeCheckbox } from \"../DataBinding/BindingNode/BindingNodeCheckbox.js\";\r\nimport { createBindingNodeClassList } from \"../DataBinding/BindingNode/BindingNodeClassList.js\";\r\nimport { createBindingNodeClassName } from \"../DataBinding/BindingNode/BindingNodeClassName.js\";\r\nimport { createBindingNodeEvent } from \"../DataBinding/BindingNode/BindingNodeEvent.js\";\r\nimport { createBindingNodeIf } from \"../DataBinding/BindingNode/BindingNodeIf.js\";\r\nimport { createBindingNodeFor } from \"../DataBinding/BindingNode/BindingNodeFor.js\";\r\nimport { createBindingNodeProperty } from \"../DataBinding/BindingNode/BindingNodeProperty.js\";\r\nimport { createBindingNodeRadio } from \"../DataBinding/BindingNode/BindingNodeRadio.js\";\r\nimport { createBindingNodeStyle } from \"../DataBinding/BindingNode/BindingNodeStyle.js\";\r\nimport { CreateBindingNodeByNodeFn, CreateBindingNodeFn } from \"../DataBinding/BindingNode/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\nimport { createBindingNodeComponent } from \"../DataBinding/BindingNode/BindingNodeComponent.js\";\r\n\r\ntype NodePropertyConstructorByName = {[key:string]:CreateBindingNodeFn};\r\ntype NodePropertyConstructorByNameByIsComment = {[key:number]:NodePropertyConstructorByName};\r\n\r\nconst nodePropertyConstructorByNameByIsComment:NodePropertyConstructorByNameByIsComment = {\r\n  0: {\r\n    \"class\"   : createBindingNodeClassList,\r\n    \"checkbox\": createBindingNodeCheckbox,\r\n    \"radio\"   : createBindingNodeRadio,\r\n  },\r\n  1: {\r\n    \"if\" : createBindingNodeIf,\r\n  },\r\n};\r\n\r\ntype NodePropertyConstructorByFirstName = {[key:string]:CreateBindingNodeFn};\r\n\r\nconst nodePropertyConstructorByFirstName:NodePropertyConstructorByFirstName = {\r\n  \"class\": createBindingNodeClassName,\r\n  \"attr\" : createBindingNodeAttribute,\r\n  \"style\": createBindingNodeStyle,\r\n  \"state\": createBindingNodeComponent,\r\n//  \"popover\": PopoverTarget,\r\n//  \"commandfor\": CommandForTarget,\r\n};\r\n\r\n/**\r\n * バインディング対象ノードのプロパティ名やノード種別（Element/Comment）に応じて、\r\n * 適切なバインディングノード生成関数（CreateBindingNodeFn）を返すユーティリティ。\r\n *\r\n * - ノード種別やプロパティ名ごとに専用の生成関数をマッピング\r\n * - コメントノードや特殊プロパティ（for/if等）にも対応\r\n * - プロパティ名の先頭や\"on\"でイベントバインディングも判別\r\n * - 一度判定した組み合わせはキャッシュし、パフォーマンス向上\r\n *\r\n * これにより、テンプレートのdata-bindやコメントバインディングの各種ケースに柔軟に対応できる。\r\n */\r\nfunction _getBindingNodeCreator(isComment:boolean, isElement: boolean, propertyName: string): CreateBindingNodeFn {\r\n  // コメント/エレメント種別とプロパティ名で専用の生成関数を優先的に取得\r\n  const bindingNodeCreatorByName = nodePropertyConstructorByNameByIsComment[isComment ? 1 : 0][propertyName];\r\n  if (typeof bindingNodeCreatorByName !== \"undefined\") {\r\n    return bindingNodeCreatorByName;\r\n  }\r\n  // コメントノードでforの場合は専用関数\r\n  if (isComment && propertyName === \"for\") {\r\n    return createBindingNodeFor;\r\n  }\r\n  // コメントノードで未対応プロパティはエラー\r\n  if (isComment) {\r\n    raiseError(`getBindingNodeCreator: unknown node property ${propertyName}`);\r\n  }\r\n  // プロパティ名の先頭で判別（class.attr.style.state等）\r\n  const nameElements = propertyName.split(\".\");\r\n  const bindingNodeCreatorByFirstName = nodePropertyConstructorByFirstName[nameElements[0]];\r\n  if (typeof bindingNodeCreatorByFirstName !== \"undefined\") {\r\n    return bindingNodeCreatorByFirstName;\r\n  }\r\n  // エレメントノードでonから始まる場合はイベントバインディング\r\n  if (isElement) {\r\n    if (propertyName.startsWith(\"on\")) {\r\n      return createBindingNodeEvent;\r\n    } else {\r\n      return createBindingNodeProperty;\r\n    }\r\n  } else {\r\n    // それ以外は汎用プロパティバインディング\r\n    return createBindingNodeProperty;\r\n  }\r\n}\r\n\r\nconst _cache: {[key:string]:CreateBindingNodeFn} = {};\r\n\r\n/**\r\n * ノード・プロパティ名・フィルタ・デコレータ情報から\r\n * 適切なバインディングノード生成関数を取得し、呼び出すファクトリ関数。\r\n * \r\n * @param node         バインディング対象ノード\r\n * @param propertyName バインディングプロパティ名\r\n * @param filterTexts  フィルタ情報\r\n * @param decorates    デコレータ情報\r\n * @returns            バインディングノード生成関数の実行結果\r\n */\r\nexport function getBindingNodeCreator(\r\n  node        : Node, \r\n  propertyName: string,\r\n  filterTexts : IFilterText[],\r\n  decorates   : string[]\r\n): CreateBindingNodeByNodeFn {\r\n  const isComment = node instanceof Comment;\r\n  const isElement = node instanceof Element;\r\n  const key = isComment + \"\\t\" + isElement + \"\\t\" + propertyName;\r\n  // キャッシュを利用して生成関数を取得\r\n  const fn = _cache[key] ?? (_cache[key] = _getBindingNodeCreator(isComment, isElement, propertyName));\r\n  return fn(propertyName, filterTexts, decorates);\r\n}\r\n","\r\nconst symbolName = \"state\";\r\n\r\nexport const GetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.GetByRef`);\r\nexport const SetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.SetByRef`);\r\nexport const SetCacheableSymbol        : unique symbol = Symbol.for(`${symbolName}.SetCacheable`);\r\nexport const ConnectedCallbackSymbol   : unique symbol = Symbol.for(`${symbolName}.ConnectedCallback`);\r\nexport const DisconnectedCallbackSymbol: unique symbol = Symbol.for(`${symbolName}.DisconnectedCallback`);\r\n","/**\r\n * getStructuredPathInfo.ts\r\n *\r\n * Stateプロパティのパス文字列から、詳細な構造化パス情報（IStructuredPathInfo）を生成・キャッシュするユーティリティです。\r\n *\r\n * 主な役割:\r\n * - パス文字列を分割し、各セグメントやワイルドカード（*）の位置・親子関係などを解析\r\n * - cumulativePaths/wildcardPaths/parentPathなど、パス階層やワイルドカード階層の情報を構造化\r\n * - 解析結果をIStructuredPathInfoとしてキャッシュし、再利用性とパフォーマンスを両立\r\n * - reservedWords（予約語）チェックで安全性を担保\r\n *\r\n * 設計ポイント:\r\n * - パスごとにキャッシュし、同じパスへの複数回アクセスでも高速に取得可能\r\n * - ワイルドカードや親子関係、階層構造を厳密に解析し、バインディングや多重ループに最適化\r\n * - childrenプロパティでパス階層のツリー構造も構築\r\n * - 予約語や危険なパスはraiseErrorで例外を発生\r\n */\r\nimport { raiseError } from '../utils.js';\r\nimport { IStructuredPathInfo } from './types';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IStructuredPathInfo } = {};\r\n//const _cache: Map<string, IStructuredPathInfo> = new Map();\r\n\r\n/**\r\n * パターン情報を取得します\r\n * @param pattern パターン\r\n * @returns {IPatternInfo} パターン情報\r\n */\r\nclass StructuredPathInfo implements IStructuredPathInfo {\r\n  static id : number = 0;\r\n  id = ++StructuredPathInfo.id;\r\n  pattern;\r\n  pathSegments;\r\n  lastSegment;\r\n  cumulativePaths;\r\n  cumulativePathSet;\r\n  cumulativeInfos;\r\n  cumulativeInfoSet;\r\n  wildcardPaths;\r\n  wildcardPathSet;\r\n  wildcardInfos;\r\n  indexByWildcardPath;\r\n  wildcardInfoSet;\r\n  wildcardParentPaths;\r\n  wildcardParentPathSet;\r\n  wildcardParentInfos;\r\n  wildcardParentInfoSet;\r\n  lastWildcardPath;\r\n  lastWildcardInfo;\r\n  parentPath;\r\n  parentInfo;\r\n  wildcardCount;\r\n  children = {};\r\n\r\n  constructor(pattern: string) {\r\n    const getPattern = (_pattern: string): IStructuredPathInfo => {\r\n      return (pattern === _pattern) ? this : getStructuredPathInfo(_pattern);\r\n    };\r\n    const pathSegments = pattern.split(\".\");\r\n    const cumulativePaths = [];\r\n    const cumulativeInfos: IStructuredPathInfo[] = [];\r\n    const wildcardPaths = [];\r\n    const indexByWildcardPath: Record<string, number> = {};\r\n    const wildcardInfos = [];\r\n    const wildcardParentPaths = [];\r\n    const wildcardParentInfos = [];\r\n    let currentPatternPath = \"\", prevPatternPath = \"\";\r\n    let wildcardCount = 0;\r\n    for(let i = 0; i < pathSegments.length; i++) {\r\n      currentPatternPath += pathSegments[i];\r\n      if (pathSegments[i] === \"*\") {\r\n        wildcardPaths.push(currentPatternPath);\r\n        indexByWildcardPath[currentPatternPath] = wildcardCount;\r\n        wildcardInfos.push(getPattern(currentPatternPath));\r\n        wildcardParentPaths.push(prevPatternPath);\r\n        wildcardParentInfos.push(getPattern(prevPatternPath));\r\n        wildcardCount++;\r\n      }\r\n      cumulativePaths.push(currentPatternPath);\r\n      cumulativeInfos.push(getPattern(currentPatternPath));\r\n      prevPatternPath = currentPatternPath;\r\n      currentPatternPath += \".\";\r\n    }\r\n    const lastWildcardPath = wildcardPaths.length > 0 ? wildcardPaths[wildcardPaths.length - 1] : null;\r\n    const parentPath = cumulativePaths.length > 1 ? cumulativePaths[cumulativePaths.length - 2] : null;\r\n    this.pattern = pattern;\r\n    this.pathSegments = pathSegments;\r\n    this.lastSegment = pathSegments[pathSegments.length - 1];\r\n    this.cumulativePaths = cumulativePaths;\r\n    this.cumulativePathSet = new Set(cumulativePaths);\r\n    this.cumulativeInfos = cumulativeInfos;\r\n    this.cumulativeInfoSet = new Set(cumulativeInfos);\r\n    this.wildcardPaths = wildcardPaths;\r\n    this.wildcardPathSet = new Set(wildcardPaths);\r\n    this.indexByWildcardPath = indexByWildcardPath;\r\n    this.wildcardInfos = wildcardInfos;\r\n    this.wildcardInfoSet = new Set(wildcardInfos);\r\n    this.wildcardParentPaths = wildcardParentPaths;\r\n    this.wildcardParentPathSet = new Set(wildcardParentPaths);\r\n    this.wildcardParentInfos = wildcardParentInfos;\r\n    this.wildcardParentInfoSet = new Set(wildcardParentInfos);\r\n    this.lastWildcardPath = lastWildcardPath;\r\n    this.lastWildcardInfo = lastWildcardPath ? getPattern(lastWildcardPath) : null;\r\n    this.parentPath = parentPath;\r\n    this.parentInfo = parentPath ? getPattern(parentPath) : null;\r\n    this.wildcardCount = wildcardCount;\r\n    if (this.parentInfo) {\r\n      this.parentInfo.children[this.lastSegment] = this;\r\n    }\r\n  }\r\n}\r\n\r\nconst reservedWords = new Set([\r\n  \"constructor\", \"prototype\", \"__proto__\", \"toString\",\r\n  \"valueOf\", \"hasOwnProperty\", \"isPrototypeOf\",\r\n  \"watch\", \"unwatch\", \"eval\", \"arguments\",\r\n  \"let\", \"var\", \"const\", \"class\", \"function\",\r\n  \"null\", \"true\", \"false\", \"new\", \"return\",\r\n]);\r\n\r\nexport function getStructuredPathInfo(structuredPath: string): IStructuredPathInfo {\r\n  let info: IStructuredPathInfo | undefined;\r\n  info = _cache[structuredPath];\r\n  if (typeof info !== \"undefined\") {\r\n    return info;\r\n  }\r\n  if (reservedWords.has(structuredPath)) {\r\n    raiseError(`getStructuredPathInfo: pattern is reserved word: ${structuredPath}`);\r\n  }\r\n  return (_cache[structuredPath] = new StructuredPathInfo(structuredPath));\r\n}\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { GetByRefSymbol, SetByRefSymbol } from \"../../StateClass/symbols.js\";\r\nimport { IReadonlyStateProxy, IWritableStateProxy } from \"../../StateClass/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\n/**\r\n * BindingStateクラスは、バインディング対象の状態（State）プロパティへのアクセス・更新・フィルタ適用を担当する実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング対象の状態プロパティ（pattern, info）やリストインデックス（listIndex）を管理\r\n * - get valueで現在の値を取得し、get filteredValueでフィルタ適用後の値を取得\r\n * - initでリストバインディング時のループコンテキストやインデックス参照を初期化\r\n * - assignValueで状態プロキシに値を書き込む（双方向バインディング対応）\r\n * - バインディング情報をエンジンに登録し、依存解決や再描画を効率化\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードパス（配列バインディング等）にも対応し、ループごとのインデックス管理が可能\r\n * - フィルタ適用は配列で柔軟に対応\r\n * - createBindingStateファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingState implements IBindingState {\r\n  #binding     : IBinding;\r\n  #pattern     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IReadonlyStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return this.#pattern;\r\n  }\r\n  get info() {\r\n    return this.#info;\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IReadonlyStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#pattern = pattern;\r\n    this.#info = getStructuredPathInfo(pattern);\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.#state[GetByRefSymbol](this.info, this.listIndex);\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    if (this.info.wildcardCount > 0) {\r\n      const lastWildcardPath = this.info.lastWildcardPath ?? \r\n        raiseError(`BindingState.init: wildcardLastParentPath is null`);\r\n      const loopContext = this.binding.parentBindContent.currentLoopContext?.find(lastWildcardPath) ?? \r\n        raiseError(`BindingState.init: loopContext is null`);\r\n      this.#listIndexRef = loopContext.listIndexRef;\r\n    }\r\n    this.binding.engine.saveBinding(this.info, this.listIndex, this.binding);\r\n  }\r\n  assignValue(writeState: IWritableStateProxy, value: any) {\r\n    writeState[SetByRefSymbol](this.info, this.listIndex, value);\r\n  }\r\n}\r\n\r\nexport const createBindingState: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IReadonlyStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n    return new BindingState(binding, state, name, filterFns);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IReadonlyStateProxy, IWritableStateProxy } from \"../../StateClass/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\n/**\r\n * BindingStateIndexクラスは、forバインディング等のループ内で利用される\r\n * インデックス値（$1, $2, ...）のバインディング状態を管理する実装です。\r\n *\r\n * 主な役割:\r\n * - ループコンテキストからインデックス値を取得し、value/filteredValueで参照可能にする\r\n * - バインディング時にbindingsByListIndexへ自身を登録し、依存解決や再描画を効率化\r\n * - フィルタ適用にも対応\r\n *\r\n * 設計ポイント:\r\n * - pattern（例: \"$1\"）からインデックス番号を抽出し、ループコンテキストから該当インデックスを取得\r\n * - initでループコンテキストやlistIndexRefを初期化し、バインディング情報をエンジンに登録\r\n * - assignValueは未実装（インデックスは書き換え不可のため）\r\n * - createBindingStateIndexファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingStateIndex implements IBindingState {\r\n  #binding     : IBinding;\r\n  #indexNumber : number;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IReadonlyStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get info() {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IReadonlyStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    const indexNumber = Number(pattern.slice(1));\r\n    if (isNaN(indexNumber)) {\r\n      raiseError(\"BindingStateIndex: pattern is not a number\");\r\n    }\r\n    this.#indexNumber = indexNumber;\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.listIndex?.index ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext ??\r\n      raiseError(`BindingState.init: loopContext is null`);\r\n    const loopContexts = loopContext.serialize();\r\n    this.#listIndexRef = loopContexts[this.#indexNumber - 1].listIndexRef ??\r\n      raiseError(`BindingState.init: listIndexRef is null`);\r\n    const listIndex = this.listIndex ?? raiseError(\"listIndex is null\");\r\n    const bindings = this.binding.engine.bindingsByListIndex.get(listIndex);\r\n    if (bindings === undefined) {\r\n      this.binding.engine.bindingsByListIndex.set(listIndex, new Set([this.binding]));\r\n    } else {\r\n      bindings.add(this.binding);\r\n    }\r\n  }\r\n  assignValue(writeState:IWritableStateProxy, value:any): void {\r\n    raiseError(\"BindingStateIndex: assignValue is not implemented\");\r\n  }\r\n}\r\n\r\nexport const createBindingStateIndex: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IReadonlyStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n\r\n    return new BindingStateIndex(binding, state, name, filterFns);\r\n  }\r\n","import { createBindingState } from \"../DataBinding/BindingState/BindingState.js\";\r\nimport { createBindingStateIndex } from \"../DataBinding/BindingState/BindingStateIndex.js\";\r\nimport { CreateBindingStateByStateFn } from \"../DataBinding/BindingState/types\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nconst ereg = new RegExp(/^\\$\\d+$/);\r\n\r\n/**\r\n * バインディング対象の状態プロパティ名とフィルタ情報から、\r\n * 適切なバインディング状態生成関数（CreateBindingStateByStateFn）を返すユーティリティ。\r\n *\r\n * - プロパティ名が \"$数字\"（例: \"$1\"）の場合は createBindingStateIndex を使用（インデックスバインディング用）\r\n * - それ以外は通常の createBindingState を使用\r\n *\r\n * @param name        バインディング対象の状態プロパティ名\r\n * @param filterTexts フィルタ情報\r\n * @returns           バインディング状態生成関数\r\n */\r\nexport function getBindingStateCreator(\r\n  name       : string, \r\n  filterTexts: IFilterText[]\r\n): CreateBindingStateByStateFn {\r\n  if (ereg.test(name)) {\r\n    // \"$数字\"形式の場合はインデックスバインディング用の生成関数を返す\r\n    return createBindingStateIndex(name, filterTexts);\r\n  } else {\r\n    // 通常のプロパティ名の場合は標準の生成関数を返す\r\n    return createBindingState(name, filterTexts);\r\n  }\r\n}","import { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst createNodeKey = (node:Node):string => node.constructor.name + \"\\t\" + ((node instanceof Comment) ? (node.textContent?.[2] ?? \"\") : \"\");\r\n\r\ntype NodeTypeByNodeKey = {\r\n  [nodeKey:string]:NodeType;\r\n};\r\n\r\nconst nodeTypeByNodeKey:NodeTypeByNodeKey = {};\r\n\r\nconst getNodeTypeByNode = (node:Node):NodeType =>\r\n  (node instanceof Comment && node.textContent?.[2] === \":\") ? \"Text\" : \r\n  (node instanceof HTMLElement) ? \"HTMLElement\" :\r\n  (node instanceof Comment && node.textContent?.[2] === \"|\") ? \"Template\" : \r\n  (node instanceof SVGElement) ? \"SVGElement\" : raiseError(`Unknown NodeType: ${node.nodeType}`);\r\n\r\n/**\r\n * ノードのタイプ（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）を判定・キャッシュするユーティリティ関数。\r\n *\r\n * - コメントノードの場合、3文字目が \":\" なら \"Text\"、\"|\" なら \"Template\" と判定\r\n * - HTMLElement, SVGElement もそれぞれ判定\r\n * - 未知のノード型はエラー\r\n * - ノードごとに一意なキー（constructor名＋コメント種別）でキャッシュし、再判定を省略\r\n *\r\n * @param node    判定対象のノード\r\n * @param nodeKey キャッシュ用のノードキー（省略時は自動生成）\r\n * @returns       ノードタイプ（NodeType）\r\n */\r\nexport function getNodeType(\r\n  node   : Node, \r\n  nodeKey: string = createNodeKey(node)\r\n): NodeType {\r\n  return nodeTypeByNodeKey[nodeKey] ?? (nodeTypeByNodeKey[nodeKey] = getNodeTypeByNode(node));\r\n}\r\n","import { IFilterText, IBindText } from \"./types\";\r\n\r\nconst trim = (s:string):string => s.trim();\r\n\r\nconst has = (s:string):boolean => s.length > 0; // check length\r\n\r\nconst re = new RegExp(/^#(.*)#$/);\r\nconst decode = (s:string):string => {\r\n  const m = re.exec(s);\r\n  return m ? decodeURIComponent(m[1]) : s;\r\n};\r\n\r\n/**\r\n * parse filter part\r\n * \"eq,100|falsey\" ---> [Filter(eq, [100]), Filter(falsey)]\r\n */\r\nconst parseFilter = (text:string): IFilterText => {\r\n  const [name, ...options] = text.split(\",\").map(trim);\r\n  return {name, options:options.map(decode)};\r\n};\r\n\r\ntype ReturnParseStateProperty = {property:string,filters:IFilterText[]};\r\n/**\r\n * parse expression\r\n * \"value|eq,100|falsey\" ---> [\"value\", Filter[]]\r\n */\r\nconst parseProperty = (text:string): ReturnParseStateProperty => {\r\n  const [property, ...filterTexts] = text.split(\"|\").map(trim);\r\n  return {property, filters:filterTexts.map(parseFilter)};\r\n};\r\n\r\n/**\r\n * parse expressions\r\n * \"textContent:value|eq,100|falsey\" ---> [\"textContent\", \"value\", Filter[eq, falsey]]\r\n */\r\nconst parseExpression = (expression:string): IBindText => {\r\n  const [ bindExpression, decoratesExpression = null ] = expression.split(\"@\").map(trim);\r\n  const decorates = decoratesExpression ? decoratesExpression.split(\",\").map(trim) : [];\r\n  const [nodePropertyText, statePropertyText] = bindExpression.split(\":\").map(trim);\r\n  const { property:nodeProperty, filters:inputFilterTexts } = parseProperty(nodePropertyText);\r\n  const { property:stateProperty, filters:outputFilterTexts } = parseProperty(statePropertyText);\r\n  return { nodeProperty, stateProperty, inputFilterTexts, outputFilterTexts, decorates };\r\n};\r\n\r\n/**\r\n * parse bind text and return BindText[]\r\n */\r\nconst parseExpressions = (text:string): IBindText[] => {\r\n  return text.split(\";\").map(trim).filter(has).map(s => parseExpression(s));\r\n};\r\n\r\nconst cache:{[key:string]: IBindText[]} = {};\r\n\r\n/**\r\n * バインドテキスト（data-bind属性やコメント等から取得した文字列）を解析し、\r\n * バインディング情報（IBindText[]）に変換するユーティリティ関数群。\r\n *\r\n * - フィルターやデコレータ、プロパティ名などをパースし、構造化データとして返す\r\n * - \"textContent:value|eq,100|falsey@decorate1,decorate2\" のような複雑な記法にも対応\r\n * - セミコロン区切りで複数バインドもサポート\r\n * - パース結果はキャッシュし、同じ入力の再解析を防止\r\n *\r\n * @param text バインドテキスト\r\n * @returns    解析済みバインディング情報（IBindText[]）\r\n */\r\nexport function parseBindText(\r\n  text: string\r\n): IBindText[] {\r\n  if (text.trim() === \"\") {\r\n    return [];\r\n  }\r\n  return cache[text] ?? (cache[text] = parseExpressions(text));\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DATASET_BIND_PROPERTY = 'data-bind';\r\n\r\nconst removeAttributeFromElement = (node:Node):void => {\r\n  const element = node as Element;\r\n  element.removeAttribute(DATASET_BIND_PROPERTY);\r\n}\r\n\r\ntype RemoveAttributeByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>void) | undefined;\r\n}\r\n\r\nconst removeAttributeByNodeType:RemoveAttributeByNodeType = {\r\n  HTMLElement: removeAttributeFromElement,\r\n  SVGElement : removeAttributeFromElement,\r\n  Text       : undefined,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * 指定ノードから data-bind 属性を削除するユーティリティ関数。\r\n *\r\n * - ノードタイプ（HTMLElement, SVGElement）の場合のみ data-bind 属性を削除\r\n * - Text, Template ノードは対象外\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"HTMLElement\" | \"SVGElement\" | \"Text\" | \"Template\"）\r\n * @returns        なし\r\n */\r\nexport function removeDataBindAttribute(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n):void {\r\n  return removeAttributeByNodeType[nodeType]?.(node);\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst replaceTextNodeText = (node:Node):Node => {\r\n  const textNode = document.createTextNode(\"\");\r\n  node.parentNode?.replaceChild(textNode, node);\r\n  return textNode;\r\n}\r\n\r\ntype ReplaceTextNodeFn = {\r\n  [key in NodeType]: ((node:Node)=>Node) | undefined;\r\n}\r\n\r\nconst replaceTextNodeFn:ReplaceTextNodeFn = {\r\n  Text       : replaceTextNodeText,\r\n  HTMLElement: undefined,\r\n  Template   : undefined,\r\n  SVGElement : undefined\r\n}\r\n\r\n/**\r\n * コメントノードをテキストノードに置き換えるユーティリティ関数。\r\n *\r\n * - ノードタイプが \"Text\" の場合のみ、コメントノードを空のテキストノードに置換する\r\n * - それ以外のノードタイプ（HTMLElement, Template, SVGElement）は何もしない\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）\r\n * @returns        置換後のノード（または元のノード）\r\n */\r\nexport function replaceTextNodeFromComment(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): Node {\r\n  return replaceTextNodeFn[nodeType]?.(node) ?? node;\r\n}\r\n","import { getAbsoluteNodePath } from \"./getAbsoluteNodePath.js\";\r\nimport { getBindingNodeCreator } from \"./getBindingNodeCreator.js\";\r\nimport { getBindingStateCreator } from \"./getBindingStateCreator.js\";\r\nimport { getDataBindText } from \"./getDataBindText.js\";\r\nimport { getNodeType } from \"./getNodeType.js\";\r\nimport { parseBindText } from \"./parseBindText.js\";\r\nimport { removeDataBindAttribute } from \"./removeDataBindAttribute.js\";\r\nimport { replaceTextNodeFromComment } from \"./replaceTextNodeFromComment.js\";\r\nimport { IBindingCreator, IBindText, IDataBindAttributes, NodePath, NodeType } from \"./types\";\r\n\r\n/**\r\n * DataBindAttributesクラスは、DOMノードからバインディング情報を抽出・解析し、\r\n * バインディング生成に必要な情報（ノード種別・パス・バインドテキスト・クリエイター）を管理します。\r\n *\r\n * - ノード種別やパスを特定\r\n * - data-bind属性やコメントノードからバインドテキストを取得・解析\r\n * - バインドテキストごとにバインディング生成関数（ノード用・状態用）を用意\r\n * - data-bind属性やコメントノードはパース後に削除・置換\r\n *\r\n * これにより、テンプレート内のバインディング定義を一元的に管理し、後続のバインディング構築処理を効率化します。\r\n */\r\nclass DataBindAttributes implements IDataBindAttributes {\r\n  nodeType     : NodeType; // ノードの種別\r\n  nodePath     : NodePath; // ノードのルート\r\n  bindTexts    : IBindText[]; // BINDテキストの解析結果\r\n  creatorByText: Map<IBindText, IBindingCreator> = new Map(); // BINDテキストからバインディングクリエイターを取得\r\n  constructor(node: Node) {\r\n    this.nodeType = getNodeType(node);\r\n    const text = getDataBindText(this.nodeType, node);\r\n\r\n    // コメントノードの場合はTextノードに置換（template.contentが書き換わる点に注意）\r\n    node = replaceTextNodeFromComment(node, this.nodeType);\r\n\r\n    // data-bind属性を削除（パース後は不要なため）\r\n    removeDataBindAttribute(node, this.nodeType);\r\n\r\n    this.nodePath = getAbsoluteNodePath(node);\r\n    this.bindTexts = parseBindText(text);\r\n\r\n    // 各バインドテキストごとにバインディング生成関数を用意\r\n    for(let i = 0; i < this.bindTexts.length; i++) {\r\n      const bindText = this.bindTexts[i];\r\n      const creator: IBindingCreator = {\r\n        createBindingNode : getBindingNodeCreator(\r\n          node, \r\n          bindText.nodeProperty, \r\n          bindText.inputFilterTexts,\r\n          bindText.decorates\r\n        ),\r\n        createBindingState: getBindingStateCreator(\r\n          bindText.stateProperty, \r\n          bindText.outputFilterTexts\r\n        ),\r\n      }\r\n      this.creatorByText.set(bindText, creator);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * 指定ノードからDataBindAttributesインスタンスを生成するファクトリ関数。\r\n */\r\nexport function createDataBindAttributes(node: Node): IDataBindAttributes {\r\n  return new DataBindAttributes(node);\r\n}","import { COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst COMMENT_EMBED_MARK_LEN = COMMENT_EMBED_MARK.length;\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\n/**\r\n * ノード種別ごとにdata-bindテキスト（バインディング定義文字列）を取得するユーティリティ関数。\r\n *\r\n * - Textノード: コメントマーク以降のテキストを取得し、\"textContent:\"を付与\r\n * - HTMLElement: data-bind属性値を取得\r\n * - Templateノード: コメントマーク以降のIDからテンプレートを取得し、そのdata-bind属性値を取得\r\n * - SVGElement: data-bind属性値を取得\r\n *\r\n * @param nodeType ノード種別（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）\r\n * @param node     対象ノード\r\n * @returns        バインディング定義文字列\r\n */\r\nexport function getDataBindText(nodeType: NodeType, node: Node): string {\r\n  switch (nodeType) {\r\n    case \"Text\": {\r\n      const text = node.textContent?.slice(COMMENT_EMBED_MARK_LEN).trim() ?? \"\";\r\n      return \"textContent:\" + text;\r\n    }\r\n    case \"HTMLElement\": {\r\n      return (node as HTMLElement).getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n    }\r\n    case \"Template\": {\r\n      const text = node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN).trim();\r\n      const id = Number(text);\r\n      const template = getTemplateById(id) ?? raiseError(`Template not found: ${text}`);\r\n      return template.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n    }\r\n    case \"SVGElement\": {\r\n      return (node as SVGElement).getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n    }\r\n    default:\r\n      return \"\";\r\n  }\r\n}","import { NodePath } from \"./types\";\r\n\r\n/**\r\n * 指定ノードの「親からのインデックス」をルートまで辿り、絶対パス（NodePath）として返すユーティリティ関数。\r\n *\r\n * 例: ルートから見て [0, 2, 1] のような配列を返す。\r\n *     これは「親→子→孫…」とたどったときの各階層でのインデックスを表す。\r\n *\r\n * @param node 対象のDOMノード\r\n * @returns    ルートからこのノードまでのインデックス配列（NodePath）\r\n */\r\nexport function getAbsoluteNodePath(node: Node): NodePath {\r\n  let routeIndexes: NodePath = [];\r\n  while(node.parentNode !== null) {\r\n    const childNodes = Array.from(node.parentNode.childNodes) as Node[];\r\n    routeIndexes = [ childNodes.indexOf(node), ...routeIndexes ];\r\n    node = node.parentNode;\r\n  }\r\n  return routeIndexes;\r\n}","import { DATA_BIND_ATTRIBUTE, COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK } from \"../constants.js\";\r\n\r\n/**\r\n * \"@@:\"もしくは\"@@|\"で始まるコメントノードを取得する\r\n */\r\nfunction isCommentNode(node: Node): boolean {\r\n  return node instanceof Comment && (\r\n    (node.textContent?.indexOf(COMMENT_EMBED_MARK) === 0) || (node.textContent?.indexOf(COMMENT_TEMPLATE_MARK) === 0)\r\n  );\r\n} \r\n\r\n/**\r\n * 指定ノード以下のツリーから「data-bind属性を持つ要素」または\r\n * 「特定のマーク（@@: または @@|）で始まるコメントノード」をすべて取得するユーティリティ関数。\r\n *\r\n * - Elementノードの場合: data-bind属性があるものだけを抽出\r\n * - Commentノードの場合: COMMENT_EMBED_MARK または COMMENT_TEMPLATE_MARK で始まるものだけを抽出\r\n * - DOMツリー全体をTreeWalkerで効率的に走査\r\n *\r\n * @param root 探索の起点となるノード\r\n * @returns    条件に合致したノードの配列\r\n */\r\nexport function getNodesHavingDataBind(root: Node): Node[] {\r\n  const nodes: Node[] = [];\r\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT, {\r\n    acceptNode(node:Node) {\r\n      return (node instanceof Element) ? \r\n        (node.hasAttribute(DATA_BIND_ATTRIBUTE) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP)\r\n        : (isCommentNode(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP);\r\n    }\r\n  });\r\n  while (walker.nextNode()) {\r\n    nodes.push(walker.currentNode);\r\n  }\r\n  return nodes;\r\n}\r\n\r\n","import { createDataBindAttributes } from \"./createDataBindAttributes.js\";\r\nimport { getNodesHavingDataBind } from \"./getNodesHavingDataBind.js\";\r\nimport { IDataBindAttributes } from \"./types\";\r\n\r\nconst listDataBindAttributesById: {[key:number]:IDataBindAttributes[]} = {};\r\n\r\nconst listPathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nconst pathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nfunction getDataBindAttributesFromTemplate(content: DocumentFragment): IDataBindAttributes[] {\r\n  const nodes = getNodesHavingDataBind(content);\r\n  return nodes.map(node => createDataBindAttributes(node));\r\n}\r\n\r\n/**\r\n * テンプレート（DocumentFragment）内のバインディング情報（data-bind属性やコメント）を解析・登録し、\r\n * 各テンプレートIDごとにバインディング属性情報・状態パス集合を管理するユーティリティ。\r\n *\r\n * - getNodesHavingDataBindで対象ノードを抽出し、createDataBindAttributesで解析\r\n * - 各テンプレートIDごとにバインディング属性リスト・状態パス集合・リストパス集合をキャッシュ\r\n * - forバインディング（ループ）のstatePropertyはlistPathsにも登録\r\n *\r\n * @param id      テンプレートID\r\n * @param content テンプレートのDocumentFragment\r\n * @param rootId  ルートテンプレートID（省略時はidと同じ）\r\n * @returns       解析済みバインディング属性リスト\r\n */\r\nexport function registerDataBindAttributes(\r\n  id     : number, \r\n  content: DocumentFragment,\r\n  rootId : number = id\r\n): IDataBindAttributes[] {\r\n  const dataBindAttributes = getDataBindAttributesFromTemplate(content);\r\n  const paths = pathsSetById[rootId] ?? (pathsSetById[rootId] = new Set<string>());\r\n  const listPaths = listPathsSetById[rootId] ?? (listPathsSetById[rootId] = new Set<string>());\r\n  for(let i = 0; i < dataBindAttributes.length; i++) {\r\n    const attribute = dataBindAttributes[i];\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      paths.add(bindText.stateProperty);\r\n      if (bindText.nodeProperty === \"for\") {\r\n        listPaths.add(bindText.stateProperty);\r\n      }\r\n    }\r\n  }\r\n  return listDataBindAttributesById[id] = dataBindAttributes;\r\n}\r\n\r\n/**\r\n * テンプレートIDからバインディング属性リストを取得\r\n */\r\nexport const getDataBindAttributesById = (id: number): IDataBindAttributes[] => {\r\n  return listDataBindAttributesById[id];\r\n}\r\n\r\n/**\r\n * テンプレートIDからforバインディングのstateProperty集合を取得\r\n */\r\nexport const getListPathsSetById = (id: number): Set<string> => {\r\n  return listPathsSetById[id] ?? [];\r\n};\r\n\r\n/**\r\n * テンプレートIDから全バインディングのstateProperty集合を取得\r\n */\r\nexport const getPathsSetById = (id: number): Set<string> => {\r\n  return pathsSetById[id] ?? [];\r\n};","/**\r\n * registerTemplate.ts\r\n *\r\n * HTMLTemplateElementをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - templateById: IDをキーにHTMLTemplateElementを管理するレコード\r\n * - registerTemplate: 指定IDでテンプレートを登録し、空テキストノード除去やデータバインド属性の登録も実行\r\n * - getTemplateById: 指定IDのテンプレートを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - テンプレート登録時にremoveEmptyTextNodesで空テキストノードを除去し、クリーンなDOMを維持\r\n * - registerDataBindAttributesでデータバインド属性を自動付与\r\n * - グローバルにテンプレートを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { registerDataBindAttributes } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { removeEmptyTextNodes } from \"./removeEmptyTextNodes.js\";\r\n\r\nconst templateById:Record<number, HTMLTemplateElement> = {};\r\n\r\nexport function registerTemplate(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number\r\n): number {\r\n  removeEmptyTextNodes(template.content);\r\n  registerDataBindAttributes(id, template.content, rootId);  \r\n  templateById[id] = template;\r\n  return id;\r\n}\r\n\r\nexport function getTemplateById(id: number): HTMLTemplateElement {\r\n  return templateById[id] ?? raiseError(`getTemplateById: template not found: ${id}`);\r\n}","/**\r\n * removeEmptyTextNodes.ts\r\n *\r\n * DocumentFragment内の空テキストノードを削除するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - content（DocumentFragment）の直下にある空白のみのテキストノードを検出し、削除する\r\n *\r\n * 設計ポイント:\r\n * - childNodesをArray.fromで配列化し、forEachで全ノードを走査\r\n * - nodeTypeがTEXT_NODEかつ、nodeValueが空白のみの場合にremoveChildで削除\r\n * - テンプレート処理やクリーンなDOM生成時に利用\r\n */\r\nexport function removeEmptyTextNodes(content:DocumentFragment):void {\r\n  Array.from(content.childNodes).forEach(node => {\r\n    if (node.nodeType === Node.TEXT_NODE && !(node.nodeValue ?? \"\").trim()) {\r\n      content.removeChild(node);\r\n    }\r\n  });  \r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IReadonlyStateProxy, IWritableStateProxy } from \"../StateClass/types\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { CreateBindingNodeByNodeFn, IBindingNode } from \"./BindingNode/types\";\r\nimport { CreateBindingStateByStateFn, IBindingState } from \"./BindingState/types\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\n\r\n/**\r\n * Bindingクラスは、1つのバインディング（ノードと状態の対応）を管理する中核的な実装です。\r\n *\r\n * 主な役割:\r\n * - DOMノードと状態（State）を結びつけるバインディングノード（bindingNode）とバインディング状態（bindingState）の生成・管理\r\n * - バインディングの初期化（init）、再描画（render）、状態値の更新（updateStateValue）などの処理を提供\r\n * - バージョン管理により、不要な再描画を防止\r\n *\r\n * 設計ポイント:\r\n * - createBindingNode, createBindingStateファクトリで柔軟なバインディング構造に対応\r\n * - renderでバージョン差分がある場合のみバインディングノードを更新\r\n * - 双方向バインディング時はupdateStateValueで状態プロキシに値を反映\r\n * - createBinding関数で一貫したバインディング生成を提供\r\n */\r\nclass Binding implements IBinding {\r\n  parentBindContent: IBindContent;\r\n  node             : Node;\r\n  engine           : IComponentEngine;\r\n  bindingNode      : IBindingNode;\r\n  bindingState     : IBindingState;\r\n  version          : number | undefined;\r\n  constructor(\r\n    parentBindContent : IBindContent,\r\n    node              : Node,\r\n    engine            : IComponentEngine,\r\n    createBindingNode : CreateBindingNodeByNodeFn, \r\n    createBindingState: CreateBindingStateByStateFn,\r\n  ) {\r\n    this.parentBindContent = parentBindContent\r\n    this.node = node;\r\n    this.engine = engine\r\n    this.bindingNode = createBindingNode(this, node, engine.inputFilters);\r\n    this.bindingState = createBindingState(this, engine.readonlyState, engine.outputFilters);\r\n  }\r\n\r\n  get bindContents() {\r\n    return this.bindingNode.bindContents;\r\n  }\r\n\r\n  init() {\r\n    this.bindingNode.init();\r\n    this.bindingState.init();\r\n  }\r\n\r\n  render() {\r\n    if (this.version !== this.engine.updater.version) {\r\n      try {\r\n        this.bindingNode.update();\r\n      } finally {\r\n        this.version = this.engine.updater.version;\r\n      }\r\n    }\r\n  }\r\n\r\n  updateStateValue(writeState:IWritableStateProxy, value: any) {\r\n    return this.bindingState.assignValue(writeState, value);\r\n  }\r\n\r\n  notifyRedraw(refs: IStatePropertyRef[]) {\r\n    this.bindingNode.notifyRedraw(refs);\r\n  }\r\n}\r\n\r\n/**\r\n * バインディング生成用ファクトリ関数\r\n * - 各種ファクトリ・エンジン・ノード情報からBindingインスタンスを生成\r\n */\r\nexport function createBinding(\r\n  parentBindContent : IBindContent,\r\n  node              : Node, \r\n  engine            : IComponentEngine, \r\n  createBindingNode : CreateBindingNodeByNodeFn, \r\n  createBindingState: CreateBindingStateByStateFn\r\n): IBinding {\r\n  return new Binding(\r\n    parentBindContent, \r\n    node, \r\n    engine, \r\n    createBindingNode, \r\n    createBindingState\r\n  );\r\n}","/**\r\n * createLoopContext.ts\r\n *\r\n * ループバインディング（for等）で利用するLoopContext（ループコンテキスト）管理クラスとファクトリ関数の実装です。\r\n *\r\n * 主な役割:\r\n * - ループごとのプロパティパス・インデックス・BindContentを紐付けて管理\r\n * - 親ループコンテキストの探索やキャッシュ、インデックスの再割り当て・クリアなどを提供\r\n * - ループ階層をたどるwalk/serializeや、名前でのfind検索も可能\r\n *\r\n * 設計ポイント:\r\n * - WeakRefでlistIndexを保持し、GCフレンドリーな設計\r\n * - parentLoopContextで親ループを遅延探索・キャッシュし、効率的な親子関係管理を実現\r\n * - findで名前からループコンテキストを高速検索（キャッシュ付き）\r\n * - walk/serializeでループ階層をたどる処理を簡潔に記述可能\r\n * - createLoopContextファクトリで一貫した生成・管理が可能\r\n */\r\nimport { IBindContent } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { ILoopContext } from \"./types\";\r\n\r\nclass LoopContext implements ILoopContext {\r\n  #path     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null;\r\n  #bindContent : IBindContent;\r\n  constructor(\r\n    path    : string | null,\r\n    listIndex  : IListIndex,\r\n    bindContent: IBindContent\r\n  ) {\r\n    this.#path = path ?? raiseError(\"name is required\");\r\n    this.#info = getStructuredPathInfo(this.#path);\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    this.#bindContent = bindContent;\r\n  }\r\n  get path(): string {\r\n    return this.#path;\r\n  }\r\n  get info(): IStructuredPathInfo {\r\n    return this.#info;\r\n  }\r\n  get listIndex(): IListIndex {\r\n    return this.#listIndexRef?.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get listIndexRef(): WeakRef<IListIndex> {\r\n    return this.#listIndexRef ?? raiseError(\"listIndexRef is null\");\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    // 構造は変わらないので、#parentLoopContext、#cacheはクリアする必要はない\r\n  }\r\n  clearListIndex():void {\r\n    this.#listIndexRef = null;\r\n  }\r\n  get bindContent(): IBindContent {\r\n    return this.#bindContent;\r\n  }\r\n\r\n  #parentLoopContext: ILoopContext | null | undefined;\r\n  get parentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#parentLoopContext === \"undefined\") {\r\n      let currentBinding: IBindContent | null = this.bindContent;\r\n      while(currentBinding !== null) {\r\n        if (currentBinding.loopContext !== null && currentBinding.loopContext !== this) {\r\n          this.#parentLoopContext = currentBinding.loopContext;\r\n          break;\r\n        }\r\n        currentBinding = currentBinding.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      if (typeof this.#parentLoopContext === \"undefined\") this.#parentLoopContext = null;\r\n    }\r\n    return this.#parentLoopContext;\r\n  }\r\n\r\n  #cache:Record<string, ILoopContext | null> = {};\r\n  find(name: string): ILoopContext | null {\r\n    let loopContext = this.#cache[name];\r\n    if (typeof loopContext === \"undefined\") {\r\n      let currentLoopContext: ILoopContext | null = this;\r\n      while(currentLoopContext !== null) {\r\n        if (currentLoopContext.path === name) break;\r\n        currentLoopContext = currentLoopContext.parentLoopContext;\r\n      }\r\n      loopContext = this.#cache[name] = currentLoopContext;\r\n    }\r\n    return loopContext;\r\n  }\r\n\r\n  walk(callback: (loopContext: ILoopContext) => void): void {\r\n    let currentLoopContext: ILoopContext | null = this;\r\n    while(currentLoopContext !== null) {\r\n      callback(currentLoopContext);\r\n      currentLoopContext = currentLoopContext.parentLoopContext;\r\n    }\r\n  }\r\n\r\n  serialize(): ILoopContext[] {\r\n    const results: ILoopContext[] = [];\r\n    this.walk((loopContext) => {\r\n      results.unshift(loopContext);\r\n    });\r\n    return results;\r\n  }\r\n\r\n}\r\n\r\n// 生成されたあと、IBindContentのloopContextに登録される\r\n// IBindContentにずっと保持される\r\nexport function createLoopContext(\r\n  pattern: string | null,\r\n  listIndex: IListIndex,\r\n  bindContent: IBindContent\r\n): ILoopContext {\r\n  return new LoopContext(pattern, listIndex, bindContent);\r\n}","/**\r\n * render.ts\r\n *\r\n * DataBindingのバインディング配列を受け取り、各バインディングのrender処理を実行するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - bindings配列を走査し、isSelectElementフラグが立っているものは後回しでレンダリング\r\n * - それ以外のバインディングは即時renderを実行\r\n * - select要素のバインディングは最後にまとめてrenderを実行（依存関係や描画順序の問題を回避）\r\n *\r\n * 設計ポイント:\r\n * - select要素の描画順序を制御することで、option要素のバインディングや値の整合性を担保\r\n * - 通常のバインディングとselect要素のバインディングを分離して処理\r\n */\r\nimport { IBinding } from \"../DataBinding/types\";\r\n\r\nexport function render(bindings: IBinding[]) {\r\n  const bindingsWithSelectElement = [];\r\n  for(let i = 0; i < bindings.length; i++) {\r\n    const binding = bindings[i];\r\n    if (binding.bindingNode.isSelectElement) {\r\n      bindingsWithSelectElement.push(binding);\r\n    } else {\r\n      binding.render();\r\n    }\r\n  }\r\n  for(let i = 0; i < bindingsWithSelectElement.length; i++) {\r\n    bindingsWithSelectElement[i].render();\r\n  }\r\n}\r\n","import { resolveNodeFromPath } from \"../BindingBuilder/resolveNodeFromPath.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { createBinding } from \"./Binding.js\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\nimport { createLoopContext } from \"../LoopContext/createLoopContext.js\";\r\nimport { render } from \"../Updater/render.js\";\r\nimport { getDataBindAttributesById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\n\r\nfunction createContent(id: number): DocumentFragment {\r\n  const template = getTemplateById(id) ?? \r\n    raiseError(`BindContent: template is not found: ${id}`);\r\n  return document.importNode(template.content, true);\r\n}\r\n\r\nfunction createBindings(\r\n  bindContent: IBindContent, \r\n  id         : number, \r\n  engine     : IComponentEngine, \r\n  content    : DocumentFragment\r\n): IBinding[] {\r\n  const attributes = getDataBindAttributesById(id) ?? \r\n    raiseError(`BindContent: data-bind is not set`);\r\n  const bindings: IBinding[] = [];\r\n  for(let i = 0; i < attributes.length; i++) {\r\n    const attribute = attributes[i];\r\n    const node = resolveNodeFromPath(content, attribute.nodePath) ?? \r\n      raiseError(`BindContent: node is not found: ${attribute.nodePath}`);\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      const creator = attribute.creatorByText.get(bindText) ?? \r\n        raiseError(`BindContent: creator is not found: ${bindText}`);\r\n      const binding = createBinding(\r\n        bindContent, \r\n        node, \r\n        engine, \r\n        creator.createBindingNode, \r\n        creator.createBindingState\r\n      );\r\n      bindings.push(binding);\r\n    }\r\n  }\r\n  return bindings;\r\n}\r\n\r\n/**\r\n * BindContentクラスは、テンプレートから生成されたDOM断片（DocumentFragment）と\r\n * そのバインディング情報（IBinding配列）を管理するための実装です。\r\n *\r\n * 主な役割:\r\n * - テンプレートIDからDOM断片を生成し、バインディング情報を構築\r\n * - mount/mountBefore/mountAfter/unmountでDOMへの挿入・削除を制御\r\n * - renderでバインディングの再描画、initで初期化処理を実行\r\n * - ループバインディング時のLoopContextやリストインデックス管理にも対応\r\n * - getLastNodeで再帰的に最後のノードを取得し、リスト描画や差し替えに利用\r\n * - assignListIndexでループ内のリストインデックスを再割り当てし、再初期化\r\n *\r\n * 設計ポイント:\r\n * - fragmentとchildNodesの両方を管理し、効率的なDOM操作を実現\r\n * - バインディング情報はテンプレートごとに動的に生成され、各ノードに紐付く\r\n * - ループや条件分岐など複雑なバインディング構造にも柔軟に対応\r\n * - createBindContentファクトリ関数で一貫した生成・初期化を提供\r\n */\r\nclass BindContent implements IBindContent {\r\n  loopContext  : ILoopContext | null;\r\n  parentBinding: IBinding | null;\r\n  childNodes   : Node[];\r\n  fragment     : DocumentFragment;\r\n  engine       : IComponentEngine | undefined;\r\n  #id;\r\n  get id() {\r\n    return this.#id;\r\n  }\r\n  get isMounted() {\r\n    return this.childNodes.length > 0 && this.childNodes[0].parentNode !== this.fragment;\r\n  }\r\n  get firstChildNode() {\r\n    return this.childNodes[0] ?? null;\r\n  }\r\n  get lastChildNode() {\r\n    return this.childNodes[this.childNodes.length - 1] ?? null;\r\n  }\r\n  getLastNode(parentNode: Node): Node | null {\r\n    const lastBinding = this.bindings[this.bindings.length - 1];\r\n    const lastChildNode = this.lastChildNode;\r\n    if (typeof lastBinding !== \"undefined\" && lastBinding.node === lastChildNode) {\r\n      if (lastBinding.bindContents.size > 0) {\r\n        const childBindContent = Array.from(lastBinding.bindContents).at(-1) ?? raiseError(`BindContent: childBindContent is not found`);\r\n        const lastNode = childBindContent.getLastNode(parentNode);\r\n        if (lastNode !== null) {\r\n          return lastNode;\r\n        }\r\n      }\r\n    }\r\n    if (parentNode !== lastChildNode?.parentNode) {\r\n      return null;\r\n    }\r\n    return lastChildNode;\r\n  }\r\n  #currentLoopContext: ILoopContext | null | undefined;\r\n  get currentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#currentLoopContext === \"undefined\") {\r\n      let bindContent: IBindContent | null = this;\r\n      while(bindContent !== null) {\r\n        if (bindContent.loopContext !== null) break; ;\r\n        bindContent = bindContent.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      this.#currentLoopContext = bindContent?.loopContext ?? null;\r\n    }\r\n    return this.#currentLoopContext;\r\n  }\r\n  constructor(\r\n    parentBinding: IBinding | null,\r\n    id           : number, \r\n    engine       : IComponentEngine, \r\n    loopContext  : string | null,\r\n    listIndex    : IListIndex | null\r\n  ) {\r\n    this.parentBinding = parentBinding;\r\n    this.#id = id;\r\n    this.fragment = createContent(id);\r\n    this.childNodes = Array.from(this.fragment.childNodes);\r\n    this.engine = engine;\r\n    this.loopContext = (listIndex !== null) ? createLoopContext(loopContext, listIndex, this) : null;\r\n    this.bindings = createBindings(\r\n      this, \r\n      id, \r\n      engine, \r\n      this.fragment\r\n    );\r\n  }\r\n  mount(parentNode: Node) {\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        parentNode.appendChild(this.childNodes[i]);\r\n      }\r\n    } else {\r\n      parentNode.appendChild(this.fragment);\r\n    }\r\n  }\r\n  mountBefore(parentNode: Node, beforeNode: Node | null) {\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n      }\r\n    } else {\r\n      parentNode.insertBefore(this.fragment, beforeNode);\r\n    }\r\n  }\r\n  mountAfter(parentNode: Node, afterNode: Node | null) {\r\n    const beforeNode = afterNode?.nextSibling ?? null;\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n      }\r\n    } else {\r\n      parentNode.insertBefore(this.fragment, beforeNode);\r\n    }\r\n  }\r\n  unmount() {\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      this.fragment.appendChild(this.childNodes[i]);\r\n    }\r\n  }\r\n  bindings: IBinding[] = [];\r\n  render() {\r\n    render(this.bindings);\r\n  }\r\n  init() {\r\n    this.bindings.forEach(binding => binding.init());\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    if (this.loopContext == null) raiseError(`BindContent: loopContext is null`);\r\n    this.loopContext.assignListIndex(listIndex);\r\n    this.init();\r\n  }\r\n}\r\n\r\nexport function createBindContent(\r\n  parentBinding: IBinding | null,\r\n  id           : number, \r\n  engine       :IComponentEngine, \r\n  loopContext  : string | null, \r\n  listIndex    :IListIndex | null\r\n):IBindContent {\r\n  const bindContent = new BindContent(\r\n    parentBinding, \r\n    id, \r\n    engine, \r\n    loopContext, \r\n    listIndex\r\n  );\r\n  bindContent.init();\r\n  return bindContent;\r\n}","import { NodePath } from \"./types\";\r\n\r\n/**\r\n * ルートノードとノードパス（インデックス配列）から、該当するノードを辿って取得するユーティリティ関数。\r\n *\r\n * - NodePathは各階層でのchildNodesのインデックスを表す配列\r\n * - ルートから順にchildNodes[index]を辿り、該当ノードを返す\r\n * - パスが不正な場合やノードが存在しない場合はnullを返す\r\n *\r\n * @param root  探索の起点となるルートノード\r\n * @param path  各階層のインデックス配列（NodePath）\r\n * @returns     パスで指定されたノード、またはnull\r\n */\r\nexport function resolveNodeFromPath(root: Node, path: NodePath): Node | null {\r\n  return path.reduce((node, index) => node?.childNodes[index] ?? null, root);\r\n}","/**\r\n * createDependencyEdge.ts\r\n *\r\n * 依存関係グラフのエッジ（IDependencyEdge）を生成・キャッシュするユーティリティです。\r\n *\r\n * 主な役割:\r\n * - IStructuredPathInfo（プロパティパス情報）とDependencyType（依存種別）から一意なキーを生成\r\n * - 同じ依存エッジはキャッシュし、重複生成を防止\r\n * - createDependencyEdgeでIDependencyEdgeインスタンスを取得（キャッシュ利用）\r\n *\r\n * 設計ポイント:\r\n * - createDependencyKeyで「パターン@種別」の一意キーを生成\r\n * - cacheオブジェクトでIDependencyEdgeを再利用し、メモリ効率と比較効率を向上\r\n */\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { DependencyType, IDependencyEdge } from \"./types\";\r\n\r\n/**\r\n * infoとtypeから依存関係エッジの一意キーを生成\r\n */\r\nexport function createDependencyKey(info: IStructuredPathInfo, type: DependencyType): string {\r\n  return `${info.pattern}@${type}`;\r\n}\r\n\r\nconst cache: {[key:string]:IDependencyEdge} = {};;\r\n\r\n/**\r\n * 依存関係エッジ（IDependencyEdge）を生成・キャッシュして返す\r\n */\r\nexport function createDependencyEdge(\r\n  info: IStructuredPathInfo,\r\n  type: DependencyType,\r\n): IDependencyEdge {\r\n  const key = createDependencyKey(info, type);\r\n  return cache[key] ?? (cache[key] = { info, type });\r\n}\r\n","/**\r\n * createDependencyWalker.ts\r\n *\r\n * 依存関係グラフを辿るためのDependencyWalkerクラスと、その生成ファクトリです。\r\n *\r\n * 主な役割:\r\n * - 依存関係グラフ（dependentTree）を深さ優先で再帰的に探索し、各依存ノードに対してコールバックを実行\r\n * - ループ検出のためにtracedセットで訪問済みノードを管理し、無限ループを防止\r\n * - 依存種別（DependencyType）に応じて探索方法を柔軟に切り替え\r\n *\r\n * 設計ポイント:\r\n * - walkSubで再帰的に依存ノードを探索し、structured依存の場合は親のtypeを引き継ぐ\r\n * - tracedセットで一度訪れたノードは再訪しない\r\n * - walkでエントリポイントから探索を開始し、コールバックを全ノードに適用\r\n * - createDependencyWalkerファクトリで一貫した生成・利用が可能\r\n */\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { createDependencyKey } from \"./createDependencyEdge\";\r\nimport { DependencyType } from \"./types\";\r\n\r\nclass dependencyWalker {\r\n  engine: IComponentEngine;\r\n  entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null };\r\n  traced: Set<string> = new Set<string>();\r\n  constructor(\r\n    engine: IComponentEngine,\r\n    entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null },\r\n  ) {\r\n    this.engine = engine;\r\n    this.entryRef = entryRef;\r\n  }\r\n\r\n  walkSub(\r\n    info: IStructuredPathInfo,\r\n    type: DependencyType,\r\n    callback: (ref: IStatePropertyRef, info: IStructuredPathInfo, type: DependencyType) => void\r\n  ) {\r\n    const key = createDependencyKey(info, type);\r\n    if (this.traced.has(key)) {\r\n      return;\r\n    }\r\n    this.traced.add(key);\r\n    callback(this.entryRef, info, type);\r\n    const edges = this.engine.dependentTree.get(info) ?? [];\r\n    for(const edge of edges) {\r\n      const overridedType = edge.type === \"structured\" ? type : edge.type;\r\n      this.walkSub(edge.info, overridedType, callback);\r\n    }\r\n\r\n  }\r\n  walk(\r\n    callback: (ref: IStatePropertyRef, info: IStructuredPathInfo, type: DependencyType) => void\r\n  ) {\r\n    const traced = new Set<IStructuredPathInfo>();\r\n    this.walkSub(this.entryRef.info, \"structured\", callback);\r\n  } \r\n\r\n}\r\n\r\nexport function createDependencyWalker(\r\n  engine: IComponentEngine,\r\n  entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null },\r\n) {\r\n  return new dependencyWalker(engine, entryRef);\r\n}","/**\r\n * createListIndex.ts\r\n *\r\n * リストバインディングやループ処理で利用する「リストインデックス」管理クラスとファクトリ関数の実装です。\r\n *\r\n * 主な役割:\r\n * - ListIndexクラスで多重ループやネスト構造のインデックス情報をツリー状に管理\r\n * - indexes, position, lengthなどで階層的なインデックス情報を取得可能\r\n * - iterator/reverseIteratorで親子関係を辿るイテレータを提供\r\n * - atメソッドで指定位置のListIndexをキャッシュ付きで取得（WeakRefによるメモリ効率化）\r\n * - truncateで指定長さまでの親ListIndexを取得\r\n * - addで新たな子ListIndexを生成\r\n *\r\n * 設計ポイント:\r\n * - ListIndexは親子関係を持つことで多重ループやforバインディングに柔軟に対応\r\n * - atメソッドはキャッシュとWeakRefを活用し、GCフレンドリーかつ高速なインデックス参照を実現\r\n * - createListIndexファクトリで一貫した生成・管理が可能\r\n * - getMaxListIndexIdで現在の最大IDを取得可能（デバッグや管理用途）\r\n */\r\nimport { IListIndex } from \"./types\";\r\n\r\nclass ListIndex implements IListIndex {\r\n  static id: number = 0;\r\n  id              : number = ++ListIndex.id;\r\n  #parentListIndex: IListIndex | null = null;\r\n  get parentListIndex(): IListIndex | null {\r\n    return this.#parentListIndex;\r\n  }\r\n  index: number;\r\n  get indexes(): number[] {\r\n    const indexes = this.parentListIndex?.indexes ?? [];\r\n    indexes.push(this.index);\r\n    return indexes;\r\n  }\r\n\r\n  get position(): number {\r\n    return (this.parentListIndex?.position ?? -1) + 1;\r\n  }\r\n\r\n  get length(): number {\r\n    return (this.parentListIndex?.length ?? 0) + 1;\r\n  }\r\n  \r\n  constructor(\r\n    parentListIndex: IListIndex | null,\r\n    index: number\r\n  ) {\r\n    this.#parentListIndex = parentListIndex;\r\n    this.index = index;\r\n  }\r\n  \r\n  truncate(length: number): IListIndex | null {\r\n    let listIndex: IListIndex | null = this;\r\n    while(listIndex !== null) {\r\n      if (listIndex.position < length) return listIndex;\r\n      listIndex = listIndex.parentListIndex;\r\n    }\r\n    return null;\r\n  }\r\n  add(value: number): IListIndex {\r\n    return new ListIndex(this, value);\r\n  }\r\n\r\n  *reverseIterator(): Generator<IListIndex> {\r\n    yield this;\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.reverseIterator();\r\n    }\r\n    return;\r\n  }\r\n\r\n  *iterator(): Generator<IListIndex> {\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.iterator();\r\n    }\r\n    yield this;\r\n    return;\r\n  }\r\n\r\n  toString(): string {\r\n    const parentListIndex = this.parentListIndex?.toString();\r\n    return (parentListIndex !== null) ? parentListIndex + \",\" + this.index.toString() : this.index.toString();\r\n  }\r\n\r\n  #atcache:{[key:number]:(WeakRef<IListIndex> | null)} = {};\r\n  at(position: number): IListIndex | null {\r\n    const value = this.#atcache[position];\r\n    if (value !== undefined) {\r\n      return value ? (value.deref() ?? null) : null;\r\n    }\r\n    let iterator;\r\n    if (position >= 0) {\r\n      iterator = this.iterator();\r\n    } else {\r\n      position = - position - 1 \r\n      iterator = this.reverseIterator();\r\n    }\r\n    let next;\r\n    while(position >= 0) {\r\n      next = iterator.next();\r\n      position--;\r\n    }\r\n    const lisIndex = next?.value ?? null;\r\n    this.#atcache[position] = lisIndex ? new WeakRef(lisIndex) : null;\r\n    return lisIndex;\r\n  }\r\n  \r\n}\r\n\r\nexport function createListIndex(\r\n  parentListIndex: IListIndex | null,\r\n  index          : number\r\n): IListIndex {\r\n  return new ListIndex(parentListIndex, index);\r\n}\r\n\r\nexport function getMaxListIndexId(): number {\r\n  return ListIndex.id;\r\n}\r\n","/**\r\n * listWalker.ts\r\n *\r\n * Stateプロパティのワイルドカード（配列・多重ループ）に対応したリスト探索ユーティリティです。\r\n *\r\n * 主な役割:\r\n * - 指定したプロパティパス（IStructuredPathInfo）とリストインデックス（IListIndex）に対し、\r\n *   再帰的に全てのリスト要素（多重ループ含む）を探索し、コールバックを実行\r\n * - ワイルドカード階層が一致した場合のみコールバックを呼び出し、それ以外は親階層を辿って再帰探索\r\n *\r\n * 設計ポイント:\r\n * - listWalkerSubで再帰的にリストインデックスを探索し、全要素に対してコールバックを適用\r\n * - listWalkerでエントリポイントを提供し、外部から簡単に利用可能\r\n * - 多重ループやネストした配列バインディングにも柔軟に対応\r\n */\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\n\r\nfunction listWalkerSub(\r\n  engine: IComponentEngine,\r\n  info: IStructuredPathInfo, \r\n  listIndex: IListIndex | null, \r\n  callback:(info: IStructuredPathInfo, listIndex: IListIndex | null)=> void\r\n) {\r\n  const listIndexLen = listIndex?.length ?? 0;\r\n  if (info.wildcardCount === listIndexLen) {\r\n    callback(info, listIndex);\r\n  } else {\r\n    const parentInfo = info.wildcardParentInfos[listIndexLen] ?? raiseError(\"Invalid state property info\");\r\n    const listIndexes = engine.getListIndexesSet(parentInfo, listIndex);\r\n    for(const subListIndex of listIndexes ?? []) {\r\n      listWalkerSub(engine, info, subListIndex, callback);\r\n    }\r\n  }\r\n}\r\n\r\nexport function listWalker(\r\n  engine: IComponentEngine,\r\n  info:IStructuredPathInfo, \r\n  listIndex: IListIndex | null,\r\n  callback:(info: IStructuredPathInfo, listIndex: IListIndex | null)=> void\r\n) {\r\n  listWalkerSub(engine, info, listIndex, callback);\r\n}\r\n","/**\r\n * getStatePropertyRef.ts\r\n *\r\n * StatePropertyRefのユーティリティとして、構造化パス情報（IStructuredPathInfo）と\r\n * リストインデックス（IListIndex）から一意な参照キー（refKey）を生成する関数です。\r\n *\r\n * 主な役割:\r\n * - info.idとlistIndex.idを組み合わせて、StatePropertyRefを一意に識別するキーを生成\r\n * - listIndexがnullの場合は0を利用し、全ての参照に対して一貫したキーを提供\r\n *\r\n * 設計ポイント:\r\n * - キャッシュや依存解決など、StatePropertyRefの識別・管理に利用\r\n * - シンプルな文字列連結で高速かつ衝突のないキー生成を実現\r\n */\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\n\r\nexport function createRefKey(\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n) {\r\n  return info.id + \":\" + (listIndex?.id ?? 0);\r\n}\r\n\r\n","/**\r\n * restructListIndex.ts\r\n *\r\n * StateClassのリストインデックス構造を再構築するためのユーティリティです。\r\n *\r\n * 主な役割:\r\n * - buildListIndexTree: 指定されたinfo/listIndex/valueに基づき、リストインデックスのツリー構造を再構築・更新\r\n *   - 既存のリストインデックスと新しいリスト要素を比較し、必要に応じてインデックスを再割り当て\r\n *   - インデックス変更時はengine.updater.addUpdatedListIndexで更新情報を登録\r\n *   - 新しいリストインデックス集合をengine.saveListIndexesSetで保存\r\n * - restructListIndexes: 依存関係を辿りながら、必要なリストインデックスの再構築を一括で実行\r\n *   - 依存関係のある全てのinfo/listIndexに対してbuildListIndexTreeを呼び出し\r\n *   - キャッシュやrefKeyを利用して重複処理や不要な再構築を防止\r\n *   - config.optimizeListElementsやoptimizeListによる最適化にも対応\r\n *\r\n * 設計ポイント:\r\n * - 依存関係の再帰的な探索と、リストインデックスの効率的な再利用・再構築を両立\r\n * - スワップや最適化設定時のスキップ処理、キャッシュによる高速化\r\n * - リストバインディングや多重ループ時のインデックス整合性を担保\r\n */\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { createDependencyWalker } from \"../DependencyWalker/createDependencyWalker\";\r\nimport { createListIndex } from \"../ListIndex/createListIndex\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { listWalker } from \"../ListWalker/listWalker\";\r\nimport { GetByRefSymbol } from \"../StateClass/symbols\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { createRefKey } from \"../StatePropertyRef/getStatePropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst BLANK_LISTINDEXES_SET = new Set<IListIndex>();\r\n\r\nfunction buildListIndexTree(\r\n  engine   : IComponentEngine, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value: any[]\r\n): void {\r\n  const oldValue = engine.getList(info, listIndex) ?? [];\r\n  if (oldValue === value) {\r\n    return;\r\n  }\r\n  const newListIndexesSet:Set<IListIndex> = new Set();\r\n  const oldListIndexesSet = engine.getListIndexesSet(info, listIndex) ?? BLANK_LISTINDEXES_SET;\r\n  const oldListIndexesByItem = Map.groupBy(oldListIndexesSet, listIndex => oldValue[listIndex.index]);\r\n  for(let i = 0; i < value.length; i++) {\r\n    // リスト要素から古いリストインデックスを取得して、リストインデックスを更新する\r\n    // もし古いリストインデックスがなければ、新しいリストインデックスを作成する\r\n    let curListIndex = oldListIndexesByItem.get(value[i])?.shift() ?? createListIndex(listIndex, i);\r\n    if (curListIndex.index !== i) {\r\n      curListIndex.index = i;\r\n      // リストインデックスのインデックスを更新したので、リストインデックスを登録する\r\n      engine.updater.addUpdatedListIndex(curListIndex);\r\n    }\r\n    // リストインデックスを新しいリストインデックスセットに追加する\r\n    newListIndexesSet.add(curListIndex);\r\n  }\r\n  // 新しいリストインデックスセットを保存する\r\n  engine.saveListIndexesSet(info, listIndex, newListIndexesSet);\r\n  engine.saveList(info, listIndex, value.slice(0)); // コピーを保存\r\n\r\n}\r\n\r\nexport function restructListIndexes(\r\n  infos: IStatePropertyRef[],\r\n  engine: IComponentEngine,\r\n  updateValues: {[key:string]: any[]},\r\n  refKeys: Set<string>,\r\n  cache: Map<IStructuredPathInfo, Set<IListIndex|null>>,\r\n) {\r\n  for(const {info, listIndex} of infos) {\r\n    if (config.optimizeListElements && engine.elementInfoSet.has(info)) {\r\n      // スワップ処理のためスキップ\r\n      continue;\r\n    }\r\n    const dependentWalker = createDependencyWalker(engine, {info, listIndex});\r\n    const nowOnList = config.optimizeList && engine.listInfoSet.has(info);\r\n    // 依存関係を辿る\r\n    dependentWalker.walk((ref, refInfo, type) => {\r\n      if (nowOnList && type === \"structured\" && ref.info !== refInfo) {\r\n        if (refInfo.cumulativeInfoSet.has(ref.info)) {\r\n          return;\r\n        }\r\n      }\r\n      const wildcardMatchPaths = Array.from(ref.info.wildcardInfoSet.intersection(refInfo.wildcardInfoSet));\r\n      const longestMatchAt = (wildcardMatchPaths.at(-1)?.wildcardCount ?? 0) - 1;\r\n      const listIndex = (longestMatchAt >= 0) ? (ref.listIndex?.at(longestMatchAt) ?? null) : null;\r\n      // リストインデックスを展開する\r\n      listWalker(engine, refInfo, listIndex, (_info, _listIndex) => {\r\n        const refKey = createRefKey(_info, _listIndex);\r\n        if (refKeys.has(refKey)) {\r\n          return;\r\n        }\r\n        let cacheListIndexSet = cache.get(_info);\r\n        if (!cacheListIndexSet) {\r\n          cacheListIndexSet = new Set<IListIndex|null>();\r\n          cache.set(_info, cacheListIndexSet);\r\n        }\r\n        cacheListIndexSet.add(_listIndex);\r\n        if (!engine.existsBindingsByInfo(_info)) {\r\n          return;\r\n        }\r\n        refKeys.add(refKey);\r\n        if (engine.listInfoSet.has(_info)) {\r\n          const values = updateValues[refKey] ?? engine.readonlyState[GetByRefSymbol](_info, _listIndex);\r\n          buildListIndexTree(engine, _info, _listIndex, values);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n","/**\r\n * updater.ts\r\n *\r\n * StateClassの更新処理・変更検知・再描画を一元管理するUpdaterクラスの実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - Stateプロパティやリストインデックスの変更を検知し、再描画や依存解決をトリガー\r\n * - addUpdatedStatePropertyRefValue/addUpdatedListIndexで変更情報を登録し、entryRenderで描画処理をエントリーポイント化\r\n * - rebuildで変更の影響範囲を再計算し、必要なバインディングやリストインデックスの再構築を実行\r\n * - renderでバインディング配列をまとめて描画\r\n *\r\n * 設計ポイント:\r\n * - 変更検知・再描画を非同期でバッチ処理し、パフォーマンスを最適化\r\n * - リストバインディングや多重ループ、スワップ・最適化にも対応\r\n * - StateClassエンジンとの連携やキャッシュ機構も考慮した設計\r\n */\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { render } from \"./render.js\";\r\nimport { SetCacheableSymbol } from \"../StateClass/symbols.js\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IUpdater } from \"./types\";\r\nimport { restructListIndexes } from \"./restructListIndex\";\r\nimport { createRefKey } from \"../StatePropertyRef/getStatePropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\n\r\ntype UpdatedArrayElementBinding = {\r\n  parentRef: IStatePropertyRef;\r\n  binding: IBinding;\r\n  listIndexes: IListIndex[];\r\n  values: any[];\r\n};\r\n\r\nclass Updater implements IUpdater {\r\n  updatedProperties: Set<IStatePropertyRef | IListIndex> = new Set;\r\n  updatedValues    : {[key:string]: any} = {};\r\n  engine           : IComponentEngine;\r\n  #version         : number = 0;\r\n\r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  get version(): number {\r\n    return this.#version;\r\n  }\r\n\r\n  addProcess(process: () => Promise<void> | void): void {\r\n    queueMicrotask(process);\r\n  }\r\n\r\n  addUpdatedStatePropertyRefValue(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any\r\n  ): void {\r\n    const refKey = createRefKey(info, listIndex);\r\n    this.updatedProperties.add({info, listIndex});\r\n    this.updatedValues[refKey] = value;\r\n    this.entryRender();\r\n  }\r\n\r\n  addUpdatedListIndex(listIndex: IListIndex): void {\r\n    this.updatedProperties.add(listIndex);\r\n    this.entryRender();\r\n  }\r\n\r\n  #isEntryRender = false;\r\n  entryRender() {\r\n    if (this.#isEntryRender) return;\r\n    this.#isEntryRender = true;\r\n    const engine = this.engine;\r\n    queueMicrotask(() => {\r\n      try {\r\n        const { bindings, arrayElementBindings, properties } = this.rebuild();\r\n        // スワップ処理\r\n        for(const arrayElementBinding of arrayElementBindings) {\r\n          arrayElementBinding.binding.bindingNode.updateElements(arrayElementBinding.listIndexes, arrayElementBinding.values);\r\n        }\r\n        // レンダリング\r\n        if (bindings.length > 0) {\r\n          this.render(bindings);\r\n        }\r\n        // 子コンポーネントへの再描画通知\r\n        if (engine.structiveChildComponents.size > 0) {\r\n          for(const structiveComponent of engine.structiveChildComponents) {\r\n            const structiveComponentBindings = engine.bindingsByComponent.get(structiveComponent) ?? new Set<IBinding>();\r\n            for(const binding of structiveComponentBindings) {\r\n              binding.notifyRedraw(properties);\r\n            }\r\n          }\r\n        }\r\n      } finally {\r\n        this.#isEntryRender = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  rebuild(): {\r\n    bindings: IBinding[], \r\n    arrayElementBindings: UpdatedArrayElementBinding[],\r\n    properties: IStatePropertyRef[]\r\n  } {\r\n    const retArrayElementBindings: UpdatedArrayElementBinding[] = [];\r\n    const retBindings: IBinding[] = [];\r\n    const retProperties: IStatePropertyRef[] = [];\r\n    const engine = this.engine;\r\n    const hasChildComponent = engine.structiveChildComponents.size > 0;\r\n    while(this.updatedProperties.size > 0) {\r\n      const updatedProiperties = Array.from(this.updatedProperties.values());\r\n      this.updatedProperties.clear();\r\n      const bindingsByListIndex: IBinding[] = [];\r\n      const updatedRefs: IStatePropertyRef[] = []; // 更新されたプロパティ参照のリスト\r\n      const arrayElementBindingByParentRefKey = new Map<string, Partial<UpdatedArrayElementBinding>>();\r\n      for(let i = 0; i < updatedProiperties.length; i++) {\r\n        const item = updatedProiperties[i];\r\n        if (\"index\" in item) {\r\n          const bindings = engine.bindingsByListIndex.get(item as IListIndex) ?? [];\r\n          bindingsByListIndex.push(...bindings);\r\n        } else {\r\n          updatedRefs.push(item as IStatePropertyRef);\r\n          if (engine.elementInfoSet.has(item.info)) {\r\n            const parentInfo = item.info.parentInfo ?? raiseError(\"info is null\"); // リストのパス情報\r\n            const parentListIndex = item.listIndex?.at(-2) ?? null; // リストのインデックス\r\n            const parentRef = {info: parentInfo, listIndex: parentListIndex};\r\n            const parentRefKey = createRefKey(parentInfo, parentListIndex);\r\n            let info = arrayElementBindingByParentRefKey.get(parentRefKey);\r\n            if (!info) {\r\n              info = {\r\n                parentRef,\r\n                listIndexes: [],\r\n                values: []\r\n              };\r\n              arrayElementBindingByParentRefKey.set(parentRefKey, info);\r\n            }\r\n            const refKey = createRefKey(item.info, item.listIndex);\r\n            const value = this.updatedValues[refKey] ?? null;\r\n            info.values?.push(value);\r\n            info.listIndexes?.push(item.listIndex as IListIndex);\r\n          }\r\n        }\r\n      }\r\n      // リストインデックスの構築\r\n      const builtStatePropertyRefKeySet = new Set<string>();\r\n      const affectedRefs = new Map<IStructuredPathInfo, Set<IListIndex|null>>();\r\n      restructListIndexes(updatedRefs, engine, this.updatedValues, builtStatePropertyRefKeySet, affectedRefs);\r\n\r\n      // スワップの場合の情報を構築する\r\n      for(const [parentRefKey, info] of arrayElementBindingByParentRefKey) {\r\n        const parentInfo = info.parentRef?.info ?? raiseError(\"parentInfo is null\");\r\n        const parentListIndex = info.parentRef?.listIndex ?? null;\r\n        const bindings = engine.getBindings(parentInfo, parentListIndex);\r\n        for(const binding of bindings) {\r\n          if (!binding.bindingNode.isFor) {\r\n            continue;\r\n          }\r\n          const bindingInfo = Object.assign({}, info, { binding });\r\n          retArrayElementBindings.push(bindingInfo as UpdatedArrayElementBinding);\r\n        }\r\n      }\r\n      // 影響する全てのバインド情報を取得する\r\n      for(const [ info, listIndexes ] of affectedRefs.entries()) {\r\n        for(const listIndex of listIndexes) {\r\n          const bindings = engine.getBindings(info, listIndex);\r\n          retBindings.push(...bindings ?? []);\r\n          if (hasChildComponent) {\r\n            retProperties.push({info, listIndex});\r\n          }\r\n        }\r\n      }\r\n      retBindings.push(...bindingsByListIndex);\r\n    }\r\n    this.updatedValues = {};\r\n    return {\r\n      bindings: retBindings, \r\n      arrayElementBindings: retArrayElementBindings,\r\n      properties: retProperties\r\n    };\r\n  }\r\n\r\n  render(bindings: IBinding[]) {\r\n    this.#version++;\r\n    this.engine.readonlyState[SetCacheableSymbol](() => {\r\n      return render(bindings);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createUpdater(engine: IComponentEngine): IUpdater {\r\n  return new Updater(engine);\r\n}\r\n\r\n","import { raiseError } from \"../utils.js\";\r\nimport { IComponentConfig } from \"../WebComponents/types\";\r\nimport { canHaveShadowRoot } from \"./canHaveShadowRoot.js\";\r\n\r\nfunction getParentShadowRoot(parentNode: Node | null): ShadowRoot|undefined{\r\n  let node: Node | null = parentNode;\r\n  while(node) {\r\n    if (node instanceof ShadowRoot) {\r\n      return node;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n}\r\n\r\n/**\r\n * 指定したHTMLElementにShadow DOMをアタッチし、スタイルシートを適用するユーティリティ関数。\r\n *\r\n * - config.enableShadowDomがtrueの場合は、ShadowRootを生成し、adoptedStyleSheetsでスタイルを適用\r\n * - extends指定がある場合はcanHaveShadowRootで拡張可能かチェック\r\n * - Shadow DOMを使わない場合は、親のShadowRootまたはdocumentにスタイルシートを追加\r\n * - すでに同じスタイルシートが含まれていれば重複追加しない\r\n *\r\n * @param element    対象のHTMLElement\r\n * @param config     コンポーネント設定\r\n * @param styleSheet 適用するCSSStyleSheet\r\n * @throws           Shadow DOM非対応の組み込み要素を拡張しようとした場合はエラー\r\n */\r\nexport function attachShadow(element: HTMLElement, config: IComponentConfig, styleSheet: CSSStyleSheet): void {\r\n    if (config.enableShadowDom) {\r\n      if (config.extends === null || canHaveShadowRoot(config.extends)) {\r\n        const shadowRoot = element.attachShadow({ mode: 'open' });\r\n        shadowRoot.adoptedStyleSheets = [styleSheet];\r\n      } else {\r\n        raiseError(`ComponentEngine: Shadow DOM not supported for builtin components that extend ${config.extends}`);\r\n      }\r\n    } else {\r\n      const shadowRootOrDocument = getParentShadowRoot(element.parentNode) || document;\r\n      const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n      if (!styleSheets.includes(styleSheet)) {\r\n        shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, styleSheet];\r\n      }\r\n    }\r\n\r\n}","/**\r\n * 指定したタグ名の要素がShadowRootを持てるかどうかを判定するユーティリティ関数。\r\n *\r\n * - 指定タグ名で要素を生成し、attachShadowメソッドが存在するかどうかで判定\r\n * - 無効なタグ名やattachShadow未対応の場合はfalseを返す\r\n *\r\n * @param tagName 判定したい要素のタグ名（例: \"div\", \"span\", \"input\" など）\r\n * @returns       ShadowRootを持てる場合はtrue、持てない場合はfalse\r\n */\r\nexport function canHaveShadowRoot(tagName: string): boolean {\r\n  try {\r\n    // 一時的に要素を作成\r\n    const element = document.createElement(tagName);\r\n    // `attachShadow` メソッドが存在し、実行可能かを確認\r\n    return typeof element.attachShadow === \"function\";\r\n  } catch {\r\n    // 無効なタグ名などが渡された場合は false を返す\r\n    return false;\r\n  }\r\n}\r\n","import { createListIndex } from \"../ListIndex/createListIndex.js\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { GetByRefSymbol } from \"./symbols.js\";\r\n\r\nconst BLANK_LISTINDEXES_SET = new Set<IListIndex>();\r\n\r\nfunction buildListIndexTreeSub(\r\n  engine   : IComponentEngine, \r\n  listInfos: Set<IStructuredPathInfo>,\r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value: any[]\r\n): void {\r\n  const oldValue = engine.getList(info, listIndex) ?? [];\r\n  if (oldValue === value) {\r\n    return;\r\n  }\r\n  const newListIndexesSet:Set<IListIndex> = new Set();\r\n  const oldListIndexesSet = engine.getListIndexesSet(info, listIndex) ?? BLANK_LISTINDEXES_SET;\r\n  const oldListIndexesByItem = Map.groupBy(oldListIndexesSet, listIndex => oldValue[listIndex.index]);\r\n  for(let i = 0; i < value.length; i++) {\r\n    // リスト要素から古いリストインデックスを取得して、リストインデックスを更新する\r\n    // もし古いリストインデックスがなければ、新しいリストインデックスを作成する\r\n    let curListIndex = oldListIndexesByItem.get(value[i])?.shift() ?? createListIndex(listIndex, i);\r\n    if (curListIndex.index !== i) {\r\n      curListIndex.index = i;\r\n      // リストインデックスのインデックスを更新したので、リストインデックスを登録する\r\n      engine.updater.addUpdatedListIndex(curListIndex);\r\n    }\r\n    // リストインデックスを新しいリストインデックスセットに追加する\r\n    newListIndexesSet.add(curListIndex);\r\n  }\r\n  // 新しいリストインデックスセットを保存する\r\n  engine.saveListIndexesSet(info, listIndex, newListIndexesSet);\r\n  engine.saveList(info, listIndex, value.slice(0)); // コピーを保存\r\n\r\n  // サブ要素のリストインデックスを構築する\r\n  const searchPath = info.pattern + \".*\";\r\n  for(const info of listInfos) {\r\n    if (searchPath !== info.lastWildcardPath) {\r\n      continue;\r\n    }\r\n    for(const subListIndex of newListIndexesSet) {\r\n      const subValue = engine.readonlyState[GetByRefSymbol](info, subListIndex);\r\n      buildListIndexTreeSub(\r\n        engine, \r\n        listInfos, \r\n        info, \r\n        subListIndex, \r\n        subValue ?? []\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function buildListIndexTree(\r\n  engine   : IComponentEngine, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value    : any\r\n): void {\r\n  const listInfos = engine.listInfoSet;\r\n  // 配列じゃなければ何もしない\r\n  if (!engine.listInfoSet.has(info)) {\r\n    return;\r\n  }\r\n  const values = (value ?? []) as any[];\r\n  buildListIndexTreeSub(\r\n    engine, \r\n    engine.listInfoSet, \r\n    info, \r\n    listIndex, \r\n    values\r\n  );\r\n}\r\n","/**\r\n * getResolvedPathInfo.ts\r\n *\r\n * Stateプロパティ名（パス文字列）から、ワイルドカードやインデックス情報を含む\r\n * 詳細なパス情報（IResolvedPathInfo）を解析・生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - プロパティ名を分解し、ワイルドカードやインデックスの有無・種別を判定\r\n * - context/all/partial/none のワイルドカード種別を自動判定\r\n * - パスごとにキャッシュし、再利用性とパフォーマンスを両立\r\n * - getStructuredPathInfoで構造化パス情報も取得\r\n *\r\n * 設計ポイント:\r\n * - \"constructor\"や\"toString\"などの予約語も扱えるよう、Mapではなくオブジェクトでキャッシュ\r\n * - ワイルドカード（*）や数値インデックスを柔軟に判定し、wildcardIndexesに格納\r\n * - context型は未確定インデックス、all型は全て確定インデックス、partial型は混在を示す\r\n * - ResolvedPathInfoクラスでパス解析・情報保持を一元化\r\n */\r\nimport { IResolvedPathInfo, WildcardType } from './types';\r\nimport { getStructuredPathInfo } from './getStructuredPathInfo.js';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IResolvedPathInfo } = {};\r\n//const _cache: Map<string, IResolvedPathInfo> = new Map();\r\n\r\nclass ResolvedPathInfo implements IResolvedPathInfo {\r\n  static id : number = 0;\r\n  id = ++ResolvedPathInfo.id;\r\n  name;\r\n  elements;\r\n  paths;\r\n  wildcardCount;\r\n  wildcardType;\r\n  wildcardIndexes;\r\n  info;\r\n  constructor(name: string) {\r\n    const elements = name.split(\".\");\r\n    const tmpPatternElements = elements.slice();\r\n    const paths = [];\r\n    let incompleteCount = 0;\r\n    let completeCount = 0;\r\n    let lastPath = \"\";\r\n    let wildcardCount = 0;\r\n    let wildcardType: WildcardType = \"none\";\r\n    let wildcardIndexes: (number | null)[] = [];\r\n    for(let i = 0; i < elements.length; i++) {\r\n      const element = elements[i];\r\n      if (element === \"*\") {\r\n        tmpPatternElements[i] = \"*\";\r\n        wildcardIndexes.push(null);\r\n        incompleteCount++;\r\n        wildcardCount++;\r\n      } else {\r\n        const number = Number(element);\r\n        if (!Number.isNaN(number)) {\r\n          tmpPatternElements[i] = \"*\";\r\n          wildcardIndexes.push(number);\r\n          completeCount++;\r\n          wildcardCount++;\r\n        }\r\n      }\r\n      lastPath += element;\r\n      paths.push(lastPath);\r\n      lastPath += (i < elements.length - 1 ? \".\" : \"\");\r\n    }\r\n    const pattern = tmpPatternElements.join(\".\");\r\n    const info = getStructuredPathInfo(pattern);\r\n    if (incompleteCount > 0 || completeCount > 0) {\r\n      if (incompleteCount === wildcardCount) {\r\n        wildcardType = \"context\";\r\n      } else if (completeCount === wildcardCount) {\r\n        wildcardType = \"all\";\r\n      } else {\r\n        wildcardType = \"partial\";\r\n      }\r\n    }\r\n    this.name = name;\r\n    this.elements = elements;\r\n    this.paths = paths;\r\n    this.wildcardCount = wildcardCount;\r\n    this.wildcardType = wildcardType;\r\n    this.wildcardIndexes = wildcardIndexes;\r\n    this.info = info;\r\n  }\r\n}\r\n\r\nexport function getResolvedPathInfo(name:string):IResolvedPathInfo {\r\n  let nameInfo: IResolvedPathInfo | undefined;\r\n//  return _cache.get(name) ?? (_cache.set(name, nameInfo = new ResolvedPathInfo(name)), nameInfo);\r\n  return _cache[name] ?? (_cache[name] = new ResolvedPathInfo(name));\r\n}","/**\r\n * getContextListIndex.ts\r\n *\r\n * StateClassの内部APIとして、現在のプロパティ参照スコープにおける\r\n * 指定したstructuredPath（ワイルドカード付きプロパティパス）に対応する\r\n * リストインデックス（IListIndex）を取得する関数です。\r\n *\r\n * 主な役割:\r\n * - handlerの最後にアクセスされたStatePropertyRefから、指定パスに対応するリストインデックスを取得\r\n * - ワイルドカード階層に対応し、多重ループやネストした配列バインディングにも利用可能\r\n *\r\n * 設計ポイント:\r\n * - 直近のプロパティ参照情報を取得\r\n * - info.wildcardPathsからstructuredPathのインデックスを特定\r\n * - listIndex.at(index)で該当階層のリストインデックスを取得\r\n * - パスが一致しない場合や参照が存在しない場合はnullを返す\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function getContextListIndex(\r\n  handler: IStateHandler,\r\n  structuredPath: string\r\n): IListIndex | null {\r\n  const info = handler.structuredPathInfoStack[handler.refIndex];\r\n  if (typeof info === \"undefined\" || info === null) {\r\n    return null;\r\n  }\r\n  const index = info.indexByWildcardPath[structuredPath];\r\n  if (index >= 0) {\r\n    const listIndex = handler.listIndexStack[handler.refIndex];\r\n    if (typeof listIndex === \"undefined\") {\r\n      return null;\r\n    }\r\n    return listIndex?.at(index) ?? null;\r\n  }\r\n  return null;\r\n}\r\n","/**\r\n * getListIndex.ts\r\n *\r\n * StateClassの内部APIとして、パス情報（IResolvedPathInfo）から\r\n * 対応するリストインデックス（IListIndex）を取得する関数です。\r\n *\r\n * 主な役割:\r\n * - パスのワイルドカード種別（context/all/partial/none）に応じてリストインデックスを解決\r\n * - context型は現在のループコンテキストからリストインデックスを取得\r\n * - all型は各階層のリストインデックス集合からインデックスを辿って取得\r\n * - partial型やnone型は未実装またはnullを返す\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードや多重ループ、ネストした配列バインディングに柔軟に対応\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n * - エラー時はraiseErrorで詳細な例外を投げる\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IResolvedPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IReadonlyStateProxy, IStateProxy } from \"../types\";\r\nimport { getContextListIndex } from \"./getContextListIndex\";\r\n\r\nexport function getListIndex(\r\n  info: IResolvedPathInfo, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): IListIndex | null {\r\n  switch (info.wildcardType) {\r\n    case \"none\":\r\n      return null;\r\n    case \"context\":\r\n      const lastWildcardPath = info.info.lastWildcardPath ?? \r\n        raiseError(`lastWildcardPath is null`);\r\n      return getContextListIndex(handler, lastWildcardPath) ?? \r\n        raiseError(`ListIndex not found: ${info.info.pattern}`);\r\n    case \"all\":\r\n      let parentListIndex = null;\r\n      for(let i = 0; i < info.info.wildcardCount; i++) {\r\n        const wildcardParentPattern = info.info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPattern is null`);\r\n        const listIndexes: IListIndex[] = Array.from(handler.engine.getListIndexesSet(wildcardParentPattern, parentListIndex) ?? []);\r\n        const wildcardIndex = info.wildcardIndexes[i] ?? raiseError(`wildcardIndex is null`);\r\n        parentListIndex = listIndexes[wildcardIndex] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n      }\r\n      return parentListIndex;\r\n    case \"partial\":\r\n      raiseError(`Partial wildcard type is not supported yet: ${info.info.pattern}`);\r\n  }\r\n}\r\n","/**\r\n * setStatePropertyRef.ts\r\n *\r\n * StateClassの内部APIとして、状態プロパティ参照（IStructuredPathInfo, IListIndex）のスコープを\r\n * 一時的に設定し、指定したコールバックをそのスコープ内で実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.structuredPathInfoStackとhandler.listIndexStackにinfoとlistIndexをpushしてスコープを設定\r\n * - 指定したcallbackをそのスコープ内で実行\r\n * - finallyで必ずスタックからpopし、スコープ外への影響を防止\r\n *\r\n * 設計ポイント:\r\n * - コールバック実行中のみスコープを切り替え、例外発生時も状態復元を保証\r\n * - ネストしたスコープにも対応可能\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function setStatePropertyRef(\r\n  handler: IStateHandler,\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  callback: () => void\r\n): void {\r\n  handler.refIndex++;\r\n  if (handler.refIndex >= handler.structuredPathInfoStack.length) {\r\n    handler.structuredPathInfoStack.push(null);\r\n    handler.listIndexStack.push(null);\r\n  }\r\n  handler.structuredPathInfoStack[handler.refIndex] = info;\r\n  handler.listIndexStack[handler.refIndex] = listIndex;\r\n  try {\r\n    return callback();\r\n  } finally {\r\n    handler.structuredPathInfoStack[handler.refIndex] = null;\r\n    handler.listIndexStack[handler.refIndex] = null;\r\n    handler.refIndex--;\r\n  }\r\n}\r\n","/**\r\n * setTracking.ts\r\n *\r\n * StateClassの内部APIとして、依存関係トラッキング用のスコープを一時的に設定し、\r\n * 指定したコールバックをそのスコープ内で実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.trackingStackにinfo（依存対象のパス情報）をpushしてトラッキングスコープを設定\r\n * - 指定したcallbackをそのスコープ内で実行\r\n * - finallyで必ずtrackingStackからpopし、スコープ外への影響を防止\r\n * - lastTrackingStackも適切に更新\r\n *\r\n * 設計ポイント:\r\n * - コールバック実行中のみ依存トラッキングを有効化し、例外発生時も状態復元を保証\r\n * - ネストした依存トラッキングにも対応可能\r\n */\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function setTracking(info: IStructuredPathInfo, handler: IStateHandler, callback: () => any): any {\r\n  // 依存関係の自動登録\r\n  const lastTrackingStack = handler.trackingStack[handler.trackingIndex] ?? null;\r\n  if (lastTrackingStack != null) {\r\n    // trackedGettersに含まれる場合はsetTrackingで依存追跡を有効化\r\n    if (handler.engine.trackedGetters.has(lastTrackingStack.pattern)) {\r\n      handler.engine.addDependentProp(lastTrackingStack, info, \"reference\");\r\n    }\r\n  }\r\n  handler.trackingIndex++;\r\n  if (handler.trackingIndex >= handler.trackingStack.length) {\r\n    handler.trackingStack.push(null);\r\n  }\r\n  handler.trackingStack[handler.trackingIndex] = info;\r\n  handler.lastTrackingStack = handler.trackingStack[handler.trackingIndex] ?? null;\r\n  try {\r\n    return callback();\r\n  } finally {\r\n    handler.trackingStack[handler.trackingIndex] = null;\r\n    handler.trackingIndex--;\r\n    handler.lastTrackingStack = handler.trackingStack[handler.trackingIndex] ?? null;\r\n  }\r\n}\r\n","/**\r\n * getByRef.ts\r\n *\r\n * StateClassの内部APIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * 状態オブジェクト（target）から値を取得するための関数（getByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定されたパス・インデックスに対応するState値を取得（多重ループやワイルドカードにも対応）\r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyで値をキャッシュ）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * - 存在しない場合は親infoやlistIndexを辿って再帰的に値を取得\r\n *\r\n * 設計ポイント:\r\n * - handler.engine.trackedGettersに含まれる場合はsetTrackingで依存追跡を有効化\r\n * - キャッシュ有効時はrefKeyで値をキャッシュし、取得・再利用を最適化\r\n * - ワイルドカードや多重ループにも柔軟に対応し、再帰的な値取得を実現\r\n * - finallyでキャッシュへの格納を保証\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { createRefKey } from \"../../StatePropertyRef/getStatePropertyRef\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IReadonlyStateProxy, IReadonlyStateHandler } from \"../types\";\r\nimport { setStatePropertyRef } from \"./setStatePropertyRef\";\r\nimport { setTracking } from \"./setTracking.js\";\r\n\r\n/**\r\n * 構造化パス情報(info, listIndex)をもとに、状態オブジェクト(target)から値を取得する。\r\n * \r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyでキャッシュ）\r\n * - ネスト・ワイルドカード対応（親infoやlistIndexを辿って再帰的に値を取得）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * \r\n * @param target    状態オブジェクト\r\n * @param info      構造化パス情報\r\n * @param listIndex リストインデックス（多重ループ対応）\r\n * @param receiver  プロキシ\r\n * @param handler   状態ハンドラ\r\n * @returns         対象プロパティの値\r\n */\r\nfunction _getByRef(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  receiver : IReadonlyStateProxy,\r\n  handler  : IReadonlyStateHandler\r\n): any {\r\n  // キャッシュが有効な場合はrefKeyで値をキャッシュ\r\n  let refKey = '';\r\n  if (handler.cacheable) {\r\n    refKey = createRefKey(info, listIndex);\r\n    const value = handler.cache[refKey];\r\n    if (typeof value !== \"undefined\") {\r\n      return value;\r\n    }\r\n    if (refKey in handler.cache) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  let value;\r\n  try {\r\n    // 親子関係のあるgetterが存在する場合は、外部依存から取得\r\n    // ToDo: stateにgetterが存在する（パスの先頭が一致する）場合はgetter経由で取得\r\n    if (handler.engine.stateOutput.startsWith(info) && handler.engine.getters.intersection(info.cumulativePathSet).size === 0) {\r\n      return value = handler.engine.stateOutput.get(info, listIndex);\r\n    }\r\n    // パターンがtargetに存在する場合はgetter経由で取得\r\n    if (info.pattern in target) {\r\n      return (value = setStatePropertyRef(handler, info, listIndex, () => {\r\n        return Reflect.get(target, info.pattern, receiver);\r\n      }));\r\n    } else {\r\n      // 存在しない場合は親infoを辿って再帰的に取得\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRefReadonly(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        // ワイルドカードの場合はlistIndexのindexでアクセス\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return (value = Reflect.get(parentValue, index));\r\n      } else {\r\n        // 通常のプロパティアクセス\r\n        return (value = Reflect.get(parentValue, lastSegment));\r\n      }\r\n    }\r\n  } finally {\r\n    // キャッシュが有効な場合は取得値をキャッシュ\r\n    if (handler.cacheable && !(refKey in handler.cache)) {\r\n      handler.cache[refKey] = value;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * trackedGettersに含まれる場合は依存追跡(setTracking)を有効化し、値取得を行う。\r\n * それ以外は通常の_getByRefで取得。\r\n */\r\nexport function getByRefReadonly(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  receiver : IReadonlyStateProxy,\r\n  handler  : IReadonlyStateHandler\r\n): any {\r\n  return setTracking(info, handler, () => {\r\n    return _getByRef(target, info, listIndex, receiver, handler);\r\n  });\r\n}\r\n","/**\r\n * resolve.ts\r\n *\r\n * StateClassのAPIとして、パス（path）とインデックス（indexes）を指定して\r\n * Stateの値を取得・設定するための関数（resolve）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列パス（path）とインデックス配列（indexes）から、該当するState値の取得・設定を行う\r\n * - ワイルドカードや多重ループを含むパスにも対応\r\n * - value未指定時は取得（getByRef）、指定時は設定（setByRef）を実行\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパスを解析し、ワイルドカード階層ごとにリストインデックスを解決\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n * - getByRef/setByRefで値の取得・設定を一元的に処理\r\n * - 柔軟なバインディングやAPI経由での利用が可能\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IReadonlyStateProxy, IReadonlyStateHandler } from \"../types\";\r\nimport { getByRefReadonly } from \"../methods/getByRefReadonly\";\r\n\r\nexport function resolveReadonly(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IReadonlyStateProxy,\r\n  handler: IReadonlyStateHandler\r\n): Function {\r\n  return (path: string, indexes: number[], value?: any): any => {\r\n    const info = getStructuredPathInfo(path);\r\n    if (handler.lastTrackingStack != null) {\r\n      // trackedGettersに含まれる場合はsetTrackingで依存追跡を有効化\r\n      if (handler.engine.trackedGetters.has(handler.lastTrackingStack.pattern)) {\r\n        handler.engine.addDependentProp(handler.lastTrackingStack, info, \"reference\");\r\n      }\r\n    }\r\n\r\n    let listIndex: IListIndex | null = null;\r\n    for(let i = 0; i < info.wildcardParentInfos.length; i++) {\r\n      const wildcardParentPattern = info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPath is null`);\r\n      const listIndexes: IListIndex[] = Array.from(handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? []);\r\n      const index = indexes[i] ?? raiseError(`index is null`);\r\n      listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    if (typeof value === \"undefined\") {\r\n      return getByRefReadonly(target, info, listIndex, receiver, handler);\r\n    } else {\r\n      raiseError(`Cannot set value on a readonly proxy: ${path}`);\r\n    }\r\n  };\r\n} ","import { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nexport function trackDependency(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (path: string): void => {\r\n    const info = getStructuredPathInfo(path);\r\n    if (handler.lastTrackingStack != null) {\r\n      // trackedGettersに含まれる場合はsetTrackingで依存追跡を有効化\r\n      if (handler.engine.trackedGetters.has(handler.lastTrackingStack.pattern)) {\r\n        handler.engine.addDependentProp(handler.lastTrackingStack, info, \"reference\");\r\n      }\r\n    }\r\n  };\r\n}\r\n","/**\r\n * get.ts\r\n *\r\n * StateClassのProxyトラップとして、プロパティアクセス時の値取得処理を担う関数（get）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列プロパティの場合、特殊プロパティ（$1〜$9, $resolve, $getAll, $navigate）に応じた値やAPIを返却\r\n * - 通常のプロパティはgetResolvedPathInfoでパス情報を解決し、getListIndexでリストインデックスを取得\r\n * - getByRefで構造化パス・リストインデックスに対応した値を取得\r\n * - シンボルプロパティの場合はhandler.callableApi経由でAPIを呼び出し\r\n * - それ以外はReflect.getで通常のプロパティアクセスを実行\r\n *\r\n * 設計ポイント:\r\n * - $1〜$9は直近のStatePropertyRefのリストインデックス値を返す特殊プロパティ\r\n * - $resolve, $getAll, $navigateはAPI関数やルーターインスタンスを返す\r\n * - 通常のプロパティアクセスもバインディングや多重ループに対応\r\n * - シンボルAPIやReflect.getで拡張性・互換性も確保\r\n */\r\nimport { getRouter } from \"../../Router/Router.js\";\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { getListIndex } from \"../methods/getListIndex.js\";\r\nimport { IReadonlyStateHandler, IReadonlyStateProxy } from \"../types.js\";\r\nimport { resolveReadonly } from \"../apis/resolveReadonly.js\";\r\nimport { GetByRefSymbol, SetCacheableSymbol } from \"../symbols.js\";\r\nimport { getByRefReadonly } from \"../methods/getByRefReadonly.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types.js\";\r\nimport { IListIndex } from \"../../ListIndex/types.js\";\r\nimport { setCacheable } from \"../methods/setCacheable.js\";\r\nimport { getAllReadonly } from \"../apis/getAllReadonly.js\";\r\nimport { trackDependency } from \"../apis/trackDependency.js\";\r\n\r\nexport function getReadonly(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  receiver: IReadonlyStateProxy,\r\n  handler : IReadonlyStateHandler\r\n): any {\r\n  if (typeof prop === \"string\") {\r\n    if (prop.charCodeAt(0) === 36) {\r\n      if (prop.length === 2) {\r\n        const d = prop.charCodeAt(1) - 48;\r\n        if (d >= 1 && d <= 9) {\r\n          const listIndex = handler.listIndexStack[handler.refIndex];\r\n          return listIndex?.at(d - 1)?.index ?? raiseError(`ListIndex not found: ${prop}`);\r\n        }\r\n      }\r\n      switch (prop) {\r\n        case \"$resolve\":\r\n          return resolveReadonly(target, prop, receiver, handler);\r\n        case \"$getAll\":\r\n          return getAllReadonly(target, prop, receiver, handler);\r\n        case \"$trackDependency\":\r\n          return trackDependency(target, prop, receiver, handler);\r\n        case \"$navigate\":\r\n          return (to:string) => getRouter()?.navigate(to);\r\n      }\r\n    }\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, receiver, handler);\r\n    return getByRefReadonly(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      receiver,\r\n      handler\r\n    );\r\n\r\n  } else if (typeof prop === \"symbol\") {\r\n    switch (prop) {\r\n      case GetByRefSymbol: \r\n        return (info: IStructuredPathInfo, listIndex: IListIndex | null) => \r\n          getByRefReadonly(target, info, listIndex, receiver, handler);\r\n      case SetCacheableSymbol:\r\n        return (callback: () => void) => setCacheable(handler, callback)\r\n      default:\r\n        return Reflect.get(\r\n          target, \r\n          prop, \r\n          receiver\r\n        );\r\n    }\r\n  }\r\n}\r\n","/**\r\n * getAll.ts\r\n *\r\n * StateClassのAPIとして、ワイルドカードを含むStateプロパティパスに対応した\r\n * 全要素取得関数（getAll）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定パス（path）に一致する全てのState要素を配列で取得\r\n * - 多重ループやワイルドカード（*）を含むパスにも対応\r\n * - indexes未指定時は現在のループコンテキストから自動でインデックスを解決\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパス情報を解析し、依存関係も自動で登録\r\n * - walkWildcardPatternでワイルドカード階層を再帰的に探索し、全インデックス組み合わせを列挙\r\n * - resolveで各インデックス組み合わせに対応する値を取得し、配列で返却\r\n * - getContextListIndexで現在のループインデックスを取得\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IReadonlyStateProxy, IReadonlyStateHandler } from \"../types\";\r\nimport { resolveReadonly } from \"./resolveReadonly.js\";\r\nimport { getContextListIndex } from \"../methods/getContextListIndex\";\r\n\r\nexport function getAllReadonly(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IReadonlyStateProxy,\r\n  handler: IReadonlyStateHandler\r\n):Function {\r\n    const resolve = resolveReadonly(target, prop, receiver, handler);\r\n    return (path: string, indexes?: number[]): any[] => {\r\n      const info = getStructuredPathInfo(path);\r\n      if (handler.lastTrackingStack != null) {\r\n        // trackedGettersに含まれる場合はsetTrackingで依存追跡を有効化\r\n        if (handler.engine.trackedGetters.has(handler.lastTrackingStack.pattern)) {\r\n          handler.engine.addDependentProp(handler.lastTrackingStack, info, \"reference\");\r\n        }\r\n      }\r\n  \r\n      if (typeof indexes === \"undefined\") {\r\n        for(let i = 0; i < info.wildcardInfos.length; i++) {\r\n          const wildcardPattern = info.wildcardInfos[i] ?? raiseError(`wildcardPattern is null`);\r\n          const listIndex = getContextListIndex(handler, wildcardPattern.pattern);\r\n          if (listIndex) {\r\n            indexes = listIndex.indexes;\r\n            break;\r\n          }\r\n        }\r\n        if (typeof indexes === \"undefined\") {\r\n          indexes = [];\r\n        }\r\n      }\r\n      const walkWildcardPattern = (\r\n        wildcardParentInfos: IStructuredPathInfo[],\r\n        wildardIndexPos: number,\r\n        listIndex: IListIndex | null,\r\n        indexes: number[],\r\n        indexPos: number,\r\n        parentIndexes: number[],\r\n        results: number[][]\r\n      ) => {\r\n        const wildcardParentPattern = wildcardParentInfos[wildardIndexPos] ?? null;\r\n        if (wildcardParentPattern === null) {\r\n          results.push(parentIndexes);\r\n          return;\r\n        }\r\n        const listIndexSet = handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n        const listIndexes = Array.from(listIndexSet);\r\n        const index = indexes[indexPos] ?? null;\r\n        if (index === null) {\r\n          for(let i = 0; i < listIndexes.length; i++) {\r\n            const listIndex = listIndexes[i];\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results);\r\n          }\r\n        } else {\r\n          const listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n          if ((wildardIndexPos + 1) < wildcardParentInfos.length) {\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results\r\n            );\r\n          }\r\n        }\r\n      }\r\n      const resultIndexes: number[][] = [];\r\n      walkWildcardPattern(\r\n        info.wildcardParentInfos, \r\n        0, \r\n        null, \r\n        indexes, \r\n        0, \r\n        [], \r\n        resultIndexes\r\n      );\r\n      const resultValues: any[] = [];\r\n      for(let i = 0; i < resultIndexes.length; i++) {\r\n        resultValues.push(resolve(\r\n          info.pattern,\r\n          resultIndexes[i]\r\n        ));\r\n      }\r\n      return resultValues;\r\n    }\r\n  }","/**\r\n * setCacheable.ts\r\n *\r\n * StateClassの内部APIとして、キャッシュ可能なスコープを一時的に有効化し、\r\n * 指定したコールバック処理をキャッシュ付きで実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.cacheableをtrueに設定し、キャッシュ用オブジェクトを初期化\r\n * - 指定したcallbackをキャッシュ有効状態で実行\r\n * - finallyで必ずcacheableをfalseに戻し、スコープ外ではキャッシュを無効化\r\n *\r\n * 設計ポイント:\r\n * - コールバック実行中のみキャッシュを有効化し、スコープ外への影響を防止\r\n * - finallyで状態復元を保証し、例外発生時も安全\r\n */\r\nimport { IReadonlyStateHandler } from \"../types\";\r\n\r\nexport function setCacheable(handler: IReadonlyStateHandler, callback: () => void): void {\r\n  handler.cacheable = true;\r\n  handler.cache = {}\r\n  try {\r\n    callback();\r\n  } finally {\r\n    handler.cacheable = false;\r\n  }\r\n}\r\n","/**\r\n * createReadonlyStateProxy.ts\r\n *\r\n * StateClassの「読み取り専用」プロキシを生成するための実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - Stateオブジェクトに対して、読み取り専用のProxyを作成\r\n * - StateHandlerクラスで各種APIやトラップ（get/set）を実装\r\n * - getトラップでバインディングやAPI呼び出し、依存解決などに対応\r\n * - setトラップではエラーを投げて書き込みを禁止\r\n *\r\n * 設計ポイント:\r\n * - StateHandlerはIReadonlyStateHandlerを実装し、状態管理やAPI呼び出しの基盤となる\r\n * - callableApiに各種APIシンボルと関数をマッピングし、柔軟なAPI拡張が可能\r\n * - createReadonlyStateProxyで一貫した生成・利用が可能\r\n * - 依存解決やキャッシュ、ループ・プロパティ参照スコープ管理など多機能な設計\r\n */\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IReadonlyStateHandler, IState, IReadonlyStateProxy } from \"./types\";\r\nimport { getReadonly as trapGet } from \"./traps/getReadonly.js\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\n\r\nconst STACK_DEPTH = 32;\r\n\r\nclass StateHandler implements IReadonlyStateHandler {\r\n  engine   : IComponentEngine;\r\n  cacheable: boolean = false;\r\n  cache    : {[key:number]:any} = {};\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: (IStructuredPathInfo | null)[] = Array(STACK_DEPTH).fill(null);\r\n  trackingIndex: number = -1;\r\n  structuredPathInfoStack: (IStructuredPathInfo | null)[] = Array(STACK_DEPTH).fill(null);\r\n  listIndexStack: (IListIndex | null)[] = Array(STACK_DEPTH).fill(null);\r\n  refIndex: number = -1;\r\n  loopContext: ILoopContext | null = null;\r\n  \r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IReadonlyStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IReadonlyStateProxy\r\n  ): boolean {\r\n    raiseError(`Cannot set property ${String(prop)} of readonly state.`);\r\n  }\r\n}\r\n\r\nexport function createReadonlyStateProxy(\r\n  engine: IComponentEngine, \r\n  state: Object\r\n): IReadonlyStateProxy {\r\n  return new Proxy<IState>(state, new StateHandler(engine)) as IReadonlyStateProxy;\r\n}\r\n\r\n","/**\r\n * getByRef.ts\r\n *\r\n * StateClassの内部APIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * 状態オブジェクト（target）から値を取得するための関数（getByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定されたパス・インデックスに対応するState値を取得（多重ループやワイルドカードにも対応）\r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyで値をキャッシュ）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * - 存在しない場合は親infoやlistIndexを辿って再帰的に値を取得\r\n *\r\n * 設計ポイント:\r\n * - handler.engine.trackedGettersに含まれる場合はsetTrackingで依存追跡を有効化\r\n * - キャッシュ有効時はrefKeyで値をキャッシュし、取得・再利用を最適化\r\n * - ワイルドカードや多重ループにも柔軟に対応し、再帰的な値取得を実現\r\n * - finallyでキャッシュへの格納を保証\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IWritableStateHandler, IWritableStateProxy } from \"../types\";\r\nimport { setStatePropertyRef } from \"./setStatePropertyRef\";\r\nimport { setTracking } from \"./setTracking.js\";\r\n\r\n/**\r\n * 構造化パス情報(info, listIndex)をもとに、状態オブジェクト(target)から値を取得する。\r\n * \r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyでキャッシュ）\r\n * - ネスト・ワイルドカード対応（親infoやlistIndexを辿って再帰的に値を取得）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * \r\n * @param target    状態オブジェクト\r\n * @param info      構造化パス情報\r\n * @param listIndex リストインデックス（多重ループ対応）\r\n * @param receiver  プロキシ\r\n * @param handler   状態ハンドラ\r\n * @returns         対象プロパティの値\r\n */\r\nfunction _getByRef(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  receiver : IWritableStateProxy,\r\n  handler  : IWritableStateHandler\r\n): any {\r\n  // 親子関係のあるgetterが存在する場合は、外部依存から取得\r\n  // ToDo: stateにgetterが存在する（パスの先頭が一致する）場合はgetter経由で取得\r\n  if (handler.engine.stateOutput.startsWith(info) && handler.engine.getters.intersection(info.cumulativePathSet).size === 0) {\r\n    return handler.engine.stateOutput.get(info, listIndex);\r\n  }\r\n\r\n  // パターンがtargetに存在する場合はgetter経由で取得\r\n  if (info.pattern in target) {\r\n    return setStatePropertyRef(handler, info, listIndex, () => {\r\n      return Reflect.get(target, info.pattern, receiver);\r\n    });\r\n  } else {\r\n    // 存在しない場合は親infoを辿って再帰的に取得\r\n    const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n    const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n    const parentValue = getByRefWritable(target, parentInfo, parentListIndex, receiver, handler);\r\n    const lastSegment = info.lastSegment;\r\n    if (lastSegment === \"*\") {\r\n      // ワイルドカードの場合はlistIndexのindexでアクセス\r\n      const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n      return Reflect.get(parentValue, index);\r\n    } else {\r\n      // 通常のプロパティアクセス\r\n      return Reflect.get(parentValue, lastSegment);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * trackedGettersに含まれる場合は依存追跡(setTracking)を有効化し、値取得を行う。\r\n * それ以外は通常の_getByRefで取得。\r\n */\r\nexport function getByRefWritable(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  receiver : IWritableStateProxy,\r\n  handler  : IWritableStateHandler\r\n): any {\r\n  return setTracking(info, handler, () => {\r\n    return _getByRef(target, info, listIndex, receiver, handler);\r\n  });\r\n}\r\n","/**\r\n * setByRef.ts\r\n *\r\n * StateClassの内部APIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * 状態オブジェクト（target）に値を設定するための関数（setByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定されたパス・インデックスに対応するState値を設定（多重ループやワイルドカードにも対応）\r\n * - getter/setter経由で値設定時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * - 存在しない場合は親infoやlistIndexを辿って再帰的に値を設定\r\n * - 設定後はengine.updater.addUpdatedStatePropertyRefValueで更新情報を登録\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードや多重ループにも柔軟に対応し、再帰的な値設定を実現\r\n * - finallyで必ず更新情報を登録し、再描画や依存解決に利用\r\n * - getter/setter経由のスコープ切り替えも考慮した設計\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IWritableStateProxy, IWritableStateHandler } from \"../types\";\r\nimport { getByRefWritable } from \"./getByRefWritable\";\r\nimport { setStatePropertyRef } from \"./setStatePropertyRef\";\r\n\r\nexport function setByRef(\r\n    target   : Object, \r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any, \r\n    receiver : IWritableStateProxy,\r\n    handler  : IWritableStateHandler\r\n): any {\r\n  try {\r\n    // 親子関係のあるgetterが存在する場合は、外部依存を通じて値を設定\r\n    // ToDo: stateにgetterが存在する（パスの先頭が一致する）場合はgetter経由で取得\r\n    if (handler.engine.stateOutput.startsWith(info) && handler.engine.setters.intersection(info.cumulativePathSet).size === 0) {\r\n      return handler.engine.stateOutput.set(info, listIndex,value);\r\n    }\r\n    if (info.pattern in target) {\r\n      return setStatePropertyRef(handler, info, listIndex, () => {\r\n        return Reflect.set(target, info.pattern, value, receiver);\r\n      });\r\n    } else {\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRefWritable(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return Reflect.set(parentValue, index, value);\r\n      } else {\r\n        return Reflect.set(parentValue, lastSegment, value);\r\n      }\r\n    }\r\n  } finally {\r\n    handler.engine.updater.addUpdatedStatePropertyRefValue(info, listIndex, value);\r\n  }\r\n}\r\n","/**\r\n * resolve.ts\r\n *\r\n * StateClassのAPIとして、パス（path）とインデックス（indexes）を指定して\r\n * Stateの値を取得・設定するための関数（resolve）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列パス（path）とインデックス配列（indexes）から、該当するState値の取得・設定を行う\r\n * - ワイルドカードや多重ループを含むパスにも対応\r\n * - value未指定時は取得（getByRef）、指定時は設定（setByRef）を実行\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパスを解析し、ワイルドカード階層ごとにリストインデックスを解決\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n * - getByRef/setByRefで値の取得・設定を一元的に処理\r\n * - 柔軟なバインディングやAPI経由での利用が可能\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IWritableStateProxy, IWritableStateHandler } from \"../types\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { getByRefWritable } from \"../methods/getByRefWritable\";\r\n\r\nexport function resolveWritable(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IWritableStateProxy,\r\n  handler: IWritableStateHandler\r\n): Function {\r\n  return (path: string, indexes: number[], value?: any): any => {\r\n    const info = getStructuredPathInfo(path);\r\n    if (handler.lastTrackingStack != null) {\r\n      // trackedGettersに含まれる場合はsetTrackingで依存追跡を有効化\r\n      if (handler.engine.trackedGetters.has(handler.lastTrackingStack.pattern)) {\r\n        handler.engine.addDependentProp(handler.lastTrackingStack, info, \"reference\");\r\n      }\r\n    }\r\n\r\n    let listIndex: IListIndex | null = null;\r\n    for(let i = 0; i < info.wildcardParentInfos.length; i++) {\r\n      const wildcardParentPattern = info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPath is null`);\r\n      const listIndexes: IListIndex[] = Array.from(handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? []);\r\n      const index = indexes[i] ?? raiseError(`index is null`);\r\n      listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    if (typeof value === \"undefined\") {\r\n      return getByRefWritable(target, info, listIndex, receiver, handler);\r\n    } else {\r\n      return setByRef(target, info, listIndex, value, receiver, handler);\r\n    }\r\n  };\r\n} ","/**\r\n * get.ts\r\n *\r\n * StateClassのProxyトラップとして、プロパティアクセス時の値取得処理を担う関数（get）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列プロパティの場合、特殊プロパティ（$1〜$9, $resolve, $getAll, $navigate）に応じた値やAPIを返却\r\n * - 通常のプロパティはgetResolvedPathInfoでパス情報を解決し、getListIndexでリストインデックスを取得\r\n * - getByRefで構造化パス・リストインデックスに対応した値を取得\r\n * - シンボルプロパティの場合はhandler.callableApi経由でAPIを呼び出し\r\n * - それ以外はReflect.getで通常のプロパティアクセスを実行\r\n *\r\n * 設計ポイント:\r\n * - $1〜$9は直近のStatePropertyRefのリストインデックス値を返す特殊プロパティ\r\n * - $resolve, $getAll, $navigateはAPI関数やルーターインスタンスを返す\r\n * - 通常のプロパティアクセスもバインディングや多重ループに対応\r\n * - シンボルAPIやReflect.getで拡張性・互換性も確保\r\n */\r\nimport { getRouter } from \"../../Router/Router.js\";\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { getListIndex } from \"../methods/getListIndex.js\";\r\nimport { IWritableStateHandler, IWritableStateProxy } from \"../types.js\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetByRefSymbol } from \"../symbols.js\";\r\nimport { getByRefWritable } from \"../methods/getByRefWritable.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types.js\";\r\nimport { IListIndex } from \"../../ListIndex/types.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { resolveWritable } from \"../apis/resolveWritable.js\";\r\nimport { getAllWritable } from \"../apis/getAllWritable.js\";\r\nimport { connectedCallback } from \"../apis/connectedCallback.js\";\r\nimport { disconnectedCallback } from \"../apis/disconnectedCallback.js\";\r\nimport { trackDependency } from \"../apis/trackDependency.js\";\r\n\r\nexport function getWritable(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  receiver: IWritableStateProxy,\r\n  handler : IWritableStateHandler\r\n): any {\r\n  if (typeof prop === \"string\") {\r\n    if (prop.charCodeAt(0) === 36) {\r\n      if (prop.length === 2) {\r\n        const d = prop.charCodeAt(1) - 48;\r\n        if (d >= 1 && d <= 9) {\r\n          const listIndex = handler.listIndexStack[handler.refIndex];\r\n          return listIndex?.at(d - 1)?.index ?? raiseError(`ListIndex not found: ${prop}`);\r\n        }\r\n      }\r\n      switch (prop) {\r\n        case \"$resolve\":\r\n          return resolveWritable(target, prop, receiver, handler);\r\n        case \"$getAll\":\r\n          return getAllWritable(target, prop, receiver, handler);\r\n        case \"$trackDependency\":\r\n          return trackDependency(target, prop, receiver, handler);\r\n        case \"$navigate\":\r\n          return (to:string) => getRouter()?.navigate(to);\r\n      }\r\n    }\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, receiver, handler);\r\n    return getByRefWritable(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      receiver,\r\n      handler\r\n    );\r\n\r\n  } else if (typeof prop === \"symbol\") {\r\n    switch (prop) {\r\n      case GetByRefSymbol: \r\n        return (info: IStructuredPathInfo, listIndex: IListIndex | null) => \r\n          getByRefWritable(target, info, listIndex, receiver, handler);\r\n      case SetByRefSymbol: \r\n        return (info: IStructuredPathInfo, listIndex: IListIndex | null, value: any) => \r\n          setByRef(target, info, listIndex, value, receiver, handler);\r\n      case ConnectedCallbackSymbol:\r\n        return () => connectedCallback(target, prop, receiver, handler);\r\n      case DisconnectedCallbackSymbol: \r\n        return () => disconnectedCallback(target, prop, receiver, handler);\r\n      default:\r\n        return Reflect.get(\r\n          target, \r\n          prop, \r\n          receiver\r\n        );\r\n    }\r\n  }\r\n}\r\n","/**\r\n * getAll.ts\r\n *\r\n * StateClassのAPIとして、ワイルドカードを含むStateプロパティパスに対応した\r\n * 全要素取得関数（getAll）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定パス（path）に一致する全てのState要素を配列で取得\r\n * - 多重ループやワイルドカード（*）を含むパスにも対応\r\n * - indexes未指定時は現在のループコンテキストから自動でインデックスを解決\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパス情報を解析し、依存関係も自動で登録\r\n * - walkWildcardPatternでワイルドカード階層を再帰的に探索し、全インデックス組み合わせを列挙\r\n * - resolveで各インデックス組み合わせに対応する値を取得し、配列で返却\r\n * - getContextListIndexで現在のループインデックスを取得\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IWritableStateHandler, IWritableStateProxy } from \"../types\";\r\nimport { resolveWritable } from \"./resolveWritable.js\";\r\nimport { getContextListIndex } from \"../methods/getContextListIndex\";\r\n\r\nexport function getAllWritable(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IWritableStateProxy,\r\n  handler: IWritableStateHandler\r\n):Function {\r\n    const resolve = resolveWritable(target, prop, receiver, handler);\r\n    return (path: string, indexes?: number[]): any[] => {\r\n      const info = getStructuredPathInfo(path);\r\n      if (handler.lastTrackingStack != null) {\r\n        // trackedGettersに含まれる場合はsetTrackingで依存追跡を有効化\r\n        if (handler.engine.trackedGetters.has(handler.lastTrackingStack.pattern)) {\r\n          handler.engine.addDependentProp(handler.lastTrackingStack, info, \"reference\");\r\n        }\r\n      }\r\n  \r\n      if (typeof indexes === \"undefined\") {\r\n        for(let i = 0; i < info.wildcardInfos.length; i++) {\r\n          const wildcardPattern = info.wildcardInfos[i] ?? raiseError(`wildcardPattern is null`);\r\n          const listIndex = getContextListIndex(handler, wildcardPattern.pattern);\r\n          if (listIndex) {\r\n            indexes = listIndex.indexes;\r\n            break;\r\n          }\r\n        }\r\n        if (typeof indexes === \"undefined\") {\r\n          indexes = [];\r\n        }\r\n      }\r\n      const walkWildcardPattern = (\r\n        wildcardParentInfos: IStructuredPathInfo[],\r\n        wildardIndexPos: number,\r\n        listIndex: IListIndex | null,\r\n        indexes: number[],\r\n        indexPos: number,\r\n        parentIndexes: number[],\r\n        results: number[][]\r\n      ) => {\r\n        const wildcardParentPattern = wildcardParentInfos[wildardIndexPos] ?? null;\r\n        if (wildcardParentPattern === null) {\r\n          results.push(parentIndexes);\r\n          return;\r\n        }\r\n        const listIndexSet = handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n        const listIndexes = Array.from(listIndexSet);\r\n        const index = indexes[indexPos] ?? null;\r\n        if (index === null) {\r\n          for(let i = 0; i < listIndexes.length; i++) {\r\n            const listIndex = listIndexes[i];\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results);\r\n          }\r\n        } else {\r\n          const listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n          if ((wildardIndexPos + 1) < wildcardParentInfos.length) {\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results\r\n            );\r\n          }\r\n        }\r\n      }\r\n      const resultIndexes: number[][] = [];\r\n      walkWildcardPattern(\r\n        info.wildcardParentInfos, \r\n        0, \r\n        null, \r\n        indexes, \r\n        0, \r\n        [], \r\n        resultIndexes\r\n      );\r\n      const resultValues: any[] = [];\r\n      for(let i = 0; i < resultIndexes.length; i++) {\r\n        resultValues.push(resolve(\r\n          info.pattern,\r\n          resultIndexes[i]\r\n        ));\r\n      }\r\n      return resultValues;\r\n    }\r\n  }","/**\r\n * connectedCallback.ts\r\n *\r\n * StateClassのライフサイクルフック「$connectedCallback」を呼び出すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - オブジェクト（target）に$connectedCallbackメソッドが定義されていれば呼び出す\r\n * - コールバックはtargetのthisコンテキストで呼び出し、IReadonlyStateProxy（receiver）を引数として渡す\r\n * - 非同期関数として実行可能（await対応）\r\n *\r\n * 設計ポイント:\r\n * - Reflect.getで$connectedCallbackプロパティを安全に取得\r\n * - 存在しない場合は何もしない\r\n * - ライフサイクル管理やカスタム初期化処理に利用\r\n */\r\nimport { IWritableStateProxy, IWritableStateHandler } from \"../types\";\r\n\r\nconst CONNECTED_CALLBACK = \"$connectedCallback\";\r\n\r\nexport function connectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IWritableStateProxy,\r\n  handler: IWritableStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, CONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","/**\r\n * disconnectedCallback.ts\r\n *\r\n * StateClassのライフサイクルフック「$disconnectedCallback」を呼び出すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - オブジェクト（target）に$disconnectedCallbackメソッドが定義されていれば呼び出す\r\n * - コールバックはtargetのthisコンテキストで呼び出し、IReadonlyStateProxy（receiver）を引数として渡す\r\n * - 非同期関数として実行可能（await対応）\r\n *\r\n * 設計ポイント:\r\n * - Reflect.getで$disconnectedCallbackプロパティを安全に取得\r\n * - 存在しない場合は何もしない\r\n * - ライフサイクル管理やクリーンアップ処理に利用\r\n */\r\nimport { IWritableStateProxy, IWritableStateHandler } from \"../types\";\r\n\r\nconst DISCONNECTED_CALLBACK = \"$disconnectedCallback\";\r\n\r\nexport function disconnectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IWritableStateProxy,\r\n  handler: IWritableStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, DISCONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","/**\r\n * createWritableStateProxy.ts\r\n *\r\n * StateClassの「書き込み可能」プロキシを生成するための実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - Stateオブジェクトに対して、書き込み可能なProxyを作成\r\n * - StateHandlerクラスで各種APIやトラップ（get/set）を実装\r\n * - getトラップでバインディングやAPI呼び出し、依存解決などに対応\r\n * - setトラップで値の書き込みや副作用（依存解決・再描画）を一元管理\r\n *\r\n * 設計ポイント:\r\n * - StateHandlerはIWritableStateHandlerを実装し、状態管理やAPI呼び出しの基盤となる\r\n * - callableApiに各種APIシンボルと関数をマッピングし、柔軟なAPI拡張が可能\r\n * - createWritableStateProxyで一貫した生成・利用が可能\r\n * - 依存解決やキャッシュ、ループ・プロパティ参照スコープ管理など多機能な設計\r\n */\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IState, IWritableStateHandler, IWritableStateProxy } from \"./types\";\r\nimport { getWritable as trapGet } from \"./traps/getWritable.js\";\r\nimport { set as trapSet } from \"./traps/set.js\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { setLoopContext } from \"./methods/setLoopContext\";\r\n\r\nconst STACK_DEPTH = 32;\r\n\r\nclass StateHandler implements IWritableStateHandler {\r\n  engine   : IComponentEngine;\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: (IStructuredPathInfo | null)[] = Array(STACK_DEPTH).fill(null);\r\n  trackingIndex: number = -1;\r\n  structuredPathInfoStack: (IStructuredPathInfo | null)[] = Array(STACK_DEPTH).fill(null);\r\n  listIndexStack: (IListIndex | null)[] = Array(STACK_DEPTH).fill(null);\r\n  refIndex: number = -1;\r\n  loopContext: ILoopContext | null = null;\r\n  \r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IWritableStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IWritableStateProxy\r\n  ): boolean {\r\n    return trapSet(target, prop, value, receiver, this);\r\n  }\r\n}\r\n\r\nexport async function useWritableStateProxy(\r\n  engine: IComponentEngine, \r\n  state: Object,\r\n  loopContext: ILoopContext | null = null,\r\n  callback: (stateProxy: IWritableStateProxy) => Promise<void>\r\n): Promise<void> {\r\n  const handler = new StateHandler(engine);\r\n  const stateProxy = new Proxy<IState>(state, handler) as IWritableStateProxy;\r\n  return setLoopContext(handler, loopContext, async () => {\r\n    await callback(stateProxy);\r\n  });\r\n}\r\n\r\n","/**\r\n * set.ts\r\n *\r\n * StateClassのProxyトラップとして、プロパティ設定時の値セット処理を担う関数（set）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列プロパティの場合、getResolvedPathInfoでパス情報を解決し、getListIndexでリストインデックスを取得\r\n * - setByRefで構造化パス・リストインデックスに対応した値設定を実行\r\n * - それ以外（シンボル等）の場合はReflect.setで通常のプロパティ設定を実行\r\n *\r\n * 設計ポイント:\r\n * - バインディングや多重ループ、ワイルドカードを含むパスにも柔軟に対応\r\n * - setByRefを利用することで、依存解決や再描画などの副作用も一元管理\r\n * - Reflect.setで標準的なプロパティ設定の互換性も確保\r\n */\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { getListIndex } from \"../methods/getListIndex.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { IStateHandler, IReadonlyStateProxy, IWritableStateProxy, IWritableStateHandler } from \"../types\";\r\n\r\nexport function set(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  value   : any, \r\n  receiver: IWritableStateProxy,\r\n  handler : IWritableStateHandler\r\n): boolean {\r\n  if (typeof prop === \"string\") {\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, receiver, handler);\r\n    return setByRef(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      value, \r\n      receiver,\r\n      handler\r\n    );\r\n  } else {\r\n    return Reflect.set(\r\n      target, \r\n      prop, \r\n      value, \r\n      receiver\r\n    );\r\n  }\r\n}\r\n","/**\r\n * setLoopContext.ts\r\n *\r\n * StateClassの内部APIとして、ループコンテキスト（ILoopContext）を一時的に設定し、\r\n * 指定した非同期コールバックをそのスコープ内で実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.loopContextにループコンテキストを一時的に設定\r\n * - 既にループコンテキストが設定されている場合はエラーを投げる\r\n * - loopContextが存在する場合はasyncSetStatePropertyRefでスコープを設定しコールバックを実行\r\n * - loopContextがnullの場合はそのままコールバックを実行\r\n * - finallyで必ずloopContextをnullに戻し、スコープ外への影響を防止\r\n *\r\n * 設計ポイント:\r\n * - ループバインディングや多重ループ時のスコープ管理を安全に行う\r\n * - finallyで状態復元を保証し、例外発生時も安全\r\n * - 非同期処理にも対応\r\n */\r\nimport { ILoopContext } from \"../../LoopContext/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IWritableStateHandler } from \"../types\";\r\nimport { asyncSetStatePropertyRef } from \"./asyncSetStatePropertyRef\";\r\n\r\nexport async function setLoopContext(\r\n  handler: IWritableStateHandler,\r\n  loopContext: ILoopContext | null,\r\n  callback: () => Promise<void>\r\n): Promise<void> {\r\n  if (handler.loopContext) {\r\n    raiseError('already in loop context');\r\n  }\r\n  handler.loopContext = loopContext;\r\n  try {\r\n    if (loopContext) {\r\n      await asyncSetStatePropertyRef(handler, loopContext.info, loopContext.listIndex, callback);\r\n    } else {\r\n      await callback();\r\n    }\r\n  } finally {\r\n    handler.loopContext = null;\r\n  }\r\n}\r\n","/**\r\n * asyncSetStatePropertyRef.ts\r\n *\r\n * 状態プロパティ参照のスコープを一時的に設定し、非同期コールバックを実行するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - handlerのstructuredPathInfoStackとlistIndexStackに、infoとlistIndexをpushしてスコープを設定\r\n * - 指定した非同期コールバック（callback）をそのスコープ内で実行\r\n * - callback実行後は必ずpopしてスコープを元に戻す（finallyで保証）\r\n *\r\n * 設計ポイント:\r\n * - 非同期処理中も正しいスコープ情報（パス・リストインデックス）が維持される\r\n * - ネストした非同期処理にも対応可能\r\n * - スコープのpush/popは例外発生時も確実に実行される\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\n/**\r\n * 状態プロパティ参照のスコープを一時的に設定し、非同期コールバックを実行します。\r\n * \r\n * @param handler   スコープ管理用のハンドラ\r\n * @param info      現在の構造化パス情報\r\n * @param listIndex 現在のリストインデックス（ネスト対応用）\r\n * @param callback  スコープ内で実行する非同期処理\r\n * \r\n * スタックに info と listIndex をpushし、callback実行後に必ずpopします。\r\n * これにより、非同期処理中も正しいスコープ情報が維持されます。\r\n */\r\nexport async function asyncSetStatePropertyRef(\r\n  handler: IStateHandler,\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  callback: () => Promise<void>\r\n): Promise<void> {\r\n  handler.refIndex++;\r\n  if (handler.refIndex >= handler.structuredPathInfoStack.length) {\r\n    handler.structuredPathInfoStack.push(null);\r\n    handler.listIndexStack.push(null);\r\n  }\r\n  handler.structuredPathInfoStack[handler.refIndex] = info;\r\n  handler.listIndexStack[handler.refIndex] = listIndex;\r\n  try {\r\n    await callback();\r\n  } finally {\r\n    handler.structuredPathInfoStack[handler.refIndex] = null;\r\n    handler.listIndexStack[handler.refIndex] = null;\r\n    handler.refIndex--;\r\n  }\r\n}\r\n","import { IBinding } from \"../DataBinding/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { StructiveComponent } from \"../WebComponents/types\";\r\nimport { IComponentStateBinding } from \"./types\";\r\n\r\nclass ComponentStateBinding implements IComponentStateBinding {\r\n  parentPaths: Set<string> = new Set<string>();\r\n  childPaths: Set<string> = new Set<string>();\r\n  childPathByParentPath: Map<string, string> = new Map();\r\n  parentPathByChildPath: Map<string, string> = new Map();\r\n  bindingByParentPath: Map<string, IBinding> = new Map();\r\n  bindingByChildPath: Map<string, IBinding> = new Map();\r\n\r\n  addBinding(binding: IBinding): void {\r\n    const parentPath = binding.bindingState.pattern;\r\n    const childPath = binding.bindingNode.subName;\r\n    if (this.childPathByParentPath.has(parentPath)) {\r\n      throw new Error(`Parent path \"${parentPath}\" already has a child path.`);\r\n    }\r\n    if (this.parentPathByChildPath.has(childPath)) {\r\n      throw new Error(`Child path \"${childPath}\" already has a parent path.`);\r\n    }\r\n    this.childPathByParentPath.set(parentPath, childPath);\r\n    this.parentPathByChildPath.set(childPath, parentPath);\r\n    this.parentPaths.add(parentPath);\r\n    this.childPaths.add(childPath);\r\n    this.bindingByParentPath.set(parentPath, binding);\r\n    this.bindingByChildPath.set(childPath, binding);\r\n  }\r\n  \r\n  getChildPath(parentPath: string): string | undefined {\r\n    return this.childPathByParentPath.get(parentPath);\r\n  }\r\n\r\n  getParentPath(childPath: string): string | undefined {\r\n    return this.parentPathByChildPath.get(childPath);\r\n  }\r\n\r\n  toParentPathFromChildPath(childPath: string): string {\r\n    const childPathInfo = getStructuredPathInfo(childPath);\r\n    const matchPaths = childPathInfo.cumulativePathSet.intersection(this.childPaths);\r\n    if (matchPaths.size === 0) {\r\n      raiseError(`No parent path found for child path \"${childPath}\".`);\r\n    }\r\n    const matchPathArray = Array.from(matchPaths);\r\n    const longestMatchPath = matchPathArray[matchPathArray.length - 1];\r\n    const remainPath = childPath.slice(longestMatchPath.length); // include the dot\r\n    const matchParentPath = this.parentPathByChildPath.get(longestMatchPath);\r\n    if (typeof matchParentPath === \"undefined\") {\r\n      raiseError(`No parent path found for child path \"${childPath}\".`);\r\n    }\r\n    return matchParentPath + remainPath;\r\n  }\r\n\r\n  toChildPathFromParentPath(parentPath: string): string {\r\n     const parentPathInfo = getStructuredPathInfo(parentPath);\r\n    const matchPaths = parentPathInfo.cumulativePathSet.intersection(this.parentPaths);\r\n    if (matchPaths.size === 0) {\r\n      raiseError(`No child path found for parent path \"${parentPath}\".`);\r\n    }\r\n    const matchPathArray = Array.from(matchPaths);\r\n    const longestMatchPath = matchPathArray[matchPathArray.length - 1];\r\n    const remainPath = parentPath.slice(longestMatchPath.length); // include the dot\r\n    const matchChildPath = this.childPathByParentPath.get(longestMatchPath);\r\n    if (typeof matchChildPath === \"undefined\") {\r\n      raiseError(`No child path found for parent path \"${parentPath}\".`);\r\n    }\r\n    return matchChildPath + remainPath;\r\n  }\r\n\r\n  startsWithByChildPath(childPathInfo: IStructuredPathInfo): string | null {\r\n    if (this.childPaths.size === 0) {\r\n      return null;\r\n    }\r\n    const matchPaths = childPathInfo.cumulativePathSet.intersection(this.childPaths);\r\n    if (matchPaths.size === 0) {\r\n      return null;\r\n    } else {\r\n      const matches = Array.from(matchPaths);\r\n      const longestMatchPath = matches[matches.length - 1];\r\n      return longestMatchPath;\r\n    }\r\n  }\r\n\r\n  bind(parentComponent: StructiveComponent, childComponent: StructiveComponent): void {\r\n    // bindParentComponent\r\n    const bindings = parentComponent.getBindingsFromChild(childComponent);\r\n    for (const binding of bindings ?? []) {\r\n      this.addBinding(binding);\r\n    }\r\n  }\r\n}\r\n\r\nexport function createComponentStateBinding(): IComponentStateBinding {\r\n  return new ComponentStateBinding();\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IComponentStateBinding } from \"../ComponentStateBinding/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { AssignStateSymbol, NotifyRedrawSymbol } from \"./symbols\";\r\nimport { IComponentStateInput, IComponentStateInputHandler } from \"./types\";\r\n\r\nclass ComponentStateInputHandler implements IComponentStateInputHandler {\r\n  private componentStateBinding: IComponentStateBinding;\r\n  private engine: IComponentEngine;\r\n  constructor(engine:IComponentEngine, componentStateBinding: IComponentStateBinding) {\r\n    this.componentStateBinding = componentStateBinding;\r\n    this.engine = engine;\r\n  }\r\n\r\n  assignState(object: any): void {\r\n    this.engine.useWritableStateProxy(null, async (state) => {\r\n      for(const [key, value] of Object.entries(object)) {\r\n        const childPathInfo = getStructuredPathInfo(key);\r\n        this.engine.setPropertyValue(childPathInfo, null, value);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * listindexに一致するかどうかは事前にスクリーニングしておく\r\n   * @param refs \r\n   */\r\n  notifyRedraw(refs: IStatePropertyRef[]): void {\r\n    for(const parentPathRef of refs) {\r\n      try {\r\n        const childPath = this.componentStateBinding.toChildPathFromParentPath(parentPathRef.info.pattern);\r\n        const childPathInfo = getStructuredPathInfo(childPath);\r\n        const childListIndex = parentPathRef.listIndex;\r\n        const value = this.engine.getPropertyValue(childPathInfo, childListIndex)\r\n        this.engine.updater.addUpdatedStatePropertyRefValue(childPathInfo, childListIndex, value)\r\n      } catch(e) {\r\n        // 対象でないものは何もしない\r\n      }\r\n    }\r\n  }\r\n\r\n  get(target:any, prop:PropertyKey, receiver:IComponentStateInput) {\r\n    if (prop === AssignStateSymbol) {\r\n      return this.assignState.bind(this);\r\n    } else if (prop === NotifyRedrawSymbol) {\r\n      return this.notifyRedraw.bind(this);\r\n    } else if (typeof prop === \"string\") {\r\n      return this.engine.getPropertyValue(getStructuredPathInfo(prop), null);\r\n    }\r\n    raiseError(`Property \"${String(prop)}\" is not supported in ComponentStateInput.`);\r\n  }\r\n\r\n  set(target:any, prop:PropertyKey, value:any, receiver:IComponentStateInput): boolean {\r\n    if (typeof prop === \"string\") {\r\n      this.engine.setPropertyValue(getStructuredPathInfo(prop), null, value);\r\n      return true;\r\n    }\r\n    raiseError(`Property \"${String(prop)}\" is not supported in ComponentStateInput.`);\r\n  }\r\n}\r\n\r\nexport function createComponentStateInput(\r\n  engine: IComponentEngine,\r\n  componentStateBinding: IComponentStateBinding\r\n): IComponentStateInput {\r\n  const handler = new ComponentStateInputHandler(engine, componentStateBinding);\r\n  return new Proxy({}, handler) as IComponentStateInput;\r\n}","import { IComponentStateBinding } from \"../ComponentStateBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { GetByRefSymbol, SetByRefSymbol } from \"../StateClass/symbols\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IComponentStateOutput } from \"./types\";\r\n\r\nclass ComponentStateOutput implements IComponentStateOutput {\r\n  binding: IComponentStateBinding;\r\n  constructor(binding: IComponentStateBinding) {\r\n    this.binding = binding;\r\n  }\r\n\r\n  get(pathInfo: IStructuredPathInfo, listIndex: IListIndex | null): any {\r\n    const childPath = this.binding.startsWithByChildPath(pathInfo);\r\n    if (childPath === null) {\r\n      raiseError(`No child path found for path \"${pathInfo.toString()}\".`);\r\n    }\r\n    const binding = this.binding.bindingByChildPath.get(childPath);\r\n    if (typeof binding === \"undefined\") {\r\n      raiseError(`No binding found for child path \"${childPath}\".`);\r\n    }\r\n    const parentPathInfo = getStructuredPathInfo(this.binding.toParentPathFromChildPath(pathInfo.pattern));\r\n    return binding.engine.readonlyState[GetByRefSymbol](parentPathInfo, listIndex ?? binding.bindingState.listIndex);\r\n  }\r\n\r\n  set(pathInfo: IStructuredPathInfo, listIndex: IListIndex | null, value: any): void {\r\n    const childPath = this.binding.startsWithByChildPath(pathInfo);\r\n    if (childPath === null) {\r\n      raiseError(`No child path found for path \"${pathInfo.toString()}\".`);\r\n    }\r\n    const binding = this.binding.bindingByChildPath.get(childPath);\r\n    if (typeof binding === \"undefined\") {\r\n      raiseError(`No binding found for child path \"${childPath}\".`);\r\n    }\r\n    const parentPathInfo = getStructuredPathInfo(this.binding.toParentPathFromChildPath(pathInfo.pattern));\r\n    const engine = binding.engine;\r\n    engine.useWritableStateProxy(null, async (state) => {\r\n      state[SetByRefSymbol](parentPathInfo, listIndex ?? binding.bindingState.listIndex, value);\r\n    });\r\n  }\r\n\r\n  startsWith(pathInfo: IStructuredPathInfo): boolean {\r\n    return this.binding.startsWithByChildPath(pathInfo) !== null;\r\n  }\r\n\r\n  getListIndexesSet(pathInfo:IStructuredPathInfo, listIndex:IListIndex | null): Set<IListIndex> | null {\r\n    const childPath = this.binding.startsWithByChildPath(pathInfo);\r\n    if (childPath === null) {\r\n      raiseError(`No child path found for path \"${pathInfo.toString()}\".`);\r\n    }\r\n    const binding = this.binding.bindingByChildPath.get(childPath);\r\n    if (typeof binding === \"undefined\") {\r\n      raiseError(`No binding found for child path \"${childPath}\".`);\r\n    }\r\n    const parentPathInfo = getStructuredPathInfo(this.binding.toParentPathFromChildPath(pathInfo.pattern));\r\n    return binding.engine.getListIndexesSet(parentPathInfo, listIndex);\r\n  }\r\n}\r\n\r\nexport function createComponentStateOutput(binding: IComponentStateBinding): IComponentStateOutput {\r\n  return new ComponentStateOutput(binding);\r\n}","import { createBindContent } from \"../DataBinding/BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../DataBinding/types\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { IState, IReadonlyStateProxy, IStructiveState, IWritableStateProxy } from \"../StateClass/types\";\r\nimport { IUpdater } from \"../Updater/types\";\r\nimport { createUpdater } from \"../Updater/updater.js\";\r\nimport { ComponentType, IComponentConfig, IComponentStatic, StructiveComponent } from \"../WebComponents/types\";\r\nimport { attachShadow } from \"./attachShadow.js\";\r\nimport { ISaveInfoByResolvedPathInfo, IComponentEngine } from \"./types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { buildListIndexTree } from \"../StateClass/buildListIndexTree.js\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetByRefSymbol, SetCacheableSymbol } from \"../StateClass/symbols.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { DependencyType, IDependencyEdge } from \"../DependencyWalker/types.js\";\r\nimport { createDependencyEdge } from \"../DependencyWalker/createDependencyEdge.js\";\r\nimport { createReadonlyStateProxy } from \"../StateClass/createReadonlyStateProxy.js\";\r\nimport { useWritableStateProxy } from \"../StateClass/useWritableStateProxy.js\";\r\nimport { IComponentStateBinding } from \"../ComponentStateBinding/types.js\";\r\nimport { createComponentStateBinding } from \"../ComponentStateBinding/createComponentStateBinding.js\";\r\nimport { createComponentStateInput } from \"../ComponentStateInput/createComponentStateInput.js\";\r\nimport { createComponentStateOutput } from \"../ComponentStateOutput/createComponentStateOutput.js\";\r\nimport { IComponentStateInput } from \"../ComponentStateInput/types.js\";\r\nimport { IComponentStateOutput } from \"../ComponentStateOutput/types.js\";\r\nimport { AssignStateSymbol } from \"../ComponentStateInput/symbols.js\";\r\nimport { registerStructiveComponent } from \"../WebComponents/findStructiveParent.js\";\r\n\r\n/**\r\n * ComponentEngineクラスは、Structiveコンポーネントの状態管理・依存関係管理・\r\n * バインディング・ライフサイクル・レンダリングなどの中核的な処理を担うエンジンです。\r\n *\r\n * 主な役割:\r\n * - 状態インスタンスやプロキシの生成・管理\r\n * - テンプレート・スタイルシート・フィルター・バインディング情報の管理\r\n * - 依存関係グラフ（dependentTree）の構築と管理\r\n * - バインディング情報やリスト情報の保存・取得\r\n * - ライフサイクル（connectedCallback/disconnectedCallback）処理\r\n * - Shadow DOMやスタイルシートの適用\r\n * - 状態プロパティの取得・設定\r\n * - バインディングの追加・存在判定・リスト管理\r\n *\r\n * 構造・設計上の特徴:\r\n * - 状態や依存関係、バインディング情報を効率的に管理するためのキャッシュやマップを多用\r\n * - テンプレートやリスト構造の多重管理に対応\r\n * - 非同期初期化やUpdaterによるバッチ的な状態更新設計\r\n * - 疎結合な設計で、各種ユーティリティやファクトリ関数と連携\r\n *\r\n * 典型的なWeb Componentsのライフサイクルやリアクティブな状態管理を、Structive独自の構造で実現しています。\r\n */\r\nexport class ComponentEngine implements IComponentEngine {\r\n  type          : ComponentType = 'autonomous';\r\n  config        : IComponentConfig;\r\n  template      : HTMLTemplateElement;\r\n  styleSheet    : CSSStyleSheet;\r\n  stateClass    : IStructiveState;\r\n  state         : IState;\r\n  readonlyState : IReadonlyStateProxy;\r\n  updater       : IUpdater;\r\n  inputFilters  : FilterWithOptions;\r\n  outputFilters : FilterWithOptions;\r\n  #bindContent  :IBindContent | null = null;\r\n  get bindContent(): IBindContent {\r\n    if (this.#bindContent === null) {\r\n      raiseError(\"bindContent is not initialized yet\");\r\n    }\r\n    return this.#bindContent;\r\n  }\r\n  baseClass     : typeof HTMLElement = HTMLElement;\r\n  owner         : StructiveComponent;\r\n  trackedGetters: Set<string>;\r\n  getters       : Set<string>;\r\n  setters       : Set<string>;\r\n\r\n  listInfoSet         : Set<IStructuredPathInfo> = new Set();\r\n  elementInfoSet      : Set<IStructuredPathInfo> = new Set();\r\n  bindingsByListIndex : WeakMap<IListIndex, Set<IBinding>> = new WeakMap();\r\n  dependentTree       : Map<IStructuredPathInfo, Set<IDependencyEdge>> = new Map();\r\n\r\n  bindingsByComponent: WeakMap<StructiveComponent, Set<IBinding>> = new WeakMap();\r\n  structiveChildComponents: Set<StructiveComponent> = new Set();\r\n\r\n  #waitForInitialize : PromiseWithResolvers<void> = Promise.withResolvers<void>();\r\n\r\n  #stateBinding: IComponentStateBinding = createComponentStateBinding();\r\n  stateInput: IComponentStateInput;\r\n  stateOutput: IComponentStateOutput;\r\n  #blockPlaceholder: Comment | null = null; // ブロックプレースホルダー\r\n  #blockParentNode: Node | null = null; // ブロックプレースホルダーの親ノード\r\n  #ignoreDissconnectedCallback: boolean = false; // disconnectedCallbackを無視するフラグ\r\n\r\n  constructor(config: IComponentConfig, owner: StructiveComponent) {\r\n    this.config = config;\r\n    if (this.config.extends) {\r\n      this.type = 'builtin';\r\n    }\r\n    const componentClass = owner.constructor as IComponentStatic;\r\n    this.template = componentClass.template;\r\n    this.styleSheet = componentClass.styleSheet;\r\n    this.stateClass = componentClass.stateClass;\r\n    this.state = new this.stateClass();\r\n    this.readonlyState = createReadonlyStateProxy(this, this.state);\r\n    this.updater = createUpdater(this);\r\n    this.inputFilters = componentClass.inputFilters;\r\n    this.outputFilters = componentClass.outputFilters;\r\n    this.owner =  owner;\r\n    this.trackedGetters = componentClass.trackedGetters;\r\n    this.getters = componentClass.getters;\r\n    this.setters = componentClass.setters;\r\n    this.stateInput = createComponentStateInput(this, this.#stateBinding);\r\n    this.stateOutput = createComponentStateOutput(this.#stateBinding);\r\n    // 依存関係の木を作成する\r\n    const checkDependentProp = (info: IStructuredPathInfo) => {\r\n      const parentInfo = info.parentInfo;\r\n      if (parentInfo === null) return;\r\n      this.addDependentProp(info, parentInfo, \"structured\");\r\n      checkDependentProp(parentInfo);\r\n    }\r\n    for(const path of componentClass.paths) {\r\n      const info = getStructuredPathInfo(path);\r\n      checkDependentProp(info);\r\n    }\r\n    // 配列のプロパティ、配列要素のプロパティを登録する\r\n    for(const listPath of componentClass.listPaths) {\r\n      this.listInfoSet.add(getStructuredPathInfo(listPath));\r\n      this.elementInfoSet.add(getStructuredPathInfo(listPath + \".*\"));\r\n    }\r\n    for(const listPath of this.stateClass.$listProperties ?? []) {\r\n      this.listInfoSet.add(getStructuredPathInfo(listPath));\r\n      this.elementInfoSet.add(getStructuredPathInfo(listPath + \".*\"));\r\n    }\r\n  }\r\n\r\n  setup(): void {\r\n    const componentClass = this.owner.constructor as IComponentStatic;\r\n    for(const info of this.listInfoSet) {\r\n      if (info.wildcardCount > 0) continue;\r\n      const value = this.readonlyState[GetByRefSymbol](info, null)\r\n      buildListIndexTree(this, info, null, value);\r\n    }\r\n    this.#bindContent = createBindContent(null, componentClass.id, this, null, null); // this.stateArrayPropertyNamePatternsが変更になる可能性がある\r\n  }\r\n\r\n  get waitForInitialize(): PromiseWithResolvers<void> {\r\n    return this.#waitForInitialize;\r\n  }\r\n\r\n  async connectedCallback(): Promise<void> {\r\n    await this.owner.parentStructiveComponent?.waitForInitialize.promise;\r\n    // コンポーネントの状態を初期化する\r\n    if (this.owner.dataset.state) {\r\n      // data-state属性から状態を取得する\r\n      try {\r\n        const json = JSON.parse(this.owner.dataset.state);\r\n        this.stateInput[AssignStateSymbol](json);\r\n      } catch(e) {\r\n        raiseError(\"Failed to parse state from dataset\");\r\n      }\r\n    }\r\n    const parentComponent = this.owner.parentStructiveComponent;\r\n    if (parentComponent) {\r\n      // 親コンポーネントの状態をバインドする\r\n      parentComponent.registerChildComponent(this.owner);\r\n      // 親コンポーネントの状態を子コンポーネントにバインドする\r\n      this.#stateBinding.bind(parentComponent, this.owner);\r\n    }\r\n    if (this.config.enableWebComponents) {\r\n      attachShadow(this.owner, this.config, this.styleSheet);\r\n    } else {\r\n      this.#blockParentNode = this.owner.parentNode;\r\n      this.#blockPlaceholder = document.createComment(\"Structive block placeholder\");\r\n      try {\r\n        this.#ignoreDissconnectedCallback = true; // disconnectedCallbackを無視するフラグを立てる\r\n        this.owner.replaceWith(this.#blockPlaceholder); // disconnectCallbackが呼ばれてしまう\r\n      } finally {\r\n        this.#ignoreDissconnectedCallback = false;\r\n      }\r\n    }\r\n\r\n    this.bindContent.render();\r\n    await this.useWritableStateProxy(null, async (stateProxy) => {\r\n      await stateProxy[ConnectedCallbackSymbol]();\r\n    });\r\n    // レンダリングが終わってから実行する\r\n    queueMicrotask(() => {\r\n      if (this.config.enableWebComponents) {\r\n        // Shadow DOMにバインドコンテンツをマウントする\r\n        this.bindContent.mount(this.owner.shadowRoot ?? this.owner);\r\n      } else {\r\n        // ブロックプレースホルダーの親ノードにバインドコンテンツをマウントする\r\n        const parentNode = this.#blockParentNode ?? raiseError(\"Block parent node is not set\");\r\n        this.bindContent.mountAfter(parentNode, this.#blockPlaceholder);\r\n      }\r\n      this.#waitForInitialize.resolve();\r\n    });\r\n  }\r\n\r\n  async disconnectedCallback(): Promise<void> {\r\n    if (this.#ignoreDissconnectedCallback) return; // disconnectedCallbackを無視するフラグが立っている場合は何もしない\r\n    await this.useWritableStateProxy(null, async (stateProxy) => {\r\n      await stateProxy[DisconnectedCallbackSymbol]();\r\n    });\r\n    // 親コンポーネントから登録を解除する\r\n    this.owner.parentStructiveComponent?.unregisterChildComponent(this.owner);\r\n    if (!this.config.enableWebComponents) {\r\n      this.#blockPlaceholder?.remove();\r\n      this.#blockPlaceholder = null;\r\n      this.#blockParentNode = null;\r\n    }\r\n  }\r\n\r\n  #saveInfoByListIndexByResolvedPathInfoId: { [id:number]: WeakMap<IListIndex,ISaveInfoByResolvedPathInfo> } = {};\r\n  #saveInfoByStructuredPathId: { [id:number]: ISaveInfoByResolvedPathInfo } = {};\r\n\r\n  createSaveInfo():ISaveInfoByResolvedPathInfo {\r\n    return {\r\n      list          : null,\r\n      listIndexesSet: null,\r\n      bindings      : [],\r\n    }\r\n  }\r\n\r\n  getSaveInfoByStatePropertyRef(info:IStructuredPathInfo, listIndex:IListIndex | null): ISaveInfoByResolvedPathInfo {\r\n    if (listIndex === null) {\r\n      let saveInfo = this.#saveInfoByStructuredPathId[info.id];\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        this.#saveInfoByStructuredPathId[info.id] = saveInfo;\r\n      }\r\n      return saveInfo;\r\n    } else {\r\n      let saveInfoByListIndex = this.#saveInfoByListIndexByResolvedPathInfoId[info.id];\r\n      if (typeof saveInfoByListIndex === \"undefined\") {\r\n        saveInfoByListIndex = new WeakMap<IListIndex, ISaveInfoByResolvedPathInfo>();\r\n        this.#saveInfoByListIndexByResolvedPathInfoId[info.id] = saveInfoByListIndex;\r\n      }\r\n      let saveInfo = saveInfoByListIndex.get(listIndex);\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        saveInfoByListIndex.set(listIndex, saveInfo);\r\n      }\r\n      return saveInfo;\r\n    }\r\n  }\r\n  \r\n  saveBinding(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    binding  : IBinding\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.bindings.push(binding);\r\n  }\r\n\r\n  saveListIndexesSet(\r\n    info              :IStructuredPathInfo, \r\n    listIndex         :IListIndex | null, \r\n    saveListIndexesSet:Set<IListIndex>\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.listIndexesSet = saveListIndexesSet;\r\n  }\r\n\r\n  saveList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null, \r\n    list     :any[]\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.list = list;\r\n  }\r\n\r\n  getBindings(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): IBinding[] {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.bindings;\r\n  }\r\n\r\n  existsBindingsByInfo(info: IStructuredPathInfo): boolean {\r\n    if (typeof this.#saveInfoByStructuredPathId[info.id] !== \"undefined\") {\r\n      return true;\r\n    }\r\n    if (typeof this.#saveInfoByListIndexByResolvedPathInfoId[info.id] !== \"undefined\") {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getListIndexesSet(info:IStructuredPathInfo, listIndex:IListIndex | null): Set<IListIndex> | null {\r\n    if (this.stateOutput.startsWith(info)) {\r\n      return this.stateOutput.getListIndexesSet(info, listIndex);\r\n    }\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.listIndexesSet;\r\n  }\r\n    \r\n  getList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): any[] | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.list;\r\n  }\r\n\r\n  addDependentProp(info: IStructuredPathInfo, refInfo: IStructuredPathInfo, type: DependencyType) {\r\n    let dependents = this.dependentTree.get(refInfo);\r\n    if (typeof dependents === \"undefined\") {\r\n      dependents = new Set<IDependencyEdge>();\r\n      this.dependentTree.set(refInfo, dependents);\r\n    }\r\n    const edge = createDependencyEdge(info, type);\r\n    dependents.add(edge);\r\n  }\r\n\r\n  getPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex | null): any {\r\n    // プロパティの値を取得する\r\n    return this.readonlyState[GetByRefSymbol](info, listIndex);\r\n  }\r\n  setPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex | null, value: any): void {\r\n    // プロパティの値を設定する\r\n    this.updater.addProcess(() => {\r\n      this.useWritableStateProxy(null, async (stateProxy) => {\r\n        stateProxy[SetByRefSymbol](info, listIndex, value);\r\n      });\r\n    });\r\n  }\r\n  // 書き込み可能な状態プロキシを作成する\r\n  async useWritableStateProxy(\r\n    loopContext: ILoopContext | null,\r\n    callback: (stateProxy: IWritableStateProxy) => Promise<void>\r\n  ): Promise<void> {\r\n    return useWritableStateProxy(this, this.state, loopContext, callback);\r\n  }\r\n  // Structive子コンポーネントを登録する\r\n  registerChildComponent(component: StructiveComponent): void {\r\n    this.structiveChildComponents.add(component);\r\n  }\r\n  unregisterChildComponent(component: StructiveComponent): void {\r\n    this.structiveChildComponents.delete(component);\r\n  }\r\n  \r\n}\r\n\r\nexport function createComponentEngine(config: IComponentConfig, component: StructiveComponent): IComponentEngine {\r\n  return new ComponentEngine(config, component);\r\n}","/**\r\n * replaceMustacheWithTemplateTag.ts\r\n *\r\n * Mustache構文（{{if:条件}}, {{for:式}}, {{endif}}, {{endfor}}, {{elseif:条件}}, {{else}} など）を\r\n * <template>タグやコメントノードに変換するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - HTML文字列内のMustache構文を正規表現で検出し、<template data-bind=\"...\">やコメントノードに変換\r\n * - if/for/endif/endfor/elseif/elseなどの制御構文をネスト対応で<template>タグに変換\r\n * - 通常の埋め込み式（{{expr}}）はコメントノード（<!--embed:expr-->）に変換\r\n *\r\n * 設計ポイント:\r\n * - stackでネスト構造を管理し、endif/endfor/elseif/elseの対応関係を厳密にチェック\r\n * - 不正なネストや対応しない構文にはraiseErrorで例外を発生\r\n * - elseif/elseはnot条件のtemplateを自動生成し、条件分岐を表現\r\n * - コメントノードへの変換で埋め込み式の安全なDOM挿入を実現\r\n */\r\nimport { COMMENT_EMBED_MARK } from \"../constants.js\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nconst MUSTACHE_REGEXP = /\\{\\{([^\\}]+)\\}\\}/g;\r\nconst MUSTACHE_TYPES:Set<string> = new Set(['if', 'for', 'endif', 'endfor', 'elseif', 'else']);\r\n\r\ntype MustacheType = 'if' | 'for' | 'endif' | 'endfor' | 'elseif' | 'else';\r\ntype MustacheInfo = {\r\n  type: MustacheType;\r\n  remain: string; // after first ':'\r\n  expr: string;\r\n}\r\n\r\nexport function replaceMustacheWithTemplateTag(html: string): string {\r\n  const stack:MustacheInfo[] = [];\r\n  return html.replaceAll(MUSTACHE_REGEXP, (match, expr) => {\r\n    expr = expr.trim();\r\n    const [ type ] = expr.split(':');\r\n    if (!MUSTACHE_TYPES.has(type)) {\r\n      // embed\r\n      return `<!--${COMMENT_EMBED_MARK}${expr}-->`;\r\n    }\r\n    const remain = expr.slice(type.length + 1).trim();\r\n    const currentInfo:MustacheInfo = { type, expr, remain };\r\n    if (type === 'if' || type === 'for') {\r\n      stack.push(currentInfo);\r\n      return `<template data-bind=\"${expr}\">`;\r\n    } else if (type === 'endif') {\r\n      const endTags = [];\r\n      do {\r\n        const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        if (info.type === 'if') {\r\n          endTags.push('</template>');\r\n          break;\r\n        } else if (info.type === 'elseif') {\r\n          endTags.push('</template>');\r\n        } else {\r\n          raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        }\r\n      } while(true);\r\n      return endTags.join('');\r\n    } else if (type === 'endfor') {\r\n      const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n      if (info.type === 'for') {\r\n        return '</template>';\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: endfor without for');\r\n      }\r\n    } else if (type === 'elseif') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      if (lastInfo.type === 'if' || lastInfo.type === 'elseif') {\r\n        stack.push(currentInfo);\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\"><template data-bind=\"if:${remain}\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      }\r\n    } else if (type === 'else') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      if (lastInfo.type === 'if') {\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      }\r\n    } else {\r\n      raiseError('replaceMustacheToTemplateOrEmbed: unknown type');\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n","/**\r\n * replaceTemplateTagWithComment.ts\r\n *\r\n * <template>タグをコメントノードに置換し、テンプレートを再帰的に登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 指定したHTMLTemplateElementをコメントノード（<!--template:id-->）に置換\r\n * - SVG内のtemplateタグは通常のtemplate要素に変換し、属性や子ノードを引き継ぐ\r\n * - テンプレート内の入れ子templateも再帰的に置換・登録\r\n * - registerTemplateでテンプレートをID付きで管理\r\n *\r\n * 設計ポイント:\r\n * - テンプレートの階層構造を維持しつつ、DOM上はコメントノードでマーク\r\n * - SVG対応や属性引き継ぎなど、汎用的なテンプレート処理に対応\r\n * - generateIdでユニークIDを割り当て、テンプレート管理を一元化\r\n */\r\nimport { COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { registerTemplate } from \"./registerTemplate.js\";\r\n\r\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport function replaceTemplateTagWithComment(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number = id\r\n):number {\r\n  // テンプレートの親ノードが存在する場合は、テンプレートをコメントノードに置き換える\r\n  template.parentNode?.replaceChild(document.createComment(`${COMMENT_TEMPLATE_MARK}${id}`), template);\r\n  if (template.namespaceURI === SVG_NS) {\r\n    // SVGタグ内のtemplateタグを想定\r\n    const newTemplate = document.createElement(\"template\");\r\n    for(let childNode of Array.from(template.childNodes)) {\r\n      newTemplate.content.appendChild(childNode);\r\n    }\r\n    const bindText = template.getAttribute(DATA_BIND_ATTRIBUTE);\r\n    newTemplate.setAttribute(DATA_BIND_ATTRIBUTE, bindText ?? \"\");\r\n    template = newTemplate;\r\n  }\r\n  template.content.querySelectorAll(\"template\").forEach(template => {\r\n    replaceTemplateTagWithComment(generateId(), template, rootId);\r\n  });\r\n  registerTemplate(id, template, rootId);\r\n  return id;\r\n}\r\n","/**\r\n * registerHtml.ts\r\n *\r\n * HTML文字列をテンプレートとして登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 指定IDでHTMLテンプレートを生成し、data-id属性を付与\r\n * - Mustache構文（{{ }})をテンプレートタグに変換（replaceMustacheWithTemplateTagを利用）\r\n * - テンプレートタグをコメントに置換（replaceTemplateTagWithCommentを利用）\r\n *\r\n * 設計ポイント:\r\n * - テンプレートの動的生成・管理や、構文変換による柔軟なテンプレート処理に対応\r\n * - テンプレートはdocument.createElement(\"template\")で生成し、data-idで識別\r\n */\r\nimport { replaceMustacheWithTemplateTag } from \"./replaceMustacheWithTemplateTag.js\";\r\nimport { replaceTemplateTagWithComment } from \"./replaceTemplateTagWithComment.js\";\r\n\r\nexport function registerHtml(id: number, html:string) {\r\n  const template = document.createElement(\"template\");\r\n  template.dataset.id = id.toString();\r\n  template.innerHTML = replaceMustacheWithTemplateTag(html);\r\n  replaceTemplateTagWithComment(id, template);\r\n}","/**\r\n * createAccessorFunctions.ts\r\n *\r\n * Stateプロパティのパス情報（IStructuredPathInfo）から、動的なgetter/setter関数を生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - パス情報とgetter集合から、最適なアクセサ関数（get/set）を動的に生成\r\n * - ワイルドカード（*）やネストしたプロパティパスにも対応\r\n * - パスやセグメントのバリデーションも実施\r\n *\r\n * 設計ポイント:\r\n * - matchPathsから最長一致のgetterパスを探索し、そこからの相対パスでアクセサを構築\r\n * - パスが一致しない場合はinfo.pathSegmentsから直接アクセサを生成\r\n * - new Functionで高速なgetter/setterを動的生成\r\n * - パスやセグメント名は正規表現で厳密にチェックし、安全性を担保\r\n */\r\nimport { getStructuredPathInfo } from \"./getStructuredPathInfo\";\r\nimport { IAccessorFunctions, IStructuredPathInfo } from \"./types\";\r\n\r\nconst checkSegmentRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\r\nconst checkPathRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*(\\.[a-zA-Z_$][0-9a-zA-Z_$]*|\\.\\*)*$/;\r\n\r\nexport function createAccessorFunctions(info: IStructuredPathInfo, getters: Set<string>): IAccessorFunctions {\r\n  const matchPaths = new Set(info.cumulativePaths).intersection(getters);\r\n  let len = -1;\r\n  let matchPath = '';\r\n  for(const curPath of matchPaths) {\r\n    const pathSegments = curPath.split('.');\r\n    if (pathSegments.length === 1) {\r\n      continue;\r\n    }\r\n    if (pathSegments.length > len) {\r\n      len = pathSegments.length;\r\n      matchPath = curPath;\r\n    }\r\n  }\r\n  if (matchPath.length > 0) {\r\n    if (!checkPathRegexp.test(matchPath)) {\r\n      throw new Error(`Invalid path: ${matchPath}`);\r\n    }\r\n    const matchInfo = getStructuredPathInfo(matchPath);\r\n    const segments = [];\r\n    let count = matchInfo.wildcardCount;\r\n    for(let i = matchInfo.pathSegments.length; i < info.pathSegments.length; i++) {\r\n      const segment = info.pathSegments[i];\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          throw new Error(`Invalid segment name: ${segment}`);\r\n        }\r\n        segments.push(\".\" + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this[\"${matchPath}\"]${path};`) as ()=> any,\r\n      set : new Function('value', `this[\"${matchPath}\"]${path} = value;`) as (value: any) => void,\r\n    }\r\n  } else {\r\n    const segments = [];\r\n    let count = 0;\r\n    for(const segment of info.pathSegments) {\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          throw new Error(`Invalid segment name: ${segment}`);\r\n        }\r\n        segments.push((segments.length > 0 ? \".\" : \"\") + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this.${path};`) as ()=> any,\r\n      set : new Function('value', `this.${path} = value;`) as (value: any) => void,\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * createComponentClass.ts\r\n *\r\n * StructiveのWeb Components用カスタム要素クラスを動的に生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - ユーザー定義のcomponentData（stateClass, html, css等）からWeb Componentsクラスを生成\r\n * - StateClass/テンプレート/CSS/バインディング情報などをIDで一元管理・登録\r\n * - 独自のget/setトラップやバインディング、親子コンポーネント探索、フィルター拡張など多機能な基盤を提供\r\n * - 静的プロパティでテンプレート・スタイル・StateClass・フィルター・getter情報などにアクセス可能\r\n * - defineメソッドでカスタム要素として登録\r\n *\r\n * 設計ポイント:\r\n * - findStructiveParentで親Structiveコンポーネントを探索し、階層的な状態管理を実現\r\n * - getter/setter/バインディング最適化やアクセサ自動生成（optimizeAccessor）に対応\r\n * - テンプレート・CSS・StateClass・バインディング情報をIDで一元管理し、再利用性・拡張性を確保\r\n * - フィルターやバインディング情報も静的プロパティで柔軟に拡張可能\r\n */\r\nimport { inputBuiltinFilters, outputBuiltinFilters } from \"../Filter/builtinFilters.js\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { getStateClassById, registerStateClass } from \"../StateClass/registerStateClass.js\";\r\nimport { getStyleSheetById } from \"../StyleSheet/registerStyleSheet.js\";\r\nimport { registerCss } from \"../StyleSheet/regsiterCss.js\";\r\nimport { createComponentEngine } from \"../ComponentEngine/ComponentEngine.js\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types.js\";\r\nimport { registerHtml } from \"../Template/registerHtml.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { getBaseClass } from \"./getBaseClass.js\";\r\nimport { getComponentConfig } from \"./getComponentConfig.js\";\r\nimport { IComponent, IUserComponentData, IUserConfig, StructiveComponentClass, StructiveComponent } from \"./types\";\r\nimport { getListPathsSetById, getPathsSetById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { IStructiveState } from \"../StateClass/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { createAccessorFunctions } from \"../StateProperty/createAccessorFunctions.js\";\r\nimport { config as globalConfig } from \"./getGlobalConfig.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IComponentStateInput } from \"../ComponentStateInput/types.js\";\r\nimport { findStructiveParent } from \"./findStructiveParent.js\";\r\n\r\n\r\nexport function createComponentClass(componentData: IUserComponentData): StructiveComponentClass {\r\n  const config = (componentData.stateClass.$config ?? {})as IUserConfig;\r\n  const componentConfig = getComponentConfig(config);\r\n  const id = generateId();\r\n  const { html, css, stateClass } = componentData;\r\n  const inputFilters:FilterWithOptions = Object.assign({}, inputBuiltinFilters);\r\n  const outputFilters:FilterWithOptions = Object.assign({}, outputBuiltinFilters);\r\n  stateClass.$isStructive = true;\r\n  registerHtml(id, html);\r\n  registerCss(id, css);\r\n  registerStateClass(id, stateClass);\r\n  const baseClass = getBaseClass(componentConfig.extends);\r\n  const extendTagName = componentConfig.extends;\r\n  return class extends baseClass implements IComponent {\r\n    #engine: IComponentEngine;\r\n\r\n    constructor() {\r\n      super();\r\n      this.#engine = createComponentEngine(componentConfig, this as StructiveComponent);\r\n      this.#engine.setup();\r\n    }\r\n\r\n    connectedCallback() {\r\n      this.#engine.connectedCallback();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n      this.#engine.disconnectedCallback();\r\n    }\r\n\r\n    #parentStructiveComponent: StructiveComponent | null | undefined;\r\n    get parentStructiveComponent(): StructiveComponent | null {\r\n      if (typeof this.#parentStructiveComponent === \"undefined\") {\r\n        this.#parentStructiveComponent = findStructiveParent(this as StructiveComponent);\r\n      }\r\n      return this.#parentStructiveComponent;\r\n    }\r\n\r\n    get state(): IComponentStateInput {\r\n      return this.#engine.stateInput;\r\n    }\r\n\r\n    get isStructive(): boolean {\r\n      return this.#engine.stateClass.$isStructive ?? false;\r\n    }\r\n\r\n    get waitForInitialize(): PromiseWithResolvers<void> {\r\n      return this.#engine.waitForInitialize;\r\n    }\r\n\r\n    getBindingsFromChild(component: IComponent): Set<IBinding> | null {\r\n      return this.#engine.bindingsByComponent.get(component as StructiveComponent) ?? null;\r\n    }\r\n\r\n    registerChildComponent(component:StructiveComponent): void {\r\n      this.#engine.registerChildComponent(component);\r\n    }\r\n    unregisterChildComponent(component:StructiveComponent): void {\r\n      this.#engine.unregisterChildComponent(component);\r\n    }\r\n    static define(tagName:string) {\r\n      if (extendTagName) {\r\n        customElements.define(tagName, this, { extends: extendTagName });\r\n      } else {\r\n        customElements.define(tagName, this);\r\n      }\r\n    }\r\n\r\n    static get id():number {\r\n      return id;\r\n    }\r\n    static #html:string = html;\r\n    static get html():string {\r\n      return this.#html;\r\n    }\r\n    static set html(value:string) {\r\n      this.#html = value;\r\n      registerHtml(this.id, value);\r\n      this.#template = null;\r\n    }\r\n\r\n    static #css:string = css;\r\n    static get css() {\r\n      return this.#css;\r\n    }\r\n    static set css(value:string) {\r\n      this.#css = value;\r\n      registerCss(this.id, value);\r\n      this.#styleSheet = null;\r\n    }\r\n    static #template: HTMLTemplateElement | null = null;\r\n    static get template():HTMLTemplateElement {\r\n      if (!this.#template) {\r\n        this.#template = getTemplateById(this.id);\r\n      }\r\n      return this.#template;\r\n    }\r\n    static #styleSheet: CSSStyleSheet | null = null;\r\n    static get styleSheet():CSSStyleSheet {\r\n      if (!this.#styleSheet) {\r\n        this.#styleSheet = getStyleSheetById(this.id);\r\n      }\r\n      return this.#styleSheet;\r\n    }\r\n    static #stateClass: IStructiveState | null = null;\r\n    static get stateClass():IStructiveState {\r\n      if (!this.#stateClass) {\r\n        this.#stateClass = getStateClassById(this.id) as IStructiveState;\r\n      }\r\n      return this.#stateClass;\r\n    }\r\n    static #inputFilters:FilterWithOptions = inputFilters;\r\n    static get inputFilters():FilterWithOptions {\r\n      return this.#inputFilters;\r\n    }\r\n    static #outputFilters:FilterWithOptions = outputFilters;\r\n    static get outputFilters():FilterWithOptions {\r\n      return this.#outputFilters;\r\n    }\r\n    static get listPaths(): Set<string> {\r\n      return getListPathsSetById(this.id);\r\n    }\r\n    static get paths(): Set<string> {\r\n      return getPathsSetById(this.id);\r\n    }\r\n    static #getters: Set<string> = new Set<string>();\r\n    static get getters(): Set<string> {\r\n      return this.#getters;\r\n    }\r\n    static #setters: Set<string> = new Set<string>();\r\n    static get setters(): Set<string> {\r\n      return this.#setters;\r\n    }\r\n    static #trackedGetters: Set<string> | null = null;\r\n    static get trackedGetters(): Set<string> {\r\n      if(this.#trackedGetters === null) {\r\n        this.#trackedGetters = new Set<string>();\r\n        let currentProto = this.stateClass.prototype;\r\n        while (currentProto && currentProto !== Object.prototype) {\r\n          const trackedGetters = Object.getOwnPropertyDescriptors(currentProto);\r\n          if (trackedGetters) {\r\n            for (const [key, desc] of Object.entries(trackedGetters)) {\r\n              const hasGetter = (desc as PropertyDescriptor).get !== undefined;\r\n              const hasSetter = (desc as PropertyDescriptor).set !== undefined;\r\n              if (hasGetter) {\r\n                this.#getters.add(key);\r\n                if (hasSetter) {\r\n                  this.#setters?.add(key);\r\n                } else {\r\n                  // Getterだけ設定しているプロパティが対象\r\n                  this.#trackedGetters.add(key);\r\n                }\r\n              }\r\n            }\r\n          }\r\n          currentProto = Object.getPrototypeOf(currentProto);\r\n        }\r\n        if (globalConfig.optimizeAccessor) {\r\n          for(const path of this.paths) {\r\n            const info = getStructuredPathInfo(path);\r\n            if (info.pathSegments.length === 1) {\r\n              continue;\r\n            }\r\n            if (this.#getters.has(path)) {\r\n              continue;\r\n            }\r\n            const funcs = createAccessorFunctions(info, this.#getters);\r\n            Object.defineProperty(this.stateClass.prototype, path, {\r\n              get: funcs.get,\r\n              set: funcs.set,\r\n              enumerable: true,\r\n              configurable: true,\r\n            });\r\n          }\r\n        }\r\n      }\r\n      return this.#trackedGetters;\r\n\r\n    }\r\n  } as StructiveComponentClass;\r\n}\r\n","/**\r\n * getComponentConfig.ts\r\n *\r\n * ユーザー設定（IUserConfig）とグローバル設定を統合し、コンポーネントの設定（IComponentConfig）を生成するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - getGlobalConfigでグローバル設定を取得\r\n * - ユーザー設定が優先され、未指定の場合はグローバル設定値を利用\r\n * - enableShadowDomやextendsなどの設定値を一元的に返却\r\n *\r\n * 設計ポイント:\r\n * - ユーザーごとの個別設定と全体のデフォルト設定を柔軟に統合\r\n * - 設定値のデフォルト化や拡張性を考慮した設計\r\n */\r\nimport { getGlobalConfig } from \"./getGlobalConfig.js\";\r\nimport { IUserConfig, IComponentConfig } from \"./types\";\r\n\r\nexport function getComponentConfig(userConfig: IUserConfig): IComponentConfig {\r\n  const globalConfig = getGlobalConfig();\r\n  return {\r\n    enableWebComponents: typeof userConfig.enableWebComponents === \"undefined\" ? true : userConfig.enableWebComponents,\r\n    enableShadowDom    : userConfig.enableShadowDom ?? globalConfig.enableShadowDom,\r\n    extends            : userConfig.extends ?? null,\r\n  };\r\n}","/**\r\n * getBaseClass.ts\r\n *\r\n * 指定したタグ名（extendTagName）から、その要素のコンストラクタ（基底クラス）を取得するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - extendTagNameが指定されていれば、そのタグのHTMLElementコンストラクタを返す\r\n * - 指定がなければHTMLElementを返す\r\n *\r\n * 設計ポイント:\r\n * - カスタム要素の継承元クラスを動的に取得し、柔軟なWeb Components拡張に対応\r\n */\r\nimport { Constructor } from \"./types\";\r\n\r\nexport function getBaseClass(extendTagName: string | null):Constructor<HTMLElement> {\r\n  return extendTagName ? (document.createElement(extendTagName).constructor as Constructor<HTMLElement>) : HTMLElement;\r\n}","/**\r\n * createSingleFileComponent.ts\r\n *\r\n * Structive用のシングルファイルコンポーネント（SFC）をパースし、各要素（HTML, CSS, StateClass）を抽出・生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - テキストから<template>・<script type=\"module\">・<style>を抽出し、それぞれを分離\r\n * - <script type=\"module\">はBase64エンコードして動的importし、StateClassとして利用\r\n * - {{...}}埋め込み式は一時的にコメントノード化してHTMLパース時の消失を防止し、復元\r\n * - 各要素（html, css, stateClass, text）をIUserComponentDataとして返却\r\n *\r\n * 設計ポイント:\r\n * - escapeEmbed/unescapeEmbedでMustache構文の安全なパースを実現\r\n * - scriptはdata:URL経由で安全に動的import\r\n * - テンプレート・スクリプト・スタイルを柔軟に分離・管理できる設計\r\n */\r\nimport { IStructiveState } from \"../StateClass/types\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nfunction escapeEmbed(html: string): string {\r\n  return html.replaceAll(/\\{\\{([^\\}]+)\\}\\}/g, (match, expr) => {\r\n    return `<!--{{${expr}}}-->`;\r\n  });\r\n}\r\n\r\nfunction unescapeEmbed(html:string):string {\r\n  return html.replaceAll(/<!--\\{\\{([^\\}]+)\\}\\}-->/g, (match, expr) => {\r\n    return `{{${expr}}}`;\r\n  });\r\n}\r\n\r\nexport async function createSingleFileComponent(text: string): Promise<IUserComponentData> {\r\n  const template = document.createElement(\"template\");\r\n  template.innerHTML = escapeEmbed(text);\r\n\r\n  const html = template.content.querySelector(\"template\");\r\n  html?.remove();\r\n\r\n  const script = template.content.querySelector(\"script[type=module]\") as HTMLScriptElement;\r\n  const b64 = btoa(String.fromCodePoint(...new TextEncoder().encode(script.text)));\r\n  const scriptModule = script ? await import(\"data:application/javascript;base64,\" + b64) : {};\r\n//  const scriptModule = script ? await import(\"data:text/javascript;charset=utf-8,\" + script.text) : {};\r\n  script?.remove();\r\n\r\n  const style = template.content.querySelector(\"style\");\r\n  style?.remove();\r\n\r\n  const stateClass = (scriptModule.default ?? class {}) as IStructiveState;\r\n  \r\n  return {\r\n    text,\r\n    html      : unescapeEmbed(html?.innerHTML ?? \"\").trim(),\r\n    css       : style?.textContent ?? \"\",\r\n    stateClass,\r\n  }\r\n}","/**\r\n * loadSingleFileComponent.ts\r\n *\r\n * 指定パスのシングルファイルコンポーネント（SFC）をfetchし、パースしてIUserComponentDataとして返すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - fetchで指定パスのSFCファイルを取得\r\n * - テキストとして読み込み、createSingleFileComponentでパース\r\n * - パース結果（IUserComponentData）を返却\r\n *\r\n * 設計ポイント:\r\n * - import.meta.resolveを利用し、パス解決の柔軟性を確保\r\n * - 非同期処理で動的なコンポーネントロードに対応\r\n */\r\nimport { createSingleFileComponent } from \"./createSingleFileComponent.js\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nexport async function loadSingleFileComponent(path: string): Promise<IUserComponentData> {\r\n  const response = await fetch(import.meta.resolve(path));\r\n  const text = await response.text();\r\n  return createSingleFileComponent(text);\r\n}\r\n","/**\r\n * registerComponentClass.ts\r\n *\r\n * StructiveのWeb Componentsクラスを指定したタグ名でカスタム要素として登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - registerComponentClass: 渡されたcomponentClassをtagNameでdefineメソッドを使って登録\r\n *\r\n * 設計ポイント:\r\n * - Web Componentsのカスタム要素登録を簡潔にラップし、再利用性を高める設計\r\n */\r\nimport { StructiveComponentClass } from \"./types\";\r\n\r\nexport function registerComponentClass(tagName: string, componentClass: StructiveComponentClass) {\r\n  componentClass.define(tagName);\r\n}","/**\r\n * MainWrapper.ts\r\n *\r\n * アプリ全体のレイアウトやルーティングを管理するカスタムエレメント MainWrapper の実装です。\r\n *\r\n * 主な役割:\r\n * - Shadow DOMの有効化やレイアウトテンプレートの動的読み込み\r\n * - レイアウトテンプレートやスタイルの適用\r\n * - ルーター要素（routerTagName）の動的追加\r\n *\r\n * 設計ポイント:\r\n * - config.enableShadowDom でShadow DOMの有効/無効を切り替え\r\n * - config.layoutPath が指定されていればfetchでレイアウトHTMLを取得し、テンプレート・スタイルを適用\r\n * - スタイルはadoptedStyleSheetsでShadowRootまたはdocumentに適用\r\n * - レイアウトが指定されていない場合はデフォルトのslotを挿入\r\n * - config.enableRouter が有効な場合はrouter要素をslotに追加\r\n */\r\nimport { raiseError } from \"../utils\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst SLOT_KEY = \"router\";\r\nconst DEFAULT_LAYOUT = `<slot name=\"${SLOT_KEY}\"></slot>`;\r\n\r\nexport class MainWrapper extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n    if (config.enableShadowDom) {\r\n      this.attachShadow({ mode: 'open' });\r\n    }\r\n  }\r\n\r\n  async connectedCallback() {\r\n    await this.loadLayout();\r\n    this.render();\r\n  }\r\n\r\n  get root(): ShadowRoot | HTMLElement {\r\n    return this.shadowRoot ?? this;\r\n  }\r\n\r\n  async loadLayout() {\r\n    if (config.layoutPath) {\r\n      const response = await fetch(config.layoutPath);\r\n      if (response.ok) {\r\n        const layoutText = await response.text();\r\n        const workTemplate = document.createElement(\"template\");\r\n        workTemplate.innerHTML = layoutText;\r\n      \r\n        const template = workTemplate.content.querySelector(\"template\");\r\n        const style = workTemplate.content.querySelector(\"style\") as CSSStyleSheet | null;\r\n      \r\n        this.root.appendChild(template?.content ?? document.createDocumentFragment());\r\n        if (style) {\r\n          const shadowRootOrDocument = this.shadowRoot ?? document;\r\n          const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n          if (!styleSheets.includes(style)) {\r\n            shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, style];\r\n          }\r\n        }\r\n      } else {\r\n        raiseError(`Failed to load layout from ${config.layoutPath}`);\r\n      }\r\n    } else {\r\n      this.root.innerHTML = DEFAULT_LAYOUT;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // add router\r\n    if (config.enableRouter) {\r\n      const router = document.createElement(config.routerTagName);\r\n      router.setAttribute('slot', SLOT_KEY);\r\n      this.root.appendChild(router);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * loadFromImportMap.ts\r\n *\r\n * importmapの情報をもとに、Structiveのルートやコンポーネントを動的にロード・登録するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - importmap.imports内のエイリアスを走査し、@routes/や@components/のプレフィックスで判定\r\n * - @routes/の場合はルーティング情報をentryRouteで登録\r\n * - @components/の場合はloadSingleFileComponentでSFCをロードし、createComponentClassでクラス化してregisterComponentClassで登録\r\n *\r\n * 設計ポイント:\r\n * - importmapのエイリアスを利用して、ルーティングやコンポーネントの自動登録を実現\r\n * - パスやタグ名の正規化、パラメータ除去なども自動で処理\r\n * - 非同期でSFCをロードし、動的なWeb Components登録に対応\r\n */\r\nimport { entryRoute } from \"../Router/Router\";\r\nimport { createComponentClass } from \"./createComponentClass\";\r\nimport { loadImportmap } from \"./loadImportmap\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent\";\r\nimport { registerComponentClass } from \"./registerComponentClass\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nconst ROUTES_KEY = \"@routes/\";\r\nconst COMPONENTS_KEY = \"@components/\";\r\n\r\nexport async function loadFromImportMap(): Promise<void> {\r\n  const importmap = loadImportmap();\r\n  if (importmap.imports) {\r\n    for (const [alias, value] of Object.entries(importmap.imports)) {\r\n      let tagName;\r\n      if (alias.startsWith(ROUTES_KEY)) {\r\n        const path = alias.slice(ROUTES_KEY.length - 1); // remove the prefix '@routes'\r\n        const pathWithoutParams = path.replace(/:[^\\s/]+/g, \"\"); // remove the params\r\n        tagName = \"routes\" + pathWithoutParams.replace(/\\//g, \"-\"); // replace '/' with '-'\r\n        entryRoute(tagName, path === \"/root\" ? \"/\" : path); // routing\r\n      } if (alias.startsWith(COMPONENTS_KEY)) {\r\n        tagName = alias.slice(COMPONENTS_KEY.length); // remove the prefix '@components/'\r\n      }\r\n      if (!tagName) {\r\n        continue;\r\n      }\r\n\r\n      let componentData : IUserComponentData | null = null;\r\n      componentData = await loadSingleFileComponent(alias);\r\n      const componentClass = createComponentClass(componentData);\r\n      registerComponentClass(tagName, componentClass);\r\n    }\r\n  }\r\n\r\n} \r\n","/**\r\n * loadImportmap.ts\r\n *\r\n * HTML内の<script type=\"importmap\">タグからimportmap情報を取得・統合するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 複数のimportmapスクリプトタグを走査し、全てのimportsをマージしてIImportMap型で返却\r\n *\r\n * 設計ポイント:\r\n * - scriptタグのinnerHTMLをJSON.parseでパースし、importsプロパティを統合\r\n * - importmap.importsが複数存在する場合もObject.assignでマージ\r\n * - importmap仕様に準拠し、柔軟なimportエイリアス管理を実現\r\n */\r\nimport { IImportMap } from \"./types\";\r\n\r\nexport function loadImportmap():IImportMap {\r\n  const importmap: IImportMap = {};\r\n  document.querySelectorAll(\"script[type='importmap']\").forEach(script => {\r\n    const scriptImportmap = JSON.parse(script.innerHTML);\r\n    if (scriptImportmap.imports) {\r\n      importmap.imports = Object.assign(importmap.imports || {}, scriptImportmap.imports);\r\n    }\r\n  });\r\n  return importmap;\r\n}\r\n\r\n","/**\r\n * exports.ts\r\n *\r\n * Structiveの主要なエントリーポイント・APIを外部公開するモジュールです。\r\n *\r\n * 主な役割:\r\n * - registerSingleFileComponents, bootstrap, config などの主要APIをエクスポート\r\n * - defineComponents: SFC群をまとめて登録し、autoInitが有効なら自動で初期化\r\n * - bootstrapStructive: 初期化処理を一度だけ実行\r\n *\r\n * 設計ポイント:\r\n * - グローバル設定(config)を外部から参照・変更可能\r\n * - 初期化処理の多重実行を防止し、安全な起動を保証\r\n */\r\nimport { registerSingleFileComponents } from \"./WebComponents/registerSingleFIleComponents.js\";\r\nimport { bootstrap } from \"./bootstrap.js\";\r\nimport { config as _config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { IConfig } from \"./WebComponents/types\";\r\n\r\nexport const config: IConfig = _config;\r\n\r\nlet initialized = false;\r\nexport async function defineComponents(singleFileComponents: Record<string, string>):Promise<void> {\r\n  await registerSingleFileComponents(singleFileComponents);\r\n  if (config.autoInit) {\r\n    await bootstrapStructive();\r\n  }\r\n}\r\n\r\nexport async function bootstrapStructive():Promise<void> {\r\n  if (!initialized) {\r\n    await bootstrap();\r\n    initialized = true;\r\n  }\r\n}\r\n\r\n","/**\r\n * registerSingleFileComponents.ts\r\n *\r\n * 複数のシングルファイルコンポーネント（SFC）をまとめてStructiveのWeb Componentsとして登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - singleFileComponents（tagNameとパスのマップ）を走査し、各SFCを非同期で取得・パース\r\n * - enableRouterが有効な場合はentryRouteでルーティング情報も登録\r\n * - createComponentClassでWeb Componentsクラスを生成し、registerComponentClassでカスタム要素として登録\r\n *\r\n * 設計ポイント:\r\n * - SFCのロードからWeb Components登録、ルーティング登録までを一括で自動化\r\n * - 非同期処理で複数コンポーネントの動的登録に対応\r\n * - ルートパス\"/root\"の正規化や、@routesプレフィックスの除去など柔軟なパス処理\r\n */\r\nimport { entryRoute } from \"../Router/Router.js\";\r\nimport { createComponentClass } from \"./createComponentClass.js\";\r\nimport { config } from \"./getGlobalConfig.js\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent.js\";\r\nimport { registerComponentClass } from \"./registerComponentClass.js\";\r\nimport { IUserComponentData, SingleFileComponents } from \"./types\";\r\n\r\nexport async function registerSingleFileComponents(singleFileComponents:SingleFileComponents):Promise<void> {\r\n  for(const [ tagName, path ] of Object.entries(singleFileComponents)) {\r\n    let componentData : IUserComponentData | null = null;\r\n    if (config.enableRouter) {\r\n      const routePath = path.startsWith(\"@routes\") ? path.slice(7) : path; // remove the prefix 'routes:'\r\n      entryRoute(tagName, routePath === \"/root\" ? \"/\" : routePath); // routing\r\n    }\r\n    componentData = await loadSingleFileComponent(path);\r\n    const componentClass = createComponentClass(componentData);\r\n    registerComponentClass(tagName, componentClass);\r\n  }\r\n}","/**\r\n * bootstrap.ts\r\n *\r\n * Structiveアプリケーションの初期化処理を行うエントリーポイントです。\r\n *\r\n * 主な役割:\r\n * - グローバル設定(config)に従い、必要なコンポーネントやルーター、メインラッパーを登録・初期化\r\n * - autoLoadFromImportMapが有効な場合はimportmapからルートやコンポーネントを動的ロード\r\n * - enableRouterが有効な場合はRouterコンポーネントをカスタム要素として登録\r\n * - enableMainWrapperが有効な場合はMainWrapperをカスタム要素として登録し、autoInsertMainWrapperが有効ならbodyに自動挿入\r\n *\r\n * 設計ポイント:\r\n * - 設定値に応じて初期化処理を柔軟に制御\r\n * - importmapやカスタム要素の登録、DOMへの自動挿入など、Structiveの起動に必要な処理を一元化\r\n */\r\nimport { MainWrapper } from \"./MainWrapper/MainWrapper.js\";\r\nimport { Router } from \"./Router/Router.js\";\r\nimport { config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { loadFromImportMap } from \"./WebComponents/loadFromImportMap.js\";\r\n\r\nexport async function bootstrap(): Promise<void> {\r\n  if (config.autoLoadFromImportMap) {\r\n    await loadFromImportMap();\r\n  }\r\n\r\n  if (config.enableRouter) {\r\n    customElements.define(config.routerTagName, Router);\r\n  }\r\n\r\n  if (config.enableMainWrapper) {\r\n    customElements.define(config.mainTagName, MainWrapper);\r\n    if (config.autoInsertMainWrapper) {\r\n      const mainWrapper = document.createElement(config.mainTagName);\r\n      document.body.appendChild(mainWrapper);\r\n    }\r\n  }\r\n}"],"names":["ROUTE_PATH_PREFIX","routeEntries","globalRouter","Router","HTMLElement","_popstateHandler","constructor","super","this","popstateHandler","bind","connectedCallback","innerHTML","window","addEventListener","dispatchEvent","Event","disconnectedCallback","removeEventListener","event","preventDefault","render","navigate","to","history","pushState","Array","from","childNodes","filter","n","getAttribute","forEach","removeChild","routePath","location","pathname","tagName","params","path","tag","regex","RegExp","replace","test","matches","match","key","index","substring","customElement","document","createElement","setAttribute","JSON","stringify","appendChild","messageElement","textContent","entryRoute","startsWith","push","getRouter","globalConfig","debug","locale","enableShadowDom","enableMainWrapper","enableRouter","autoInsertMainWrapper","autoInit","mainTagName","routerTagName","layoutPath","autoLoadFromImportMap","optimizeList","optimizeListElements","optimizeAccessor","getGlobalConfig","config","optionsRequired","fnName","Error","optionMustBeNumber","valueMustBeNumber","valueMustBeDate","builtinFilters","eq","options","opt","value","optValue","Number","isNaN","ne","not","valueMustBeBoolean","lt","le","gt","ge","inc","dec","mul","div","fix","toFixed","toLocaleString","uc","toString","toUpperCase","lc","toLowerCase","cap","v","length","charAt","slice","trim","substr","opt1","opt1Value","opt2","opt2Value","pad","padStart","rep","repeat","rev","split","reverse","join","int","parseInt","float","parseFloat","round","Math","pow","floor","ceil","percent","date","Date","toLocaleDateString","time","toLocaleTimeString","datetime","ymd","year","getFullYear","month","getMonth","day","getDate","falsy","truthy","defaults","boolean","Boolean","number","string","String","null","outputBuiltinFilters","inputBuiltinFilters","id","generateId","raiseError","message","stateClassById","styleSheetById","registerCss","css","styleSheet","CSSStyleSheet","replaceSync","registerStyleSheet","textToFilter","filters","text","name","cache","Map","createFilters","texts","result","get","i","set","BindingNode","binding","node","decorates","bindContents","Set","subName","init","update","assignValue","bindingState","filteredValue","updateElements","listIndexes","values","notifyRedraw","refs","isSelectElement","HTMLSelectElement","isFor","BindingNodeAttribute","BindingNodeCheckbox","isArray","element","checked","map","_val","includes","BindingNodeClassList","className","BindingNodeClassName","classList","add","remove","BindingNodeEvent","e","handler","engine","loopContext","parentBindContent","currentLoopContext","indexes","serialize","context","listIndex","stopPropagation","useWritableStateProxy","async","stateProxy","Reflect","apply","createBindingNodeEvent","filterTexts","filterFns","DATA_BIND_ATTRIBUTE","COMMENT_EMBED_MARK","COMMENT_TEMPLATE_MARK","BindingNodeBlock","BindingNodeIf","bindContent","trueBindContents","falseBindContents","createBindContent","parentNode","mountAfter","unmount","BindingNodeFor","bindContentsSet","bindContentByListIndex","WeakMap","bindContentPool","bindContentLastIndex","lastListIndexSet","assignListIndex","pattern","deleteBindContent","clearListIndex","poolLength","listIndexesSet","getListIndexesSet","info","newBindContensSet","lastBindContent","removeBindContentsSet","diff","difference","firstNode","lastNode","getLastNode","nextSibling","firstChildNode","oldListValues","getList","currentBindContents","targetBindContents","lastChildNode","oldValue","targetIndex","indexOf","prevBindContent","saveList","createBindingNodeFor","DEFAULT_PROPERTY","defaultPropertyByElementType","radio","checkbox","button","_cache","getDefaultPropertyByNodeType","HTMLTextAreaElement","HTMLOptionElement","HTMLButtonElement","HTMLAnchorElement","HTMLFormElement","HTMLInputElement","type","SVGElement","undefined","Text","Template","defaultEventByName","selected","BindingNodeProperty","defaultName","nodeType","getDefaultName","eventName","updateStateValue","createBindingNodeProperty","BindingNodeRadio","BindingNodeStyle","style","setProperty","symbolName","AssignStateSymbol","Symbol","for","NotifyRedrawSymbol","parentStructiveComponentByStructiveComponent","BindingNodeComponent","parentComponent","component","owner","bindings","bindingsByComponent","notifyRefs","at","wildcardCount","ref","cumulativePathSet","has","state","nodePropertyConstructorByNameByIsComment","class","if","nodePropertyConstructorByFirstName","attr","getBindingNodeCreator","propertyName","isComment","Comment","isElement","Element","fn","bindingNodeCreatorByName","nameElements","bindingNodeCreatorByFirstName","_getBindingNodeCreator","GetByRefSymbol","SetByRefSymbol","SetCacheableSymbol","ConnectedCallbackSymbol","DisconnectedCallbackSymbol","StructuredPathInfo","static","pathSegments","lastSegment","cumulativePaths","cumulativeInfos","cumulativeInfoSet","wildcardPaths","wildcardPathSet","wildcardInfos","indexByWildcardPath","wildcardInfoSet","wildcardParentPaths","wildcardParentPathSet","wildcardParentInfos","wildcardParentInfoSet","lastWildcardPath","lastWildcardInfo","parentPath","parentInfo","children","getPattern","_pattern","getStructuredPathInfo","currentPatternPath","prevPatternPath","reservedWords","structuredPath","BindingState","listIndexRef","deref","find","saveBinding","writeState","BindingStateIndex","indexNumber","loopContexts","bindingsByListIndex","ereg","getBindingStateCreator","createBindingStateIndex","createBindingState","nodeTypeByNodeKey","getNodeType","nodeKey","createNodeKey","getNodeTypeByNode","s","re","decode","m","exec","decodeURIComponent","parseFilter","parseProperty","property","parseExpressions","expression","bindExpression","decoratesExpression","nodePropertyText","statePropertyText","nodeProperty","inputFilterTexts","stateProperty","outputFilterTexts","parseExpression","removeAttributeFromElement","removeAttribute","removeAttributeByNodeType","replaceTextNodeFn","textNode","createTextNode","replaceChild","DataBindAttributes","nodePath","bindTexts","creatorByText","getTemplateById","getDataBindText","removeDataBindAttribute","replaceTextNodeFromComment","routeIndexes","getAbsoluteNodePath","parseBindText","bindText","creator","createBindingNode","getNodesHavingDataBind","root","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","acceptNode","hasAttribute","FILTER_ACCEPT","FILTER_SKIP","isCommentNode","nextNode","currentNode","listDataBindAttributesById","listPathsSetById","pathsSetById","getDataBindAttributesFromTemplate","content","createDataBindAttributes","templateById","registerTemplate","template","rootId","Node","TEXT_NODE","nodeValue","dataBindAttributes","paths","listPaths","attribute","j","registerDataBindAttributes","Binding","bindingNode","version","inputFilters","readonlyState","outputFilters","updater","createBinding","LoopContext","WeakRef","parentLoopContext","currentBinding","parentBinding","walk","callback","results","unshift","bindingsWithSelectElement","createBindings","attributes","getDataBindAttributesById","reduce","BindContent","fragment","isMounted","lastBinding","size","importNode","createContent","createLoopContext","mount","mountBefore","beforeNode","insertBefore","afterNode","createDependencyKey","dependencyWalker","entryRef","traced","walkSub","edges","dependentTree","edge","overridedType","createDependencyWalker","ListIndex","parentListIndex","position","truncate","reverseIterator","iterator","atcache","next","lisIndex","createListIndex","listWalkerSub","listIndexLen","subListIndex","listWalker","createRefKey","BLANK_LISTINDEXES_SET","buildListIndexTree","newListIndexesSet","oldListIndexesSet","oldListIndexesByItem","groupBy","curListIndex","shift","addUpdatedListIndex","saveListIndexesSet","restructListIndexes","infos","updateValues","refKeys","L","elementInfoSet","dependentWalker","nowOnList","listInfoSet","refInfo","wildcardMatchPaths","intersection","longestMatchAt","_info","_listIndex","refKey","cacheListIndexSet","existsBindingsByInfo","Updater","updatedProperties","updatedValues","addProcess","process","queueMicrotask","addUpdatedStatePropertyRefValue","entryRender","isEntryRender","Ut","mn","arrayElementBindings","properties","rebuild","arrayElementBinding","structiveChildComponents","structiveComponent","structiveComponentBindings","retArrayElementBindings","retBindings","retProperties","hasChildComponent","updatedProiperties","clear","updatedRefs","arrayElementBindingByParentRefKey","item","parentRef","parentRefKey","builtStatePropertyRefKeySet","affectedRefs","getBindings","bindingInfo","Object","assign","entries","attachShadow","extends","canHaveShadowRoot","mode","adoptedStyleSheets","shadowRootOrDocument","ShadowRoot","getParentShadowRoot","styleSheets","buildListIndexTreeSub","listInfos","searchPath","subValue","ResolvedPathInfo","elements","wildcardType","wildcardIndexes","tmpPatternElements","incompleteCount","completeCount","lastPath","getResolvedPathInfo","getContextListIndex","structuredPathInfoStack","refIndex","listIndexStack","getListIndex","receiver","wildcardParentPattern","setStatePropertyRef","setTracking","lastTrackingStack","trackingStack","trackingIndex","trackedGetters","addDependentProp","getByRefReadonly","target","cacheable","stateOutput","getters","parentValue","_getByRef","resolveReadonly","prop","trackDependency","getReadonly","charCodeAt","d","resolve","wildcardPattern","walkWildcardPattern","wildardIndexPos","indexPos","parentIndexes","listIndexSet","concat","resultIndexes","resultValues","getAllReadonly","resolvedInfo","setCacheable","StateHandler$1","fill","trapGet","getByRefWritable","setByRef","setters","resolveWritable","getWritable","getAllWritable","call","StateHandler","trapSet","Proxy","asyncSetStatePropertyRef","setLoopContext","ComponentStateBinding","parentPaths","childPaths","childPathByParentPath","parentPathByChildPath","bindingByParentPath","bindingByChildPath","addBinding","childPath","getChildPath","getParentPath","toParentPathFromChildPath","matchPaths","matchPathArray","longestMatchPath","remainPath","matchParentPath","toChildPathFromParentPath","matchChildPath","startsWithByChildPath","childPathInfo","childComponent","getBindingsFromChild","ComponentStateInputHandler","componentStateBinding","assignState","object","setPropertyValue","parentPathRef","childListIndex","getPropertyValue","ComponentStateOutput","pathInfo","parentPathInfo","ComponentEngine","stateClass","baseClass","waitForInitialize","Promise","withResolvers","stateBinding","createComponentStateBinding","stateInput","blockPlaceholder","blockParentNode","ignoreDissconnectedCallback","componentClass","createUpdater","createComponentStateInput","checkDependentProp","listPath","$listProperties","setup","parentStructiveComponent","promise","dataset","json","parse","registerChildComponent","enableWebComponents","createComment","replaceWith","shadowRoot","unregisterChildComponent","saveInfoByListIndexByResolvedPathInfoId","saveInfoByStructuredPathId","createSaveInfo","list","getSaveInfoByStatePropertyRef","saveInfo","saveInfoByListIndex","dependents","createDependencyEdge","delete","MUSTACHE_REGEXP","MUSTACHE_TYPES","replaceTemplateTagWithComment","namespaceURI","newTemplate","childNode","querySelectorAll","registerHtml","html","stack","replaceAll","expr","remain","currentInfo","endTags","pop","lastInfo","replaceMustacheWithTemplateTag","checkSegmentRegexp","checkPathRegexp","createAccessorFunctions","len","matchPath","curPath","matchInfo","segments","count","segment","Function","createComponentClass","componentData","componentConfig","userConfig","xn","getComponentConfig","$config","Ne","xe","te","$isStructive","registerStateClass","extendTagName","getBaseClass","createComponentEngine","el","isStructive","define","customElements","getStyleSheetById","getStateClassById","getListPathsSetById","getPathsSetById","currentProto","prototype","getOwnPropertyDescriptors","desc","hasGetter","hasSetter","getPrototypeOf","funcs","defineProperty","enumerable","configurable","unescapeEmbed","loadSingleFileComponent","response","fetch","escapeEmbed","querySelector","script","b64","btoa","fromCodePoint","TextEncoder","encode","scriptModule","import","default","createSingleFileComponent","registerComponentClass","SLOT_KEY","DEFAULT_LAYOUT","MainWrapper","loadLayout","ok","layoutText","workTemplate","createDocumentFragment","router","ROUTES_KEY","COMPONENTS_KEY","loadFromImportMap","importmap","scriptImportmap","imports","loadImportmap","alias","_config","initialized","defineComponents","singleFileComponents","registerSingleFileComponents","bootstrapStructive","mainWrapper","body","bootstrap"],"mappings":"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"}
{"version":3,"file":"structive.min.js","sources":["../src/Router/Router.ts","../src/WebComponents/getGlobalConfig.ts","../src/Filter/errorMessages.ts","../src/Filter/builtinFilters.ts","../src/GlobalId/generateId.ts","../src/utils.ts","../src/StateClass/registerStateClass.ts","../src/StyleSheet/registerStyleSheet.ts","../src/StyleSheet/regsiterCss.ts","../src/BindingBuilder/createFilters.ts","../src/DataBinding/BindingNode/BindingNode.ts","../src/DataBinding/BindingNode/BindingNodeAttribute.ts","../src/DataBinding/BindingNode/BindingNodeCheckbox.ts","../src/DataBinding/BindingNode/BindingNodeClassList.ts","../src/DataBinding/BindingNode/BindingNodeClassName.ts","../src/DataBinding/BindingNode/BindingNodeEvent.ts","../src/constants.ts","../src/DataBinding/BindingNode/BindingNodeBlock.ts","../src/DataBinding/BindingNode/BindingNodeIf.ts","../src/DataBinding/BindingNode/BindingNodeFor.ts","../src/BindingBuilder/getDefaultName.ts","../src/DataBinding/BindingNode/BindingNodeProperty.ts","../src/DataBinding/BindingNode/BindingNodeRadio.ts","../src/DataBinding/BindingNode/BindingNodeStyle.ts","../src/ComponentState/symbols.ts","../src/DataBinding/BindingNode/BindingNodeComponent.ts","../src/BindingBuilder/getBindingNodeCreator.ts","../src/StateClass/symbols.ts","../src/StateProperty/getStructuredPathInfo.ts","../src/DataBinding/BindingState/BindingState.ts","../src/DataBinding/BindingState/BindingStateIndex.ts","../src/BindingBuilder/getBindingStateCreator.ts","../src/BindingBuilder/getDataBindText.ts","../src/BindingBuilder/getNodeType.ts","../src/BindingBuilder/parseBindText.ts","../src/BindingBuilder/removeDataBindAttribute.ts","../src/BindingBuilder/replaceTextNodeFromComment.ts","../src/BindingBuilder/createDataBindAttributes.ts","../src/BindingBuilder/getAbsoluteNodePath.ts","../src/BindingBuilder/getNodesHavingDataBind.ts","../src/BindingBuilder/registerDataBindAttributes.ts","../src/Template/registerTemplate.ts","../src/Template/removeEmptyTextNodes.ts","../src/DataBinding/Binding.ts","../src/LoopContext/createLoopContext.ts","../src/Render/render.ts","../src/DataBinding/BindContent.ts","../src/BindingBuilder/resolveNodeFromPath.ts","../src/StatePropertyRef/getStatePropertyRef.ts","../src/StateClass/methods/getByRef.ts","../src/StateClass/methods/setTracking.ts","../src/StateClass/apis/getByRef.ts","../src/StateClass/methods/setByRef.ts","../src/StateClass/apis/setByRef.ts","../src/StateClass/apis/setCacheable.ts","../src/StateClass/methods/setCacheable.ts","../src/StateClass/apis/connectedCallback.ts","../src/StateClass/apis/disconnectedCallback.ts","../src/StateClass/apis/resolve.ts","../src/StateClass/apis/getAll.ts","../src/StateProperty/getResolvedPathInfo.ts","../src/StateClass/getListIndex.ts","../src/StateClass/traps/get.ts","../src/StateClass/createStateProxy.ts","../src/StateClass/traps/set.ts","../src/DependencyWalker/createDependencyEdge.ts","../src/DependencyWalker/createDependencyWalker.ts","../src/ListIndex/createListIndex.ts","../src/ListWalker/listWalker.ts","../src/Updater/restructListIndex.ts","../src/Updater/updater.ts","../src/ComponentEngine/attachShadow.ts","../src/ComponentEngine/canHaveShadowRoot.ts","../src/StateClass/buildListIndexTree.ts","../src/ComponentEngine/ComponentEngine.ts","../src/Template/replaceMustacheWithTemplateTag.ts","../src/Template/replaceTemplateTagWithComment.ts","../src/Template/registerHtml.ts","../src/ComponentState/createComponentState.ts","../src/StateProperty/createAccessorFunctions.ts","../src/WebComponents/createComponentClass.ts","../src/WebComponents/getComponentConfig.ts","../src/WebComponents/getBaseClass.ts","../src/WebComponents/createSingleFileComponent.ts","../src/WebComponents/loadSingleFileComponent.ts","../src/WebComponents/registerComponentClass.ts","../src/MainWrapper/MainWrapper.ts","../src/WebComponents/loadFromImportMap.ts","../src/WebComponents/loadImportmap.ts","../src/exports.ts","../src/WebComponents/registerSingleFIleComponents.ts","../src/bootstrap.ts"],"sourcesContent":["import { config } from \"../WebComponents/getGlobalConfig\";\r\nimport { IRouter } from \"./types\";\r\n\r\nconst DEFAULT_ROUTE_PATH = '/'; // Default route path\r\nconst ROUTE_PATH_PREFIX = 'routes:'; // Prefix for route paths\r\n/**\r\n * example:\r\n * ```ts\r\n * entryRoute('my-view', '/my-view/:id');\r\n */\r\nconst routeEntries: Array<[string, string]> = [];\r\n\r\nlet globalRouter : Router | null = null;\r\n\r\nexport class Router extends HTMLElement implements IRouter {\r\n  _popstateHandler: (event: PopStateEvent) => void;\r\n  constructor() {\r\n    super();\r\n    this._popstateHandler = this.popstateHandler.bind(this);\r\n  }\r\n\r\n  connectedCallback() {\r\n    globalRouter = this;\r\n    this.innerHTML = '<slot name=\"content\"></slot>';\r\n    window.addEventListener('popstate', this._popstateHandler);\r\n    window.dispatchEvent(new Event(\"popstate\")); // Dispatch popstate event to trigger the initial render\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('popstate', this._popstateHandler);\r\n    globalRouter = null;\r\n  }\r\n\r\n  popstateHandler(event: PopStateEvent) {\r\n    event.preventDefault();\r\n    this.render();\r\n  }\r\n\r\n  navigate(to: string) {\r\n    history.pushState({}, '', to);\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    // スロットコンテントをクリア\r\n    const slotChildren = Array.from(this.childNodes).filter(\r\n      n => (n as HTMLElement).getAttribute?.('slot') === 'content'\r\n    );\r\n    slotChildren.forEach(n => this.removeChild(n));\r\n\r\n    const routePath = window.location.pathname || DEFAULT_ROUTE_PATH;\r\n    let tagName: string | undefined = undefined;\r\n    let params: Record<string, string> = {};\r\n    // Check if the routePath matches any of the defined routes\r\n    for (const [path, tag] of routeEntries) {\r\n      const regex = new RegExp(path.replace(/:[^\\s/]+/g, '([^/]+)'));\r\n      if (regex.test(routePath)) {\r\n        tagName = tag;\r\n        // Extract the parameters from the routePath\r\n        const matches = routePath.match(regex);\r\n        if (matches) {\r\n          const keys = path.match(/:[^\\s/]+/g) || [];\r\n          keys.forEach((key, index) => {\r\n            params[key.substring(1)] = matches[index + 1]; // +1 to skip the full match\r\n          });\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (tagName) {\r\n      // If a route matches, create the custom element and set its state\r\n      // Create the custom element with the tag name\r\n      // project the custom element into the router slot\r\n      const customElement = document.createElement(tagName) as HTMLElement;\r\n      customElement.setAttribute('data-state', JSON.stringify(params));\r\n      customElement.setAttribute('slot', 'content');\r\n      this.appendChild(customElement);\r\n    } else {\r\n      // If no route matches, show 404 content\r\n      const messageElement = document.createElement('h1') as HTMLElement;\r\n      messageElement.setAttribute('slot', 'content');\r\n      messageElement.textContent = '404 Not Found';\r\n      this.appendChild(messageElement);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function entryRoute(tagName: string, routePath: string): void {\r\n  if (routePath.startsWith(ROUTE_PATH_PREFIX)) {\r\n    routePath = routePath.substring(ROUTE_PATH_PREFIX.length); // Remove 'routes:' prefix\r\n  }\r\n  routeEntries.push([routePath, tagName]);\r\n}\r\n\r\nexport function getRouter(): Router | null {\r\n  return globalRouter;\r\n}\r\n\r\n","import { IConfig } from \"./types\";\r\n\r\nconst globalConfig: IConfig = {\r\n  debug                : false,\r\n  locale               : \"en-US\", // The locale of the component, ex. \"en-US\", default is \"en-US\"\r\n  enableShadowDom      : true,\r\n  enableMainWrapper    : true, // Whether to use the main wrapper or not\r\n  enableRouter         : true, // Whether to use the router or not\r\n  autoInsertMainWrapper: false, // Whether to automatically insert the main wrapper or not\r\n  autoInit             : true, // Whether to automatically initialize the component or not\r\n  mainTagName          : \"app-main\", // The tag name of the main wrapper, default is \"app-main\"\r\n  routerTagName        : \"view-router\", // The tag name of the router, default is \"view-router\"\r\n  layoutPath           : \"\", // The path to the layout file, default is \"\"\r\n  autoLoadFromImportMap: false, // Whether to automatically load the component from the import map or not\r\n  optimizeList         : true, // Whether to optimize the list or not\r\n  optimizeListElements : true, // Whether to optimize the list elements or not\r\n  optimizeAccessor     : true, // Whether to optimize the accessors or not\r\n};\r\n\r\n\r\nexport function getGlobalConfig():IConfig {\r\n  return globalConfig;\r\n}\r\n\r\nexport const config = getGlobalConfig();\r\n","\r\nexport function optionsRequired(fnName:string): never {\r\n  throw new Error(`${fnName} requires at least one option`);\r\n}\r\n\r\nexport function optionMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number as option`);\r\n}\r\n\r\nexport function valueMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number value`);\r\n}\r\n\r\nexport function valueMustBeBoolean(fnName:string): never {\r\n  throw new Error(`${fnName} requires a boolean value`);\r\n}\r\n\r\nexport function valueMustBeDate(fnName:string): never {\r\n  throw new Error(`${fnName} requires a date value`);\r\n}","import { getGlobalConfig } from \"../WebComponents/getGlobalConfig.js\";\r\nimport { optionMustBeNumber, optionsRequired, valueMustBeBoolean, valueMustBeDate, valueMustBeNumber } from \"./errorMessages.js\";\r\nimport { FilterWithOptions } from \"./types\";\r\n\r\nconst config = getGlobalConfig();\r\n\r\nconst eq = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('eq');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('eq');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('eq');\r\n    return value === optValue;\r\n  }\r\n}\r\n\r\nconst ne = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ne');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ne');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ne');\r\n    return value !== optValue;\r\n  }\r\n}\r\n\r\nconst not = (options?:string[]) => {\r\n  return (value: any) => {\r\n    if (typeof value !== 'boolean') valueMustBeBoolean('not');\r\n    return !value;\r\n  }\r\n}\r\n\r\nconst lt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('lt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('lt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('lt');\r\n    return value < optValue;\r\n  }\r\n}\r\n\r\nconst le = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('le');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('le');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('le');\r\n    return value <= optValue;\r\n  }\r\n}\r\n\r\nconst gt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('gt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('gt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('gt');\r\n    return value > optValue;\r\n  }\r\n}\r\n\r\nconst ge = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ge');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ge');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ge');\r\n    return value >= optValue;\r\n  }\r\n}\r\n\r\nconst inc = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('inc');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('inc');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('inc');\r\n    return value + optValue;\r\n  }\r\n}\r\n\r\nconst dec = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('dec');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('dec');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('dec');\r\n    return value - optValue;\r\n  }\r\n}\r\n\r\nconst mul = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('mul');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('mul');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('mul');\r\n    return value * optValue;\r\n  }\r\n}\r\n\r\nconst div = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('div');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value / optValue;\r\n  }\r\n}\r\n\r\nconst fix = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value.toFixed(optValue);\r\n  }\r\n}\r\n\r\nconst locale = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('locale');\r\n    return value.toLocaleString(opt);\r\n  }\r\n}\r\n\r\nconst uc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toUpperCase();\r\n  }\r\n}\r\n\r\nconst lc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toLowerCase();\r\n  }\r\n}\r\n\r\nconst cap = (options?:string[]) => {\r\n  return (value: any) => {\r\n    const v = value.toString();\r\n    if (v.length === 0) return v;\r\n    if (v.length === 1) return v.toUpperCase();\r\n    return v.charAt(0).toUpperCase() + v.slice(1);\r\n  }\r\n}\r\n\r\nconst trim = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().trim();\r\n  }\r\n}\r\n\r\nconst slice = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('slice');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('slice');\r\n  return (value: any) => {\r\n    return value.toString().slice(optValue);\r\n  }\r\n}\r\n\r\nconst substr = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('substr');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('substr');\r\n  const opt2 = options?.[1] ?? optionsRequired('substr');\r\n  const opt2Value = Number(opt2);\r\n  if (isNaN(opt2Value)) optionMustBeNumber('substr');\r\n  return (value: any) => {\r\n    return value.toString().substr(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst pad = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('pad');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('pad');\r\n  const opt2 = options?.[1] ?? '0';\r\n  const opt2Value = opt2;\r\n  return (value: any) => {\r\n    return value.toString().padStart(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst rep = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('rep');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('rep');\r\n  return (value: any) => {\r\n    return value.toString().repeat(optValue);\r\n  }\r\n}\r\n\r\nconst rev = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().split('').reverse().join('');\r\n  }\r\n}\r\n\r\nconst int = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseInt(value, 10);\r\n  }\r\n}\r\n\r\nconst float = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseFloat(value);\r\n  }\r\n}\r\n\r\nconst round = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('round');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('round');\r\n    return Math.round(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst floor = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('floor');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('floor');\r\n    return Math.floor(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst ceil = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('ceil');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ceil');\r\n    return Math.ceil(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst percent = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('percent');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('percent');\r\n    return value.toFixed(optValue) + '%';\r\n  }\r\n}\r\n\r\nconst date = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date))  valueMustBeDate('date');\r\n    return value.toLocaleDateString(config.locale);\r\n  }\r\n}\r\n\r\nconst time = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('time');\r\n    return value.toLocaleTimeString(config.locale);\r\n  }\r\n}\r\n\r\nconst datetime = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('datetime');\r\n    return value.toLocaleString(config.locale);\r\n  }\r\n}\r\n\r\nconst ymd = (options?:string[]) => {\r\n  const opt = options?.[0] ?? '-';\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('ymd');\r\n    const year = value.getFullYear().toString();\r\n    const month = (value.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = value.getDate().toString().padStart(2, '0');\r\n    return `${year}${opt}${month}${opt}${day}`;\r\n  }\r\n}\r\n\r\nconst falsy = (options?:string[]) => {\r\n  return (value: any) => value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value);\r\n}\r\n\r\nconst truthy = (options?:string[]) => {\r\n  return (value: any) =>value !== false && value !== null && value !== undefined && value !== 0 && value !== '' && !Number.isNaN(value);\r\n}\r\n\r\nconst defaults = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('defaults');\r\n  return (value: any) => {\r\n    if (value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value)) return opt;\r\n    return value;\r\n  }\r\n}\r\n\r\nconst boolean = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Boolean(value);\r\n  }\r\n}\r\n\r\nconst number = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Number(value);\r\n  }\r\n}\r\n\r\nconst string = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return String(value);\r\n  }\r\n}\r\n\r\nconst _null = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return (value === \"\") ? null : value;\r\n  } \r\n}\r\n\r\nconst builtinFilters: FilterWithOptions = {\r\n  eq,\r\n  ne,\r\n  not,\r\n  \r\n  lt,\r\n  le,\r\n  gt,\r\n  ge,\r\n\r\n  inc,\r\n  dec,\r\n  mul,\r\n  div,\r\n\r\n  fix,\r\n  locale,\r\n  uc,\r\n  lc,\r\n  cap,\r\n  trim,\r\n  slice,\r\n  substr,\r\n  pad,\r\n  rep,\r\n  rev,\r\n\r\n  int,\r\n  float,\r\n  round,\r\n  floor,\r\n  ceil,\r\n  percent,\r\n\r\n  date,\r\n  time,\r\n  datetime,\r\n  ymd,\r\n\r\n  falsy,\r\n  truthy,\r\n  defaults,\r\n\r\n  boolean,\r\n  number,\r\n  string,\r\n  \"null\": _null,\r\n};\r\n\r\nexport const outputBuiltinFilters = builtinFilters;\r\nexport const inputBuiltinFilters = builtinFilters;\r\n\r\nexport const builtinFilterFn = (name:string, options: string[]) => (filters: FilterWithOptions) => {\r\n  const filter = filters[name];\r\n  if (!filter) throw new Error(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(options);\r\n}\r\n\r\n","\r\nlet id = 0;\r\n\r\nexport function generateId(): number {\r\n  return ++id;\r\n}","\r\nexport function raiseError(message: string): never {\r\n  throw new Error(message);\r\n}\r\n","import { raiseError } from \"../utils.js\";\r\nimport { IStructiveState } from \"./types\";\r\n\r\nconst stateClassById: Record<number,IStructiveState> = {};\r\n\r\nexport function registerStateClass(id: number, stateClass: IStructiveState) {\r\n  stateClassById[id] = stateClass;\r\n}\r\n\r\nexport function getStateClassById(id: number): IStructiveState {\r\n  return stateClassById[id] ?? raiseError(`getStateClassById: stateClass not found: ${id}`);\r\n}\r\n","import { raiseError } from \"../utils.js\";\r\n\r\nconst styleSheetById: Record<number,CSSStyleSheet> = {};\r\n\r\nexport function registerStyleSheet(id: number, css: CSSStyleSheet) {\r\n  styleSheetById[id] = css;\r\n}\r\n\r\nexport function getStyleSheetById(id: number): CSSStyleSheet {\r\n  return styleSheetById[id] ?? raiseError(`getStyleSheetById: stylesheet not found: ${id}`);\r\n}","import { registerStyleSheet } from \"./registerStyleSheet.js\";\r\n\r\nexport function registerCss(id: number, css: string) {\r\n  const styleSheet = new CSSStyleSheet();\r\n  styleSheet.replaceSync(css);\r\n  registerStyleSheet(id, styleSheet);\r\n}","import { FilterFn, Filters, FilterWithOptions } from \"../Filter/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nfunction textToFilter(filters:FilterWithOptions, text: IFilterText): FilterFn {\r\n  const filter = filters[text.name];\r\n  if (!filter) raiseError(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(text.options);\r\n}\r\n\r\nconst cache : Map<IFilterText[], Filters> = new Map();\r\n\r\nexport function createFilters(filters:FilterWithOptions, texts: IFilterText[]): Filters {\r\n  let result = cache.get(texts);\r\n  if (typeof result === \"undefined\") {\r\n    result = [];\r\n    for(let i = 0; i < texts.length; i++) {\r\n      result.push(textToFilter(filters, texts[i]));\r\n    }\r\n    cache.set(texts, result);\r\n  }\r\n  return result;\r\n}\r\n","import { Filters } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { IBindingNode } from \"./types\";\r\n\r\nexport class BindingNode implements IBindingNode {\r\n  #binding: IBinding;\r\n  #node: Node;\r\n  #name: string;\r\n  #filters: Filters;\r\n  #decorates: string[];\r\n  #bindContents: Set<IBindContent> = new Set<IBindContent>();\r\n  get node(): Node {\r\n    return this.#node;\r\n  }\r\n  get name(): string {\r\n    return this.#name;\r\n  }\r\n  get subName(): string {\r\n    return this.#name;\r\n  }\r\n  get binding(): IBinding {\r\n    return this.#binding;\r\n  }\r\n  get decorates(): string[] {\r\n    return this.#decorates;\r\n  }\r\n  get filters(): Filters {\r\n    return this.#filters;\r\n  }\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#node = node;\r\n    this.#name = name;\r\n    this.#filters = filters;\r\n    this.#decorates = decorates;\r\n  }\r\n  init():void {\r\n  }\r\n  update(): void {\r\n    this.assignValue(this.binding.bindingState.filteredValue);\r\n  }\r\n  assignValue(value: any): void {\r\n    raiseError(`BindingNode: assignValue not implemented`);\r\n  }\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    raiseError(`BindingNode: updateElements not implemented`);\r\n  }\r\n  get isSelectElement(): boolean {\r\n    return this.node instanceof HTMLSelectElement;\r\n  }\r\n  get value():any {\r\n    return null;\r\n  }\r\n  get filteredValue():any {\r\n    return null;\r\n  }\r\n  get isFor(): boolean {\r\n    return false;\r\n  }\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeAttribute extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as Element;\r\n    element.setAttribute(this.subName, value.toString());\r\n  }\r\n}\r\n\r\nexport const createBindingNodeAttribute: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeAttribute(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeCheckbox extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeCheckbox.update: value is not array`, );\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.map(_val => _val.toString()).includes(element.value);\r\n  }\r\n}\r\n\r\nexport const createBindingNodeCheckbox: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeCheckbox(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeClassList extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeClassList.update: value is not array`);\r\n    }\r\n    const element = this.node as Element;\r\n    element.className = value.join(\" \");\r\n  }\r\n}\r\n\r\nexport const createBindingNodeClassList: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassList(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeClassName extends BindingNode {\r\n  #subName: string;\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeClassName.update: value is not boolean`);\r\n    }\r\n    const element = this.node as Element;\r\n    if (value) {\r\n      element.classList.add(this.subName);\r\n    } else {\r\n      element.classList.remove(this.subName);\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBindingNodeClassName: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassName(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeEvent extends BindingNode {\r\n  #subName    : string;\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#subName = this.name.slice(2); // on～\r\n    const element = node as HTMLElement;\r\n    element.addEventListener(this.subName, (e:Event) => this.handler(e));\r\n  }\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  update() {\r\n    // 何もしない\r\n  }\r\n\r\n  handler(e: Event) {\r\n    const bindingState = this.binding.bindingState;\r\n    const engine = this.binding.engine;\r\n    const stateProxy = engine.stateProxy;\r\n    const updater = engine.updater;\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n    const indexes = loopContext?.serialize().map((context) => context.listIndex.index) ?? [];\r\n    const options = this.decorates;\r\n    if (options.includes(\"preventDefault\")) {\r\n      e.preventDefault();\r\n    }\r\n    if (options.includes(\"stopPropagation\")) {\r\n      e.stopPropagation();\r\n    }\r\n    this.binding.engine.updater.addProcess(async () => {\r\n      const value = bindingState.value;\r\n      const typeOfValue = typeof value;\r\n      updater.addProcess(async () => {\r\n        if (loopContext) {\r\n          await engine.setLoopContext(loopContext, async () => {\r\n            if (typeOfValue === \"function\") {\r\n              await Reflect.apply(value, stateProxy, [e, ...indexes]);\r\n            } else {\r\n              // ToDo:error\r\n            }\r\n          });\r\n        } else {\r\n          if (typeOfValue === \"function\") {\r\n            await Reflect.apply(value, stateProxy, [e, ...indexes]);\r\n          } else {\r\n            // ToDo:error\r\n          }\r\n        }\r\n      });\r\n    });\r\n  } \r\n}\r\n\r\nexport const createBindingNodeEvent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeEvent(binding, node, name, filterFns, decorates);\r\n  }\r\n","export const DATA_BIND_ATTRIBUTE = \"data-bind\";\r\nexport const COMMENT_EMBED_MARK = \"@@:\"; // 埋め込み変数のマーク\r\nexport const COMMENT_TEMPLATE_MARK = \"@@|\"; // テンプレートのマーク\r\n","import { COMMENT_TEMPLATE_MARK } from \"../../constants.js\";\r\nimport { Filters } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\n\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\nexport class BindingNodeBlock extends BindingNode {\r\n  #id: number;\r\n  get id(): number {\r\n    return this.#id;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const id = this.node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN) ?? raiseError(\"BindingNodeBlock.id: invalid node\");\r\n    this.#id = Number(id);\r\n  }\r\n    \r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeIf extends BindingNodeBlock {\r\n  #bindContent: IBindContent;\r\n  #trueBindContents: Set<IBindContent>;\r\n  #falseBindContents: Set<IBindContent> = new Set();\r\n  #bindContents: Set<IBindContent>;\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#bindContent = createBindContent(\r\n      this.binding, \r\n      this.id, \r\n      this.binding.engine, \r\n      \"\", \r\n      null\r\n    );\r\n    this.#trueBindContents = this.#bindContents = new Set([this.#bindContent]);\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeIf.update: value is not boolean`);\r\n    }\r\n    const parentNode = this.node.parentNode;\r\n    if (parentNode == null) {\r\n      raiseError(`BindingNodeIf.update: parentNode is null`);\r\n    }\r\n    if (value) {\r\n      this.#bindContent.render();\r\n      this.#bindContent.mountAfter(parentNode, this.node.nextSibling);\r\n      this.#bindContents = this.#trueBindContents;\r\n    } else {\r\n      this.#bindContent.unmount();\r\n      this.#bindContents = this.#falseBindContents;\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBindingNodeIf: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeIf(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeFor extends BindingNodeBlock {\r\n  #bindContentsSet       : Set<IBindContent> = new Set<IBindContent>();\r\n  #bindContentByListIndex: WeakMap<IListIndex, IBindContent> = new WeakMap();\r\n  #bindContentPool       : IBindContent[] = [];\r\n  #bindContentLastIndex  : number = 0;\r\n  #lastListIndexSet      : Set<IListIndex> = new Set<IListIndex>();\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContentsSet;\r\n  }\r\n\r\n  get isFor(): boolean {\r\n    return true;\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  createBindContent(listIndex: IListIndex): IBindContent {\r\n    let bindContent: IBindContent;\r\n    if (this.#bindContentLastIndex >= 0) {\r\n      // プールの最後の要素を取得して、プールの長さをあとで縮減する\r\n      // 作るたびにプールを縮減すると、パフォーマンスが悪化するため\r\n      // プールの長さを縮減するのは、全ての要素を作った後に行う\r\n      bindContent = this.#bindContentPool[this.#bindContentLastIndex];\r\n      this.#bindContentLastIndex--;\r\n      bindContent.assignListIndex(listIndex);\r\n    } else {\r\n      bindContent = createBindContent(\r\n        this.binding, \r\n        this.id, \r\n        this.binding.engine, \r\n        this.binding.bindingState.pattern + \".*\", \r\n        listIndex);\r\n    }\r\n    // 登録\r\n    this.#bindContentByListIndex.set(listIndex, bindContent);\r\n    return bindContent;\r\n  }\r\n\r\n  deleteBindContent(bindContent: IBindContent): void {\r\n    bindContent.unmount();\r\n    bindContent.loopContext?.clearListIndex();\r\n  }\r\n\r\n  get bindContentLastIndex():number {\r\n    return this.#bindContentLastIndex;\r\n  }\r\n  set bindContentLastIndex(value:number) {\r\n    this.#bindContentLastIndex = value;\r\n  }\r\n\r\n  get poolLength():number {\r\n    return this.#bindContentPool.length;\r\n  }\r\n  set poolLength(length: number) {\r\n    if (length < 0) {\r\n      raiseError(`BindingNodeFor.setPoolLength: length is negative`);\r\n    }\r\n    this.#bindContentPool.length = length;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeFor.assignValue: value is not array`);\r\n    }\r\n    const listIndexesSet = this.binding.engine.getListIndexesSet(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex\r\n    );\r\n    if (listIndexesSet === null) {\r\n      raiseError(`BindingNodeFor.assignValue: listIndexes is not found`);\r\n    }\r\n    const newBindContensSet = new Set<IBindContent>();\r\n    let lastBindContent = null;\r\n    // 削除を先にする\r\n    const removeBindContentsSet = new Set<IBindContent>();\r\n    const diff = this.#lastListIndexSet.difference(listIndexesSet);\r\n    for(const listIndex of diff) {\r\n      const bindContent = this.#bindContentByListIndex.get(listIndex);\r\n      if (bindContent) {\r\n        this.deleteBindContent(bindContent);\r\n        removeBindContentsSet.add(bindContent);\r\n      }\r\n    }\r\n    this.#bindContentPool.push(...removeBindContentsSet);\r\n\r\n    const parentNode = this.node.parentNode ?? raiseError(`BindingNodeFor.update: parentNode is null`);\r\n    const firstNode = this.node;\r\n\r\n    this.bindContentLastIndex = this.poolLength - 1;\r\n    for(const listIndex of listIndexesSet) {\r\n      const lastNode = lastBindContent?.getLastNode(parentNode) ?? firstNode;\r\n      let bindContent = this.#bindContentByListIndex.get(listIndex);\r\n      if (typeof bindContent === \"undefined\") {\r\n        bindContent = this.createBindContent(listIndex);\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        if (lastNode?.nextSibling !== bindContent.firstChildNode) {\r\n          bindContent.mountAfter(parentNode, lastNode);\r\n        }\r\n      }\r\n      newBindContensSet.add(bindContent);\r\n      lastBindContent = bindContent;\r\n    }\r\n    // プールの長さを更新する\r\n    // プールの長さは、プールの最後の要素のインデックス+1であるため、\r\n    this.poolLength = this.bindContentLastIndex + 1;\r\n    this.#bindContentsSet = newBindContensSet;\r\n    this.#lastListIndexSet = new Set<IListIndex>(listIndexesSet);\r\n  }\r\n\r\n  /**\r\n   * SWAP処理を想定\r\n   * \r\n   * @param listIndexes \r\n   * @param values \r\n   * @returns \r\n   */\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    if (typeof values[0] !== \"object\") return;\r\n    const engine = this.binding.engine;\r\n    const oldListValues = \r\n      engine.getList(\r\n        this.binding.bindingState.info, \r\n        this.binding.bindingState.listIndex\r\n      ) ?? raiseError(`BindingNodeFor.updateElements: oldValues is not found`); \r\n    const parentNode = this.node.parentNode ?? raiseError(`BindingNodeFor.update: parentNode is null`);\r\n\r\n    // DOMから削除\r\n    const currentBindContents = Array.from(this.#bindContentsSet);\r\n    const targetBindContents: IBindContent[] = [];\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const bindContent = currentBindContents[listIndex.index];\r\n      bindContent.unmount();\r\n      targetBindContents.push(bindContent);\r\n    }\r\n\r\n    // DOMに追加、listIndexを更新\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const index = listIndex.index;\r\n\r\n      const lastBindContent = currentBindContents[index - 1] ?? null;\r\n      const lastNode = lastBindContent?.lastChildNode ?? this.node;\r\n\r\n      const oldValue = oldListValues[index];\r\n      const targetIndex = values.indexOf(oldValue);\r\n      const prevBindContent = targetBindContents[targetIndex];\r\n\r\n      if (typeof prevBindContent === \"undefined\") {\r\n        // 入れ替えるBindContentがない場合は再描画\r\n        const bindContent = targetBindContents[index];\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        prevBindContent.assignListIndex(listIndex);\r\n        prevBindContent.mountAfter(parentNode, lastNode);\r\n        this.#bindContentByListIndex.set(listIndex, prevBindContent);\r\n        currentBindContents[index] = prevBindContent;\r\n      }\r\n      if (targetIndex >= 0) {\r\n        values[targetIndex] = -1;\r\n      }\r\n    }\r\n    this.#bindContentsSet = new Set<IBindContent>(currentBindContents);\r\n    engine.saveList(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex, \r\n      this.binding.bindingState.value.slice(0)\r\n    );\r\n  }\r\n}\r\n\r\nexport const createBindingNodeFor: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeFor(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DEFAULT_PROPERTY = \"textContent\";\r\n\r\ntype DefaultPropertyByElementType = {\r\n  [key:string]: string;\r\n}\r\n\r\nconst defaultPropertyByElementType:DefaultPropertyByElementType = {\r\n  \"radio\"   : \"checked\",\r\n  \"checkbox\": \"checked\",\r\n  \"button\"  : \"onclick\",\r\n}\r\n\r\n/**\r\n * HTML要素のデフォルトプロパティを取得\r\n */\r\nconst getDefaultPropertyHTMLElement = (node:Node):string => \r\n  node instanceof HTMLSelectElement || node instanceof HTMLTextAreaElement || node instanceof HTMLOptionElement ? \"value\" : \r\n  node instanceof HTMLButtonElement ? \"onclick\" : \r\n  node instanceof HTMLAnchorElement ? \"onclick\" : \r\n  node instanceof HTMLFormElement ? \"onsubmit\" : \r\n  node instanceof HTMLInputElement ? (defaultPropertyByElementType[node.type] ?? \"value\") :\r\n  DEFAULT_PROPERTY;\r\n\r\ntype DefaultPropertyByKey = {\r\n  [key:string]: string | undefined;\r\n}\r\n\r\nconst _cache: DefaultPropertyByKey = {};\r\n\r\nconst textContentProperty = (node:Node):string => DEFAULT_PROPERTY;\r\n\r\ntype GetDefaultPropertyByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>string) | undefined;\r\n}\r\n\r\nconst getDefaultPropertyByNodeType: GetDefaultPropertyByNodeType = {\r\n  HTMLElement: getDefaultPropertyHTMLElement,\r\n  SVGElement : undefined,\r\n  Text       : textContentProperty,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * バインド情報でノードプロパティを省略された場合のデフォルトのプロパティ名を取得\r\n * @param node ノード\r\n * @param nodeType ノードタイプ\r\n * @returns {string | undefined} デフォルトのプロパティ名\r\n */\r\nexport function getDefaultName(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): string | undefined {\r\n  const key = node.constructor.name + \"\\t\" + ((node as HTMLInputElement).type ?? \"\"); // type attribute\r\n  return _cache[key] ?? (_cache[key] = getDefaultPropertyByNodeType[nodeType]?.(node));\r\n}\r\n  ","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { getDefaultName } from \"../../BindingBuilder/getDefaultName.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nfunction isTwoWayBindable(element: HTMLElement): boolean {\r\n  return element instanceof HTMLInputElement || \r\n    element instanceof HTMLTextAreaElement || \r\n    element instanceof HTMLSelectElement;\r\n}\r\n\r\nconst defaultEventByName: {[key:string]: string} = {\r\n  \"value\"   : \"input\",\r\n  \"checked\" : \"change\",\r\n  \"selected\": \"change\",\r\n};\r\n\r\nclass BindingNodeProperty extends BindingNode {\r\n  get value(): any {\r\n    // @ts-ignore\r\n    return this.node[this.name];\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.filters.length; i++) {\r\n      value = this.filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n\r\n    const isElement = this.node instanceof HTMLElement;\r\n    if (!isElement) return;\r\n    if (!isTwoWayBindable(this.node)) return;\r\n    const defaultName = getDefaultName(this.node, \"HTMLElement\");\r\n    if (defaultName !== this.name) return;\r\n    if (decorates.length > 1) raiseError(`BindingNodeProperty: ${this.name} has multiple decorators`);\r\n    const event = (decorates[0]?.startsWith(\"on\") ? decorates[0]?.slice(2) : decorates[0]) ?? null;\r\n    const eventName = event ?? defaultEventByName[this.name] ?? \"readonly\";\r\n    if (eventName === \"readonly\" || eventName === \"ro\") return;\r\n    this.node.addEventListener(eventName, () => {\r\n      this.binding.updateStateValue(this.filteredValue);\r\n    });\r\n\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    // @ts-ignore\r\n    this.node[this.name] = value;\r\n  }\r\n}\r\n\r\nexport const createBindingNodeProperty: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeProperty(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeRadio extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.toString() === element.value.toString();\r\n  }\r\n}\r\n\r\nexport const createBindingNodeRadio: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeRadio(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeStyle extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLElement;\r\n    element.style.setProperty(this.subName, value.toString());\r\n  }\r\n}\r\n\r\nexport const createBindingNodeStyle: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeStyle(binding, node, name, filterFns, decorates);\r\n  }\r\n","\r\nconst symbolName = \"componentState\";\r\n\r\nexport const RenderSymbol : unique symbol = Symbol.for(`${symbolName}.render`);\r\nexport const BindParentComponentSymbol : unique symbol = Symbol.for(`${symbolName}.bindParentComponent`);\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { RenderSymbol } from \"../../ComponentState/symbols.js\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { StructiveComponent } from \"../../WebComponents/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeComponent extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  init(): void {\r\n    const engine = this.binding.engine;\r\n    let bindings = engine.bindingsByComponent.get(this.node as StructiveComponent);\r\n    if (typeof bindings === \"undefined\") {\r\n      bindings = new Set<IBinding>();\r\n      engine.bindingsByComponent.set(this.node as StructiveComponent, bindings);\r\n    }\r\n    bindings.add(this.binding);\r\n  }\r\n\r\n  assignValue(value: any): void {\r\n    const component = this.node as StructiveComponent;\r\n    component.state[RenderSymbol](this.subName, value);\r\n  }\r\n\r\n}\r\n\r\nexport const createBindingNodeComponent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeComponent(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createBindingNodeAttribute } from \"../DataBinding/BindingNode/BindingNodeAttribute.js\";\r\nimport { createBindingNodeCheckbox } from \"../DataBinding/BindingNode/BindingNodeCheckbox.js\";\r\nimport { createBindingNodeClassList } from \"../DataBinding/BindingNode/BindingNodeClassList.js\";\r\nimport { createBindingNodeClassName } from \"../DataBinding/BindingNode/BindingNodeClassName.js\";\r\nimport { createBindingNodeEvent } from \"../DataBinding/BindingNode/BindingNodeEvent.js\";\r\nimport { createBindingNodeIf } from \"../DataBinding/BindingNode/BindingNodeIf.js\";\r\nimport { createBindingNodeFor } from \"../DataBinding/BindingNode/BindingNodeFor.js\";\r\nimport { createBindingNodeProperty } from \"../DataBinding/BindingNode/BindingNodeProperty.js\";\r\nimport { createBindingNodeRadio } from \"../DataBinding/BindingNode/BindingNodeRadio.js\";\r\nimport { createBindingNodeStyle } from \"../DataBinding/BindingNode/BindingNodeStyle.js\";\r\nimport { CreateBindingNodeByNodeFn, CreateBindingNodeFn } from \"../DataBinding/BindingNode/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\nimport { createBindingNodeComponent } from \"../DataBinding/BindingNode/BindingNodeComponent.js\";\r\n\r\ntype NodePropertyConstructorByName = {[key:string]:CreateBindingNodeFn};\r\ntype NodePropertyConstructorByNameByIsComment = {[key:number]:NodePropertyConstructorByName};\r\n\r\nconst nodePropertyConstructorByNameByIsComment:NodePropertyConstructorByNameByIsComment = {\r\n  0: {\r\n    \"class\"   : createBindingNodeClassList,\r\n    \"checkbox\": createBindingNodeCheckbox,\r\n    \"radio\"   : createBindingNodeRadio,\r\n  },\r\n  1: {\r\n    \"if\" : createBindingNodeIf,\r\n  },\r\n};\r\n\r\ntype NodePropertyConstructorByFirstName = {[key:string]:CreateBindingNodeFn};\r\n\r\nconst nodePropertyConstructorByFirstName:NodePropertyConstructorByFirstName = {\r\n  \"class\": createBindingNodeClassName,\r\n  \"attr\" : createBindingNodeAttribute,\r\n  \"style\": createBindingNodeStyle,\r\n  \"state\": createBindingNodeComponent,\r\n//  \"popover\": PopoverTarget,\r\n//  \"commandfor\": CommandForTarget,\r\n};\r\n\r\nfunction _getBindingNodeCreator(isComment:boolean, isElement: boolean, propertyName: string): CreateBindingNodeFn {\r\n  const bindingNodeCreatorByName = nodePropertyConstructorByNameByIsComment[isComment ? 1 : 0][propertyName];\r\n  if (typeof bindingNodeCreatorByName !== \"undefined\") {\r\n    return bindingNodeCreatorByName;\r\n  }\r\n  if (isComment && propertyName === \"for\") {\r\n    return createBindingNodeFor;\r\n  }\r\n  if (isComment) {\r\n    raiseError(`getBindingNodeCreator: unknown node property ${propertyName}`);\r\n  }\r\n  const nameElements = propertyName.split(\".\");\r\n  const bindingNodeCreatorByFirstName = nodePropertyConstructorByFirstName[nameElements[0]];\r\n  if (typeof bindingNodeCreatorByFirstName !== \"undefined\") {\r\n    return bindingNodeCreatorByFirstName;\r\n  }\r\n  if (isElement) {\r\n    if (propertyName.startsWith(\"on\")) {\r\n      return createBindingNodeEvent;\r\n    } else {\r\n      return createBindingNodeProperty;\r\n    }\r\n  } else {\r\n    return createBindingNodeProperty;\r\n  }\r\n}\r\n\r\nconst _cache: {[key:string]:CreateBindingNodeFn} = {};\r\n\r\n/**\r\n * バインドのノードプロパティの生成関数を取得する\r\n * @param node ノード\r\n * @param propertyName プロパティ名\r\n * @returns {CreateBindingNodeFn} ノードプロパティのコンストラクタ\r\n */\r\nexport function getBindingNodeCreator(\r\n  node        : Node, \r\n  propertyName: string,\r\n  filterTexts : IFilterText[],\r\n  decorates   : string[]\r\n): CreateBindingNodeByNodeFn {\r\n  const isComment = node instanceof Comment;\r\n  const isElement = node instanceof Element;\r\n  const key = isComment + \"\\t\" + isElement + \"\\t\" + propertyName;\r\n  const fn = _cache[key] ?? (_cache[key] = _getBindingNodeCreator(isComment, isElement, propertyName));\r\n  return fn(propertyName, filterTexts, decorates);\r\n}\r\n","\r\nconst symbolName = \"state\";\r\n\r\nexport const GetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.GetByRef`);\r\nexport const SetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.SetByRef`);\r\nexport const SetCacheableSymbol        : unique symbol = Symbol.for(`${symbolName}.SetCacheable`);\r\nexport const ConnectedCallbackSymbol   : unique symbol = Symbol.for(`${symbolName}.ConnectedCallback`);\r\nexport const DisconnectedCallbackSymbol: unique symbol = Symbol.for(`${symbolName}.DisconnectedCallback`);\r\nexport const ResolveSymbol             : unique symbol = Symbol.for(`${symbolName}.Resolve`);\r\nexport const GetAllSymbol              : unique symbol = Symbol.for(`${symbolName}.GetAll`);\r\n","import { raiseError } from '../utils.js';\r\nimport { IStructuredPathInfo } from './types';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IStructuredPathInfo } = {};\r\n//const _cache: Map<string, IStructuredPathInfo> = new Map();\r\n\r\n/**\r\n * パターン情報を取得します\r\n * @param pattern パターン\r\n * @returns {IPatternInfo} パターン情報\r\n */\r\nclass StructuredPathInfo implements IStructuredPathInfo {\r\n  static id : number = 0;\r\n  id = ++StructuredPathInfo.id;\r\n  pattern;\r\n  pathSegments;\r\n  lastSegment;\r\n  cumulativePaths;\r\n  cumulativeInfos;\r\n  cumulativeInfoSet;\r\n  wildcardPaths;\r\n  wildcardInfos;\r\n  wildcardInfoSet;\r\n  wildcardParentPaths;\r\n  wildcardParentInfos;\r\n  wildcardParentInfoSet;\r\n  lastWildcardPath;\r\n  lastWildcardInfo;\r\n  parentPath;\r\n  parentInfo;\r\n  wildcardCount;\r\n  children = {};\r\n\r\n  constructor(pattern: string) {\r\n    const getPattern = (_pattern: string): IStructuredPathInfo => {\r\n      return (pattern === _pattern) ? this : getStructuredPathInfo(_pattern);\r\n    };\r\n    const pathSegments = pattern.split(\".\");\r\n    const cumulativePaths = [];\r\n    const cumulativeInfos: IStructuredPathInfo[] = [];\r\n    const wildcardPaths = [];\r\n    const wildcardInfos = [];\r\n    const wildcardParentPaths = [];\r\n    const wildcardParentInfos = [];\r\n    let currentPatternPath = \"\", prevPatternPath = \"\";\r\n    let wildcardCount = 0;\r\n    for(let i = 0; i < pathSegments.length; i++) {\r\n      currentPatternPath += pathSegments[i];\r\n      if (pathSegments[i] === \"*\") {\r\n        wildcardPaths.push(currentPatternPath);\r\n        wildcardInfos.push(getPattern(currentPatternPath));\r\n        wildcardParentPaths.push(prevPatternPath);\r\n        wildcardParentInfos.push(getPattern(prevPatternPath));\r\n        wildcardCount++;\r\n      }\r\n      cumulativePaths.push(currentPatternPath);\r\n      cumulativeInfos.push(getPattern(currentPatternPath));\r\n      prevPatternPath = currentPatternPath;\r\n      currentPatternPath += \".\";\r\n    }\r\n    const lastWildcardPath = wildcardPaths.length > 0 ? wildcardPaths[wildcardPaths.length - 1] : null;\r\n    const parentPath = cumulativePaths.length > 1 ? cumulativePaths[cumulativePaths.length - 2] : null;\r\n    this.pattern = pattern;\r\n    this.pathSegments = pathSegments;\r\n    this.lastSegment = pathSegments[pathSegments.length - 1];\r\n    this.cumulativePaths = cumulativePaths;\r\n    this.cumulativeInfos = cumulativeInfos;\r\n    this.cumulativeInfoSet = new Set(cumulativeInfos);\r\n    this.wildcardPaths = wildcardPaths;\r\n    this.wildcardInfos = wildcardInfos;\r\n    this.wildcardInfoSet = new Set(wildcardInfos);\r\n    this.wildcardParentPaths = wildcardParentPaths;\r\n    this.wildcardParentInfos = wildcardParentInfos;\r\n    this.wildcardParentInfoSet = new Set(wildcardParentInfos);\r\n    this.lastWildcardPath = lastWildcardPath;\r\n    this.lastWildcardInfo = lastWildcardPath ? getPattern(lastWildcardPath) : null;\r\n    this.parentPath = parentPath;\r\n    this.parentInfo = parentPath ? getPattern(parentPath) : null;\r\n    this.wildcardCount = wildcardCount;\r\n    if (this.parentInfo) {\r\n      this.parentInfo.children[this.lastSegment] = this;\r\n    }\r\n  }\r\n}\r\n\r\nconst reservedWords = new Set([\r\n  \"constructor\", \"prototype\", \"__proto__\", \"toString\",\r\n  \"valueOf\", \"hasOwnProperty\", \"isPrototypeOf\",\r\n  \"watch\", \"unwatch\", \"eval\", \"arguments\",\r\n  \"let\", \"var\", \"const\", \"class\", \"function\",\r\n  \"null\", \"true\", \"false\", \"new\", \"return\",\r\n]);\r\n\r\nexport function getStructuredPathInfo(structuredPath: string): IStructuredPathInfo {\r\n  let info: IStructuredPathInfo | undefined;\r\n  info = _cache[structuredPath];\r\n  if (typeof info !== \"undefined\") {\r\n    return info;\r\n  }\r\n  if (reservedWords.has(structuredPath)) {\r\n    raiseError(`getStructuredPathInfo: pattern is reserved word: ${structuredPath}`);\r\n  }\r\n  return (_cache[structuredPath] = new StructuredPathInfo(structuredPath));\r\n}\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { GetByRefSymbol, SetByRefSymbol } from \"../../StateClass/symbols.js\";\r\nimport { IStateProxy } from \"../../StateClass/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\nclass BindingState implements IBindingState {\r\n  #binding     : IBinding;\r\n  #pattern     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return this.#pattern;\r\n  }\r\n  get info() {\r\n    return this.#info;\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#pattern = pattern;\r\n    this.#info = getStructuredPathInfo(pattern);\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.#state[GetByRefSymbol](this.info, this.listIndex);\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    if (this.info.wildcardCount > 0) {\r\n      const lastWildcardPath = this.info.lastWildcardPath ?? \r\n        raiseError(`BindingState.init: wildcardLastParentPath is null`);\r\n      const loopContext = this.binding.parentBindContent.loopContext?.find(lastWildcardPath) ?? \r\n        raiseError(`BindingState.init: loopContext is null`);\r\n      this.#listIndexRef = loopContext.listIndexRef;\r\n    }\r\n    this.binding.engine.saveBinding(this.info, this.listIndex, this.binding);\r\n  }\r\n  assignValue(value:any) {\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n    const engine = this.binding.engine;\r\n    const stateProxy = engine.stateProxy;\r\n    const bindingState = this.binding.bindingState;\r\n    if (loopContext) {\r\n      engine.setLoopContext(loopContext, async () => {\r\n        // @ts-ignore\r\n        stateProxy[SetByRefSymbol](bindingState.info, bindingState.listIndex, value);\r\n      });\r\n    } else {\r\n      // @ts-ignore\r\n      stateProxy[SetByRefSymbol](bindingState.info, bindingState.listIndex, value);\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBindingState: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n    return new BindingState(binding, state, name, filterFns);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStateProxy } from \"../../StateClass/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\nclass BindingStateIndex implements IBindingState {\r\n  #binding     : IBinding;\r\n  #indexNumber : number;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get info() {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    const indexNumber = Number(pattern.slice(1));\r\n    if (isNaN(indexNumber)) {\r\n      raiseError(\"BindingStateIndex: pattern is not a number\");\r\n    }\r\n    this.#indexNumber = indexNumber;\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.listIndex?.index ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext ??\r\n      raiseError(`BindingState.init: loopContext is null`);\r\n    const loopContexts = loopContext.serialize();\r\n    this.#listIndexRef = loopContexts[this.#indexNumber - 1].listIndexRef ??\r\n      raiseError(`BindingState.init: listIndexRef is null`);\r\n    const listIndex = this.listIndex ?? raiseError(\"listIndex is null\");\r\n    const bindings = this.binding.engine.bindingsByListIndex.get(listIndex);\r\n    if (bindings === undefined) {\r\n      this.binding.engine.bindingsByListIndex.set(listIndex, new Set([this.binding]));\r\n    } else {\r\n      bindings.add(this.binding);\r\n    }\r\n  }\r\n  assignValue(value:any): void {\r\n    raiseError(\"BindingStateIndex: assignValue is not implemented\");\r\n  }\r\n}\r\n\r\nexport const createBindingStateIndex: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n\r\n    return new BindingStateIndex(binding, state, name, filterFns);\r\n  }\r\n","import { createBindingState } from \"../DataBinding/BindingState/BindingState.js\";\r\nimport { createBindingStateIndex } from \"../DataBinding/BindingState/BindingStateIndex.js\";\r\nimport { CreateBindingStateByStateFn } from \"../DataBinding/BindingState/types\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nconst ereg = new RegExp(/^\\$\\d+$/);\r\n\r\nexport function getBindingStateCreator(\r\n  name       : string, \r\n  filterTexts: IFilterText[]\r\n): CreateBindingStateByStateFn {\r\n  if (ereg.test(name)) {\r\n    return createBindingStateIndex(name, filterTexts);\r\n  } else {\r\n    return createBindingState(name, filterTexts);\r\n  }\r\n}","import { COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst COMMENT_EMBED_MARK_LEN = COMMENT_EMBED_MARK.length;\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\nconst getTextFromContent   = (node:Node):string        => node.textContent?.slice(COMMENT_EMBED_MARK_LEN).trim() ?? \"\";\r\nconst getTextFromAttribute = (node:HTMLElement):string => node.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\nconst getTextFromTemplate  = (node:Node):string        => {\r\n  const text = node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN).trim(); \r\n  const id = Number(text);\r\n  const template = getTemplateById(id) ?? raiseError(`Template not found: ${text}`);\r\n  return template.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n};\r\nconst getTextFromSVGElement = (node:SVGElement):string => node.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n\r\nconst getTextByNodeType = {\r\n  \"Text\":        getTextFromContent,\r\n  \"HTMLElement\": getTextFromAttribute,\r\n  \"Template\":    getTextFromTemplate,\r\n  \"SVGElement\":  getTextFromSVGElement\r\n};\r\n\r\nexport function getDataBindText(nodeType: NodeType, node: Node): string {\r\n  const bindText = getTextByNodeType[nodeType](node as any) ?? \"\";\r\n  if (nodeType === \"Text\") {\r\n    return \"textContent:\" + bindText;\r\n  } else {\r\n    return bindText;\r\n  }\r\n}\r\n","import { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst createNodeKey = (node:Node):string => node.constructor.name + \"\\t\" + ((node instanceof Comment) ? (node.textContent?.[2] ?? \"\") : \"\");\r\n\r\ntype NodeTypeByNodeKey = {\r\n  [nodeKey:string]:NodeType;\r\n};\r\n\r\nconst nodeTypeByNodeKey:NodeTypeByNodeKey = {};\r\n\r\nconst getNodeTypeByNode = (node:Node):NodeType =>\r\n  (node instanceof Comment && node.textContent?.[2] === \":\") ? \"Text\" : \r\n  (node instanceof HTMLElement) ? \"HTMLElement\" :\r\n  (node instanceof Comment && node.textContent?.[2] === \"|\") ? \"Template\" : \r\n  (node instanceof SVGElement) ? \"SVGElement\" : raiseError(`Unknown NodeType: ${node.nodeType}`);\r\n\r\n/**\r\n * ノードのタイプを取得\r\n * @param node ノード\r\n * @param nodeKey ノードキー\r\n * @returns {NodeType} ノードタイプ\r\n */\r\nexport function getNodeType(\r\n  node   : Node, \r\n  nodeKey: string = createNodeKey(node)\r\n): NodeType {\r\n  return nodeTypeByNodeKey[nodeKey] ?? (nodeTypeByNodeKey[nodeKey] = getNodeTypeByNode(node));\r\n}\r\n","import { IFilterText, IBindText } from \"./types\";\r\n\r\nconst trim = (s:string):string => s.trim();\r\n\r\nconst has = (s:string):boolean => s.length > 0; // check length\r\n\r\nconst re = new RegExp(/^#(.*)#$/);\r\nconst decode = (s:string):string => {\r\n  const m = re.exec(s);\r\n  return m ? decodeURIComponent(m[1]) : s;\r\n};\r\n\r\n/**\r\n * parse filter part\r\n * \"eq,100|falsey\" ---> [Filter(eq, [100]), Filter(falsey)]\r\n */\r\nconst parseFilter = (text:string): IFilterText => {\r\n  const [name, ...options] = text.split(\",\").map(trim);\r\n  return {name, options:options.map(decode)};\r\n};\r\n\r\ntype ReturnParseStateProperty = {property:string,filters:IFilterText[]};\r\n/**\r\n * parse expression\r\n * \"value|eq,100|falsey\" ---> [\"value\", Filter[]]\r\n */\r\nconst parseProperty = (text:string): ReturnParseStateProperty => {\r\n  const [property, ...filterTexts] = text.split(\"|\").map(trim);\r\n  return {property, filters:filterTexts.map(parseFilter)};\r\n};\r\n\r\n/**\r\n * parse expressions\r\n * \"textContent:value|eq,100|falsey\" ---> [\"textContent\", \"value\", Filter[eq, falsey]]\r\n */\r\nconst parseExpression = (expression:string): IBindText => {\r\n  const [ bindExpression, decoratesExpression = null ] = expression.split(\"@\").map(trim);\r\n  const decorates = decoratesExpression ? decoratesExpression.split(\",\").map(trim) : [];\r\n  const [nodePropertyText, statePropertyText] = bindExpression.split(\":\").map(trim);\r\n  const { property:nodeProperty, filters:inputFilterTexts } = parseProperty(nodePropertyText);\r\n  const { property:stateProperty, filters:outputFilterTexts } = parseProperty(statePropertyText);\r\n  return { nodeProperty, stateProperty, inputFilterTexts, outputFilterTexts, decorates };\r\n};\r\n\r\n/**\r\n * parse bind text and return BindText[]\r\n */\r\nconst parseExpressions = (text:string): IBindText[] => {\r\n  return text.split(\";\").map(trim).filter(has).map(s => parseExpression(s));\r\n};\r\n\r\nconst cache:{[key:string]: IBindText[]} = {};\r\n\r\n/**\r\n * 取得したバインドテキスト(getBindTextByNodeType)を解析して、バインド情報を取得する\r\n * @param text バインドテキスト\r\n * @param defaultName デフォルト名\r\n * @returns {IBindText[]} バインド情報\r\n */\r\nexport function parseBindText(\r\n  text: string\r\n): IBindText[] {\r\n  if (text.trim() === \"\") {\r\n    return [];\r\n  }\r\n  return cache[text] ?? (cache[text] = parseExpressions(text));\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DATASET_BIND_PROPERTY = 'data-bind';\r\n\r\nconst removeAttributeFromElement = (node:Node):void => {\r\n  const element = node as Element;\r\n  element.removeAttribute(DATASET_BIND_PROPERTY);\r\n}\r\n\r\ntype RemoveAttributeByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>void) | undefined;\r\n}\r\n\r\nconst removeAttributeByNodeType:RemoveAttributeByNodeType = {\r\n  HTMLElement: removeAttributeFromElement,\r\n  SVGElement : removeAttributeFromElement,\r\n  Text       : undefined,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * ノードからdata-bind属性を削除\r\n * @param node ノード\r\n * @param nodeType ノードタイプ\r\n * @returns {Node} ノード\r\n */\r\nexport function removeDataBindAttribute(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n):void {\r\n  return removeAttributeByNodeType[nodeType]?.(node);\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst replaceTextNodeText = (node:Node):Node => {\r\n  const textNode = document.createTextNode(\"\");\r\n  node.parentNode?.replaceChild(textNode, node);\r\n  return textNode;\r\n}\r\n\r\ntype ReplaceTextNodeFn = {\r\n  [key in NodeType]: ((node:Node)=>Node) | undefined;\r\n}\r\n\r\nconst replaceTextNodeFn:ReplaceTextNodeFn = {\r\n  Text       : replaceTextNodeText,\r\n  HTMLElement: undefined,\r\n  Template   : undefined,\r\n  SVGElement : undefined\r\n}\r\n\r\n/**\r\n * コメントノードをテキストノードに置き換える\r\n * @param node ノード\r\n * @param nodeType ノードタイプ\r\n * @returns {Node} ノード\r\n */\r\nexport function replaceTextNodeFromComment(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): Node {\r\n  return replaceTextNodeFn[nodeType]?.(node) ?? node;\r\n}\r\n","import { getAbsoluteNodePath } from \"./getAbsoluteNodePath.js\";\r\nimport { getBindingNodeCreator } from \"./getBindingNodeCreator.js\";\r\nimport { getBindingStateCreator } from \"./getBindingStateCreator.js\";\r\nimport { getDataBindText } from \"./getDataBindText.js\";\r\nimport { getNodeType } from \"./getNodeType.js\";\r\nimport { parseBindText } from \"./parseBindText.js\";\r\nimport { removeDataBindAttribute } from \"./removeDataBindAttribute.js\";\r\nimport { replaceTextNodeFromComment } from \"./replaceTextNodeFromComment.js\";\r\nimport { IBindingCreator, IBindText, IDataBindAttributes, NodePath, NodeType } from \"./types\";\r\n\r\nclass DataBindAttributes implements IDataBindAttributes {\r\n  nodeType     : NodeType; // ノードの種別\r\n  nodePath     : NodePath; // ノードのルート\r\n  bindTexts    : IBindText[]; // BINDテキストの解析結果\r\n  creatorByText: Map<IBindText, IBindingCreator> = new Map(); // BINDテキストからバインディングクリエイターを取得\r\n  constructor(node: Node) {\r\n    this.nodeType = getNodeType(node);\r\n    const text = getDataBindText(this.nodeType, node);\r\n    // CommentNodeをTextに置換、template.contentの内容が書き換わることに注意\r\n    node = replaceTextNodeFromComment(node, this.nodeType);\r\n    // data-bind属性を削除する\r\n    removeDataBindAttribute(node, this.nodeType);\r\n\r\n    this.nodePath = getAbsoluteNodePath(node);\r\n    this.bindTexts = parseBindText(text);\r\n    for(let i = 0; i < this.bindTexts.length; i++) {\r\n      const bindText = this.bindTexts[i];\r\n      const creator: IBindingCreator = {\r\n        createBindingNode : getBindingNodeCreator(\r\n          node, \r\n          bindText.nodeProperty, \r\n          bindText.inputFilterTexts,\r\n          bindText.decorates\r\n        ),\r\n        createBindingState: getBindingStateCreator(\r\n          bindText.stateProperty, \r\n          bindText.outputFilterTexts\r\n        ),\r\n      }\r\n      this.creatorByText.set(bindText, creator);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function createDataBindAttributes(node: Node): IDataBindAttributes {\r\n  return new DataBindAttributes(node);\r\n}","import { NodePath } from \"./types\";\r\n\r\nexport function getAbsoluteNodePath(node: Node): NodePath {\r\n  let routeIndexes: NodePath = [];\r\n  while(node.parentNode !== null) {\r\n    const childNodes = Array.from(node.parentNode.childNodes) as Node[];\r\n    routeIndexes = [ childNodes.indexOf(node), ...routeIndexes ];\r\n    node = node.parentNode;\r\n  }\r\n  return routeIndexes;\r\n}","import { DATA_BIND_ATTRIBUTE, COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK } from \"../constants.js\";\r\n\r\n/**\r\n * \"@@:\"もしくは\"@@|\"で始まるコメントノードを取得する\r\n */\r\nfunction isCommentNode(node: Node): boolean {\r\n  return node instanceof Comment && (\r\n    (node.textContent?.indexOf(COMMENT_EMBED_MARK) === 0) || (node.textContent?.indexOf(COMMENT_TEMPLATE_MARK) === 0)\r\n  );\r\n} \r\n\r\nexport function getNodesHavingDataBind(root: Node): Node[] {\r\n  const nodes: Node[] = [];\r\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT, {\r\n    acceptNode(node:Node) {\r\n      return (node instanceof Element) ? \r\n        (node.hasAttribute(DATA_BIND_ATTRIBUTE) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP)\r\n        : (isCommentNode(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP);\r\n    }\r\n  });\r\n  while (walker.nextNode()) {\r\n    nodes.push(walker.currentNode);\r\n  }\r\n  return nodes;\r\n}\r\n\r\n","import { createDataBindAttributes } from \"./createDataBindAttributes.js\";\r\nimport { getNodesHavingDataBind } from \"./getNodesHavingDataBind.js\";\r\nimport { IDataBindAttributes } from \"./types\";\r\n\r\nconst listDataBindAttributesById: {[key:number]:IDataBindAttributes[]} = {};\r\n\r\nconst listPathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nconst pathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nfunction getDataBindAttributesFromTemplate(content: DocumentFragment): IDataBindAttributes[] {\r\n  const nodes = getNodesHavingDataBind(content);\r\n  return nodes.map(node => createDataBindAttributes(node));\r\n}\r\n\r\nexport function registerDataBindAttributes(\r\n  id     : number, \r\n  content: DocumentFragment,\r\n  rootId : number = id\r\n): IDataBindAttributes[] {\r\n  const dataBindAttributes = getDataBindAttributesFromTemplate(content);\r\n  const paths = pathsSetById[rootId] ?? (pathsSetById[rootId] = new Set<string>());\r\n  const listPaths = listPathsSetById[rootId] ?? (listPathsSetById[rootId] = new Set<string>());\r\n  for(let i = 0; i < dataBindAttributes.length; i++) {\r\n    const attribute = dataBindAttributes[i];\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      paths.add(bindText.stateProperty);\r\n      if (bindText.nodeProperty === \"for\") {\r\n        listPaths.add(bindText.stateProperty);\r\n      }\r\n    }\r\n  }\r\n  return listDataBindAttributesById[id] = dataBindAttributes;\r\n}\r\n\r\nexport const getDataBindAttributesById = (id: number): IDataBindAttributes[] => {\r\n  return listDataBindAttributesById[id];\r\n}\r\n\r\nexport const getListPathsSetById = (id: number): Set<string> => {\r\n  return listPathsSetById[id] ?? [];\r\n};\r\n\r\nexport const getPathsSetById = (id: number): Set<string> => {\r\n  return pathsSetById[id] ?? [];\r\n};","import { registerDataBindAttributes } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { removeEmptyTextNodes } from \"./removeEmptyTextNodes.js\";\r\n\r\nconst templateById:Record<number, HTMLTemplateElement> = {};\r\n\r\nexport function registerTemplate(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number\r\n): number {\r\n  removeEmptyTextNodes(template.content);\r\n  registerDataBindAttributes(id, template.content, rootId);  \r\n  templateById[id] = template;\r\n  return id;\r\n}\r\n\r\nexport function getTemplateById(id: number): HTMLTemplateElement {\r\n  return templateById[id] ?? raiseError(`getTemplateById: template not found: ${id}`);\r\n}","\r\nexport function removeEmptyTextNodes(content:DocumentFragment):void {\r\n  Array.from(content.childNodes).forEach(node => {\r\n    if (node.nodeType === Node.TEXT_NODE && !(node.nodeValue ?? \"\").trim()) {\r\n      content.removeChild(node);\r\n    }\r\n  });  \r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { CreateBindingNodeByNodeFn, IBindingNode } from \"./BindingNode/types\";\r\nimport { CreateBindingStateByStateFn, IBindingState } from \"./BindingState/types\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\n\r\nclass Binding implements IBinding {\r\n  parentBindContent: IBindContent;\r\n  node             : Node;\r\n  engine           : IComponentEngine;\r\n  bindingNode      : IBindingNode;\r\n  bindingState     : IBindingState;\r\n  version          : number | undefined;\r\n  constructor(\r\n    parentBindContent : IBindContent,\r\n    node              : Node,\r\n    engine            : IComponentEngine,\r\n    createBindingNode : CreateBindingNodeByNodeFn, \r\n    createBindingState: CreateBindingStateByStateFn,\r\n  ) {\r\n    this.parentBindContent = parentBindContent\r\n    this.node = node;\r\n    this.engine = engine\r\n    this.bindingNode = createBindingNode(this, node, engine.inputFilters);\r\n    this.bindingState = createBindingState(this, engine.stateProxy, engine.outputFilters);\r\n  }\r\n\r\n  get bindContents() {\r\n    return this.bindingNode.bindContents;\r\n  }\r\n\r\n  init() {\r\n    this.bindingNode.init();\r\n    this.bindingState.init();\r\n  }\r\n\r\n  render() {\r\n    if (this.version !== this.engine.updater.version) {\r\n      try {\r\n        this.bindingNode.update();\r\n      } finally {\r\n        this.version = this.engine.updater.version;\r\n      }\r\n    }\r\n  }\r\n\r\n  updateStateValue(value: any) {\r\n    const engine = this.engine;\r\n    const bindingState = this.bindingState;\r\n    engine.updater.addProcess(() => {\r\n      return bindingState.assignValue(value);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createBinding(\r\n  parentBindContent : IBindContent,\r\n  node              : Node, \r\n  engine            : IComponentEngine, \r\n  createBindingNode : CreateBindingNodeByNodeFn, \r\n  createBindingState: CreateBindingStateByStateFn\r\n): IBinding {\r\n  return new Binding(\r\n    parentBindContent, \r\n    node, \r\n    engine, \r\n    createBindingNode, \r\n    createBindingState\r\n  );\r\n}","import { IBindContent } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { ILoopContext } from \"./types\";\r\n\r\nclass LoopContext implements ILoopContext {\r\n  #path     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null;\r\n  #bindContent : IBindContent;\r\n  constructor(\r\n    path    : string | null,\r\n    listIndex  : IListIndex,\r\n    bindContent: IBindContent\r\n  ) {\r\n    this.#path = path ?? raiseError(\"name is required\");\r\n    this.#info = getStructuredPathInfo(this.#path);\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    this.#bindContent = bindContent;\r\n  }\r\n  get path(): string {\r\n    return this.#path;\r\n  }\r\n  get info(): IStructuredPathInfo {\r\n    return this.#info;\r\n  }\r\n  get listIndex(): IListIndex {\r\n    return this.#listIndexRef?.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get listIndexRef(): WeakRef<IListIndex> {\r\n    return this.#listIndexRef ?? raiseError(\"listIndexRef is null\");\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    // 構造は変わらないので、#parentLoopContext、#cacheはクリアする必要はない\r\n  }\r\n  clearListIndex():void {\r\n    this.#listIndexRef = null;\r\n  }\r\n  get bindContent(): IBindContent {\r\n    return this.#bindContent;\r\n  }\r\n\r\n  #parentLoopContext: ILoopContext | null | undefined;\r\n  get parentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#parentLoopContext === \"undefined\") {\r\n      let currentBinding: IBindContent | null = this.bindContent;\r\n      while(currentBinding !== null) {\r\n        if (currentBinding.loopContext !== null && currentBinding.loopContext !== this) {\r\n          this.#parentLoopContext = currentBinding.loopContext;\r\n          break;\r\n        }\r\n        currentBinding = currentBinding.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      if (typeof this.#parentLoopContext === \"undefined\") this.#parentLoopContext = null;\r\n    }\r\n    return this.#parentLoopContext;\r\n  }\r\n\r\n  #cache:Record<string, ILoopContext | null> = {};\r\n  find(name: string): ILoopContext | null {\r\n    let loopContext = this.#cache[name];\r\n    if (typeof loopContext === \"undefined\") {\r\n      let currentLoopContext: ILoopContext | null = this;\r\n      while(currentLoopContext !== null) {\r\n        if (currentLoopContext.path === name) break;\r\n        currentLoopContext = currentLoopContext.parentLoopContext;\r\n      }\r\n      loopContext = this.#cache[name] = currentLoopContext;\r\n    }\r\n    return loopContext;\r\n  }\r\n\r\n  walk(callback: (loopContext: ILoopContext) => void): void {\r\n    let currentLoopContext: ILoopContext | null = this;\r\n    while(currentLoopContext !== null) {\r\n      callback(currentLoopContext);\r\n      currentLoopContext = currentLoopContext.parentLoopContext;\r\n    }\r\n  }\r\n\r\n  serialize(): ILoopContext[] {\r\n    const results: ILoopContext[] = [];\r\n    this.walk((loopContext) => {\r\n      results.unshift(loopContext);\r\n    });\r\n    return results;\r\n  }\r\n\r\n}\r\n\r\n// 生成されたあと、IBindContentのloopContextに登録される\r\n// IBindContentにずっと保持される\r\nexport function createLoopContext(\r\n  pattern: string | null,\r\n  listIndex: IListIndex,\r\n  bindContent: IBindContent\r\n): ILoopContext {\r\n  return new LoopContext(pattern, listIndex, bindContent);\r\n}","import { IBinding } from \"../DataBinding/types\";\r\n\r\nexport function render(bindings: IBinding[]) {\r\n  const bindingsWithSelectElement = [];\r\n  for(let i = 0; i < bindings.length; i++) {\r\n    const binding = bindings[i];\r\n    if (binding.bindingNode.isSelectElement) {\r\n      bindingsWithSelectElement.push(binding);\r\n    } else {\r\n      binding.render();\r\n    }\r\n  }\r\n  for(let i = 0; i < bindingsWithSelectElement.length; i++) {\r\n    bindingsWithSelectElement[i].render();\r\n  }\r\n}\r\n","import { resolveNodeFromPath } from \"../BindingBuilder/resolveNodeFromPath.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { createBinding } from \"./Binding.js\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\nimport { createLoopContext } from \"../LoopContext/createLoopContext.js\";\r\nimport { render } from \"../Render/render.js\";\r\nimport { getDataBindAttributesById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\n\r\nfunction createContent(id: number): DocumentFragment {\r\n  const template = getTemplateById(id) ?? \r\n    raiseError(`BindContent: template is not found: ${id}`);\r\n  return document.importNode(template.content, true);\r\n}\r\n\r\nfunction createBindings(\r\n  bindContent: IBindContent, \r\n  id         : number, \r\n  engine     : IComponentEngine, \r\n  content    : DocumentFragment\r\n): IBinding[] {\r\n  const attributes = getDataBindAttributesById(id) ?? \r\n    raiseError(`BindContent: data-bind is not set`);\r\n  const bindings: IBinding[] = [];\r\n  for(let i = 0; i < attributes.length; i++) {\r\n    const attribute = attributes[i];\r\n    const node = resolveNodeFromPath(content, attribute.nodePath) ?? \r\n      raiseError(`BindContent: node is not found: ${attribute.nodePath}`);\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      const creator = attribute.creatorByText.get(bindText) ?? \r\n        raiseError(`BindContent: creator is not found: ${bindText}`);\r\n      const binding = createBinding(\r\n        bindContent, \r\n        node, \r\n        engine, \r\n        creator.createBindingNode, \r\n        creator.createBindingState\r\n      );\r\n      bindings.push(binding);\r\n    }\r\n  }\r\n  return bindings;\r\n}\r\n\r\nclass BindContent implements IBindContent {\r\n  loopContext  : ILoopContext | null;\r\n  parentBinding: IBinding | null;\r\n  childNodes   : Node[];\r\n  fragment     : DocumentFragment;\r\n  engine       : IComponentEngine | undefined;\r\n  #id;\r\n  get id() {\r\n    return this.#id;\r\n  }\r\n  get isMounted() {\r\n    return this.childNodes.length > 0 && this.childNodes[0].parentNode !== this.fragment;\r\n  }\r\n  get firstChildNode() {\r\n    return this.childNodes[0] ?? null;\r\n  }\r\n  get lastChildNode() {\r\n    return this.childNodes[this.childNodes.length - 1] ?? null;\r\n  }\r\n  getLastNode(parentNode: Node): Node | null {\r\n    const lastBinding = this.bindings[this.bindings.length - 1];\r\n    const lastChildNode = this.lastChildNode;\r\n    if (lastBinding.node === lastChildNode) {\r\n      if (lastBinding.bindContents.size > 0) {\r\n        const childBindContent = Array.from(lastBinding.bindContents).at(-1) ?? raiseError(`BindContent: childBindContent is not found`);\r\n        const lastNode = childBindContent.getLastNode(parentNode);\r\n        if (lastNode !== null) {\r\n          return lastNode;\r\n        }\r\n      }\r\n    }\r\n    if (parentNode !== lastChildNode?.parentNode) {\r\n      return null;\r\n    }\r\n    return lastChildNode;\r\n  }\r\n  #currentLoopContext: ILoopContext | null | undefined;\r\n  get currentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#currentLoopContext === \"undefined\") {\r\n      let bindContent: IBindContent | null = this;\r\n      while(bindContent !== null) {\r\n        if (bindContent.loopContext !== null) break; ;\r\n        bindContent = bindContent.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      this.#currentLoopContext = bindContent?.loopContext ?? null;\r\n    }\r\n    return this.#currentLoopContext;\r\n  }\r\n  constructor(\r\n    parentBinding: IBinding | null,\r\n    id           : number, \r\n    engine       : IComponentEngine, \r\n    loopContext  : string | null,\r\n    listIndex    : IListIndex | null\r\n  ) {\r\n    this.parentBinding = parentBinding;\r\n    this.#id = id;\r\n    this.fragment = createContent(id);\r\n    this.childNodes = Array.from(this.fragment.childNodes);\r\n    this.engine = engine;\r\n    this.loopContext = (listIndex !== null) ? createLoopContext(loopContext, listIndex, this) : null;\r\n    this.bindings = createBindings(\r\n      this, \r\n      id, \r\n      engine, \r\n      this.fragment\r\n    );\r\n  }\r\n  mount(parentNode: Node) {\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        parentNode.appendChild(this.childNodes[i]);\r\n      }\r\n    } else {\r\n      parentNode.appendChild(this.fragment);\r\n    }\r\n  }\r\n  mountBefore(parentNode: Node, beforeNode: Node | null) {\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n      }\r\n    } else {\r\n      parentNode.insertBefore(this.fragment, beforeNode);\r\n    }\r\n  }\r\n  mountAfter(parentNode: Node, afterNode: Node | null) {\r\n    const beforeNode = afterNode?.nextSibling ?? null;\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n      }\r\n    } else {\r\n      parentNode.insertBefore(this.fragment, beforeNode);\r\n    }\r\n  }\r\n  unmount() {\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      this.fragment.appendChild(this.childNodes[i]);\r\n    }\r\n  }\r\n  bindings: IBinding[] = [];\r\n  render() {\r\n    render(this.bindings);\r\n  }\r\n  init() {\r\n    this.bindings.forEach(binding => binding.init());\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    if (this.loopContext == null) raiseError(`BindContent: loopContext is null`);\r\n    this.loopContext.assignListIndex(listIndex);\r\n    this.init();\r\n  }\r\n}\r\n\r\nexport function createBindContent(\r\n  parentBinding: IBinding | null,\r\n  id           : number, \r\n  engine       :IComponentEngine, \r\n  loopContext  : string | null, \r\n  listIndex    :IListIndex | null\r\n):IBindContent {\r\n  const bindContent = new BindContent(\r\n    parentBinding, \r\n    id, \r\n    engine, \r\n    loopContext, \r\n    listIndex\r\n  );\r\n  bindContent.init();\r\n  return bindContent;\r\n}","import { NodePath } from \"./types\";\r\n\r\nexport function resolveNodeFromPath(root: Node, path: NodePath): Node | null {\r\n  return path.reduce((node, index) => node?.childNodes[index] ?? null, root);\r\n}","import { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\n\r\nexport function createRefKey(\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n) {\r\n  return info.id + \":\" + (listIndex?.id ?? 0);\r\n}\r\n\r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { createRefKey } from \"../../StatePropertyRef/getStatePropertyRef\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setTracking } from \"./setTracking.js\";\r\n\r\nfunction _getByRef(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  receiver : IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  if (handler.lastTrackingStack != null && handler.lastTrackingStack !== info) {\r\n    const lastPattern = handler.lastTrackingStack;\r\n    if (lastPattern.parentInfo !== info) {\r\n      handler.engine.addDependentProp(lastPattern, info, \"reference\");\r\n    }\r\n  }\r\n\r\n  let refKey = '';\r\n  if (handler.cacheable) {\r\n    refKey = createRefKey(info, listIndex);\r\n    const value = handler.cache[refKey];\r\n    if (typeof value !== \"undefined\") {\r\n      return value;\r\n    }\r\n    if (refKey in handler.cache) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  let value;\r\n  try {\r\n    if (info.pattern in target) {\r\n      return (value = handler.engine.setStatePropertyRef(info, listIndex, () => {\r\n        return Reflect.get(target, info.pattern, receiver);\r\n      }));\r\n    } else {\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRef(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return (value = Reflect.get(parentValue, index));\r\n      } else {\r\n        return (value = Reflect.get(parentValue, lastSegment));\r\n      }\r\n    }\r\n  } finally {\r\n    if (handler.cacheable && !(refKey in handler.cache)) {\r\n      handler.cache[refKey] = value;\r\n    }\r\n  }\r\n}\r\n\r\nexport function getByRef(\r\n    target   : Object, \r\n    info     : IStructuredPathInfo,\r\n    listIndex: IListIndex | null,\r\n    receiver : IStateProxy,\r\n    handler  : IStateHandler\r\n  ): any {\r\n    if (handler.engine.trackedGetters.has(info.pattern)) {\r\n      return setTracking(info, handler, () => {\r\n        return _getByRef(target, info, listIndex, receiver, handler);\r\n      });\r\n    } else {\r\n      return _getByRef(target, info, listIndex, receiver, handler);\r\n    }\r\n\r\n  }\r\n","import { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function setTracking(info: IStructuredPathInfo, handler: IStateHandler, callback: () => any): any {\r\n  handler.trackingStack.push(info);\r\n  handler.lastTrackingStack = info;\r\n  try {\r\n    return callback();\r\n  } finally {\r\n    handler.trackingStack.pop();\r\n    handler.lastTrackingStack = handler.trackingStack[handler.trackingStack.length - 1] ?? null;\r\n  }\r\n}\r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef as methodGetByRef } from \"../methods/getByRef.js\";\r\n\r\nexport function getByRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (pattern: IStructuredPathInfo, listIndex: IListIndex | null) => \r\n    methodGetByRef(target, pattern, listIndex, receiver, handler);\r\n} \r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef } from \"./getByRef.js\";\r\n\r\nexport function setByRef(\r\n    target   : Object, \r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any, \r\n    receiver : IStateProxy,\r\n    handler  : IStateHandler\r\n): any {\r\n  try {\r\n    if (info.pattern in target) {\r\n      if (info.wildcardCount > 0) {\r\n        if (listIndex === null) {\r\n          raiseError(`propRef.listIndex is null`);\r\n        }\r\n        return handler.engine.setStatePropertyRef(info, listIndex, () => {\r\n          return Reflect.set(target, info.pattern, value, receiver);\r\n        });\r\n      } else {\r\n        return Reflect.set(target, info.pattern, value, receiver);\r\n      }\r\n    } else {\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRef(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return Reflect.set(parentValue, index, value);\r\n      } else {\r\n        return Reflect.set(parentValue, lastSegment, value);\r\n      }\r\n    }\r\n  } finally {\r\n    handler.engine.updater.addUpdatedStatePropertyRefValue(info, listIndex, value);\r\n  }\r\n}\r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setByRef as methodSetByRef } from \"../methods/setByRef.js\";\r\n\r\nexport function setByRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (pattern: IStructuredPathInfo, listIndex: IListIndex | null, value: any) => \r\n    methodSetByRef(target, pattern, listIndex, value, receiver, handler);\r\n}","import { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setCacheable as methodSetChargeable } from \"../methods/setCacheable.js\";\r\n\r\nexport function setCacheable(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async (callback: () => Promise<void>) => {\r\n    await methodSetChargeable(handler, callback);\r\n  }\r\n}","import { IStateHandler } from \"../types\";\r\n\r\nexport async function setCacheable(handler: IStateHandler, callback: () => Promise<void>): Promise<void> {\r\n  handler.cacheable = true;\r\n  handler.cache = {}\r\n  try {\r\n    await callback();\r\n  } finally {\r\n    handler.cacheable = false;\r\n  }\r\n}\r\n","import { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst CONNECTED_CALLBACK = \"$connectedCallback\";\r\n\r\nexport function connectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, CONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","import { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst DISCONNECTED_CALLBACK = \"$disconnectedCallback\";\r\n\r\nexport function disconnectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, DISCONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef } from \"../methods/getByRef.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\n\r\nexport function resolve(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (path: string, indexes: number[], value?:any): any => {\r\n    const info = getStructuredPathInfo(path);\r\n    let listIndex: IListIndex | null = null;\r\n    for(let i = 0; i < info.wildcardParentInfos.length; i++) {\r\n      const wildcardParentPattern = info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPath is null`);\r\n      const listIndexes: IListIndex[] = Array.from(handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? []);\r\n      const index = indexes[i] ?? raiseError(`index is null`);\r\n      listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    if (typeof value === \"undefined\") {\r\n      return getByRef(target, info, listIndex, receiver, handler);\r\n    } else {\r\n      return setByRef(target, info, listIndex, value, receiver, handler);\r\n    }\r\n  };\r\n} ","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { resolve as _resolve } from \"./resolve.js\";\r\n\r\nexport function getAll(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n    const resolve = _resolve(target, prop, receiver, handler);\r\n    return (path: string, indexes?: number[]): any[] => {\r\n      const info = getStructuredPathInfo(path);\r\n      if (handler.lastTrackingStack != null && handler.lastTrackingStack !== info) {\r\n        const lastPattern = handler.lastTrackingStack;\r\n        if (lastPattern.parentInfo !== info) {\r\n          handler.engine.addDependentProp(lastPattern, info, \"reference\");\r\n        }\r\n      }\r\n  \r\n      if (typeof indexes === \"undefined\") {\r\n        for(let i = 0; i < info.wildcardInfos.length; i++) {\r\n          const wildcardPattern = info.wildcardInfos[i] ?? raiseError(`wildcardPattern is null`);\r\n          const listIndex = handler.engine.getContextListIndex(wildcardPattern.pattern);\r\n          if (listIndex) {\r\n            indexes = listIndex.indexes;\r\n            break;\r\n          }\r\n        }\r\n        if (typeof indexes === \"undefined\") {\r\n          indexes = [];\r\n        }\r\n      }\r\n      const walkWildcardPattern = (\r\n        wildcardParentInfos: IStructuredPathInfo[],\r\n        wildardIndexPos: number,\r\n        listIndex: IListIndex | null,\r\n        indexes: number[],\r\n        indexPos: number,\r\n        parentIndexes: number[],\r\n        results: number[][]\r\n      ) => {\r\n        const wildcardParentPattern = wildcardParentInfos[wildardIndexPos] ?? null;\r\n        if (wildcardParentPattern === null) {\r\n          results.push(parentIndexes);\r\n          return;\r\n        }\r\n        const listIndexSet = handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n        const listIndexes = Array.from(listIndexSet);\r\n        const index = indexes[indexPos] ?? null;\r\n        if (index === null) {\r\n          for(let i = 0; i < listIndexes.length; i++) {\r\n            const listIndex = listIndexes[i];\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results);\r\n          }\r\n        } else {\r\n          const listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n          if ((wildardIndexPos + 1) < wildcardParentInfos.length) {\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results\r\n            );\r\n          }\r\n        }\r\n      }\r\n      const resultIndexes: number[][] = [];\r\n      walkWildcardPattern(\r\n        info.wildcardParentInfos, \r\n        0, \r\n        null, \r\n        indexes, \r\n        0, \r\n        [], \r\n        resultIndexes\r\n      );\r\n      const resultValues: any[] = [];\r\n      for(let i = 0; i < resultIndexes.length; i++) {\r\n        resultValues.push(resolve(\r\n          info.pattern,\r\n          resultIndexes[i]\r\n        ));\r\n      }\r\n      return resultValues;\r\n    }\r\n  }","\r\nimport { IResolvedPathInfo, WildcardType } from './types';\r\nimport { getStructuredPathInfo } from './getStructuredPathInfo.js';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IResolvedPathInfo } = {};\r\n//const _cache: Map<string, IResolvedPathInfo> = new Map();\r\n\r\nclass ResolvedPathInfo implements IResolvedPathInfo {\r\n  static id : number = 0;\r\n  id = ++ResolvedPathInfo.id;\r\n  name;\r\n  elements;\r\n  paths;\r\n  wildcardCount;\r\n  wildcardType;\r\n  wildcardIndexes;\r\n  info;\r\n  constructor(name: string) {\r\n    const elements = name.split(\".\");\r\n    const tmpPatternElements = elements.slice();\r\n    const paths = [];\r\n    let incompleteCount = 0;\r\n    let completeCount = 0;\r\n    let lastPath = \"\";\r\n    let wildcardCount = 0;\r\n    let wildcardType: WildcardType = \"none\";\r\n    let wildcardIndexes: (number | null)[] = [];\r\n    for(let i = 0; i < elements.length; i++) {\r\n      const element = elements[i];\r\n      if (element === \"*\") {\r\n        tmpPatternElements[i] = \"*\";\r\n        wildcardIndexes.push(null);\r\n        incompleteCount++;\r\n        wildcardCount++;\r\n      } else {\r\n        const number = Number(element);\r\n        if (!Number.isNaN(number)) {\r\n          tmpPatternElements[i] = \"*\";\r\n          wildcardIndexes.push(number);\r\n          completeCount++;\r\n          wildcardCount++;\r\n        }\r\n      }\r\n      lastPath += element;\r\n      paths.push(lastPath);\r\n      lastPath += (i < elements.length - 1 ? \".\" : \"\");\r\n    }\r\n    const pattern = tmpPatternElements.join(\".\");\r\n    const info = getStructuredPathInfo(pattern);\r\n    if (incompleteCount > 0 || completeCount > 0) {\r\n      if (incompleteCount === wildcardCount) {\r\n        wildcardType = \"context\";\r\n      } else if (completeCount === wildcardCount) {\r\n        wildcardType = \"all\";\r\n      } else {\r\n        wildcardType = \"partial\";\r\n      }\r\n    }\r\n    this.name = name;\r\n    this.elements = elements;\r\n    this.paths = paths;\r\n    this.wildcardCount = wildcardCount;\r\n    this.wildcardType = wildcardType;\r\n    this.wildcardIndexes = wildcardIndexes;\r\n    this.info = info;\r\n  }\r\n}\r\n\r\nexport function getResolvedPathInfo(name:string):IResolvedPathInfo {\r\n  let nameInfo: IResolvedPathInfo | undefined;\r\n//  return _cache.get(name) ?? (_cache.set(name, nameInfo = new ResolvedPathInfo(name)), nameInfo);\r\n  return _cache[name] ?? (_cache[name] = new ResolvedPathInfo(name));\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IResolvedPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nexport function getListIndex(\r\n  info: IResolvedPathInfo, \r\n  engine: IComponentEngine\r\n): IListIndex | null {\r\n  if (info.info.wildcardCount === 0) {\r\n    return null;\r\n  }\r\n  let listIndex: IListIndex | null = null;\r\n  const lastWildcardPath = info.info.lastWildcardPath ?? \r\n    raiseError(`lastWildcardPath is null`);\r\n  if (info.wildcardType === \"context\") {\r\n    listIndex = engine.getContextListIndex(lastWildcardPath) ?? \r\n      raiseError(`ListIndex not found: ${info.info.pattern}`);\r\n  } else if (info.wildcardType === \"all\") {\r\n    let parentListIndex = null;\r\n    for(let i = 0; i < info.info.wildcardCount; i++) {\r\n      const wildcardParentPattern = info.info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPattern is null`);\r\n      const listIndexes: IListIndex[] = Array.from(engine.getListIndexesSet(wildcardParentPattern, parentListIndex) ?? []);\r\n      const wildcardIndex = info.wildcardIndexes[i] ?? raiseError(`wildcardIndex is null`);\r\n      parentListIndex = listIndexes[wildcardIndex] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    listIndex = parentListIndex;\r\n  } else if (info.wildcardType === \"partial\") {\r\n    // ToDo:listIndexを取得する必要がある\r\n  } else if (info.wildcardType === \"none\") {\r\n  }\r\n  return listIndex;\r\n}\r\n","import { getRouter } from \"../../Router/Router.js\";\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { getAll } from \"../apis/getAll.js\";\r\nimport { resolve } from \"../apis/resolve.js\";\r\nimport { getListIndex } from \"../getListIndex.js\";\r\nimport { getByRef } from \"../methods/getByRef.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nexport function get(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  let value;\r\n  if (typeof prop === \"string\") {\r\n    if (prop.charCodeAt(0) === 36) {\r\n      if (prop.length === 2) {\r\n        const d = prop.charCodeAt(1) - 48;\r\n        if (d >= 1 && d <= 9) {\r\n          const ref = handler.engine.getLastStatePropertyRef() ?? \r\n            raiseError(`get: this.engine.getLastStatePropertyRef() is null`);\r\n          return ref.listIndex?.at(d - 1)?.index ?? raiseError(`ListIndex not found: ${prop}`);\r\n        }\r\n      }\r\n      if (prop === \"$resolve\") {\r\n        return resolve(target, prop, receiver, handler);\r\n      } else if (prop === \"$getAll\") {\r\n        return getAll(target, prop, receiver, handler);\r\n      } else if (prop === \"$router\") {\r\n        return getRouter();\r\n      }\r\n    }\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, handler.engine);\r\n    value = getByRef(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      receiver,\r\n      handler\r\n    );\r\n\r\n  } else if (typeof prop === \"symbol\") {\r\n    if (prop in handler.callableApi) {\r\n      return handler.callableApi[prop](target, prop, receiver, handler);\r\n    }\r\n    value = Reflect.get(\r\n      target, \r\n      prop, \r\n      receiver\r\n    );\r\n  }\r\n  return value;\r\n}\r\n","import { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetAllSymbol, GetByRefSymbol, ResolveSymbol, SetByRefSymbol, SetCacheableSymbol } from \"./symbols.js\";\r\nimport { IState, IStateHandler, IStateProxy } from \"./types\";\r\nimport { getByRef as apiGetByRef } from \"./apis/getByRef.js\";\r\nimport { setByRef as apiSetByRef } from \"./apis/setByRef.js\";\r\nimport { setCacheable as apiSetCacheable } from \"./apis/setCacheable.js\";\r\nimport { connectedCallback } from \"./apis/connectedCallback.js\";\r\nimport { disconnectedCallback } from \"./apis/disconnectedCallback.js\";\r\nimport { resolve } from \"./apis/resolve.js\";\r\nimport { getAll } from \"./apis/getAll.js\";\r\nimport { get as trapGet } from \"./traps/get.js\";\r\nimport { set as trapSet } from \"./traps/set.js\";\r\n\r\nclass StateHandler implements IStateHandler {\r\n  engine   : IComponentEngine;\r\n  cacheable: boolean = false;\r\n  cache    : {[key:number]:any} = {};\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: IStructuredPathInfo[] = [];\r\n  \r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  callableApi: { [key:symbol]: Function } = {\r\n    [GetByRefSymbol]: apiGetByRef, \r\n    [SetByRefSymbol]: apiSetByRef, \r\n    [SetCacheableSymbol]: apiSetCacheable, \r\n    [ConnectedCallbackSymbol]: connectedCallback, \r\n    [DisconnectedCallbackSymbol]: disconnectedCallback, \r\n    [ResolveSymbol]: resolve, \r\n    [GetAllSymbol]: getAll,\r\n  };\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IStateProxy\r\n  ): boolean {\r\n    return trapSet(target, prop, value, receiver, this);\r\n  }\r\n}\r\n\r\nexport function createStateProxy(\r\n  engine: IComponentEngine, \r\n  state: Object\r\n): IStateProxy {\r\n  return new Proxy<IState>(state, new StateHandler(engine)) as IStateProxy;\r\n}\r\n\r\n","import { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { getListIndex } from \"../getListIndex.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nexport function set(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  value   : any, \r\n  receiver: IStateProxy,\r\n  handler : IStateHandler\r\n): boolean {\r\n  if (typeof prop === \"string\") {\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, handler.engine);\r\n    return setByRef(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      value, \r\n      receiver,\r\n      handler\r\n    );\r\n  } else {\r\n    return Reflect.set(\r\n      target, \r\n      prop, \r\n      value, \r\n      receiver\r\n    );\r\n  }\r\n}\r\n","import { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { DependencyType, IDependencyEdge } from \"./types\";\r\n\r\nexport function createDependencyKey(info: IStructuredPathInfo, type: DependencyType): string {\r\n  return `${info.pattern}@${type}`;\r\n}\r\n\r\nconst cache: {[key:string]:IDependencyEdge} = {};;\r\n\r\nexport function createDependencyEdge(\r\n  info: IStructuredPathInfo,\r\n  type: DependencyType,\r\n): IDependencyEdge {\r\n  const key = createDependencyKey(info, type);\r\n  return cache[key] ?? (cache[key] = { info, type });\r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { createDependencyKey } from \"./createDependencyEdge\";\r\nimport { DependencyType } from \"./types\";\r\n\r\nclass dependencyWalker {\r\n  engine: IComponentEngine;\r\n  entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null };\r\n  traced: Set<string> = new Set<string>();\r\n  constructor(\r\n    engine: IComponentEngine,\r\n    entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null },\r\n  ) {\r\n    this.engine = engine;\r\n    this.entryRef = entryRef;\r\n  }\r\n\r\n  walkSub(\r\n    info: IStructuredPathInfo,\r\n    type: DependencyType,\r\n    callback: (ref: IStatePropertyRef, info: IStructuredPathInfo, type: DependencyType) => void\r\n  ) {\r\n    const key = createDependencyKey(info, type);\r\n    if (this.traced.has(key)) {\r\n      return;\r\n    }\r\n    this.traced.add(key);\r\n    callback(this.entryRef, info, type);\r\n    const edges = this.engine.dependentTree.get(info) ?? [];\r\n    for(const edge of edges) {\r\n      const overridedType = edge.type === \"structured\" ? type : edge.type;\r\n      this.walkSub(edge.info, overridedType, callback);\r\n    }\r\n\r\n  }\r\n  walk(\r\n    callback: (ref: IStatePropertyRef, info: IStructuredPathInfo, type: DependencyType) => void\r\n  ) {\r\n    const traced = new Set<IStructuredPathInfo>();\r\n    this.walkSub(this.entryRef.info, \"structured\", callback);\r\n  } \r\n\r\n}\r\n\r\nexport function createDependencyWalker(\r\n  engine: IComponentEngine,\r\n  entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null },\r\n) {\r\n  return new dependencyWalker(engine, entryRef);\r\n}","import { IListIndex } from \"./types\";\r\n\r\nclass ListIndex implements IListIndex {\r\n  static id: number = 0;\r\n  id              : number = ++ListIndex.id;\r\n  #parentListIndex: IListIndex | null = null;\r\n  get parentListIndex(): IListIndex | null {\r\n    return this.#parentListIndex;\r\n  }\r\n  index: number;\r\n  get indexes(): number[] {\r\n    const indexes = this.parentListIndex?.indexes ?? [];\r\n    indexes.push(this.index);\r\n    return indexes;\r\n  }\r\n\r\n  get position(): number {\r\n    return (this.parentListIndex?.position ?? -1) + 1;\r\n  }\r\n\r\n  get length(): number {\r\n    return (this.parentListIndex?.length ?? 0) + 1;\r\n  }\r\n  \r\n  constructor(\r\n    parentListIndex: IListIndex | null,\r\n    index: number\r\n  ) {\r\n    this.#parentListIndex = parentListIndex;\r\n    this.index = index;\r\n  }\r\n  \r\n  truncate(length: number): IListIndex | null {\r\n    let listIndex: IListIndex | null = this;\r\n    while(listIndex !== null) {\r\n      if (listIndex.position < length) return listIndex;\r\n      listIndex = listIndex.parentListIndex;\r\n    }\r\n    return null;\r\n  }\r\n  add(value: number): IListIndex {\r\n    return new ListIndex(this, value);\r\n  }\r\n\r\n  *reverseIterator(): Generator<IListIndex> {\r\n    yield this;\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.reverseIterator();\r\n    }\r\n    return;\r\n  }\r\n\r\n  *iterator(): Generator<IListIndex> {\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.iterator();\r\n    }\r\n    yield this;\r\n    return;\r\n  }\r\n\r\n  toString(): string {\r\n    const parentListIndex = this.parentListIndex?.toString();\r\n    return (parentListIndex !== null) ? parentListIndex + \",\" + this.index.toString() : this.index.toString();\r\n  }\r\n\r\n  #atcache:{[key:number]:(WeakRef<IListIndex> | null)} = {};\r\n  at(position: number): IListIndex | null {\r\n    const value = this.#atcache[position];\r\n    if (value !== undefined) {\r\n      return value ? (value.deref() ?? null) : null;\r\n    }\r\n    let iterator;\r\n    if (position >= 0) {\r\n      iterator = this.iterator();\r\n    } else {\r\n      position = - position - 1 \r\n      iterator = this.reverseIterator();\r\n    }\r\n    let next;\r\n    while(position >= 0) {\r\n      next = iterator.next();\r\n      position--;\r\n    }\r\n    const lisIndex = next?.value ?? null;\r\n    this.#atcache[position] = lisIndex ? new WeakRef(lisIndex) : null;\r\n    return lisIndex;\r\n  }\r\n  \r\n}\r\n\r\nexport function createListIndex(\r\n  parentListIndex: IListIndex | null,\r\n  index          : number\r\n): IListIndex {\r\n  return new ListIndex(parentListIndex, index);\r\n}\r\n\r\nexport function getMaxListIndexId(): number {\r\n  return ListIndex.id;\r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\n\r\nfunction listWalkerSub(\r\n  engine: IComponentEngine,\r\n  info: IStructuredPathInfo, \r\n  listIndex: IListIndex | null, \r\n  callback:(info: IStructuredPathInfo, listIndex: IListIndex | null)=> void\r\n) {\r\n  const listIndexLen = listIndex?.length ?? 0;\r\n  if (info.wildcardCount === listIndexLen) {\r\n    callback(info, listIndex);\r\n  } else {\r\n    const parentInfo = info.wildcardParentInfos[listIndexLen] ?? raiseError(\"Invalid state property info\");\r\n    const listIndexes = engine.getListIndexesSet(parentInfo, listIndex);\r\n    for(const subListIndex of listIndexes ?? []) {\r\n      listWalkerSub(engine, info, subListIndex, callback);\r\n    }\r\n  }\r\n}\r\n\r\nexport function listWalker(\r\n  engine: IComponentEngine,\r\n  info:IStructuredPathInfo, \r\n  listIndex: IListIndex | null,\r\n  callback:(info: IStructuredPathInfo, listIndex: IListIndex | null)=> void\r\n) {\r\n  listWalkerSub(engine, info, listIndex, callback);\r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { createDependencyWalker } from \"../DependencyWalker/createDependencyWalker\";\r\nimport { createListIndex } from \"../ListIndex/createListIndex\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { listWalker } from \"../ListWalker/listWalker\";\r\nimport { GetByRefSymbol } from \"../StateClass/symbols\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { createRefKey } from \"../StatePropertyRef/getStatePropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst BLANK_LISTINDEXES_SET = new Set<IListIndex>();\r\n\r\nfunction buildListIndexTree(\r\n  engine   : IComponentEngine, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value: any[]\r\n): void {\r\n  const oldValue = engine.getList(info, listIndex) ?? [];\r\n  if (oldValue === value) {\r\n    return;\r\n  }\r\n  const newListIndexesSet:Set<IListIndex> = new Set();\r\n  const oldListIndexesSet = engine.getListIndexesSet(info, listIndex) ?? BLANK_LISTINDEXES_SET;\r\n  const oldListIndexesByItem = Map.groupBy(oldListIndexesSet, listIndex => oldValue[listIndex.index]);\r\n  for(let i = 0; i < value.length; i++) {\r\n    // リスト要素から古いリストインデックスを取得して、リストインデックスを更新する\r\n    // もし古いリストインデックスがなければ、新しいリストインデックスを作成する\r\n    let curListIndex = oldListIndexesByItem.get(value[i])?.shift() ?? createListIndex(listIndex, i);\r\n    if (curListIndex.index !== i) {\r\n      curListIndex.index = i;\r\n      // リストインデックスのインデックスを更新したので、リストインデックスを登録する\r\n      engine.updater.addUpdatedListIndex(curListIndex);\r\n    }\r\n    // リストインデックスを新しいリストインデックスセットに追加する\r\n    newListIndexesSet.add(curListIndex);\r\n  }\r\n  // 新しいリストインデックスセットを保存する\r\n  engine.saveListIndexesSet(info, listIndex, newListIndexesSet);\r\n  engine.saveList(info, listIndex, value.slice(0)); // コピーを保存\r\n\r\n}\r\n\r\nexport function restructListIndexes(\r\n  infos: IStatePropertyRef[],\r\n  engine: IComponentEngine,\r\n  updateValues: {[key:string]: any[]},\r\n  refKeys: Set<string>,\r\n  cache: Map<IStructuredPathInfo, Set<IListIndex|null>>,\r\n) {\r\n  for(const {info, listIndex} of infos) {\r\n    if (config.optimizeListElements && engine.elementInfoSet.has(info)) {\r\n      // スワップ処理のためスキップ\r\n      continue;\r\n    }\r\n    const dependentWalker = createDependencyWalker(engine, {info, listIndex});\r\n    const nowOnList = config.optimizeList && engine.listInfoSet.has(info);\r\n    dependentWalker.walk((ref, refInfo, type) => {\r\n      if (nowOnList && type === \"structured\" && ref.info !== refInfo) {\r\n        if (refInfo.cumulativeInfoSet.has(ref.info)) {\r\n          return;\r\n        }\r\n      }\r\n      const wildcardMatchPaths = Array.from(ref.info.wildcardInfoSet.intersection(refInfo.wildcardInfoSet));\r\n      const longestMatchAt = (wildcardMatchPaths.at(-1)?.wildcardCount ?? 0) - 1;\r\n      const listIndex = (longestMatchAt >= 0) ? (ref.listIndex?.at(longestMatchAt) ?? null) : null;\r\n      listWalker(engine, refInfo, listIndex, (_info, _listIndex) => {\r\n        if (!engine.existsBindingsByInfo(_info)) {\r\n          return;\r\n        }\r\n        const refKey = createRefKey(_info, _listIndex);\r\n        if (refKeys.has(refKey)) {\r\n          return;\r\n        }\r\n        let cacheListIndexSet = cache.get(_info);\r\n        if (!cacheListIndexSet) {\r\n          cacheListIndexSet = new Set<IListIndex|null>();\r\n          cache.set(_info, cacheListIndexSet);\r\n        }\r\n        cacheListIndexSet.add(_listIndex);\r\n        refKeys.add(refKey);\r\n        if (engine.listInfoSet.has(_info)) {\r\n          const values = updateValues[refKey] ?? engine.stateProxy[GetByRefSymbol](_info, _listIndex);\r\n          buildListIndexTree(engine, _info, _listIndex, values);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n","import { IBinding } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { render } from \"../Render/render.js\";\r\nimport { SetCacheableSymbol } from \"../StateClass/symbols.js\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { getGlobalConfig } from \"../WebComponents/getGlobalConfig.js\";\r\nimport { IUpdater } from \"./types\";\r\nimport { restructListIndexes } from \"./restructListIndex\";\r\nimport { createRefKey } from \"../StatePropertyRef/getStatePropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\n\r\ntype UpdatedArrayElementBinding = {\r\n  parentRef: IStatePropertyRef;\r\n  binding: IBinding;\r\n  listIndexes: IListIndex[];\r\n  values: any[];\r\n};\r\n\r\nclass Updater implements IUpdater {\r\n  processList      : (() => Promise<void> | void)[] = [];\r\n  updatedProperties: Set<IStatePropertyRef | IListIndex> = new Set;\r\n  updatedValues    : {[key:string]: any} = {};\r\n  engine           : IComponentEngine;\r\n  #version         : number = 0;\r\n\r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  get version(): number {\r\n    return this.#version;\r\n  }\r\n\r\n  addProcess(process: () => Promise<void> | void): void {\r\n    this.processList.push(process);\r\n    this.waitForQueueEntry.resolve();\r\n  }\r\n\r\n  addUpdatedStatePropertyRefValue(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any\r\n  ): void {\r\n    const refKey = createRefKey(info, listIndex);\r\n    this.updatedProperties.add({info, listIndex});\r\n    this.updatedValues[refKey] = value;\r\n    this.waitForQueueEntry.resolve();\r\n  }\r\n\r\n  addUpdatedListIndex(listIndex: IListIndex): void {\r\n    this.updatedProperties.add(listIndex);\r\n    this.waitForQueueEntry.resolve();\r\n  }\r\n\r\n  terminate(): PromiseWithResolvers<void> {\r\n    const waitForMainLoopTerminate = Promise.withResolvers<void>();\r\n    this.waitForQueueEntry.resolve(waitForMainLoopTerminate);\r\n    return waitForMainLoopTerminate;\r\n  }\r\n\r\n  waitForQueueEntry: PromiseWithResolvers<PromiseWithResolvers<void> | void> = \r\n    Promise.withResolvers<PromiseWithResolvers<void> | void>();\r\n  async main(waitForComponentInit: PromiseWithResolvers<void>) {\r\n    await waitForComponentInit.promise;\r\n    const config = getGlobalConfig();\r\n    while (true) {\r\n      try {\r\n        const waitForMainLoopTerminate: (PromiseWithResolvers<void> | void) = \r\n          await this.waitForQueueEntry.promise;\r\n          config.debug && performance.mark(`start`);\r\n        Updater.updatingCount++;\r\n        try {\r\n          await this.exec();\r\n          if (config.debug) {\r\n            performance.mark(`end`);\r\n            performance.measure(`exec`, `start`, `end`);\r\n            console.log(performance.getEntriesByType(\"measure\"));    \r\n            performance.clearMeasures(`exec`);\r\n            performance.clearMarks(`start`);\r\n            performance.clearMarks(`end`);\r\n          }\r\n        } finally {\r\n          Updater.updatingCount--;\r\n          if (waitForMainLoopTerminate) {\r\n            waitForMainLoopTerminate.resolve();\r\n            break;\r\n          }\r\n        }\r\n      } catch(e) {\r\n        console.error(e);\r\n      } finally {\r\n        this.waitForQueueEntry = Promise.withResolvers<PromiseWithResolvers<void> | void>();\r\n      }\r\n    }\r\n  }\r\n\r\n  async updateState() {\r\n    while(this.processList.length > 0) {\r\n      const processList = this.processList;\r\n      this.processList = [];\r\n      for(let i = 0; i < processList.length; i++) {\r\n        const process = processList[i];\r\n        await process();\r\n      }\r\n    }\r\n  }\r\n\r\n  async rebuild(): Promise<{bindings: IBinding[], arrayElementBindings: UpdatedArrayElementBinding[]}> {\r\n    const retArrayElementBindings: UpdatedArrayElementBinding[] = [];\r\n    const retBindings: IBinding[] = [];\r\n    const engine = this.engine;\r\n    while(this.updatedProperties.size > 0) {\r\n      const updatedProiperties = Array.from(this.updatedProperties.values());\r\n      this.updatedProperties.clear();\r\n      const bindingsByListIndex: IBinding[] = [];\r\n      const updatedRefs: IStatePropertyRef[] = []; // 更新されたプロパティ参照のリスト\r\n      const arrayElementBindingByParentRefKey = new Map<string, Partial<UpdatedArrayElementBinding>>();\r\n      for(let i = 0; i < updatedProiperties.length; i++) {\r\n        const item = updatedProiperties[i];\r\n        if (\"index\" in item) {\r\n          const bindings = engine.bindingsByListIndex.get(item as IListIndex) ?? [];\r\n          bindingsByListIndex.push(...bindings);\r\n        } else {\r\n          updatedRefs.push(item as IStatePropertyRef);\r\n          if (engine.elementInfoSet.has(item.info)) {\r\n            const parentInfo = item.info.parentInfo ?? raiseError(\"info is null\"); // リストのパス情報\r\n            const parentListIndex = item.listIndex?.at(-2) ?? null; // リストのインデックス\r\n            const parentRef = {info: parentInfo, listIndex: parentListIndex};\r\n            const parentRefKey = createRefKey(parentInfo, parentListIndex);\r\n            let info = arrayElementBindingByParentRefKey.get(parentRefKey);\r\n            if (!info) {\r\n              info = {\r\n                parentRef,\r\n                listIndexes: [],\r\n                values: []\r\n              };\r\n              arrayElementBindingByParentRefKey.set(parentRefKey, info);\r\n            }\r\n            const refKey = createRefKey(item.info, item.listIndex);\r\n            const value = this.updatedValues[refKey] ?? null;\r\n            info.values?.push(value);\r\n            info.listIndexes?.push(item.listIndex as IListIndex);\r\n          }\r\n        }\r\n      }\r\n      // リストインデックスの構築\r\n      const builtStatePropertyRefKeySet = new Set<string>();\r\n      const affectedRefs = new Map<IStructuredPathInfo, Set<IListIndex|null>>();\r\n      restructListIndexes(updatedRefs, engine, this.updatedValues, builtStatePropertyRefKeySet, affectedRefs);\r\n\r\n      // スワップの場合の情報を構築する\r\n      for(const [parentRefKey, info] of arrayElementBindingByParentRefKey) {\r\n        const parentInfo = info.parentRef?.info ?? raiseError(\"parentInfo is null\");\r\n        const parentListIndex = info.parentRef?.listIndex ?? null;\r\n        const bindings = engine.getBindings(parentInfo, parentListIndex);\r\n        for(const binding of bindings) {\r\n          if (!binding.bindingNode.isFor) {\r\n            continue;\r\n          }\r\n          const bindingInfo = Object.assign({}, info, { binding });\r\n          retArrayElementBindings.push(bindingInfo as UpdatedArrayElementBinding);\r\n        }\r\n      }\r\n      // 影響する全てのバインド情報を取得する\r\n      for(const [ info, listIndexes ] of affectedRefs.entries()) {\r\n        for(const listIndex of listIndexes) {\r\n          const bindings = engine.getBindings(info, listIndex);\r\n          retBindings.push(...bindings ?? []);\r\n        }\r\n      }\r\n      retBindings.push(...bindingsByListIndex);\r\n    }\r\n    this.updatedValues = {};\r\n    return {bindings: retBindings, arrayElementBindings: retArrayElementBindings};\r\n  }\r\n\r\n  async render(bindings: IBinding[]) {\r\n    this.#version++;\r\n    await this.engine.stateProxy[SetCacheableSymbol](async () => {\r\n      return render(bindings);\r\n    });\r\n  }\r\n\r\n  async exec() {\r\n    while(this.processList.length !== 0 || this.updatedProperties.size !== 0) {\r\n      // update state\r\n      await this.updateState();\r\n      // rebuild\r\n      const { bindings, arrayElementBindings } = await this.rebuild();\r\n      // render\r\n      for(const arrayElementBinding of arrayElementBindings) {\r\n        arrayElementBinding.binding.bindingNode.updateElements(arrayElementBinding.listIndexes, arrayElementBinding.values);\r\n      }\r\n      if (bindings.length > 0) {\r\n        await this.render(bindings);\r\n      }\r\n    }\r\n  }\r\n\r\n  static updatingCount = 0;\r\n}\r\n\r\nexport function createUpdater(engine: IComponentEngine): IUpdater {\r\n  return new Updater(engine);\r\n}\r\n\r\nexport function getUpdatingCount(): number {\r\n  return Updater.updatingCount;\r\n}","import { raiseError } from \"../utils.js\";\r\nimport { IComponentConfig } from \"../WebComponents/types\";\r\nimport { canHaveShadowRoot } from \"./canHaveShadowRoot.js\";\r\n\r\nfunction getParentShadowRoot(parentNode: Node | null): ShadowRoot|undefined{\r\n  let node: Node | null = parentNode;\r\n  while(node) {\r\n    if (node instanceof ShadowRoot) {\r\n      return node;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n}\r\n\r\nexport function attachShadow(element: HTMLElement, config: IComponentConfig, styleSheet: CSSStyleSheet): void {\r\n    if (config.enableShadowDom) {\r\n      if (config.extends === null || canHaveShadowRoot(config.extends)) {\r\n        const shadowRoot = element.attachShadow({ mode: 'open' });\r\n        shadowRoot.adoptedStyleSheets = [styleSheet];\r\n      } else {\r\n        raiseError(`ComponentEngine: Shadow DOM not supported for builtin components that extend ${config.extends}`);\r\n      }\r\n    } else {\r\n      const shadowRootOrDocument = getParentShadowRoot(element.parentNode) || document;\r\n      const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n      if (!styleSheets.includes(styleSheet)) {\r\n        shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, styleSheet];\r\n      }\r\n    }\r\n\r\n}","export function canHaveShadowRoot(tagName: string): boolean {\r\n  try {\r\n    // 一時的に要素を作成\r\n    const element = document.createElement(tagName);\r\n    // `attachShadow` メソッドが存在し、実行可能かを確認\r\n    return typeof element.attachShadow === \"function\";\r\n  } catch {\r\n    // 無効なタグ名などが渡された場合は false を返す\r\n    return false;\r\n  }\r\n}","import { createListIndex } from \"../ListIndex/createListIndex.js\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { GetByRefSymbol } from \"./symbols.js\";\r\n\r\nconst BLANK_LISTINDEXES_SET = new Set<IListIndex>();\r\n\r\nfunction buildListIndexTreeSub(\r\n  engine   : IComponentEngine, \r\n  listInfos: Set<IStructuredPathInfo>,\r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value: any[]\r\n): void {\r\n  const oldValue = engine.getList(info, listIndex) ?? [];\r\n  if (oldValue === value) {\r\n    return;\r\n  }\r\n  const newListIndexesSet:Set<IListIndex> = new Set();\r\n  const oldListIndexesSet = engine.getListIndexesSet(info, listIndex) ?? BLANK_LISTINDEXES_SET;\r\n  const oldListIndexesByItem = Map.groupBy(oldListIndexesSet, listIndex => oldValue[listIndex.index]);\r\n  for(let i = 0; i < value.length; i++) {\r\n    // リスト要素から古いリストインデックスを取得して、リストインデックスを更新する\r\n    // もし古いリストインデックスがなければ、新しいリストインデックスを作成する\r\n    let curListIndex = oldListIndexesByItem.get(value[i])?.shift() ?? createListIndex(listIndex, i);\r\n    if (curListIndex.index !== i) {\r\n      curListIndex.index = i;\r\n      // リストインデックスのインデックスを更新したので、リストインデックスを登録する\r\n      engine.updater.addUpdatedListIndex(curListIndex);\r\n    }\r\n    // リストインデックスを新しいリストインデックスセットに追加する\r\n    newListIndexesSet.add(curListIndex);\r\n  }\r\n  // 新しいリストインデックスセットを保存する\r\n  engine.saveListIndexesSet(info, listIndex, newListIndexesSet);\r\n  engine.saveList(info, listIndex, value.slice(0)); // コピーを保存\r\n\r\n  // サブ要素のリストインデックスを構築する\r\n  const searchPath = info.pattern + \".*\";\r\n  for(const info of listInfos) {\r\n    if (searchPath !== info.lastWildcardPath) {\r\n      continue;\r\n    }\r\n    for(const subListIndex of newListIndexesSet) {\r\n      const subValue = engine.stateProxy[GetByRefSymbol](info, subListIndex);\r\n      buildListIndexTreeSub(\r\n        engine, \r\n        listInfos, \r\n        info, \r\n        subListIndex, \r\n        subValue ?? []\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function buildListIndexTree(\r\n  engine   : IComponentEngine, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value    : any\r\n): void {\r\n  const listInfos = engine.listInfoSet;\r\n  // 配列じゃなければ何もしない\r\n  if (!engine.listInfoSet.has(info)) {\r\n    return;\r\n  }\r\n  const values = (value ?? []) as any[];\r\n  buildListIndexTreeSub(\r\n    engine, \r\n    engine.listInfoSet, \r\n    info, \r\n    listIndex, \r\n    values\r\n  );\r\n}\r\n","import { createBindContent } from \"../DataBinding/BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../DataBinding/types\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { IState, IStateProxy, IStructiveState } from \"../StateClass/types\";\r\nimport { createStateProxy } from \"../StateClass/createStateProxy.js\";\r\nimport { IUpdater } from \"../Updater/types\";\r\nimport { createUpdater } from \"../Updater/updater.js\";\r\nimport { ComponentType, IComponentConfig, IComponentStatic, StructiveComponent } from \"../WebComponents/types\";\r\nimport { attachShadow } from \"./attachShadow.js\";\r\nimport { ISaveInfoByResolvedPathInfo, IComponentEngine } from \"./types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { buildListIndexTree } from \"../StateClass/buildListIndexTree.js\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetByRefSymbol, SetCacheableSymbol } from \"../StateClass/symbols.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { BindParentComponentSymbol } from \"../ComponentState/symbols.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { DependencyType, IDependencyEdge } from \"../DependencyWalker/types.js\";\r\nimport { createDependencyEdge } from \"../DependencyWalker/createDependencyEdge.js\";\r\n\r\nexport class ComponentEngine implements IComponentEngine {\r\n  type          : ComponentType = 'autonomous';\r\n  config        : IComponentConfig;\r\n  template      : HTMLTemplateElement;\r\n  styleSheet    : CSSStyleSheet;\r\n  stateClass    : IStructiveState;\r\n  state         : IState;\r\n  stateProxy    : IStateProxy;\r\n  updater       : IUpdater;\r\n  inputFilters  : FilterWithOptions;\r\n  outputFilters : FilterWithOptions;\r\n  bindContent   : IBindContent;\r\n  baseClass     : typeof HTMLElement = HTMLElement;\r\n  owner         : StructiveComponent;\r\n  trackedGetters: Set<string>;\r\n\r\n  listInfoSet         : Set<IStructuredPathInfo> = new Set();\r\n  elementInfoSet      : Set<IStructuredPathInfo> = new Set();\r\n  bindingsByListIndex : WeakMap<IListIndex, Set<IBinding>> = new WeakMap();\r\n  dependentTree       : Map<IStructuredPathInfo, Set<IDependencyEdge>> = new Map();\r\n\r\n  bindingsByComponent: WeakMap<StructiveComponent, Set<IBinding>> = new WeakMap();\r\n\r\n  #waitForInitialize : PromiseWithResolvers<void> = Promise.withResolvers<void>();\r\n  #loopContext       : ILoopContext | null = null;\r\n  #stackStructuredPathInfo  : IStructuredPathInfo[] = [];\r\n  #stackListIndex    : (IListIndex | null)[] = [];\r\n\r\n  constructor(config: IComponentConfig, owner: StructiveComponent) {\r\n    this.config = config;\r\n    if (this.config.extends) {\r\n      this.type = 'builtin';\r\n    }\r\n    const componentClass = owner.constructor as IComponentStatic;\r\n    this.template = componentClass.template;\r\n    this.styleSheet = componentClass.styleSheet;\r\n    this.stateClass = componentClass.stateClass;\r\n    this.state = new this.stateClass();\r\n    this.stateProxy = createStateProxy(this, this.state);\r\n    this.updater = createUpdater(this);\r\n    this.inputFilters = componentClass.inputFilters;\r\n    this.outputFilters = componentClass.outputFilters;\r\n    this.owner = owner;\r\n    this.trackedGetters = componentClass.trackedGetters;\r\n    // 依存関係の木を作成する\r\n    const checkDependentProp = (info: IStructuredPathInfo) => {\r\n      const parentInfo = info.parentInfo;\r\n      if (parentInfo === null) return;\r\n      this.addDependentProp(info, parentInfo, \"structured\");\r\n      checkDependentProp(parentInfo);\r\n    }\r\n    for(const path of componentClass.paths) {\r\n      const info = getStructuredPathInfo(path);\r\n      checkDependentProp(info);\r\n    }\r\n    // 配列のプロパティ、配列要素のプロパティを登録する\r\n    for(const listPath of componentClass.listPaths) {\r\n      this.listInfoSet.add(getStructuredPathInfo(listPath));\r\n      this.elementInfoSet.add(getStructuredPathInfo(listPath + \".*\"));\r\n    }\r\n    this.bindContent = createBindContent(null, componentClass.id, this, null, null); // this.stateArrayPropertyNamePatternsが変更になる可能性がある\r\n    for(const info of this.listInfoSet) {\r\n      if (info.wildcardCount > 0) continue;\r\n      const value = this.stateProxy[GetByRefSymbol](info, null)\r\n      buildListIndexTree(this, info, null, value);\r\n    }\r\n  \r\n    this.updater.main(this.#waitForInitialize);\r\n  }\r\n\r\n  async connectedCallback(): Promise<void> {\r\n    if (this.owner.dataset.state) {\r\n      try {\r\n        const json = JSON.parse(this.owner.dataset.state);\r\n        for(const [key, value] of Object.entries(json)) {\r\n          const info = getStructuredPathInfo(key);\r\n          if (info.wildcardCount > 0) continue;\r\n          this.stateProxy[SetByRefSymbol](info, null, value);\r\n        }\r\n      } catch(e) {\r\n        raiseError(\"Failed to parse state from dataset\");\r\n      }\r\n    }\r\n    this.owner.state[BindParentComponentSymbol]();\r\n    attachShadow(this.owner, this.config, this.styleSheet);\r\n    await this.stateProxy[ConnectedCallbackSymbol]();\r\n    await this.stateProxy[SetCacheableSymbol](async () => {\r\n      this.bindContent.render();\r\n    });\r\n    this.bindContent.mount(this.owner.shadowRoot ?? this.owner);\r\n    this.#waitForInitialize.resolve();\r\n  }\r\n\r\n  async disconnectedCallback(): Promise<void> {\r\n    await this.stateProxy[DisconnectedCallbackSymbol]();\r\n  }\r\n\r\n  async setLoopContext(loopContext: ILoopContext, callback: ()=>Promise<void>): Promise<void> {\r\n    try {\r\n      if (this.#loopContext !== null) {\r\n        throw new Error(\"loopContext is already set\");\r\n      }\r\n      this.#loopContext = loopContext;\r\n      await this.asyncSetStatePropertyRef(loopContext.info, loopContext.listIndex, async () => {\r\n        await callback();\r\n      });\r\n    } finally {\r\n      this.#loopContext = null;\r\n    }\r\n  }\r\n\r\n  async asyncSetStatePropertyRef(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    callback : ()=>Promise<any>\r\n  ): Promise<any> {\r\n    this.#stackStructuredPathInfo.push(info);\r\n    this.#stackListIndex.push(listIndex);\r\n    try {\r\n      return await callback();\r\n    } finally {\r\n      this.#stackStructuredPathInfo.pop();\r\n      this.#stackListIndex.pop();\r\n    }\r\n  }\r\n\r\n  setStatePropertyRef(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    callback : ()=>any\r\n  ): any {\r\n    this.#stackStructuredPathInfo.push(info);\r\n    this.#stackListIndex.push(listIndex);\r\n    try {\r\n      return callback();\r\n    } finally {\r\n      this.#stackStructuredPathInfo.pop();\r\n      this.#stackListIndex.pop();\r\n    }\r\n  }\r\n\r\n  getLastStatePropertyRef(): {info:IStructuredPathInfo, listIndex:IListIndex | null} | null {\r\n    if (this.#stackStructuredPathInfo.length === 0) {\r\n      return null;\r\n    }\r\n    const info = this.#stackStructuredPathInfo[this.#stackStructuredPathInfo.length - 1];\r\n    if (typeof info === \"undefined\") {\r\n      return null;\r\n    }\r\n    const listIndex = this.#stackListIndex[this.#stackListIndex.length - 1];\r\n    if (typeof listIndex === \"undefined\") {\r\n      return null;\r\n    }\r\n    return {info, listIndex};\r\n  }\r\n\r\n  getContextListIndex(structuredPath: string): IListIndex | null{\r\n    const lastRef = this.getLastStatePropertyRef();\r\n    if (lastRef === null) {\r\n      return null;\r\n    }\r\n    const info = lastRef.info;\r\n    const index = info.wildcardPaths.indexOf(structuredPath);\r\n    if (index >= 0) {\r\n      return lastRef.listIndex?.at(index) ?? null;\r\n    }\r\n    return null;\r\n  }\r\n  getLoopContexts():ILoopContext[] {\r\n    if (this.#loopContext === null) {\r\n      throw new Error(\"loopContext is null\");\r\n    }\r\n    return this.#loopContext.serialize();\r\n  }\r\n\r\n  #saveInfoByListIndexByResolvedPathInfoId: { [id:number]: WeakMap<IListIndex,ISaveInfoByResolvedPathInfo> } = {};\r\n  #saveInfoByStructuredPathId: { [id:number]: ISaveInfoByResolvedPathInfo } = {};\r\n\r\n  createSaveInfo():ISaveInfoByResolvedPathInfo {\r\n    return {\r\n      list          : null,\r\n      listIndexesSet: null,\r\n      bindings      : [],\r\n    }\r\n  }\r\n\r\n  getSaveInfoByStatePropertyRef(info:IStructuredPathInfo, listIndex:IListIndex | null): ISaveInfoByResolvedPathInfo {\r\n    if (listIndex === null) {\r\n      let saveInfo = this.#saveInfoByStructuredPathId[info.id];\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        this.#saveInfoByStructuredPathId[info.id] = saveInfo;\r\n      }\r\n      return saveInfo;\r\n    } else {\r\n      let saveInfoByListIndex = this.#saveInfoByListIndexByResolvedPathInfoId[info.id];\r\n      if (typeof saveInfoByListIndex === \"undefined\") {\r\n        saveInfoByListIndex = new WeakMap<IListIndex, ISaveInfoByResolvedPathInfo>();\r\n        this.#saveInfoByListIndexByResolvedPathInfoId[info.id] = saveInfoByListIndex;\r\n      }\r\n      let saveInfo = saveInfoByListIndex.get(listIndex);\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        saveInfoByListIndex.set(listIndex, saveInfo);\r\n      }\r\n      return saveInfo;\r\n    }\r\n  }\r\n  \r\n  saveBinding(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    binding  : IBinding\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.bindings.push(binding);\r\n  }\r\n\r\n  saveListIndexesSet(\r\n    info              :IStructuredPathInfo, \r\n    listIndex         :IListIndex | null, \r\n    saveListIndexesSet:Set<IListIndex>\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.listIndexesSet = saveListIndexesSet;\r\n  }\r\n\r\n  saveList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null, \r\n    list     :any[]\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.list = list;\r\n  }\r\n\r\n  getBindings(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): IBinding[] {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.bindings;\r\n  }\r\n\r\n  existsBindingsByInfo(info: IStructuredPathInfo): boolean {\r\n    if (typeof this.#saveInfoByStructuredPathId[info.id] !== \"undefined\") {\r\n      return true;\r\n    }\r\n    if (typeof this.#saveInfoByListIndexByResolvedPathInfoId[info.id] !== \"undefined\") {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getListIndexesSet(info:IStructuredPathInfo, listIndex:IListIndex | null): Set<IListIndex> | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.listIndexesSet;\r\n  }\r\n    \r\n  getList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): any[] | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.list;\r\n  }\r\n\r\n  addDependentProp(info: IStructuredPathInfo, refInfo: IStructuredPathInfo, type: DependencyType) {\r\n    let dependents = this.dependentTree.get(refInfo);\r\n    if (typeof dependents === \"undefined\") {\r\n      dependents = new Set<IDependencyEdge>();\r\n      this.dependentTree.set(refInfo, dependents);\r\n    }\r\n    const edge = createDependencyEdge(info, type);\r\n    dependents.add(edge);\r\n  }\r\n\r\n  getPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex | null): any {\r\n    // プロパティの値を取得する\r\n    return this.stateProxy[GetByRefSymbol](info, listIndex);\r\n  }\r\n  setPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex | null, value: any): void {\r\n    // プロパティの値を設定する\r\n    this.updater.addProcess(() => {\r\n      this.stateProxy[SetByRefSymbol](info, listIndex, value);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createComponentEngine(config: IComponentConfig, component: StructiveComponent): IComponentEngine {\r\n  return new ComponentEngine(config, component);\r\n}","import { COMMENT_EMBED_MARK } from \"../constants.js\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nconst MUSTACHE_REGEXP = /\\{\\{([^\\}]+)\\}\\}/g;\r\nconst MUSTACHE_TYPES:Set<string> = new Set(['if', 'for', 'endif', 'endfor', 'elseif', 'else']);\r\n\r\ntype MustacheType = 'if' | 'for' | 'endif' | 'endfor' | 'elseif' | 'else';\r\ntype MustacheInfo = {\r\n  type: MustacheType;\r\n  remain: string; // after first ':'\r\n  expr: string;\r\n}\r\n\r\nexport function replaceMustacheWithTemplateTag(html: string): string {\r\n  const stack:MustacheInfo[] = [];\r\n  return html.replaceAll(MUSTACHE_REGEXP, (match, expr) => {\r\n    expr = expr.trim();\r\n    const [ type ] = expr.split(':');\r\n    if (!MUSTACHE_TYPES.has(type)) {\r\n      // embed\r\n      return `<!--${COMMENT_EMBED_MARK}${expr}-->`;\r\n    }\r\n    const remain = expr.slice(type.length + 1).trim();\r\n    const currentInfo:MustacheInfo = { type, expr, remain };\r\n    if (type === 'if' || type === 'for') {\r\n      stack.push(currentInfo);\r\n      return `<template data-bind=\"${expr}\">`;\r\n    } else if (type === 'endif') {\r\n      const endTags = [];\r\n      do {\r\n        const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        if (info.type === 'if') {\r\n          endTags.push('</template>');\r\n          break;\r\n        } else if (info.type === 'elseif') {\r\n          endTags.push('</template>');\r\n        } else {\r\n          raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        }\r\n      } while(true);\r\n      return endTags.join('');\r\n    } else if (type === 'endfor') {\r\n      const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n      if (info.type === 'for') {\r\n        return '</template>';\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: endfor without for');\r\n      }\r\n    } else if (type === 'elseif') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      if (lastInfo.type === 'if' || lastInfo.type === 'elseif') {\r\n        stack.push(currentInfo);\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\"><template data-bind=\"if:${remain}\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      }\r\n    } else if (type === 'else') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      if (lastInfo.type === 'if') {\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      }\r\n    } else {\r\n      raiseError('replaceMustacheToTemplateOrEmbed: unknown type');\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n","import { COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { registerTemplate } from \"./registerTemplate.js\";\r\n\r\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport function replaceTemplateTagWithComment(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number = id\r\n):number {\r\n  // テンプレートの親ノードが存在する場合は、テンプレートをコメントノードに置き換える\r\n  template.parentNode?.replaceChild(document.createComment(`${COMMENT_TEMPLATE_MARK}${id}`), template);\r\n  if (template.namespaceURI === SVG_NS) {\r\n    // SVGタグ内のtemplateタグを想定\r\n    const newTemplate = document.createElement(\"template\");\r\n    for(let childNode of Array.from(template.childNodes)) {\r\n      newTemplate.content.appendChild(childNode);\r\n    }\r\n    const bindText = template.getAttribute(DATA_BIND_ATTRIBUTE);\r\n    newTemplate.setAttribute(DATA_BIND_ATTRIBUTE, bindText ?? \"\");\r\n    template = newTemplate;\r\n  }\r\n  template.content.querySelectorAll(\"template\").forEach(template => {\r\n    replaceTemplateTagWithComment(generateId(), template, rootId);\r\n  });\r\n  registerTemplate(id, template, rootId);\r\n  return id;\r\n}\r\n","import { replaceMustacheWithTemplateTag } from \"./replaceMustacheWithTemplateTag.js\";\r\nimport { replaceTemplateTagWithComment } from \"./replaceTemplateTagWithComment.js\";\r\n\r\nexport function registerHtml(id: number, html:string) {\r\n  const template = document.createElement(\"template\");\r\n  template.dataset.id = id.toString();\r\n  template.innerHTML = replaceMustacheWithTemplateTag(html);\r\n  replaceTemplateTagWithComment(id, template);\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { BindParentComponentSymbol, RenderSymbol } from \"./symbols.js\";\r\nimport { IComponentState, IComponentStateHandler, IComponentStateProxy } from \"./types\";\r\n\r\nclass ComponentState implements IComponentState {\r\n  engine: IComponentEngine;\r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  bindParentProperty(binding: IBinding): void {\r\n    const propName = binding.bindingNode.subName;\r\n    Object.defineProperty(this.engine.state, propName, {\r\n      get: () => {\r\n        return binding.bindingState.filteredValue;\r\n      },\r\n      set: (value: any) => {\r\n        return binding.updateStateValue(value);\r\n      },\r\n    });\r\n  }\r\n\r\n  unbindParentProperty(binding: IBinding): void {\r\n    const propName = binding.bindingNode.subName;\r\n    Object.defineProperty(this.engine.state, propName, { value:undefined });\r\n  }\r\n  \r\n  bindParentComponent(): void {\r\n    // bindParentComponent\r\n    const parent = this.engine.owner.parentStructiveComponent;\r\n    if (parent === null) {\r\n      return;\r\n    }\r\n    const bindings = parent.getBindingsFromChild(this.engine.owner);\r\n    for (const binding of bindings ?? []) {\r\n      this.bindParentProperty(binding);\r\n    }\r\n  }\r\n\r\n  render(name: string, value:any): void {\r\n    // render\r\n    const info = getStructuredPathInfo(name);\r\n    this.engine.updater.addUpdatedStatePropertyRefValue(info, null, value)\r\n  }\r\n\r\n  getPropertyValue(name: string): any {\r\n    // getPropertyValue\r\n    const info = getStructuredPathInfo(name);\r\n    return this.engine.getPropertyValue(info, null);\r\n  }\r\n\r\n  setPropertyValue(name: string, value: any): void {\r\n    // setPropertyValue\r\n    const info = getStructuredPathInfo(name);\r\n    this.engine.setPropertyValue(info, null, value); \r\n  }\r\n}\r\n\r\nclass ComponentStateHandler implements IComponentStateHandler {\r\n  get(state: IComponentState, prop: PropertyKey, receiver: IComponentState): any {\r\n    if (prop === RenderSymbol) {\r\n      return state.render.bind(state);\r\n    } else if (prop === BindParentComponentSymbol) {\r\n      return state.bindParentComponent.bind(state);\r\n    } else if (typeof prop === 'string') {\r\n      return state.getPropertyValue(prop);\r\n    } else {\r\n      return Reflect.get(state, prop, receiver);\r\n    }\r\n  }\r\n\r\n  set(state: IComponentState, prop: PropertyKey, value: any, receiver: IComponentState): boolean {\r\n    if (typeof prop === 'string') {\r\n      state.setPropertyValue(prop, value);\r\n      return true;\r\n    } else {\r\n      return Reflect.set(state, prop, value, receiver);\r\n    }\r\n  }\r\n};\r\n\r\nexport const createComponentState = (engine: IComponentEngine): IComponentStateProxy => {\r\n  return new Proxy<IComponentState>(new ComponentState(engine), new ComponentStateHandler()) as IComponentStateProxy;\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { getStructuredPathInfo } from \"./getStructuredPathInfo\";\r\nimport { IAccessorFunctions, IStructuredPathInfo } from \"./types\";\r\n\r\nconst checkSegmentRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\r\nconst checkPathRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*(\\.[a-zA-Z_$][0-9a-zA-Z_$]*|\\.\\*)*$/;\r\n\r\nexport function createAccessorFunctions(info: IStructuredPathInfo, getters: Set<string>): IAccessorFunctions {\r\n  const matchPaths = new Set(info.cumulativePaths).intersection(getters);\r\n  let len = -1;\r\n  let matchPath = '';\r\n  for(const curPath of matchPaths) {\r\n    const pathSegments = curPath.split('.');\r\n    if (pathSegments.length === 1) {\r\n      continue;\r\n    }\r\n    if (pathSegments.length > len) {\r\n      len = pathSegments.length;\r\n      matchPath = curPath;\r\n    }\r\n  }\r\n  if (matchPath.length > 0) {\r\n    if (!checkPathRegexp.test(matchPath)) {\r\n      throw new Error(`Invalid path: ${matchPath}`);\r\n    }\r\n    const matchInfo = getStructuredPathInfo(matchPath);\r\n    const segments = [];\r\n    let count = matchInfo.wildcardCount;\r\n    for(let i = matchInfo.pathSegments.length; i < info.pathSegments.length; i++) {\r\n      const segment = info.pathSegments[i];\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          throw new Error(`Invalid segment name: ${segment}`);\r\n        }\r\n        segments.push(\".\" + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this[\"${matchPath}\"]${path};`) as ()=> any,\r\n      set : new Function('value', `this[\"${matchPath}\"]${path} = value;`) as (value: any) => void,\r\n    }\r\n  } else {\r\n    const segments = [];\r\n    let count = 0;\r\n    for(const segment of info.pathSegments) {\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          throw new Error(`Invalid segment name: ${segment}`);\r\n        }\r\n        segments.push((segments.length > 0 ? \".\" : \"\") + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this.${path};`) as ()=> any,\r\n      set : new Function('value', `this.${path} = value;`) as (value: any) => void,\r\n    }\r\n  }\r\n\r\n}\r\n","import { inputBuiltinFilters, outputBuiltinFilters } from \"../Filter/builtinFilters.js\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { getStateClassById, registerStateClass } from \"../StateClass/registerStateClass.js\";\r\nimport { getStyleSheetById } from \"../StyleSheet/registerStyleSheet.js\";\r\nimport { registerCss } from \"../StyleSheet/regsiterCss.js\";\r\nimport { createComponentEngine } from \"../ComponentEngine/ComponentEngine.js\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types.js\";\r\nimport { registerHtml } from \"../Template/registerHtml.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { getBaseClass } from \"./getBaseClass.js\";\r\nimport { getComponentConfig } from \"./getComponentConfig.js\";\r\nimport { IComponent, IUserComponentData, IUserConfig, StructiveComponentClass, StructiveComponent } from \"./types\";\r\nimport { getListPathsSetById, getPathsSetById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { IStructiveState, IStructiveStaticState } from \"../StateClass/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { IComponentStateProxy } from \"../ComponentState/types\";\r\nimport { createComponentState } from \"../ComponentState/createComponentState.js\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { createAccessorFunctions } from \"../StateProperty/createAccessorFunctions.js\";\r\nimport { config as globalConfig } from \"./getGlobalConfig.js\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nfunction findStructiveParent(el:StructiveComponent): IComponent | null {\r\n  let current = el.parentNode;\r\n  while (current) {\r\n    if ((current as StructiveComponent).state && (current as StructiveComponent).isStructive) {\r\n      return current as StructiveComponent;\r\n    }\r\n    current = current.parentNode;\r\n    if (current instanceof ShadowRoot) {\r\n      if (current.host && (current.host as StructiveComponent).state && (current.host as StructiveComponent).isStructive) {\r\n        return current.host as StructiveComponent;\r\n      }\r\n      current = current.host;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function createComponentClass(componentData: IUserComponentData): StructiveComponentClass {\r\n  const config = (componentData.stateClass.$config ?? {})as IUserConfig;\r\n  const componentConfig = getComponentConfig(config);\r\n  const id = generateId();\r\n  const { html, css, stateClass } = componentData;\r\n  const inputFilters:FilterWithOptions = Object.assign({}, inputBuiltinFilters);\r\n  const outputFilters:FilterWithOptions = Object.assign({}, outputBuiltinFilters);\r\n  stateClass.$isStructive = true;\r\n  registerHtml(id, html);\r\n  registerCss(id, css);\r\n  registerStateClass(id, stateClass);\r\n  const baseClass = getBaseClass(componentConfig.extends);\r\n  const extendTagName = componentConfig.extends;\r\n  return class extends baseClass implements IComponent {\r\n    #engine: IComponentEngine;\r\n    #componentState: IComponentStateProxy;\r\n\r\n    constructor() {\r\n      super();\r\n      this.#engine = createComponentEngine(componentConfig, this as StructiveComponent);\r\n      this.#componentState = createComponentState(this.#engine);\r\n    }\r\n\r\n    connectedCallback() {\r\n      this.#engine.connectedCallback();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n      this.#engine.disconnectedCallback();\r\n    }\r\n\r\n    #parentStructiveComponent: IComponent | null | undefined;\r\n    get parentStructiveComponent(): IComponent | null {\r\n      if (typeof this.#parentStructiveComponent === \"undefined\") {\r\n        this.#parentStructiveComponent = findStructiveParent(this as StructiveComponent);\r\n      }\r\n      return this.#parentStructiveComponent;\r\n    }\r\n\r\n    get state(): IComponentStateProxy {\r\n      return this.#componentState;\r\n    }\r\n\r\n    get isStructive(): boolean {\r\n      return this.#engine.stateClass.$isStructive ?? false;\r\n    }\r\n\r\n    getBindingsFromChild(component: IComponent): Set<IBinding> | null {\r\n      return this.#engine.bindingsByComponent.get(component as StructiveComponent) ?? null;\r\n    }\r\n\r\n    static define(tagName:string) {\r\n      if (extendTagName) {\r\n        customElements.define(tagName, this, { extends: extendTagName });\r\n      } else {\r\n        customElements.define(tagName, this);\r\n      }\r\n    }\r\n\r\n    static get id():number {\r\n      return id;\r\n    }\r\n    static #html:string = html;\r\n    static get html():string {\r\n      return this.#html;\r\n    }\r\n    static set html(value:string) {\r\n      this.#html = value;\r\n      registerHtml(this.id, value);\r\n      this.#template = null;\r\n    }\r\n\r\n    static #css:string = css;\r\n    static get css() {\r\n      return this.#css;\r\n    }\r\n    static set css(value:string) {\r\n      this.#css = value;\r\n      registerCss(this.id, value);\r\n      this.#styleSheet = null;\r\n    }\r\n    static #template: HTMLTemplateElement | null = null;\r\n    static get template():HTMLTemplateElement {\r\n      if (!this.#template) {\r\n        this.#template = getTemplateById(this.id);\r\n      }\r\n      return this.#template;\r\n    }\r\n    static #styleSheet: CSSStyleSheet | null = null;\r\n    static get styleSheet():CSSStyleSheet {\r\n      if (!this.#styleSheet) {\r\n        this.#styleSheet = getStyleSheetById(this.id);\r\n      }\r\n      return this.#styleSheet;\r\n    }\r\n    static #stateClass: IStructiveState | null = null;\r\n    static get stateClass():IStructiveState {\r\n      if (!this.#stateClass) {\r\n        this.#stateClass = getStateClassById(this.id) as IStructiveState;\r\n      }\r\n      return this.#stateClass;\r\n    }\r\n    static #inputFilters:FilterWithOptions = inputFilters;\r\n    static get inputFilters():FilterWithOptions {\r\n      return this.#inputFilters;\r\n    }\r\n    static #outputFilters:FilterWithOptions = outputFilters;\r\n    static get outputFilters():FilterWithOptions {\r\n      return this.#outputFilters;\r\n    }\r\n    static get listPaths(): Set<string> {\r\n      return getListPathsSetById(this.id);\r\n    }\r\n    static get paths(): Set<string> {\r\n      return getPathsSetById(this.id);\r\n    }\r\n    static #getters: Set<string> | null = null;\r\n    static get getters(): Set<string> {\r\n      return this.#getters ?? raiseError(\"getters is null\");\r\n    }\r\n    static #trackedGetters: Set<string> | null = null;\r\n    static get trackedGetters(): Set<string> {\r\n      if(this.#trackedGetters === null) {\r\n        this.#trackedGetters = new Set<string>();\r\n        this.#getters = new Set<string>();\r\n        let currentProto = this.stateClass.prototype;\r\n        while (currentProto && currentProto !== Object.prototype) {\r\n          const trackedGetters = Object.getOwnPropertyDescriptors(currentProto);\r\n          if (trackedGetters) {\r\n            for (const [key, desc] of Object.entries(trackedGetters)) {\r\n              if ((desc as PropertyDescriptor).get && !(desc as PropertyDescriptor).set) {\r\n                this.#trackedGetters.add(key);\r\n              }\r\n              this.#getters.add(key);\r\n            }\r\n          }\r\n          currentProto = Object.getPrototypeOf(currentProto);\r\n        }\r\n        if (globalConfig.optimizeAccessor) {\r\n          for(const path of this.paths) {\r\n            const info = getStructuredPathInfo(path);\r\n            if (info.pathSegments.length === 1) {\r\n              continue;\r\n            }\r\n            if (this.#getters.has(path)) {\r\n              continue;\r\n            }\r\n            const funcs = createAccessorFunctions(info, this.#getters);\r\n            Object.defineProperty(this.stateClass.prototype, path, {\r\n              get: funcs.get,\r\n              set: funcs.set,\r\n              enumerable: true,\r\n              configurable: true,\r\n            });\r\n          }\r\n        }\r\n      }\r\n      return this.#trackedGetters;\r\n\r\n    }\r\n  } as StructiveComponentClass;\r\n}\r\n","import { getGlobalConfig } from \"./getGlobalConfig.js\";\r\nimport { IUserConfig, IComponentConfig } from \"./types\";\r\n\r\nexport function getComponentConfig(userConfig: IUserConfig): IComponentConfig {\r\n  const globalConfig = getGlobalConfig();\r\n  return {\r\n    enableShadowDom: userConfig.enableShadowDom ?? globalConfig.enableShadowDom,\r\n    extends        : userConfig.extends ?? null,\r\n  };\r\n}","import { Constructor } from \"./types\";\r\n\r\nexport function getBaseClass(extendTagName: string | null):Constructor<HTMLElement> {\r\n  return extendTagName ? (document.createElement(extendTagName).constructor as Constructor<HTMLElement>) : HTMLElement;\r\n}","import { IStructiveState } from \"../StateClass/types\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nfunction escapeEmbed(html: string): string {\r\n  return html.replaceAll(/\\{\\{([^\\}]+)\\}\\}/g, (match, expr) => {\r\n    return `<!--{{${expr}}}-->`;\r\n  });\r\n}\r\n\r\nfunction unescapeEmbed(html:string):string {\r\n  return html.replaceAll(/<!--\\{\\{([^\\}]+)\\}\\}-->/g, (match, expr) => {\r\n    return `{{${expr}}}`;\r\n  });\r\n}\r\n\r\nexport async function createSingleFileComponent(text: string): Promise<IUserComponentData> {\r\n  const template = document.createElement(\"template\");\r\n  template.innerHTML = escapeEmbed(text);\r\n\r\n  const html = template.content.querySelector(\"template\");\r\n  html?.remove();\r\n\r\n  const script = template.content.querySelector(\"script[type=module]\") as HTMLScriptElement;\r\n  const b64 = btoa(String.fromCodePoint(...new TextEncoder().encode(script.text)));\r\n  const scriptModule = script ? await import(\"data:application/javascript;base64,\" + b64) : {};\r\n//  const scriptModule = script ? await import(\"data:text/javascript;charset=utf-8,\" + script.text) : {};\r\n  script?.remove();\r\n\r\n  const style = template.content.querySelector(\"style\");\r\n  style?.remove();\r\n\r\n  const stateClass = (scriptModule.default ?? class {}) as IStructiveState;\r\n  \r\n  return {\r\n    text,\r\n    html      : unescapeEmbed(html?.innerHTML ?? \"\").trim(),\r\n    css       : style?.textContent ?? \"\",\r\n    stateClass,\r\n  }\r\n}","import { createSingleFileComponent } from \"./createSingleFileComponent.js\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nexport async function loadSingleFileComponent(path: string): Promise<IUserComponentData> {\r\n  const response = await fetch(import.meta.resolve(path));\r\n  const text = await response.text();\r\n  return createSingleFileComponent(text);\r\n}\r\n","import { StructiveComponentClass } from \"./types\";\r\n\r\nexport function registerComponentClass(tagName: string, componentClass: StructiveComponentClass) {\r\n  componentClass.define(tagName);\r\n}","import { raiseError } from \"../utils\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst SLOT_KEY = \"router\";\r\nconst DEFAULT_LAYOUT = `<slot name=\"${SLOT_KEY}\"></slot>`;\r\n\r\nexport class MainWrapper extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n    if (config.enableShadowDom) {\r\n      this.attachShadow({ mode: 'open' });\r\n    }\r\n  }\r\n\r\n  async connectedCallback() {\r\n    await this.loadLayout();\r\n    this.render();\r\n  }\r\n\r\n  get root(): ShadowRoot | HTMLElement {\r\n    return this.shadowRoot ?? this;\r\n  }\r\n\r\n  async loadLayout() {\r\n    if (config.layoutPath) {\r\n      const response = await fetch(config.layoutPath);\r\n      if (response.ok) {\r\n        const layoutText = await response.text();\r\n        const workTemplate = document.createElement(\"template\");\r\n        workTemplate.innerHTML = layoutText;\r\n      \r\n        const template = workTemplate.content.querySelector(\"template\");\r\n        const style = workTemplate.content.querySelector(\"style\") as CSSStyleSheet | null;\r\n      \r\n        this.root.appendChild(template?.content ?? document.createDocumentFragment());\r\n        if (style) {\r\n          const shadowRootOrDocument = this.shadowRoot ?? document;\r\n          const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n          if (!styleSheets.includes(style)) {\r\n            shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, style];\r\n          }\r\n        }\r\n      } else {\r\n        raiseError(`Failed to load layout from ${config.layoutPath}`);\r\n      }\r\n    } else {\r\n      this.root.innerHTML = DEFAULT_LAYOUT;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // add router\r\n    if (config.enableRouter) {\r\n      const router = document.createElement(config.routerTagName);\r\n      router.setAttribute('slot', SLOT_KEY);\r\n      this.root.appendChild(router);\r\n    }\r\n  }\r\n}\r\n","import { entryRoute } from \"../Router/Router\";\r\nimport { createComponentClass } from \"./createComponentClass\";\r\nimport { loadImportmap } from \"./loadImportmap\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent\";\r\nimport { registerComponentClass } from \"./registerComponentClass\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nconst ROUTES_KEY = \"@routes/\";\r\nconst COMPONENTS_KEY = \"@components/\";\r\n\r\nexport async function loadFromImportMap(): Promise<void> {\r\n  const importmap = loadImportmap();\r\n  if (importmap.imports) {\r\n    for (const [alias, value] of Object.entries(importmap.imports)) {\r\n      let tagName;\r\n      if (alias.startsWith(ROUTES_KEY)) {\r\n        const path = alias.slice(ROUTES_KEY.length - 1); // remove the prefix '@routes'\r\n        const pathWithoutParams = path.replace(/:[^\\s/]+/g, \"\"); // remove the params\r\n        tagName = \"routes\" + pathWithoutParams.replace(/\\//g, \"-\"); // replace '/' with '-'\r\n        entryRoute(tagName, path === \"/root\" ? \"/\" : path); // routing\r\n      } if (alias.startsWith(COMPONENTS_KEY)) {\r\n        tagName = alias.slice(COMPONENTS_KEY.length - 1); // remove the prefix '@components'\r\n      }\r\n      if (!tagName) {\r\n        continue;\r\n      }\r\n\r\n      let componentData : IUserComponentData | null = null;\r\n      componentData = await loadSingleFileComponent(alias);\r\n      const componentClass = createComponentClass(componentData);\r\n      registerComponentClass(tagName, componentClass);\r\n    }\r\n  }\r\n\r\n} \r\n","import { IImportMap } from \"./types\";\r\n\r\nexport function loadImportmap():IImportMap {\r\n  const importmap: IImportMap = {};\r\n  document.querySelectorAll(\"script[type='importmap']\").forEach(script => {\r\n    const scriptImportmap = JSON.parse(script.innerHTML);\r\n    if (scriptImportmap.imports) {\r\n      importmap.imports = Object.assign(importmap.imports || {}, scriptImportmap.imports);\r\n    }\r\n  });\r\n  return importmap;\r\n}\r\n\r\n","import { registerSingleFileComponents } from \"./WebComponents/registerSingleFIleComponents.js\";\r\nimport { bootstrap } from \"./bootstrap.js\";\r\nimport { config as _config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { IConfig } from \"./WebComponents/types\";\r\n\r\nexport const config: IConfig = _config;\r\n\r\nlet initialized = false;\r\nexport async function defineComponents(singleFileComponents: Record<string, string>):Promise<void> {\r\n  await registerSingleFileComponents(singleFileComponents);\r\n  if (config.autoInit) {\r\n    await bootstrapStructive();\r\n  }\r\n}\r\n\r\nexport async function bootstrapStructive():Promise<void> {\r\n  if (!initialized) {\r\n    await bootstrap();\r\n    initialized = true;\r\n  }\r\n}\r\n\r\n","import { entryRoute } from \"../Router/Router.js\";\r\nimport { createComponentClass } from \"./createComponentClass.js\";\r\nimport { config } from \"./getGlobalConfig.js\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent.js\";\r\nimport { registerComponentClass } from \"./registerComponentClass.js\";\r\nimport { IUserComponentData, SingleFileComponents } from \"./types\";\r\n\r\nexport async function registerSingleFileComponents(singleFileComponents:SingleFileComponents):Promise<void> {\r\n  for(const [ tagName, path ] of Object.entries(singleFileComponents)) {\r\n    let componentData : IUserComponentData | null = null;\r\n    if (config.enableRouter) {\r\n      const routePath = path.startsWith(\"@routes\") ? path.slice(7) : path; // remove the prefix 'routes:'\r\n      entryRoute(tagName, routePath === \"/root\" ? \"/\" : routePath); // routing\r\n    }\r\n    componentData = await loadSingleFileComponent(path);\r\n    const componentClass = createComponentClass(componentData);\r\n    registerComponentClass(tagName, componentClass);\r\n  }\r\n}","import { MainWrapper } from \"./MainWrapper/MainWrapper.js\";\r\nimport { Router } from \"./Router/Router.js\";\r\nimport { config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { loadFromImportMap } from \"./WebComponents/loadFromImportMap.js\";\r\n\r\nexport async function bootstrap(): Promise<void> {\r\n  if (config.autoLoadFromImportMap) {\r\n    await loadFromImportMap();\r\n  }\r\n\r\n  if (config.enableRouter) {\r\n    customElements.define(config.routerTagName, Router);\r\n  }\r\n\r\n  if (config.enableMainWrapper) {\r\n    customElements.define(config.mainTagName, MainWrapper);\r\n    if (config.autoInsertMainWrapper) {\r\n      const mainWrapper = document.createElement(config.mainTagName);\r\n      document.body.appendChild(mainWrapper);\r\n    }\r\n  }\r\n}"],"names":["ROUTE_PATH_PREFIX","routeEntries","globalRouter","Router","HTMLElement","_popstateHandler","constructor","super","this","popstateHandler","bind","connectedCallback","innerHTML","window","addEventListener","dispatchEvent","Event","disconnectedCallback","removeEventListener","event","preventDefault","render","navigate","to","history","pushState","Array","from","childNodes","filter","n","getAttribute","forEach","removeChild","routePath","location","pathname","tagName","params","path","tag","regex","RegExp","replace","test","matches","match","key","index","substring","customElement","document","createElement","setAttribute","JSON","stringify","appendChild","messageElement","textContent","entryRoute","startsWith","push","globalConfig","debug","locale","enableShadowDom","enableMainWrapper","enableRouter","autoInsertMainWrapper","autoInit","mainTagName","routerTagName","layoutPath","autoLoadFromImportMap","optimizeList","optimizeListElements","optimizeAccessor","getGlobalConfig","config","optionsRequired","fnName","Error","optionMustBeNumber","valueMustBeNumber","valueMustBeDate","builtinFilters","eq","options","opt","optValue","Number","isNaN","value","ne","not","valueMustBeBoolean","lt","le","gt","ge","inc","dec","mul","div","fix","toFixed","toLocaleString","uc","toString","toUpperCase","lc","toLowerCase","cap","v","length","charAt","slice","trim","substr","opt1","opt1Value","opt2","opt2Value","pad","padStart","rep","repeat","rev","split","reverse","join","int","parseInt","float","parseFloat","round","Math","pow","floor","ceil","percent","date","Date","toLocaleDateString","time","toLocaleTimeString","datetime","ymd","year","getFullYear","month","getMonth","day","getDate","falsy","truthy","defaults","boolean","Boolean","number","string","String","null","outputBuiltinFilters","inputBuiltinFilters","id","generateId","raiseError","message","stateClassById","styleSheetById","registerCss","css","styleSheet","CSSStyleSheet","replaceSync","registerStyleSheet","textToFilter","filters","text","name","cache","Map","createFilters","texts","result","get","i","set","BindingNode","binding","node","decorates","bindContents","Set","subName","init","update","assignValue","bindingState","filteredValue","updateElements","listIndexes","values","isSelectElement","HTMLSelectElement","isFor","BindingNodeAttribute","BindingNodeCheckbox","isArray","element","checked","map","_val","includes","BindingNodeClassList","className","BindingNodeClassName","classList","add","remove","BindingNodeEvent","e","handler","engine","stateProxy","updater","loopContext","parentBindContent","currentLoopContext","indexes","serialize","context","listIndex","stopPropagation","addProcess","async","typeOfValue","setLoopContext","Reflect","apply","createBindingNodeEvent","filterTexts","filterFns","DATA_BIND_ATTRIBUTE","COMMENT_EMBED_MARK","COMMENT_TEMPLATE_MARK","BindingNodeBlock","BindingNodeIf","bindContent","trueBindContents","falseBindContents","createBindContent","parentNode","mountAfter","nextSibling","unmount","BindingNodeFor","bindContentsSet","bindContentByListIndex","WeakMap","bindContentPool","bindContentLastIndex","lastListIndexSet","assignListIndex","pattern","deleteBindContent","clearListIndex","poolLength","listIndexesSet","getListIndexesSet","info","newBindContensSet","lastBindContent","removeBindContentsSet","diff","difference","firstNode","lastNode","getLastNode","firstChildNode","oldListValues","getList","currentBindContents","targetBindContents","lastChildNode","oldValue","targetIndex","indexOf","prevBindContent","saveList","createBindingNodeFor","DEFAULT_PROPERTY","defaultPropertyByElementType","kt","Ft","button","_cache","getDefaultPropertyByNodeType","HTMLTextAreaElement","HTMLOptionElement","HTMLButtonElement","HTMLAnchorElement","HTMLFormElement","HTMLInputElement","type","SVGElement","undefined","Text","Template","defaultEventByName","selected","BindingNodeProperty","defaultName","nodeType","getDefaultName","eventName","updateStateValue","createBindingNodeProperty","BindingNodeRadio","BindingNodeStyle","style","setProperty","symbolName","RenderSymbol","Symbol","for","BindParentComponentSymbol","BindingNodeComponent","bindings","bindingsByComponent","state","nodePropertyConstructorByNameByIsComment","Ht","jt","nodePropertyConstructorByFirstName","Wt","getBindingNodeCreator","propertyName","isComment","Comment","isElement","Element","fn","bindingNodeCreatorByName","nameElements","bindingNodeCreatorByFirstName","_getBindingNodeCreator","GetByRefSymbol","SetByRefSymbol","SetCacheableSymbol","ConnectedCallbackSymbol","DisconnectedCallbackSymbol","ResolveSymbol","GetAllSymbol","StructuredPathInfo","static","pathSegments","lastSegment","cumulativePaths","cumulativeInfos","cumulativeInfoSet","wildcardPaths","wildcardInfos","wildcardInfoSet","wildcardParentPaths","wildcardParentInfos","wildcardParentInfoSet","lastWildcardPath","lastWildcardInfo","parentPath","parentInfo","wildcardCount","children","getPattern","_pattern","getStructuredPathInfo","currentPatternPath","prevPatternPath","reservedWords","structuredPath","has","BindingState","listIndexRef","deref","find","saveBinding","BindingStateIndex","indexNumber","loopContexts","bindingsByListIndex","ereg","getBindingStateCreator","createBindingStateIndex","createBindingState","getTextByNodeType","Vt","getTemplateById","nodeTypeByNodeKey","getNodeType","nodeKey","createNodeKey","getNodeTypeByNode","s","re","decode","m","exec","decodeURIComponent","parseFilter","parseProperty","property","parseExpressions","expression","bindExpression","decoratesExpression","nodePropertyText","statePropertyText","nodeProperty","inputFilterTexts","stateProperty","outputFilterTexts","parseExpression","removeAttributeFromElement","removeAttribute","removeAttributeByNodeType","replaceTextNodeFn","textNode","createTextNode","replaceChild","DataBindAttributes","nodePath","bindTexts","creatorByText","bindText","getDataBindText","removeDataBindAttribute","replaceTextNodeFromComment","routeIndexes","getAbsoluteNodePath","parseBindText","creator","createBindingNode","getNodesHavingDataBind","root","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","acceptNode","hasAttribute","FILTER_ACCEPT","FILTER_SKIP","isCommentNode","nextNode","currentNode","listDataBindAttributesById","listPathsSetById","pathsSetById","getDataBindAttributesFromTemplate","content","createDataBindAttributes","templateById","registerTemplate","template","rootId","Node","TEXT_NODE","nodeValue","dataBindAttributes","paths","listPaths","attribute","j","registerDataBindAttributes","Binding","bindingNode","version","inputFilters","outputFilters","createBinding","LoopContext","WeakRef","parentLoopContext","currentBinding","parentBinding","walk","callback","results","unshift","bindingsWithSelectElement","createBindings","attributes","getDataBindAttributesById","reduce","BindContent","fragment","isMounted","lastBinding","size","at","importNode","createContent","createLoopContext","mount","mountBefore","beforeNode","insertBefore","afterNode","createRefKey","_getByRef","target","receiver","lastTrackingStack","lastPattern","addDependentProp","refKey","cacheable","setStatePropertyRef","parentListIndex","parentValue","getByRef","trackedGetters","trackingStack","pop","setTracking","prop","methodGetByRef","setByRef","addUpdatedStatePropertyRefValue","methodSetByRef","setCacheable","methodSetChargeable","call","resolve","wildcardParentPattern","getAll","_resolve","wildcardPattern","getContextListIndex","walkWildcardPattern","wildardIndexPos","indexPos","parentIndexes","listIndexSet","concat","resultIndexes","resultValues","ResolvedPathInfo","elements","wildcardType","wildcardIndexes","tmpPatternElements","incompleteCount","completeCount","lastPath","getResolvedPathInfo","getListIndex","charCodeAt","d","ref","getLastStatePropertyRef","resolvedInfo","callableApi","StateHandler","apiGetByRef","apiSetByRef","apiSetCacheable","trapGet","trapSet","createDependencyKey","dependencyWalker","entryRef","traced","walkSub","edges","dependentTree","edge","overridedType","createDependencyWalker","ListIndex","position","truncate","reverseIterator","iterator","atcache","next","lisIndex","createListIndex","listWalkerSub","listIndexLen","subListIndex","listWalker","BLANK_LISTINDEXES_SET","buildListIndexTree","newListIndexesSet","oldListIndexesSet","oldListIndexesByItem","groupBy","curListIndex","shift","addUpdatedListIndex","saveListIndexesSet","restructListIndexes","infos","updateValues","refKeys","wt","elementInfoSet","dependentWalker","nowOnList","listInfoSet","refInfo","wildcardMatchPaths","intersection","longestMatchAt","_info","_listIndex","existsBindingsByInfo","cacheListIndexSet","Updater","processList","updatedProperties","updatedValues","process","waitForQueueEntry","terminate","waitForMainLoopTerminate","Promise","withResolvers","main","waitForComponentInit","promise","performance","mark","updatingCount","measure","console","log","getEntriesByType","clearMeasures","clearMarks","error","updateState","rebuild","retArrayElementBindings","retBindings","updatedProiperties","clear","updatedRefs","arrayElementBindingByParentRefKey","item","parentRef","parentRefKey","builtStatePropertyRefKeySet","affectedRefs","getBindings","bindingInfo","Object","assign","entries","arrayElementBindings","Ce","hn","arrayElementBinding","attachShadow","extends","canHaveShadowRoot","mode","adoptedStyleSheets","shadowRootOrDocument","ShadowRoot","getParentShadowRoot","styleSheets","buildListIndexTreeSub","listInfos","searchPath","subValue","ComponentEngine","stateClass","baseClass","owner","waitForInitialize","stackStructuredPathInfo","stackListIndex","componentClass","Proxy","createUpdater","checkDependentProp","listPath","dataset","json","parse","shadowRoot","asyncSetStatePropertyRef","lastRef","getLoopContexts","saveInfoByListIndexByResolvedPathInfoId","saveInfoByStructuredPathId","createSaveInfo","list","getSaveInfoByStatePropertyRef","saveInfo","saveInfoByListIndex","dependents","createDependencyEdge","getPropertyValue","setPropertyValue","MUSTACHE_REGEXP","MUSTACHE_TYPES","replaceTemplateTagWithComment","createComment","namespaceURI","newTemplate","childNode","querySelectorAll","registerHtml","html","stack","replaceAll","expr","remain","currentInfo","endTags","lastInfo","replaceMustacheWithTemplateTag","ComponentState","bindParentProperty","propName","defineProperty","unbindParentProperty","bindParentComponent","parent","parentStructiveComponent","getBindingsFromChild","ComponentStateHandler","checkSegmentRegexp","checkPathRegexp","createAccessorFunctions","getters","matchPaths","len","matchPath","curPath","matchInfo","segments","count","segment","Function","createComponentClass","componentData","componentConfig","userConfig","getComponentConfig","$config","Mn","Rn","pn","$isStructive","registerStateClass","extendTagName","getBaseClass","componentState","component","createComponentEngine","el","current","isStructive","host","findStructiveParent","define","customElements","getStyleSheetById","getStateClassById","getListPathsSetById","getPathsSetById","currentProto","prototype","getOwnPropertyDescriptors","desc","getPrototypeOf","funcs","enumerable","configurable","unescapeEmbed","loadSingleFileComponent","response","fetch","escapeEmbed","querySelector","script","b64","btoa","fromCodePoint","TextEncoder","encode","scriptModule","import","default","createSingleFileComponent","registerComponentClass","SLOT_KEY","DEFAULT_LAYOUT","MainWrapper","loadLayout","ok","layoutText","workTemplate","createDocumentFragment","router","ROUTES_KEY","COMPONENTS_KEY","loadFromImportMap","importmap","scriptImportmap","imports","loadImportmap","alias","_config","initialized","defineComponents","singleFileComponents","registerSingleFileComponents","bootstrapStructive","mainWrapper","body","bootstrap"],"mappings":"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"}
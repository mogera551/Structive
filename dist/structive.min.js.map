{"version":3,"file":"structive.min.js","sources":["../src/Router/Router.ts","../src/WebComponents/getGlobalConfig.ts","../src/Filter/errorMessages.ts","../src/Filter/builtinFilters.ts","../src/GlobalId/generateId.ts","../src/utils.ts","../src/StateClass/registerStateClass.ts","../src/StyleSheet/registerStyleSheet.ts","../src/StyleSheet/regsiterCss.ts","../src/BindingBuilder/createFilters.ts","../src/DataBinding/BindingNode/BindingNode.ts","../src/DataBinding/BindingNode/BindingNodeAttribute.ts","../src/DataBinding/BindingNode/BindingNodeCheckbox.ts","../src/DataBinding/BindingNode/BindingNodeClassList.ts","../src/DataBinding/BindingNode/BindingNodeClassName.ts","../src/DataBinding/BindingNode/BindingNodeEvent.ts","../src/constants.ts","../src/DataBinding/BindingNode/BindingNodeBlock.ts","../src/DataBinding/BindingNode/BindingNodeIf.ts","../src/DataBinding/BindingNode/BindingNodeFor.ts","../src/BindingBuilder/getDefaultName.ts","../src/DataBinding/BindingNode/BindingNodeProperty.ts","../src/DataBinding/BindingNode/BindingNodeRadio.ts","../src/DataBinding/BindingNode/BindingNodeStyle.ts","../src/ComponentState/symbols.ts","../src/DataBinding/BindingNode/BindingNodeComponent.ts","../src/BindingBuilder/getBindingNodeCreator.ts","../src/StateClass/symbols.ts","../src/StateProperty/getStructuredPathInfo.ts","../src/DataBinding/BindingState/BindingState.ts","../src/DataBinding/BindingState/BindingStateIndex.ts","../src/BindingBuilder/getBindingStateCreator.ts","../src/BindingBuilder/getDataBindText.ts","../src/BindingBuilder/getNodeType.ts","../src/BindingBuilder/parseBindText.ts","../src/BindingBuilder/removeDataBindAttribute.ts","../src/BindingBuilder/replaceTextNodeFromComment.ts","../src/BindingBuilder/createDataBindAttributes.ts","../src/BindingBuilder/getAbsoluteNodePath.ts","../src/BindingBuilder/getNodesHavingDataBind.ts","../src/BindingBuilder/registerDataBindAttributes.ts","../src/Template/registerTemplate.ts","../src/Template/removeEmptyTextNodes.ts","../src/DataBinding/Binding.ts","../src/LoopContext/createLoopContext.ts","../src/Render/render.ts","../src/DataBinding/BindContent.ts","../src/BindingBuilder/resolveNodeFromPath.ts","../src/StatePropertyRef/getStatePropertyRef.ts","../src/StateClass/methods/getByRef.ts","../src/StateClass/methods/setTracking.ts","../src/StateClass/apis/getByRef.ts","../src/StateClass/methods/setByRef.ts","../src/StateClass/apis/setByRef.ts","../src/StateClass/apis/setCacheable.ts","../src/StateClass/methods/setCacheable.ts","../src/StateClass/apis/connectedCallback.ts","../src/StateClass/apis/disconnectedCallback.ts","../src/StateClass/apis/resolve.ts","../src/StateClass/apis/getAll.ts","../src/StateProperty/getResolvedPathInfo.ts","../src/StateClass/getListIndex.ts","../src/StateClass/traps/get.ts","../src/StateClass/createStateProxy.ts","../src/StateClass/traps/set.ts","../src/DependencyWalker/createDependencyEdge.ts","../src/DependencyWalker/createDependencyWalker.ts","../src/ListIndex/createListIndex.ts","../src/ListWalker/listWalker.ts","../src/Updater/restructListIndex.ts","../src/Updater/updater.ts","../src/ComponentEngine/attachShadow.ts","../src/ComponentEngine/canHaveShadowRoot.ts","../src/StateClass/buildListIndexTree.ts","../src/ComponentEngine/ComponentEngine.ts","../src/Template/replaceMustacheWithTemplateTag.ts","../src/Template/replaceTemplateTagWithComment.ts","../src/Template/registerHtml.ts","../src/ComponentState/createComponentState.ts","../src/StateProperty/createAccessorFunctions.ts","../src/WebComponents/createComponentClass.ts","../src/WebComponents/getComponentConfig.ts","../src/WebComponents/getBaseClass.ts","../src/WebComponents/createSingleFileComponent.ts","../src/WebComponents/loadSingleFileComponent.ts","../src/WebComponents/registerComponentClass.ts","../src/MainWrapper/MainWrapper.ts","../src/WebComponents/loadFromImportMap.ts","../src/WebComponents/loadImportmap.ts","../src/exports.ts","../src/WebComponents/registerSingleFIleComponents.ts","../src/bootstrap.ts"],"sourcesContent":["import { config } from \"../WebComponents/getGlobalConfig\";\r\nimport { IRouter } from \"./types\";\r\n\r\nconst DEFAULT_ROUTE_PATH = '/'; // Default route path\r\nconst ROUTE_PATH_PREFIX = 'routes:'; // Prefix for route paths\r\n/**\r\n * example:\r\n * ```ts\r\n * entryRoute('my-view', '/my-view/:id');\r\n */\r\nconst routeEntries: Array<[string, string]> = [];\r\n\r\nlet globalRouter : Router | null = null;\r\n\r\nexport class Router extends HTMLElement implements IRouter {\r\n  _popstateHandler: (event: PopStateEvent) => void;\r\n  constructor() {\r\n    super();\r\n    this._popstateHandler = this.popstateHandler.bind(this);\r\n  }\r\n\r\n  connectedCallback() {\r\n    globalRouter = this;\r\n    this.innerHTML = '<slot name=\"content\"></slot>';\r\n    window.addEventListener('popstate', this._popstateHandler);\r\n    window.dispatchEvent(new Event(\"popstate\")); // Dispatch popstate event to trigger the initial render\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('popstate', this._popstateHandler);\r\n    globalRouter = null;\r\n  }\r\n\r\n  popstateHandler(event: PopStateEvent) {\r\n    event.preventDefault();\r\n    this.render();\r\n  }\r\n\r\n  navigate(to: string) {\r\n    history.pushState({}, '', to);\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    // スロットコンテントをクリア\r\n    const slotChildren = Array.from(this.childNodes).filter(\r\n      n => (n as HTMLElement).getAttribute?.('slot') === 'content'\r\n    );\r\n    slotChildren.forEach(n => this.removeChild(n));\r\n\r\n    const routePath = window.location.pathname || DEFAULT_ROUTE_PATH;\r\n    let tagName: string | undefined = undefined;\r\n    let params: Record<string, string> = {};\r\n    // Check if the routePath matches any of the defined routes\r\n    for (const [path, tag] of routeEntries) {\r\n      const regex = new RegExp(path.replace(/:[^\\s/]+/g, '([^/]+)'));\r\n      if (regex.test(routePath)) {\r\n        tagName = tag;\r\n        // Extract the parameters from the routePath\r\n        const matches = routePath.match(regex);\r\n        if (matches) {\r\n          const keys = path.match(/:[^\\s/]+/g) || [];\r\n          keys.forEach((key, index) => {\r\n            params[key.substring(1)] = matches[index + 1]; // +1 to skip the full match\r\n          });\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (tagName) {\r\n      // If a route matches, create the custom element and set its state\r\n      // Create the custom element with the tag name\r\n      // project the custom element into the router slot\r\n      const customElement = document.createElement(tagName) as HTMLElement;\r\n      customElement.setAttribute('data-state', JSON.stringify(params));\r\n      customElement.setAttribute('slot', 'content');\r\n      this.appendChild(customElement);\r\n    } else {\r\n      // If no route matches, show 404 content\r\n      const messageElement = document.createElement('h1') as HTMLElement;\r\n      messageElement.setAttribute('slot', 'content');\r\n      messageElement.textContent = '404 Not Found';\r\n      this.appendChild(messageElement);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function entryRoute(tagName: string, routePath: string): void {\r\n  if (routePath.startsWith(ROUTE_PATH_PREFIX)) {\r\n    routePath = routePath.substring(ROUTE_PATH_PREFIX.length); // Remove 'routes:' prefix\r\n  }\r\n  routeEntries.push([routePath, tagName]);\r\n}\r\n\r\nexport function getRouter(): Router | null {\r\n  return globalRouter;\r\n}\r\n\r\n","import { IConfig } from \"./types\";\r\n\r\nconst globalConfig: IConfig = {\r\n  debug                : false,\r\n  locale               : \"en-US\", // The locale of the component, ex. \"en-US\", default is \"en-US\"\r\n  enableShadowDom      : true,\r\n  enableMainWrapper    : true, // Whether to use the main wrapper or not\r\n  enableRouter         : true, // Whether to use the router or not\r\n  autoInsertMainWrapper: false, // Whether to automatically insert the main wrapper or not\r\n  autoInit             : true, // Whether to automatically initialize the component or not\r\n  mainTagName          : \"app-main\", // The tag name of the main wrapper, default is \"app-main\"\r\n  routerTagName        : \"view-router\", // The tag name of the router, default is \"view-router\"\r\n  layoutPath           : \"\", // The path to the layout file, default is \"\"\r\n  autoLoadFromImportMap: false, // Whether to automatically load the component from the import map or not\r\n  optimizeList         : true, // Whether to optimize the list or not\r\n  optimizeListElements : true, // Whether to optimize the list elements or not\r\n  optimizeAccessor     : true, // Whether to optimize the accessors or not\r\n};\r\n\r\n\r\nexport function getGlobalConfig():IConfig {\r\n  return globalConfig;\r\n}\r\n\r\nexport const config = getGlobalConfig();\r\n","\r\nexport function optionsRequired(fnName:string): never {\r\n  throw new Error(`${fnName} requires at least one option`);\r\n}\r\n\r\nexport function optionMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number as option`);\r\n}\r\n\r\nexport function valueMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number value`);\r\n}\r\n\r\nexport function valueMustBeBoolean(fnName:string): never {\r\n  throw new Error(`${fnName} requires a boolean value`);\r\n}\r\n\r\nexport function valueMustBeDate(fnName:string): never {\r\n  throw new Error(`${fnName} requires a date value`);\r\n}","import { getGlobalConfig } from \"../WebComponents/getGlobalConfig.js\";\r\nimport { optionMustBeNumber, optionsRequired, valueMustBeBoolean, valueMustBeDate, valueMustBeNumber } from \"./errorMessages.js\";\r\nimport { FilterWithOptions } from \"./types\";\r\n\r\nconst config = getGlobalConfig();\r\n\r\nconst eq = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('eq');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('eq');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('eq');\r\n    return value === optValue;\r\n  }\r\n}\r\n\r\nconst ne = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ne');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ne');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ne');\r\n    return value !== optValue;\r\n  }\r\n}\r\n\r\nconst not = (options?:string[]) => {\r\n  return (value: any) => {\r\n    if (typeof value !== 'boolean') valueMustBeBoolean('not');\r\n    return !value;\r\n  }\r\n}\r\n\r\nconst lt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('lt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('lt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('lt');\r\n    return value < optValue;\r\n  }\r\n}\r\n\r\nconst le = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('le');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('le');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('le');\r\n    return value <= optValue;\r\n  }\r\n}\r\n\r\nconst gt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('gt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('gt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('gt');\r\n    return value > optValue;\r\n  }\r\n}\r\n\r\nconst ge = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ge');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ge');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ge');\r\n    return value >= optValue;\r\n  }\r\n}\r\n\r\nconst inc = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('inc');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('inc');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('inc');\r\n    return value + optValue;\r\n  }\r\n}\r\n\r\nconst dec = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('dec');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('dec');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('dec');\r\n    return value - optValue;\r\n  }\r\n}\r\n\r\nconst mul = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('mul');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('mul');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('mul');\r\n    return value * optValue;\r\n  }\r\n}\r\n\r\nconst div = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('div');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value / optValue;\r\n  }\r\n}\r\n\r\nconst fix = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value.toFixed(optValue);\r\n  }\r\n}\r\n\r\nconst locale = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('locale');\r\n    return value.toLocaleString(opt);\r\n  }\r\n}\r\n\r\nconst uc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toUpperCase();\r\n  }\r\n}\r\n\r\nconst lc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toLowerCase();\r\n  }\r\n}\r\n\r\nconst cap = (options?:string[]) => {\r\n  return (value: any) => {\r\n    const v = value.toString();\r\n    if (v.length === 0) return v;\r\n    if (v.length === 1) return v.toUpperCase();\r\n    return v.charAt(0).toUpperCase() + v.slice(1);\r\n  }\r\n}\r\n\r\nconst trim = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().trim();\r\n  }\r\n}\r\n\r\nconst slice = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('slice');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('slice');\r\n  return (value: any) => {\r\n    return value.toString().slice(optValue);\r\n  }\r\n}\r\n\r\nconst substr = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('substr');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('substr');\r\n  const opt2 = options?.[1] ?? optionsRequired('substr');\r\n  const opt2Value = Number(opt2);\r\n  if (isNaN(opt2Value)) optionMustBeNumber('substr');\r\n  return (value: any) => {\r\n    return value.toString().substr(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst pad = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('pad');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('pad');\r\n  const opt2 = options?.[1] ?? '0';\r\n  const opt2Value = opt2;\r\n  return (value: any) => {\r\n    return value.toString().padStart(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst rep = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('rep');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('rep');\r\n  return (value: any) => {\r\n    return value.toString().repeat(optValue);\r\n  }\r\n}\r\n\r\nconst rev = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().split('').reverse().join('');\r\n  }\r\n}\r\n\r\nconst int = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseInt(value, 10);\r\n  }\r\n}\r\n\r\nconst float = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseFloat(value);\r\n  }\r\n}\r\n\r\nconst round = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('round');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('round');\r\n    return Math.round(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst floor = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('floor');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('floor');\r\n    return Math.floor(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst ceil = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('ceil');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ceil');\r\n    return Math.ceil(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst percent = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('percent');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('percent');\r\n    return value.toFixed(optValue) + '%';\r\n  }\r\n}\r\n\r\nconst date = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date))  valueMustBeDate('date');\r\n    return value.toLocaleDateString(config.locale);\r\n  }\r\n}\r\n\r\nconst time = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('time');\r\n    return value.toLocaleTimeString(config.locale);\r\n  }\r\n}\r\n\r\nconst datetime = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('datetime');\r\n    return value.toLocaleString(config.locale);\r\n  }\r\n}\r\n\r\nconst ymd = (options?:string[]) => {\r\n  const opt = options?.[0] ?? '-';\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('ymd');\r\n    const year = value.getFullYear().toString();\r\n    const month = (value.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = value.getDate().toString().padStart(2, '0');\r\n    return `${year}${opt}${month}${opt}${day}`;\r\n  }\r\n}\r\n\r\nconst falsy = (options?:string[]) => {\r\n  return (value: any) => value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value);\r\n}\r\n\r\nconst truthy = (options?:string[]) => {\r\n  return (value: any) =>value !== false && value !== null && value !== undefined && value !== 0 && value !== '' && !Number.isNaN(value);\r\n}\r\n\r\nconst defaults = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('defaults');\r\n  return (value: any) => {\r\n    if (value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value)) return opt;\r\n    return value;\r\n  }\r\n}\r\n\r\nconst boolean = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Boolean(value);\r\n  }\r\n}\r\n\r\nconst number = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Number(value);\r\n  }\r\n}\r\n\r\nconst string = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return String(value);\r\n  }\r\n}\r\n\r\nconst _null = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return (value === \"\") ? null : value;\r\n  } \r\n}\r\n\r\nconst builtinFilters: FilterWithOptions = {\r\n  eq,\r\n  ne,\r\n  not,\r\n  \r\n  lt,\r\n  le,\r\n  gt,\r\n  ge,\r\n\r\n  inc,\r\n  dec,\r\n  mul,\r\n  div,\r\n\r\n  fix,\r\n  locale,\r\n  uc,\r\n  lc,\r\n  cap,\r\n  trim,\r\n  slice,\r\n  substr,\r\n  pad,\r\n  rep,\r\n  rev,\r\n\r\n  int,\r\n  float,\r\n  round,\r\n  floor,\r\n  ceil,\r\n  percent,\r\n\r\n  date,\r\n  time,\r\n  datetime,\r\n  ymd,\r\n\r\n  falsy,\r\n  truthy,\r\n  defaults,\r\n\r\n  boolean,\r\n  number,\r\n  string,\r\n  \"null\": _null,\r\n};\r\n\r\nexport const outputBuiltinFilters = builtinFilters;\r\nexport const inputBuiltinFilters = builtinFilters;\r\n\r\nexport const builtinFilterFn = (name:string, options: string[]) => (filters: FilterWithOptions) => {\r\n  const filter = filters[name];\r\n  if (!filter) throw new Error(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(options);\r\n}\r\n\r\n","\r\nlet id = 0;\r\n\r\nexport function generateId(): number {\r\n  return ++id;\r\n}","\r\nexport function raiseError(message: string): never {\r\n  throw new Error(message);\r\n}\r\n","import { raiseError } from \"../utils.js\";\r\nimport { IStructiveState } from \"./types\";\r\n\r\nconst stateClassById: Record<number,IStructiveState> = {};\r\n\r\nexport function registerStateClass(id: number, stateClass: IStructiveState) {\r\n  stateClassById[id] = stateClass;\r\n}\r\n\r\nexport function getStateClassById(id: number): IStructiveState {\r\n  return stateClassById[id] ?? raiseError(`getStateClassById: stateClass not found: ${id}`);\r\n}\r\n","import { raiseError } from \"../utils.js\";\r\n\r\nconst styleSheetById: Record<number,CSSStyleSheet> = {};\r\n\r\nexport function registerStyleSheet(id: number, css: CSSStyleSheet) {\r\n  styleSheetById[id] = css;\r\n}\r\n\r\nexport function getStyleSheetById(id: number): CSSStyleSheet {\r\n  return styleSheetById[id] ?? raiseError(`getStyleSheetById: stylesheet not found: ${id}`);\r\n}","import { registerStyleSheet } from \"./registerStyleSheet.js\";\r\n\r\nexport function registerCss(id: number, css: string) {\r\n  const styleSheet = new CSSStyleSheet();\r\n  styleSheet.replaceSync(css);\r\n  registerStyleSheet(id, styleSheet);\r\n}","import { FilterFn, Filters, FilterWithOptions } from \"../Filter/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nfunction textToFilter(filters:FilterWithOptions, text: IFilterText): FilterFn {\r\n  const filter = filters[text.name];\r\n  if (!filter) raiseError(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(text.options);\r\n}\r\n\r\nconst cache : Map<IFilterText[], Filters> = new Map();\r\n\r\nexport function createFilters(filters:FilterWithOptions, texts: IFilterText[]): Filters {\r\n  let result = cache.get(texts);\r\n  if (typeof result === \"undefined\") {\r\n    result = [];\r\n    for(let i = 0; i < texts.length; i++) {\r\n      result.push(textToFilter(filters, texts[i]));\r\n    }\r\n    cache.set(texts, result);\r\n  }\r\n  return result;\r\n}\r\n","import { Filters } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { IBindingNode } from \"./types\";\r\n\r\nexport class BindingNode implements IBindingNode {\r\n  #binding: IBinding;\r\n  #node: Node;\r\n  #name: string;\r\n  #filters: Filters;\r\n  #decorates: string[];\r\n  #bindContents: Set<IBindContent> = new Set<IBindContent>();\r\n  get node(): Node {\r\n    return this.#node;\r\n  }\r\n  get name(): string {\r\n    return this.#name;\r\n  }\r\n  get subName(): string {\r\n    return this.#name;\r\n  }\r\n  get binding(): IBinding {\r\n    return this.#binding;\r\n  }\r\n  get decorates(): string[] {\r\n    return this.#decorates;\r\n  }\r\n  get filters(): Filters {\r\n    return this.#filters;\r\n  }\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#node = node;\r\n    this.#name = name;\r\n    this.#filters = filters;\r\n    this.#decorates = decorates;\r\n  }\r\n  init():void {\r\n  }\r\n  update(): void {\r\n    this.assignValue(this.binding.bindingState.filteredValue);\r\n  }\r\n  assignValue(value: any): void {\r\n    raiseError(`BindingNode: assignValue not implemented`);\r\n  }\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    raiseError(`BindingNode: updateElements not implemented`);\r\n  }\r\n  get isSelectElement(): boolean {\r\n    return this.node instanceof HTMLSelectElement;\r\n  }\r\n  get value():any {\r\n    return null;\r\n  }\r\n  get filteredValue():any {\r\n    return null;\r\n  }\r\n  get isFor(): boolean {\r\n    return false;\r\n  }\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeAttribute extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as Element;\r\n    element.setAttribute(this.subName, value.toString());\r\n  }\r\n}\r\n\r\nexport const createBindingNodeAttribute: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeAttribute(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeCheckbox extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeCheckbox.update: value is not array`, );\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.map(_val => _val.toString()).includes(element.value);\r\n  }\r\n}\r\n\r\nexport const createBindingNodeCheckbox: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeCheckbox(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeClassList extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeClassList.update: value is not array`);\r\n    }\r\n    const element = this.node as Element;\r\n    element.className = value.join(\" \");\r\n  }\r\n}\r\n\r\nexport const createBindingNodeClassList: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassList(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeClassName extends BindingNode {\r\n  #subName: string;\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeClassName.update: value is not boolean`);\r\n    }\r\n    const element = this.node as Element;\r\n    if (value) {\r\n      element.classList.add(this.subName);\r\n    } else {\r\n      element.classList.remove(this.subName);\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBindingNodeClassName: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassName(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeEvent extends BindingNode {\r\n  #subName    : string;\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#subName = this.name.slice(2); // on～\r\n    const element = node as HTMLElement;\r\n    element.addEventListener(this.subName, (e:Event) => this.handler(e));\r\n  }\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  update() {\r\n    // 何もしない\r\n  }\r\n\r\n  handler(e: Event) {\r\n    const bindingState = this.binding.bindingState;\r\n    const engine = this.binding.engine;\r\n    const stateProxy = engine.stateProxy;\r\n    const updater = engine.updater;\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n    const indexes = loopContext?.serialize().map((context) => context.listIndex.index) ?? [];\r\n    const options = this.decorates;\r\n    if (options.includes(\"preventDefault\")) {\r\n      e.preventDefault();\r\n    }\r\n    if (options.includes(\"stopPropagation\")) {\r\n      e.stopPropagation();\r\n    }\r\n    this.binding.engine.updater.addProcess(async () => {\r\n      const value = bindingState.value;\r\n      const typeOfValue = typeof value;\r\n      updater.addProcess(async () => {\r\n        if (loopContext) {\r\n          await engine.setLoopContext(loopContext, async () => {\r\n            if (typeOfValue === \"function\") {\r\n              await Reflect.apply(value, stateProxy, [e, ...indexes]);\r\n            } else {\r\n              // ToDo:error\r\n            }\r\n          });\r\n        } else {\r\n          if (typeOfValue === \"function\") {\r\n            await Reflect.apply(value, stateProxy, [e, ...indexes]);\r\n          } else {\r\n            // ToDo:error\r\n          }\r\n        }\r\n      });\r\n    });\r\n  } \r\n}\r\n\r\nexport const createBindingNodeEvent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeEvent(binding, node, name, filterFns, decorates);\r\n  }\r\n","export const DATA_BIND_ATTRIBUTE = \"data-bind\";\r\nexport const COMMENT_EMBED_MARK = \"@@:\"; // 埋め込み変数のマーク\r\nexport const COMMENT_TEMPLATE_MARK = \"@@|\"; // テンプレートのマーク\r\n","import { COMMENT_TEMPLATE_MARK } from \"../../constants.js\";\r\nimport { Filters } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\n\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\nexport class BindingNodeBlock extends BindingNode {\r\n  #id: number;\r\n  get id(): number {\r\n    return this.#id;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const id = this.node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN) ?? raiseError(\"BindingNodeBlock.id: invalid node\");\r\n    this.#id = Number(id);\r\n  }\r\n    \r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeIf extends BindingNodeBlock {\r\n  #bindContent: IBindContent;\r\n  #trueBindContents: Set<IBindContent>;\r\n  #falseBindContents: Set<IBindContent> = new Set();\r\n  #bindContents: Set<IBindContent>;\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#bindContent = createBindContent(\r\n      this.binding, \r\n      this.id, \r\n      this.binding.engine, \r\n      \"\", \r\n      null\r\n    );\r\n    this.#trueBindContents = this.#bindContents = new Set([this.#bindContent]);\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeIf.update: value is not boolean`);\r\n    }\r\n    const parentNode = this.node.parentNode;\r\n    if (parentNode == null) {\r\n      raiseError(`BindingNodeIf.update: parentNode is null`);\r\n    }\r\n    if (value) {\r\n      this.#bindContent.render();\r\n      this.#bindContent.mountAfter(parentNode, this.node.nextSibling);\r\n      this.#bindContents = this.#trueBindContents;\r\n    } else {\r\n      this.#bindContent.unmount();\r\n      this.#bindContents = this.#falseBindContents;\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBindingNodeIf: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeIf(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeFor extends BindingNodeBlock {\r\n  #bindContentsSet       : Set<IBindContent> = new Set<IBindContent>();\r\n  #bindContentByListIndex: WeakMap<IListIndex, IBindContent> = new WeakMap();\r\n  #bindContentPool       : IBindContent[] = [];\r\n  #bindContentLastIndex  : number = 0;\r\n  #lastListIndexSet      : Set<IListIndex> = new Set<IListIndex>();\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContentsSet;\r\n  }\r\n\r\n  get isFor(): boolean {\r\n    return true;\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  createBindContent(listIndex: IListIndex): IBindContent {\r\n    let bindContent: IBindContent;\r\n    if (this.#bindContentLastIndex >= 0) {\r\n      // プールの最後の要素を取得して、プールの長さをあとで縮減する\r\n      // 作るたびにプールを縮減すると、パフォーマンスが悪化するため\r\n      // プールの長さを縮減するのは、全ての要素を作った後に行う\r\n      bindContent = this.#bindContentPool[this.#bindContentLastIndex];\r\n      this.#bindContentLastIndex--;\r\n      bindContent.assignListIndex(listIndex);\r\n    } else {\r\n      bindContent = createBindContent(\r\n        this.binding, \r\n        this.id, \r\n        this.binding.engine, \r\n        this.binding.bindingState.pattern + \".*\", \r\n        listIndex);\r\n    }\r\n    // 登録\r\n    this.#bindContentByListIndex.set(listIndex, bindContent);\r\n    return bindContent;\r\n  }\r\n\r\n  deleteBindContent(bindContent: IBindContent): void {\r\n    bindContent.unmount();\r\n    bindContent.loopContext?.clearListIndex();\r\n  }\r\n\r\n  get bindContentLastIndex():number {\r\n    return this.#bindContentLastIndex;\r\n  }\r\n  set bindContentLastIndex(value:number) {\r\n    this.#bindContentLastIndex = value;\r\n  }\r\n\r\n  get poolLength():number {\r\n    return this.#bindContentPool.length;\r\n  }\r\n  set poolLength(length: number) {\r\n    if (length < 0) {\r\n      raiseError(`BindingNodeFor.setPoolLength: length is negative`);\r\n    }\r\n    this.#bindContentPool.length = length;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeFor.assignValue: value is not array`);\r\n    }\r\n    const listIndexesSet = this.binding.engine.getListIndexesSet(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex\r\n    );\r\n    if (listIndexesSet === null) {\r\n      raiseError(`BindingNodeFor.assignValue: listIndexes is not found`);\r\n    }\r\n    const newBindContensSet = new Set<IBindContent>();\r\n    let lastBindContent = null;\r\n    const parentNode = this.node.parentNode;\r\n    if (parentNode == null) {\r\n      raiseError(`BindingNodeFor.update: parentNode is null`);\r\n    }\r\n    const removeBindContentsSet = new Set<IBindContent>();\r\n    const diff = this.#lastListIndexSet.difference(listIndexesSet);\r\n    // 削除を先にする\r\n    for(const listIndex of diff) {\r\n      const bindContent = this.#bindContentByListIndex.get(listIndex);\r\n      if (bindContent) {\r\n        this.deleteBindContent(bindContent);\r\n        removeBindContentsSet.add(bindContent);\r\n      }\r\n    }\r\n    this.#bindContentPool.push(...removeBindContentsSet);\r\n\r\n    this.bindContentLastIndex = this.poolLength - 1;\r\n    for(const listIndex of listIndexesSet) {\r\n      const lastNode = lastBindContent?.getLastNode(parentNode) ?? this.node;\r\n      let bindContent = this.#bindContentByListIndex.get(listIndex);\r\n      if (typeof bindContent === \"undefined\") {\r\n        bindContent = this.createBindContent(listIndex);\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        if (lastNode.nextSibling !== bindContent.firstChildNode) {\r\n          bindContent.mountAfter(parentNode, lastNode);\r\n        }\r\n      }\r\n      newBindContensSet.add(bindContent);\r\n      lastBindContent = bindContent;\r\n    }\r\n    // プールの長さを更新する\r\n    // プールの長さは、プールの最後の要素のインデックス+1であるため、\r\n    this.poolLength = this.bindContentLastIndex + 1;\r\n    this.#bindContentsSet = newBindContensSet;\r\n    this.#lastListIndexSet = new Set<IListIndex>(listIndexesSet);\r\n  }\r\n\r\n  /**\r\n   * SWAP処理を想定\r\n   * \r\n   * @param listIndexes \r\n   * @param values \r\n   * @returns \r\n   */\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    if (typeof values[0] !== \"object\") return;\r\n    const engine = this.binding.engine;\r\n    const oldListValues = \r\n      engine.getList(\r\n        this.binding.bindingState.info, \r\n        this.binding.bindingState.listIndex\r\n      ) ?? raiseError(`BindingNodeFor.updateElements: oldValues is not found`); \r\n    const parentNode = this.node.parentNode ?? raiseError(`BindingNodeFor.update: parentNode is null`);\r\n\r\n    // DOMから削除\r\n    const currentBindContents = Array.from(this.#bindContentsSet);\r\n    const targetBindContents: IBindContent[] = [];\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const bindContent = currentBindContents[listIndex.index];\r\n      bindContent.unmount();\r\n      targetBindContents.push(bindContent);\r\n    }\r\n\r\n    // DOMに追加、listIndexを更新\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const index = listIndex.index;\r\n\r\n      const lastBindContent = currentBindContents[index - 1] ?? null;\r\n      const lastNode = lastBindContent?.lastChildNode ?? this.node;\r\n\r\n      const oldValue = oldListValues[index];\r\n      const targetIndex = values.indexOf(oldValue);\r\n      const prevBindContent = targetBindContents[targetIndex];\r\n\r\n      if (typeof prevBindContent === \"undefined\") {\r\n        // 入れ替えるBindContentがない場合は再描画\r\n        const bindContent = targetBindContents[index];\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        prevBindContent.assignListIndex(listIndex);\r\n        prevBindContent.mountAfter(parentNode, lastNode);\r\n        this.#bindContentByListIndex.set(listIndex, prevBindContent);\r\n        currentBindContents[index] = prevBindContent;\r\n      }\r\n      if (targetIndex >= 0) {\r\n        values[targetIndex] = -1;\r\n      }\r\n    }\r\n    this.#bindContentsSet = new Set<IBindContent>(currentBindContents);\r\n    engine.saveList(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex, \r\n      this.binding.bindingState.value.slice(0)\r\n    );\r\n  }\r\n}\r\n\r\nexport const createBindingNodeFor: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeFor(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DEFAULT_PROPERTY = \"textContent\";\r\n\r\ntype DefaultPropertyByElementType = {\r\n  [key:string]: string;\r\n}\r\n\r\nconst defaultPropertyByElementType:DefaultPropertyByElementType = {\r\n  \"radio\"   : \"checked\",\r\n  \"checkbox\": \"checked\",\r\n  \"button\"  : \"onclick\",\r\n}\r\n\r\n/**\r\n * HTML要素のデフォルトプロパティを取得\r\n */\r\nconst getDefaultPropertyHTMLElement = (node:Node):string => \r\n  node instanceof HTMLSelectElement || node instanceof HTMLTextAreaElement || node instanceof HTMLOptionElement ? \"value\" : \r\n  node instanceof HTMLButtonElement ? \"onclick\" : \r\n  node instanceof HTMLAnchorElement ? \"onclick\" : \r\n  node instanceof HTMLFormElement ? \"onsubmit\" : \r\n  node instanceof HTMLInputElement ? (defaultPropertyByElementType[node.type] ?? \"value\") :\r\n  DEFAULT_PROPERTY;\r\n\r\ntype DefaultPropertyByKey = {\r\n  [key:string]: string | undefined;\r\n}\r\n\r\nconst _cache: DefaultPropertyByKey = {};\r\n\r\nconst textContentProperty = (node:Node):string => DEFAULT_PROPERTY;\r\n\r\ntype GetDefaultPropertyByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>string) | undefined;\r\n}\r\n\r\nconst getDefaultPropertyByNodeType: GetDefaultPropertyByNodeType = {\r\n  HTMLElement: getDefaultPropertyHTMLElement,\r\n  SVGElement : undefined,\r\n  Text       : textContentProperty,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * バインド情報でノードプロパティを省略された場合のデフォルトのプロパティ名を取得\r\n * @param node ノード\r\n * @param nodeType ノードタイプ\r\n * @returns {string | undefined} デフォルトのプロパティ名\r\n */\r\nexport function getDefaultName(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): string | undefined {\r\n  const key = node.constructor.name + \"\\t\" + ((node as HTMLInputElement).type ?? \"\"); // type attribute\r\n  return _cache[key] ?? (_cache[key] = getDefaultPropertyByNodeType[nodeType]?.(node));\r\n}\r\n  ","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { getDefaultName } from \"../../BindingBuilder/getDefaultName.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nfunction isTwoWayBindable(element: HTMLElement): boolean {\r\n  return element instanceof HTMLInputElement || \r\n    element instanceof HTMLTextAreaElement || \r\n    element instanceof HTMLSelectElement;\r\n}\r\n\r\nconst defaultEventByName: {[key:string]: string} = {\r\n  \"value\"   : \"input\",\r\n  \"checked\" : \"change\",\r\n  \"selected\": \"change\",\r\n};\r\n\r\nclass BindingNodeProperty extends BindingNode {\r\n  get value(): any {\r\n    // @ts-ignore\r\n    return this.node[this.name];\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.filters.length; i++) {\r\n      value = this.filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n\r\n    const isElement = this.node instanceof HTMLElement;\r\n    if (!isElement) return;\r\n    if (!isTwoWayBindable(this.node)) return;\r\n    const defaultName = getDefaultName(this.node, \"HTMLElement\");\r\n    if (defaultName !== this.name) return;\r\n    if (decorates.length > 1) raiseError(`BindingNodeProperty: ${this.name} has multiple decorators`);\r\n    const event = (decorates[0]?.startsWith(\"on\") ? decorates[0]?.slice(2) : decorates[0]) ?? null;\r\n    const eventName = event ?? defaultEventByName[this.name] ?? \"readonly\";\r\n    if (eventName === \"readonly\" || eventName === \"ro\") return;\r\n    this.node.addEventListener(eventName, () => {\r\n      this.binding.updateStateValue(this.filteredValue);\r\n    });\r\n\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    // @ts-ignore\r\n    this.node[this.name] = value;\r\n  }\r\n}\r\n\r\nexport const createBindingNodeProperty: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeProperty(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeRadio extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.toString() === element.value.toString();\r\n  }\r\n}\r\n\r\nexport const createBindingNodeRadio: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeRadio(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeStyle extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLElement;\r\n    element.style.setProperty(this.subName, value.toString());\r\n  }\r\n}\r\n\r\nexport const createBindingNodeStyle: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeStyle(binding, node, name, filterFns, decorates);\r\n  }\r\n","\r\nconst symbolName = \"componentState\";\r\n\r\nexport const RenderSymbol : unique symbol = Symbol.for(`${symbolName}.render`);\r\nexport const BindParentComponentSymbol : unique symbol = Symbol.for(`${symbolName}.bindParentComponent`);\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { RenderSymbol } from \"../../ComponentState/symbols.js\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { StructiveComponent } from \"../../WebComponents/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeComponent extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  init(): void {\r\n    const engine = this.binding.engine;\r\n    let bindings = engine.bindingsByComponent.get(this.node as StructiveComponent);\r\n    if (typeof bindings === \"undefined\") {\r\n      bindings = new Set<IBinding>();\r\n      engine.bindingsByComponent.set(this.node as StructiveComponent, bindings);\r\n    }\r\n    bindings.add(this.binding);\r\n  }\r\n\r\n  assignValue(value: any): void {\r\n    const component = this.node as StructiveComponent;\r\n    component.state[RenderSymbol](this.subName, value);\r\n  }\r\n\r\n}\r\n\r\nexport const createBindingNodeComponent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeComponent(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createBindingNodeAttribute } from \"../DataBinding/BindingNode/BindingNodeAttribute.js\";\r\nimport { createBindingNodeCheckbox } from \"../DataBinding/BindingNode/BindingNodeCheckbox.js\";\r\nimport { createBindingNodeClassList } from \"../DataBinding/BindingNode/BindingNodeClassList.js\";\r\nimport { createBindingNodeClassName } from \"../DataBinding/BindingNode/BindingNodeClassName.js\";\r\nimport { createBindingNodeEvent } from \"../DataBinding/BindingNode/BindingNodeEvent.js\";\r\nimport { createBindingNodeIf } from \"../DataBinding/BindingNode/BindingNodeIf.js\";\r\nimport { createBindingNodeFor } from \"../DataBinding/BindingNode/BindingNodeFor.js\";\r\nimport { createBindingNodeProperty } from \"../DataBinding/BindingNode/BindingNodeProperty.js\";\r\nimport { createBindingNodeRadio } from \"../DataBinding/BindingNode/BindingNodeRadio.js\";\r\nimport { createBindingNodeStyle } from \"../DataBinding/BindingNode/BindingNodeStyle.js\";\r\nimport { CreateBindingNodeByNodeFn, CreateBindingNodeFn } from \"../DataBinding/BindingNode/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\nimport { createBindingNodeComponent } from \"../DataBinding/BindingNode/BindingNodeComponent.js\";\r\n\r\ntype NodePropertyConstructorByName = {[key:string]:CreateBindingNodeFn};\r\ntype NodePropertyConstructorByNameByIsComment = {[key:number]:NodePropertyConstructorByName};\r\n\r\nconst nodePropertyConstructorByNameByIsComment:NodePropertyConstructorByNameByIsComment = {\r\n  0: {\r\n    \"class\"   : createBindingNodeClassList,\r\n    \"checkbox\": createBindingNodeCheckbox,\r\n    \"radio\"   : createBindingNodeRadio,\r\n  },\r\n  1: {\r\n    \"if\" : createBindingNodeIf,\r\n  },\r\n};\r\n\r\ntype NodePropertyConstructorByFirstName = {[key:string]:CreateBindingNodeFn};\r\n\r\nconst nodePropertyConstructorByFirstName:NodePropertyConstructorByFirstName = {\r\n  \"class\": createBindingNodeClassName,\r\n  \"attr\" : createBindingNodeAttribute,\r\n  \"style\": createBindingNodeStyle,\r\n  \"state\": createBindingNodeComponent,\r\n//  \"popover\": PopoverTarget,\r\n//  \"commandfor\": CommandForTarget,\r\n};\r\n\r\nfunction _getBindingNodeCreator(isComment:boolean, isElement: boolean, propertyName: string): CreateBindingNodeFn {\r\n  const bindingNodeCreatorByName = nodePropertyConstructorByNameByIsComment[isComment ? 1 : 0][propertyName];\r\n  if (typeof bindingNodeCreatorByName !== \"undefined\") {\r\n    return bindingNodeCreatorByName;\r\n  }\r\n  if (isComment && propertyName === \"for\") {\r\n    return createBindingNodeFor;\r\n  }\r\n  if (isComment) {\r\n    raiseError(`getBindingNodeCreator: unknown node property ${propertyName}`);\r\n  }\r\n  const nameElements = propertyName.split(\".\");\r\n  const bindingNodeCreatorByFirstName = nodePropertyConstructorByFirstName[nameElements[0]];\r\n  if (typeof bindingNodeCreatorByFirstName !== \"undefined\") {\r\n    return bindingNodeCreatorByFirstName;\r\n  }\r\n  if (isElement) {\r\n    if (propertyName.startsWith(\"on\")) {\r\n      return createBindingNodeEvent;\r\n    } else {\r\n      return createBindingNodeProperty;\r\n    }\r\n  } else {\r\n    return createBindingNodeProperty;\r\n  }\r\n}\r\n\r\nconst _cache: {[key:string]:CreateBindingNodeFn} = {};\r\n\r\n/**\r\n * バインドのノードプロパティの生成関数を取得する\r\n * @param node ノード\r\n * @param propertyName プロパティ名\r\n * @returns {CreateBindingNodeFn} ノードプロパティのコンストラクタ\r\n */\r\nexport function getBindingNodeCreator(\r\n  node        : Node, \r\n  propertyName: string,\r\n  filterTexts : IFilterText[],\r\n  decorates   : string[]\r\n): CreateBindingNodeByNodeFn {\r\n  const isComment = node instanceof Comment;\r\n  const isElement = node instanceof Element;\r\n  const key = isComment + \"\\t\" + isElement + \"\\t\" + propertyName;\r\n  const fn = _cache[key] ?? (_cache[key] = _getBindingNodeCreator(isComment, isElement, propertyName));\r\n  return fn(propertyName, filterTexts, decorates);\r\n}\r\n","\r\nconst symbolName = \"state\";\r\n\r\nexport const GetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.GetByRef`);\r\nexport const SetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.SetByRef`);\r\nexport const SetCacheableSymbol        : unique symbol = Symbol.for(`${symbolName}.SetCacheable`);\r\nexport const ConnectedCallbackSymbol   : unique symbol = Symbol.for(`${symbolName}.ConnectedCallback`);\r\nexport const DisconnectedCallbackSymbol: unique symbol = Symbol.for(`${symbolName}.DisconnectedCallback`);\r\nexport const ResolveSymbol             : unique symbol = Symbol.for(`${symbolName}.Resolve`);\r\nexport const GetAllSymbol              : unique symbol = Symbol.for(`${symbolName}.GetAll`);\r\n","import { raiseError } from '../utils.js';\r\nimport { IStructuredPathInfo } from './types';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IStructuredPathInfo } = {};\r\n//const _cache: Map<string, IStructuredPathInfo> = new Map();\r\n\r\n/**\r\n * パターン情報を取得します\r\n * @param pattern パターン\r\n * @returns {IPatternInfo} パターン情報\r\n */\r\nclass StructuredPathInfo implements IStructuredPathInfo {\r\n  static id : number = 0;\r\n  id = ++StructuredPathInfo.id;\r\n  pattern;\r\n  pathSegments;\r\n  lastSegment;\r\n  cumulativePaths;\r\n  cumulativeInfos;\r\n  cumulativeInfoSet;\r\n  wildcardPaths;\r\n  wildcardInfos;\r\n  wildcardInfoSet;\r\n  wildcardParentPaths;\r\n  wildcardParentInfos;\r\n  wildcardParentInfoSet;\r\n  lastWildcardPath;\r\n  lastWildcardInfo;\r\n  parentPath;\r\n  parentInfo;\r\n  wildcardCount;\r\n  children = {};\r\n\r\n  constructor(pattern: string) {\r\n    const getPattern = (_pattern: string): IStructuredPathInfo => {\r\n      return (pattern === _pattern) ? this : getStructuredPathInfo(_pattern);\r\n    };\r\n    const pathSegments = pattern.split(\".\");\r\n    const cumulativePaths = [];\r\n    const cumulativeInfos: IStructuredPathInfo[] = [];\r\n    const wildcardPaths = [];\r\n    const wildcardInfos = [];\r\n    const wildcardParentPaths = [];\r\n    const wildcardParentInfos = [];\r\n    let currentPatternPath = \"\", prevPatternPath = \"\";\r\n    let wildcardCount = 0;\r\n    for(let i = 0; i < pathSegments.length; i++) {\r\n      currentPatternPath += pathSegments[i];\r\n      if (pathSegments[i] === \"*\") {\r\n        wildcardPaths.push(currentPatternPath);\r\n        wildcardInfos.push(getPattern(currentPatternPath));\r\n        wildcardParentPaths.push(prevPatternPath);\r\n        wildcardParentInfos.push(getPattern(prevPatternPath));\r\n        wildcardCount++;\r\n      }\r\n      cumulativePaths.push(currentPatternPath);\r\n      cumulativeInfos.push(getPattern(currentPatternPath));\r\n      prevPatternPath = currentPatternPath;\r\n      currentPatternPath += \".\";\r\n    }\r\n    const lastWildcardPath = wildcardPaths.length > 0 ? wildcardPaths[wildcardPaths.length - 1] : null;\r\n    const parentPath = cumulativePaths.length > 1 ? cumulativePaths[cumulativePaths.length - 2] : null;\r\n    this.pattern = pattern;\r\n    this.pathSegments = pathSegments;\r\n    this.lastSegment = pathSegments[pathSegments.length - 1];\r\n    this.cumulativePaths = cumulativePaths;\r\n    this.cumulativeInfos = cumulativeInfos;\r\n    this.cumulativeInfoSet = new Set(cumulativeInfos);\r\n    this.wildcardPaths = wildcardPaths;\r\n    this.wildcardInfos = wildcardInfos;\r\n    this.wildcardInfoSet = new Set(wildcardInfos);\r\n    this.wildcardParentPaths = wildcardParentPaths;\r\n    this.wildcardParentInfos = wildcardParentInfos;\r\n    this.wildcardParentInfoSet = new Set(wildcardParentInfos);\r\n    this.lastWildcardPath = lastWildcardPath;\r\n    this.lastWildcardInfo = lastWildcardPath ? getPattern(lastWildcardPath) : null;\r\n    this.parentPath = parentPath;\r\n    this.parentInfo = parentPath ? getPattern(parentPath) : null;\r\n    this.wildcardCount = wildcardCount;\r\n    if (this.parentInfo) {\r\n      this.parentInfo.children[this.lastSegment] = this;\r\n    }\r\n  }\r\n}\r\n\r\nconst reservedWords = new Set([\r\n  \"constructor\", \"prototype\", \"__proto__\", \"toString\",\r\n  \"valueOf\", \"hasOwnProperty\", \"isPrototypeOf\",\r\n  \"watch\", \"unwatch\", \"eval\", \"arguments\",\r\n  \"let\", \"var\", \"const\", \"class\", \"function\",\r\n  \"null\", \"true\", \"false\", \"new\", \"return\",\r\n]);\r\n\r\nexport function getStructuredPathInfo(structuredPath: string): IStructuredPathInfo {\r\n  let info: IStructuredPathInfo | undefined;\r\n  info = _cache[structuredPath];\r\n  if (typeof info !== \"undefined\") {\r\n    return info;\r\n  }\r\n  if (reservedWords.has(structuredPath)) {\r\n    raiseError(`getStructuredPathInfo: pattern is reserved word: ${structuredPath}`);\r\n  }\r\n  return (_cache[structuredPath] = new StructuredPathInfo(structuredPath));\r\n}\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { GetByRefSymbol, SetByRefSymbol } from \"../../StateClass/symbols.js\";\r\nimport { IStateProxy } from \"../../StateClass/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\nclass BindingState implements IBindingState {\r\n  #binding     : IBinding;\r\n  #pattern     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return this.#pattern;\r\n  }\r\n  get info() {\r\n    return this.#info;\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#pattern = pattern;\r\n    this.#info = getStructuredPathInfo(pattern);\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.#state[GetByRefSymbol](this.info, this.listIndex);\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    if (this.info.wildcardCount > 0) {\r\n      const lastWildcardPath = this.info.lastWildcardPath ?? \r\n        raiseError(`BindingState.init: wildcardLastParentPath is null`);\r\n      const loopContext = this.binding.parentBindContent.loopContext?.find(lastWildcardPath) ?? \r\n        raiseError(`BindingState.init: loopContext is null`);\r\n      this.#listIndexRef = loopContext.listIndexRef;\r\n    }\r\n    this.binding.engine.saveBinding(this.info, this.listIndex, this.binding);\r\n  }\r\n  assignValue(value:any) {\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n    const engine = this.binding.engine;\r\n    const stateProxy = engine.stateProxy;\r\n    const bindingState = this.binding.bindingState;\r\n    if (loopContext) {\r\n      engine.setLoopContext(loopContext, async () => {\r\n        // @ts-ignore\r\n        stateProxy[SetByRefSymbol](bindingState.info, bindingState.listIndex, value);\r\n      });\r\n    } else {\r\n      // @ts-ignore\r\n      stateProxy[SetByRefSymbol](bindingState.info, bindingState.listIndex, value);\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBindingState: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n    return new BindingState(binding, state, name, filterFns);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStateProxy } from \"../../StateClass/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\nclass BindingStateIndex implements IBindingState {\r\n  #binding     : IBinding;\r\n  #indexNumber : number;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get info() {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    const indexNumber = Number(pattern.slice(1));\r\n    if (isNaN(indexNumber)) {\r\n      raiseError(\"BindingStateIndex: pattern is not a number\");\r\n    }\r\n    this.#indexNumber = indexNumber;\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.listIndex?.index ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext ??\r\n      raiseError(`BindingState.init: loopContext is null`);\r\n    const loopContexts = loopContext.serialize();\r\n    this.#listIndexRef = loopContexts[this.#indexNumber - 1].listIndexRef ??\r\n      raiseError(`BindingState.init: listIndexRef is null`);\r\n    const listIndex = this.listIndex ?? raiseError(\"listIndex is null\");\r\n    const bindings = this.binding.engine.bindingsByListIndex.get(listIndex);\r\n    if (bindings === undefined) {\r\n      this.binding.engine.bindingsByListIndex.set(listIndex, new Set([this.binding]));\r\n    } else {\r\n      bindings.add(this.binding);\r\n    }\r\n  }\r\n  assignValue(value:any): void {\r\n    raiseError(\"BindingStateIndex: assignValue is not implemented\");\r\n  }\r\n}\r\n\r\nexport const createBindingStateIndex: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n\r\n    return new BindingStateIndex(binding, state, name, filterFns);\r\n  }\r\n","import { createBindingState } from \"../DataBinding/BindingState/BindingState.js\";\r\nimport { createBindingStateIndex } from \"../DataBinding/BindingState/BindingStateIndex.js\";\r\nimport { CreateBindingStateByStateFn } from \"../DataBinding/BindingState/types\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nconst ereg = new RegExp(/^\\$\\d+$/);\r\n\r\nexport function getBindingStateCreator(\r\n  name       : string, \r\n  filterTexts: IFilterText[]\r\n): CreateBindingStateByStateFn {\r\n  if (ereg.test(name)) {\r\n    return createBindingStateIndex(name, filterTexts);\r\n  } else {\r\n    return createBindingState(name, filterTexts);\r\n  }\r\n}","import { COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst COMMENT_EMBED_MARK_LEN = COMMENT_EMBED_MARK.length;\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\nconst getTextFromContent   = (node:Node):string        => node.textContent?.slice(COMMENT_EMBED_MARK_LEN).trim() ?? \"\";\r\nconst getTextFromAttribute = (node:HTMLElement):string => node.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\nconst getTextFromTemplate  = (node:Node):string        => {\r\n  const text = node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN).trim(); \r\n  const id = Number(text);\r\n  const template = getTemplateById(id) ?? raiseError(`Template not found: ${text}`);\r\n  return template.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n};\r\nconst getTextFromSVGElement = (node:SVGElement):string => node.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n\r\nconst getTextByNodeType = {\r\n  \"Text\":        getTextFromContent,\r\n  \"HTMLElement\": getTextFromAttribute,\r\n  \"Template\":    getTextFromTemplate,\r\n  \"SVGElement\":  getTextFromSVGElement\r\n};\r\n\r\nexport function getDataBindText(nodeType: NodeType, node: Node): string {\r\n  const bindText = getTextByNodeType[nodeType](node as any) ?? \"\";\r\n  if (nodeType === \"Text\") {\r\n    return \"textContent:\" + bindText;\r\n  } else {\r\n    return bindText;\r\n  }\r\n}\r\n","import { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst createNodeKey = (node:Node):string => node.constructor.name + \"\\t\" + ((node instanceof Comment) ? (node.textContent?.[2] ?? \"\") : \"\");\r\n\r\ntype NodeTypeByNodeKey = {\r\n  [nodeKey:string]:NodeType;\r\n};\r\n\r\nconst nodeTypeByNodeKey:NodeTypeByNodeKey = {};\r\n\r\nconst getNodeTypeByNode = (node:Node):NodeType =>\r\n  (node instanceof Comment && node.textContent?.[2] === \":\") ? \"Text\" : \r\n  (node instanceof HTMLElement) ? \"HTMLElement\" :\r\n  (node instanceof Comment && node.textContent?.[2] === \"|\") ? \"Template\" : \r\n  (node instanceof SVGElement) ? \"SVGElement\" : raiseError(`Unknown NodeType: ${node.nodeType}`);\r\n\r\n/**\r\n * ノードのタイプを取得\r\n * @param node ノード\r\n * @param nodeKey ノードキー\r\n * @returns {NodeType} ノードタイプ\r\n */\r\nexport function getNodeType(\r\n  node   : Node, \r\n  nodeKey: string = createNodeKey(node)\r\n): NodeType {\r\n  return nodeTypeByNodeKey[nodeKey] ?? (nodeTypeByNodeKey[nodeKey] = getNodeTypeByNode(node));\r\n}\r\n","import { IFilterText, IBindText } from \"./types\";\r\n\r\nconst trim = (s:string):string => s.trim();\r\n\r\nconst has = (s:string):boolean => s.length > 0; // check length\r\n\r\nconst re = new RegExp(/^#(.*)#$/);\r\nconst decode = (s:string):string => {\r\n  const m = re.exec(s);\r\n  return m ? decodeURIComponent(m[1]) : s;\r\n};\r\n\r\n/**\r\n * parse filter part\r\n * \"eq,100|falsey\" ---> [Filter(eq, [100]), Filter(falsey)]\r\n */\r\nconst parseFilter = (text:string): IFilterText => {\r\n  const [name, ...options] = text.split(\",\").map(trim);\r\n  return {name, options:options.map(decode)};\r\n};\r\n\r\ntype ReturnParseStateProperty = {property:string,filters:IFilterText[]};\r\n/**\r\n * parse expression\r\n * \"value|eq,100|falsey\" ---> [\"value\", Filter[]]\r\n */\r\nconst parseProperty = (text:string): ReturnParseStateProperty => {\r\n  const [property, ...filterTexts] = text.split(\"|\").map(trim);\r\n  return {property, filters:filterTexts.map(parseFilter)};\r\n};\r\n\r\n/**\r\n * parse expressions\r\n * \"textContent:value|eq,100|falsey\" ---> [\"textContent\", \"value\", Filter[eq, falsey]]\r\n */\r\nconst parseExpression = (expression:string): IBindText => {\r\n  const [ bindExpression, decoratesExpression = null ] = expression.split(\"@\").map(trim);\r\n  const decorates = decoratesExpression ? decoratesExpression.split(\",\").map(trim) : [];\r\n  const [nodePropertyText, statePropertyText] = bindExpression.split(\":\").map(trim);\r\n  const { property:nodeProperty, filters:inputFilterTexts } = parseProperty(nodePropertyText);\r\n  const { property:stateProperty, filters:outputFilterTexts } = parseProperty(statePropertyText);\r\n  return { nodeProperty, stateProperty, inputFilterTexts, outputFilterTexts, decorates };\r\n};\r\n\r\n/**\r\n * parse bind text and return BindText[]\r\n */\r\nconst parseExpressions = (text:string): IBindText[] => {\r\n  return text.split(\";\").map(trim).filter(has).map(s => parseExpression(s));\r\n};\r\n\r\nconst cache:{[key:string]: IBindText[]} = {};\r\n\r\n/**\r\n * 取得したバインドテキスト(getBindTextByNodeType)を解析して、バインド情報を取得する\r\n * @param text バインドテキスト\r\n * @param defaultName デフォルト名\r\n * @returns {IBindText[]} バインド情報\r\n */\r\nexport function parseBindText(\r\n  text: string\r\n): IBindText[] {\r\n  if (text.trim() === \"\") {\r\n    return [];\r\n  }\r\n  return cache[text] ?? (cache[text] = parseExpressions(text));\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DATASET_BIND_PROPERTY = 'data-bind';\r\n\r\nconst removeAttributeFromElement = (node:Node):void => {\r\n  const element = node as Element;\r\n  element.removeAttribute(DATASET_BIND_PROPERTY);\r\n}\r\n\r\ntype RemoveAttributeByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>void) | undefined;\r\n}\r\n\r\nconst removeAttributeByNodeType:RemoveAttributeByNodeType = {\r\n  HTMLElement: removeAttributeFromElement,\r\n  SVGElement : removeAttributeFromElement,\r\n  Text       : undefined,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * ノードからdata-bind属性を削除\r\n * @param node ノード\r\n * @param nodeType ノードタイプ\r\n * @returns {Node} ノード\r\n */\r\nexport function removeDataBindAttribute(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n):void {\r\n  return removeAttributeByNodeType[nodeType]?.(node);\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst replaceTextNodeText = (node:Node):Node => {\r\n  const textNode = document.createTextNode(\"\");\r\n  node.parentNode?.replaceChild(textNode, node);\r\n  return textNode;\r\n}\r\n\r\ntype ReplaceTextNodeFn = {\r\n  [key in NodeType]: ((node:Node)=>Node) | undefined;\r\n}\r\n\r\nconst replaceTextNodeFn:ReplaceTextNodeFn = {\r\n  Text       : replaceTextNodeText,\r\n  HTMLElement: undefined,\r\n  Template   : undefined,\r\n  SVGElement : undefined\r\n}\r\n\r\n/**\r\n * コメントノードをテキストノードに置き換える\r\n * @param node ノード\r\n * @param nodeType ノードタイプ\r\n * @returns {Node} ノード\r\n */\r\nexport function replaceTextNodeFromComment(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): Node {\r\n  return replaceTextNodeFn[nodeType]?.(node) ?? node;\r\n}\r\n","import { getAbsoluteNodePath } from \"./getAbsoluteNodePath.js\";\r\nimport { getBindingNodeCreator } from \"./getBindingNodeCreator.js\";\r\nimport { getBindingStateCreator } from \"./getBindingStateCreator.js\";\r\nimport { getDataBindText } from \"./getDataBindText.js\";\r\nimport { getNodeType } from \"./getNodeType.js\";\r\nimport { parseBindText } from \"./parseBindText.js\";\r\nimport { removeDataBindAttribute } from \"./removeDataBindAttribute.js\";\r\nimport { replaceTextNodeFromComment } from \"./replaceTextNodeFromComment.js\";\r\nimport { IBindingCreator, IBindText, IDataBindAttributes, NodePath, NodeType } from \"./types\";\r\n\r\nclass DataBindAttributes implements IDataBindAttributes {\r\n  nodeType     : NodeType; // ノードの種別\r\n  nodePath     : NodePath; // ノードのルート\r\n  bindTexts    : IBindText[]; // BINDテキストの解析結果\r\n  creatorByText: Map<IBindText, IBindingCreator> = new Map(); // BINDテキストからバインディングクリエイターを取得\r\n  constructor(node: Node) {\r\n    this.nodeType = getNodeType(node);\r\n    const text = getDataBindText(this.nodeType, node);\r\n    // CommentNodeをTextに置換、template.contentの内容が書き換わることに注意\r\n    node = replaceTextNodeFromComment(node, this.nodeType);\r\n    // data-bind属性を削除する\r\n    removeDataBindAttribute(node, this.nodeType);\r\n\r\n    this.nodePath = getAbsoluteNodePath(node);\r\n    this.bindTexts = parseBindText(text);\r\n    for(let i = 0; i < this.bindTexts.length; i++) {\r\n      const bindText = this.bindTexts[i];\r\n      const creator: IBindingCreator = {\r\n        createBindingNode : getBindingNodeCreator(\r\n          node, \r\n          bindText.nodeProperty, \r\n          bindText.inputFilterTexts,\r\n          bindText.decorates\r\n        ),\r\n        createBindingState: getBindingStateCreator(\r\n          bindText.stateProperty, \r\n          bindText.outputFilterTexts\r\n        ),\r\n      }\r\n      this.creatorByText.set(bindText, creator);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function createDataBindAttributes(node: Node): IDataBindAttributes {\r\n  return new DataBindAttributes(node);\r\n}","import { NodePath } from \"./types\";\r\n\r\nexport function getAbsoluteNodePath(node: Node): NodePath {\r\n  let routeIndexes: NodePath = [];\r\n  while(node.parentNode !== null) {\r\n    const childNodes = Array.from(node.parentNode.childNodes) as Node[];\r\n    routeIndexes = [ childNodes.indexOf(node), ...routeIndexes ];\r\n    node = node.parentNode;\r\n  }\r\n  return routeIndexes;\r\n}","import { DATA_BIND_ATTRIBUTE, COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK } from \"../constants.js\";\r\n\r\n/**\r\n * \"@@:\"もしくは\"@@|\"で始まるコメントノードを取得する\r\n */\r\nfunction isCommentNode(node: Node): boolean {\r\n  return node instanceof Comment && (\r\n    (node.textContent?.indexOf(COMMENT_EMBED_MARK) === 0) || (node.textContent?.indexOf(COMMENT_TEMPLATE_MARK) === 0)\r\n  );\r\n} \r\n\r\nexport function getNodesHavingDataBind(root: Node): Node[] {\r\n  const nodes: Node[] = [];\r\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT, {\r\n    acceptNode(node:Node) {\r\n      return (node instanceof Element) ? \r\n        (node.hasAttribute(DATA_BIND_ATTRIBUTE) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP)\r\n        : (isCommentNode(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP);\r\n    }\r\n  });\r\n  while (walker.nextNode()) {\r\n    nodes.push(walker.currentNode);\r\n  }\r\n  return nodes;\r\n}\r\n\r\n","import { createDataBindAttributes } from \"./createDataBindAttributes.js\";\r\nimport { getNodesHavingDataBind } from \"./getNodesHavingDataBind.js\";\r\nimport { IDataBindAttributes } from \"./types\";\r\n\r\nconst listDataBindAttributesById: {[key:number]:IDataBindAttributes[]} = {};\r\n\r\nconst listPathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nconst pathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nfunction getDataBindAttributesFromTemplate(content: DocumentFragment): IDataBindAttributes[] {\r\n  const nodes = getNodesHavingDataBind(content);\r\n  return nodes.map(node => createDataBindAttributes(node));\r\n}\r\n\r\nexport function registerDataBindAttributes(\r\n  id     : number, \r\n  content: DocumentFragment,\r\n  rootId : number = id\r\n): IDataBindAttributes[] {\r\n  const dataBindAttributes = getDataBindAttributesFromTemplate(content);\r\n  const paths = pathsSetById[rootId] ?? (pathsSetById[rootId] = new Set<string>());\r\n  const listPaths = listPathsSetById[rootId] ?? (listPathsSetById[rootId] = new Set<string>());\r\n  for(let i = 0; i < dataBindAttributes.length; i++) {\r\n    const attribute = dataBindAttributes[i];\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      paths.add(bindText.stateProperty);\r\n      if (bindText.nodeProperty === \"for\") {\r\n        listPaths.add(bindText.stateProperty);\r\n      }\r\n    }\r\n  }\r\n  return listDataBindAttributesById[id] = dataBindAttributes;\r\n}\r\n\r\nexport const getDataBindAttributesById = (id: number): IDataBindAttributes[] => {\r\n  return listDataBindAttributesById[id];\r\n}\r\n\r\nexport const getListPathsSetById = (id: number): Set<string> => {\r\n  return listPathsSetById[id] ?? [];\r\n};\r\n\r\nexport const getPathsSetById = (id: number): Set<string> => {\r\n  return pathsSetById[id] ?? [];\r\n};","import { registerDataBindAttributes } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { removeEmptyTextNodes } from \"./removeEmptyTextNodes.js\";\r\n\r\nconst templateById:Record<number, HTMLTemplateElement> = {};\r\n\r\nexport function registerTemplate(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number\r\n): number {\r\n  removeEmptyTextNodes(template.content);\r\n  registerDataBindAttributes(id, template.content, rootId);  \r\n  templateById[id] = template;\r\n  return id;\r\n}\r\n\r\nexport function getTemplateById(id: number): HTMLTemplateElement {\r\n  return templateById[id] ?? raiseError(`getTemplateById: template not found: ${id}`);\r\n}","\r\nexport function removeEmptyTextNodes(content:DocumentFragment):void {\r\n  Array.from(content.childNodes).forEach(node => {\r\n    if (node.nodeType === Node.TEXT_NODE && !(node.nodeValue ?? \"\").trim()) {\r\n      content.removeChild(node);\r\n    }\r\n  });  \r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { CreateBindingNodeByNodeFn, IBindingNode } from \"./BindingNode/types\";\r\nimport { CreateBindingStateByStateFn, IBindingState } from \"./BindingState/types\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\n\r\nclass Binding implements IBinding {\r\n  parentBindContent: IBindContent;\r\n  node             : Node;\r\n  engine           : IComponentEngine;\r\n  bindingNode      : IBindingNode;\r\n  bindingState     : IBindingState;\r\n  version          : number | undefined;\r\n  constructor(\r\n    parentBindContent : IBindContent,\r\n    node              : Node,\r\n    engine            : IComponentEngine,\r\n    createBindingNode : CreateBindingNodeByNodeFn, \r\n    createBindingState: CreateBindingStateByStateFn,\r\n  ) {\r\n    this.parentBindContent = parentBindContent\r\n    this.node = node;\r\n    this.engine = engine\r\n    this.bindingNode = createBindingNode(this, node, engine.inputFilters);\r\n    this.bindingState = createBindingState(this, engine.stateProxy, engine.outputFilters);\r\n  }\r\n\r\n  get bindContents() {\r\n    return this.bindingNode.bindContents;\r\n  }\r\n\r\n  init() {\r\n    this.bindingNode.init();\r\n    this.bindingState.init();\r\n  }\r\n\r\n  render() {\r\n    if (this.version !== this.engine.updater.version) {\r\n      try {\r\n        this.bindingNode.update();\r\n      } finally {\r\n        this.version = this.engine.updater.version;\r\n      }\r\n    }\r\n  }\r\n\r\n  updateStateValue(value: any) {\r\n    const engine = this.engine;\r\n    const bindingState = this.bindingState;\r\n    engine.updater.addProcess(() => {\r\n      return bindingState.assignValue(value);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createBinding(\r\n  parentBindContent : IBindContent,\r\n  node              : Node, \r\n  engine            : IComponentEngine, \r\n  createBindingNode : CreateBindingNodeByNodeFn, \r\n  createBindingState: CreateBindingStateByStateFn\r\n): IBinding {\r\n  return new Binding(\r\n    parentBindContent, \r\n    node, \r\n    engine, \r\n    createBindingNode, \r\n    createBindingState\r\n  );\r\n}","import { IBindContent } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { ILoopContext } from \"./types\";\r\n\r\nclass LoopContext implements ILoopContext {\r\n  #path     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null;\r\n  #bindContent : IBindContent;\r\n  constructor(\r\n    path    : string | null,\r\n    listIndex  : IListIndex,\r\n    bindContent: IBindContent\r\n  ) {\r\n    this.#path = path ?? raiseError(\"name is required\");\r\n    this.#info = getStructuredPathInfo(this.#path);\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    this.#bindContent = bindContent;\r\n  }\r\n  get path(): string {\r\n    return this.#path;\r\n  }\r\n  get info(): IStructuredPathInfo {\r\n    return this.#info;\r\n  }\r\n  get listIndex(): IListIndex {\r\n    return this.#listIndexRef?.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get listIndexRef(): WeakRef<IListIndex> {\r\n    return this.#listIndexRef ?? raiseError(\"listIndexRef is null\");\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    // 構造は変わらないので、#parentLoopContext、#cacheはクリアする必要はない\r\n  }\r\n  clearListIndex():void {\r\n    this.#listIndexRef = null;\r\n  }\r\n  get bindContent(): IBindContent {\r\n    return this.#bindContent;\r\n  }\r\n\r\n  #parentLoopContext: ILoopContext | null | undefined;\r\n  get parentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#parentLoopContext === \"undefined\") {\r\n      let currentBinding: IBindContent | null = this.bindContent;\r\n      while(currentBinding !== null) {\r\n        if (currentBinding.loopContext !== null && currentBinding.loopContext !== this) {\r\n          this.#parentLoopContext = currentBinding.loopContext;\r\n          break;\r\n        }\r\n        currentBinding = currentBinding.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      if (typeof this.#parentLoopContext === \"undefined\") this.#parentLoopContext = null;\r\n    }\r\n    return this.#parentLoopContext;\r\n  }\r\n\r\n  #cache:Record<string, ILoopContext | null> = {};\r\n  find(name: string): ILoopContext | null {\r\n    let loopContext = this.#cache[name];\r\n    if (typeof loopContext === \"undefined\") {\r\n      let currentLoopContext: ILoopContext | null = this;\r\n      while(currentLoopContext !== null) {\r\n        if (currentLoopContext.path === name) break;\r\n        currentLoopContext = currentLoopContext.parentLoopContext;\r\n      }\r\n      loopContext = this.#cache[name] = currentLoopContext;\r\n    }\r\n    return loopContext;\r\n  }\r\n\r\n  walk(callback: (loopContext: ILoopContext) => void): void {\r\n    let currentLoopContext: ILoopContext | null = this;\r\n    while(currentLoopContext !== null) {\r\n      callback(currentLoopContext);\r\n      currentLoopContext = currentLoopContext.parentLoopContext;\r\n    }\r\n  }\r\n\r\n  serialize(): ILoopContext[] {\r\n    const results: ILoopContext[] = [];\r\n    this.walk((loopContext) => {\r\n      results.unshift(loopContext);\r\n    });\r\n    return results;\r\n  }\r\n\r\n}\r\n\r\n// 生成されたあと、IBindContentのloopContextに登録される\r\n// IBindContentにずっと保持される\r\nexport function createLoopContext(\r\n  pattern: string | null,\r\n  listIndex: IListIndex,\r\n  bindContent: IBindContent\r\n): ILoopContext {\r\n  return new LoopContext(pattern, listIndex, bindContent);\r\n}","import { IBinding } from \"../DataBinding/types\";\r\n\r\nexport function render(bindings: IBinding[]) {\r\n  const bindingsWithSelectElement = [];\r\n  for(let i = 0; i < bindings.length; i++) {\r\n    const binding = bindings[i];\r\n    if (binding.bindingNode.isSelectElement) {\r\n      bindingsWithSelectElement.push(binding);\r\n    } else {\r\n      binding.render();\r\n    }\r\n  }\r\n  for(let i = 0; i < bindingsWithSelectElement.length; i++) {\r\n    bindingsWithSelectElement[i].render();\r\n  }\r\n}\r\n","import { resolveNodeFromPath } from \"../BindingBuilder/resolveNodeFromPath.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { createBinding } from \"./Binding.js\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\nimport { createLoopContext } from \"../LoopContext/createLoopContext.js\";\r\nimport { render } from \"../Render/render.js\";\r\nimport { getDataBindAttributesById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\n\r\nfunction createContent(id: number): DocumentFragment {\r\n  const template = getTemplateById(id) ?? \r\n    raiseError(`BindContent: template is not found: ${id}`);\r\n  return document.importNode(template.content, true);\r\n}\r\n\r\nfunction createBindings(\r\n  bindContent: IBindContent, \r\n  id         : number, \r\n  engine     : IComponentEngine, \r\n  content    : DocumentFragment\r\n): IBinding[] {\r\n  const attributes = getDataBindAttributesById(id) ?? \r\n    raiseError(`BindContent: data-bind is not set`);\r\n  const bindings: IBinding[] = [];\r\n  for(let i = 0; i < attributes.length; i++) {\r\n    const attribute = attributes[i];\r\n    const node = resolveNodeFromPath(content, attribute.nodePath) ?? \r\n      raiseError(`BindContent: node is not found: ${attribute.nodePath}`);\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      const creator = attribute.creatorByText.get(bindText) ?? \r\n        raiseError(`BindContent: creator is not found: ${bindText}`);\r\n      const binding = createBinding(\r\n        bindContent, \r\n        node, \r\n        engine, \r\n        creator.createBindingNode, \r\n        creator.createBindingState\r\n      );\r\n      bindings.push(binding);\r\n    }\r\n  }\r\n  return bindings;\r\n}\r\n\r\nclass BindContent implements IBindContent {\r\n  loopContext  : ILoopContext | null;\r\n  parentBinding: IBinding | null;\r\n  childNodes   : Node[];\r\n  fragment     : DocumentFragment;\r\n  engine       : IComponentEngine | undefined;\r\n  #id;\r\n  get id() {\r\n    return this.#id;\r\n  }\r\n  get isMounted() {\r\n    return this.childNodes.length > 0 && this.childNodes[0].parentNode !== this.fragment;\r\n  }\r\n  get firstChildNode() {\r\n    return this.childNodes[0] ?? null;\r\n  }\r\n  get lastChildNode() {\r\n    return this.childNodes[this.childNodes.length - 1] ?? null;\r\n  }\r\n  getLastNode(parentNode: Node): Node | null {\r\n    const lastBinding = this.bindings[this.bindings.length - 1];\r\n    const lastChildNode = this.lastChildNode;\r\n    if (lastBinding.node === lastChildNode) {\r\n      if (lastBinding.bindContents.size > 0) {\r\n        const childBindContent = Array.from(lastBinding.bindContents).at(-1) ?? raiseError(`BindContent: childBindContent is not found`);\r\n        const lastNode = childBindContent.getLastNode(parentNode);\r\n        if (lastNode !== null) {\r\n          return lastNode;\r\n        }\r\n      }\r\n    }\r\n    if (parentNode !== lastChildNode?.parentNode) {\r\n      return null;\r\n    }\r\n    return lastChildNode;\r\n  }\r\n  #currentLoopContext: ILoopContext | null | undefined;\r\n  get currentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#currentLoopContext === \"undefined\") {\r\n      let bindContent: IBindContent | null = this;\r\n      while(bindContent !== null) {\r\n        if (bindContent.loopContext !== null) break; ;\r\n        bindContent = bindContent.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      this.#currentLoopContext = bindContent?.loopContext ?? null;\r\n    }\r\n    return this.#currentLoopContext;\r\n  }\r\n  constructor(\r\n    parentBinding: IBinding | null,\r\n    id           : number, \r\n    engine       : IComponentEngine, \r\n    loopContext  : string | null,\r\n    listIndex    : IListIndex | null\r\n  ) {\r\n    this.parentBinding = parentBinding;\r\n    this.#id = id;\r\n    this.fragment = createContent(id);\r\n    this.childNodes = Array.from(this.fragment.childNodes);\r\n    this.engine = engine;\r\n    this.loopContext = (listIndex !== null) ? createLoopContext(loopContext, listIndex, this) : null;\r\n    this.bindings = createBindings(\r\n      this, \r\n      id, \r\n      engine, \r\n      this.fragment\r\n    );\r\n  }\r\n  mount(parentNode: Node) {\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        this.fragment.appendChild(this.childNodes[i]);\r\n      }\r\n    }\r\n    parentNode.appendChild(this.fragment);\r\n  }\r\n  mountBefore(parentNode: Node, beforeNode: Node | null) {\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        this.fragment.appendChild(this.childNodes[i]);\r\n      }\r\n    }\r\n    parentNode.insertBefore(this.fragment, beforeNode);\r\n  }\r\n  mountAfter(parentNode: Node, afterNode: Node | null) {\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        this.fragment.appendChild(this.childNodes[i]);\r\n      }\r\n    }\r\n    parentNode.insertBefore(\r\n      this.fragment, \r\n      afterNode?.nextSibling ?? null\r\n    );\r\n  }\r\n  unmount() {\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      this.fragment.appendChild(this.childNodes[i]);\r\n    }\r\n  }\r\n  bindings: IBinding[] = [];\r\n  render() {\r\n    render(this.bindings);\r\n  }\r\n  init() {\r\n    this.bindings.forEach(binding => binding.init());\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    if (this.loopContext == null) raiseError(`BindContent: loopContext is null`);\r\n    this.loopContext.assignListIndex(listIndex);\r\n    this.init();\r\n  }\r\n}\r\n\r\nexport function createBindContent(\r\n  parentBinding: IBinding | null,\r\n  id           : number, \r\n  engine       :IComponentEngine, \r\n  loopContext  : string | null, \r\n  listIndex    :IListIndex | null\r\n):IBindContent {\r\n  const bindContent = new BindContent(\r\n    parentBinding, \r\n    id, \r\n    engine, \r\n    loopContext, \r\n    listIndex\r\n  );\r\n  bindContent.init();\r\n  return bindContent;\r\n}","import { NodePath } from \"./types\";\r\n\r\nexport function resolveNodeFromPath(root: Node, path: NodePath): Node | null {\r\n  return path.reduce((node, index) => node?.childNodes[index] ?? null, root);\r\n}","import { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\n\r\nexport function createRefKey(\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n) {\r\n  return info.id + \":\" + (listIndex?.id ?? 0);\r\n}\r\n\r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { createRefKey } from \"../../StatePropertyRef/getStatePropertyRef\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setTracking } from \"./setTracking.js\";\r\n\r\nfunction _getByRef(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  receiver : IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  if (handler.lastTrackingStack != null && handler.lastTrackingStack !== info) {\r\n    const lastPattern = handler.lastTrackingStack;\r\n    if (lastPattern.parentInfo !== info) {\r\n      handler.engine.addDependentProp(lastPattern, info, \"reference\");\r\n    }\r\n  }\r\n\r\n  let refKey = '';\r\n  if (handler.cacheable) {\r\n    refKey = createRefKey(info, listIndex);\r\n    const value = handler.cache[refKey];\r\n    if (typeof value !== \"undefined\") {\r\n      return value;\r\n    }\r\n    if (refKey in handler.cache) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  let value;\r\n  try {\r\n    if (info.pattern in target) {\r\n      return (value = handler.engine.setStatePropertyRef(info, listIndex, () => {\r\n        return Reflect.get(target, info.pattern, receiver);\r\n      }));\r\n    } else {\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRef(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return (value = Reflect.get(parentValue, index));\r\n      } else {\r\n        return (value = Reflect.get(parentValue, lastSegment));\r\n      }\r\n    }\r\n  } finally {\r\n    if (handler.cacheable && !(refKey in handler.cache)) {\r\n      handler.cache[refKey] = value;\r\n    }\r\n  }\r\n}\r\n\r\nexport function getByRef(\r\n    target   : Object, \r\n    info     : IStructuredPathInfo,\r\n    listIndex: IListIndex | null,\r\n    receiver : IStateProxy,\r\n    handler  : IStateHandler\r\n  ): any {\r\n    if (handler.engine.trackedGetters.has(info.pattern)) {\r\n      return setTracking(info, handler, () => {\r\n        return _getByRef(target, info, listIndex, receiver, handler);\r\n      });\r\n    } else {\r\n      return _getByRef(target, info, listIndex, receiver, handler);\r\n    }\r\n\r\n  }\r\n","import { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function setTracking(info: IStructuredPathInfo, handler: IStateHandler, callback: () => any): any {\r\n  handler.trackingStack.push(info);\r\n  handler.lastTrackingStack = info;\r\n  try {\r\n    return callback();\r\n  } finally {\r\n    handler.trackingStack.pop();\r\n    handler.lastTrackingStack = handler.trackingStack[handler.trackingStack.length - 1] ?? null;\r\n  }\r\n}\r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef as methodGetByRef } from \"../methods/getByRef.js\";\r\n\r\nexport function getByRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (pattern: IStructuredPathInfo, listIndex: IListIndex | null) => \r\n    methodGetByRef(target, pattern, listIndex, receiver, handler);\r\n} \r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef } from \"./getByRef.js\";\r\n\r\nexport function setByRef(\r\n    target   : Object, \r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any, \r\n    receiver : IStateProxy,\r\n    handler  : IStateHandler\r\n): any {\r\n  try {\r\n    if (info.pattern in target) {\r\n      if (info.wildcardCount > 0) {\r\n        if (listIndex === null) {\r\n          raiseError(`propRef.listIndex is null`);\r\n        }\r\n        return handler.engine.setStatePropertyRef(info, listIndex, () => {\r\n          return Reflect.set(target, info.pattern, value, receiver);\r\n        });\r\n      } else {\r\n        return Reflect.set(target, info.pattern, value, receiver);\r\n      }\r\n    } else {\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRef(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return Reflect.set(parentValue, index, value);\r\n      } else {\r\n        return Reflect.set(parentValue, lastSegment, value);\r\n      }\r\n    }\r\n  } finally {\r\n    handler.engine.updater.addUpdatedStatePropertyRefValue(info, listIndex, value);\r\n  }\r\n}\r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setByRef as methodSetByRef } from \"../methods/setByRef.js\";\r\n\r\nexport function setByRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (pattern: IStructuredPathInfo, listIndex: IListIndex | null, value: any) => \r\n    methodSetByRef(target, pattern, listIndex, value, receiver, handler);\r\n}","import { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setCacheable as methodSetChargeable } from \"../methods/setCacheable.js\";\r\n\r\nexport function setCacheable(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async (callback: () => Promise<void>) => {\r\n    await methodSetChargeable(handler, callback);\r\n  }\r\n}","import { IStateHandler } from \"../types\";\r\n\r\nexport async function setCacheable(handler: IStateHandler, callback: () => Promise<void>): Promise<void> {\r\n  handler.cacheable = true;\r\n  handler.cache = {}\r\n  try {\r\n    await callback();\r\n  } finally {\r\n    handler.cacheable = false;\r\n  }\r\n}\r\n","import { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst CONNECTED_CALLBACK = \"$connectedCallback\";\r\n\r\nexport function connectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, CONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","import { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst DISCONNECTED_CALLBACK = \"$disconnectedCallback\";\r\n\r\nexport function disconnectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, DISCONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef } from \"../methods/getByRef.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\n\r\nexport function resolve(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (path: string, indexes: number[], value?:any): any => {\r\n    const info = getStructuredPathInfo(path);\r\n    let listIndex: IListIndex | null = null;\r\n    for(let i = 0; i < info.wildcardParentInfos.length; i++) {\r\n      const wildcardParentPattern = info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPath is null`);\r\n      const listIndexes: IListIndex[] = Array.from(handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? []);\r\n      const index = indexes[i] ?? raiseError(`index is null`);\r\n      listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    if (typeof value === \"undefined\") {\r\n      return getByRef(target, info, listIndex, receiver, handler);\r\n    } else {\r\n      return setByRef(target, info, listIndex, value, receiver, handler);\r\n    }\r\n  };\r\n} ","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { resolve as _resolve } from \"./resolve.js\";\r\n\r\nexport function getAll(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n    const resolve = _resolve(target, prop, receiver, handler);\r\n    return (path: string, indexes?: number[]): any[] => {\r\n      const info = getStructuredPathInfo(path);\r\n      if (handler.lastTrackingStack != null && handler.lastTrackingStack !== info) {\r\n        const lastPattern = handler.lastTrackingStack;\r\n        if (lastPattern.parentInfo !== info) {\r\n          handler.engine.addDependentProp(lastPattern, info, \"reference\");\r\n        }\r\n      }\r\n  \r\n      if (typeof indexes === \"undefined\") {\r\n        for(let i = 0; i < info.wildcardInfos.length; i++) {\r\n          const wildcardPattern = info.wildcardInfos[i] ?? raiseError(`wildcardPattern is null`);\r\n          const listIndex = handler.engine.getContextListIndex(wildcardPattern.pattern);\r\n          if (listIndex) {\r\n            indexes = listIndex.indexes;\r\n            break;\r\n          }\r\n        }\r\n        if (typeof indexes === \"undefined\") {\r\n          indexes = [];\r\n        }\r\n      }\r\n      const walkWildcardPattern = (\r\n        wildcardParentInfos: IStructuredPathInfo[],\r\n        wildardIndexPos: number,\r\n        listIndex: IListIndex | null,\r\n        indexes: number[],\r\n        indexPos: number,\r\n        parentIndexes: number[],\r\n        results: number[][]\r\n      ) => {\r\n        const wildcardParentPattern = wildcardParentInfos[wildardIndexPos] ?? null;\r\n        if (wildcardParentPattern === null) {\r\n          results.push(parentIndexes);\r\n          return;\r\n        }\r\n        const listIndexSet = handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n        const listIndexes = Array.from(listIndexSet);\r\n        const index = indexes[indexPos] ?? null;\r\n        if (index === null) {\r\n          for(let i = 0; i < listIndexes.length; i++) {\r\n            const listIndex = listIndexes[i];\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results);\r\n          }\r\n        } else {\r\n          const listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n          if ((wildardIndexPos + 1) < wildcardParentInfos.length) {\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results\r\n            );\r\n          }\r\n        }\r\n      }\r\n      const resultIndexes: number[][] = [];\r\n      walkWildcardPattern(\r\n        info.wildcardParentInfos, \r\n        0, \r\n        null, \r\n        indexes, \r\n        0, \r\n        [], \r\n        resultIndexes\r\n      );\r\n      const resultValues: any[] = [];\r\n      for(let i = 0; i < resultIndexes.length; i++) {\r\n        resultValues.push(resolve(\r\n          info.pattern,\r\n          resultIndexes[i]\r\n        ));\r\n      }\r\n      return resultValues;\r\n    }\r\n  }","\r\nimport { IResolvedPathInfo, WildcardType } from './types';\r\nimport { getStructuredPathInfo } from './getStructuredPathInfo.js';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IResolvedPathInfo } = {};\r\n//const _cache: Map<string, IResolvedPathInfo> = new Map();\r\n\r\nclass ResolvedPathInfo implements IResolvedPathInfo {\r\n  static id : number = 0;\r\n  id = ++ResolvedPathInfo.id;\r\n  name;\r\n  elements;\r\n  paths;\r\n  wildcardCount;\r\n  wildcardType;\r\n  wildcardIndexes;\r\n  info;\r\n  constructor(name: string) {\r\n    const elements = name.split(\".\");\r\n    const tmpPatternElements = elements.slice();\r\n    const paths = [];\r\n    let incompleteCount = 0;\r\n    let completeCount = 0;\r\n    let lastPath = \"\";\r\n    let wildcardCount = 0;\r\n    let wildcardType: WildcardType = \"none\";\r\n    let wildcardIndexes: (number | null)[] = [];\r\n    for(let i = 0; i < elements.length; i++) {\r\n      const element = elements[i];\r\n      if (element === \"*\") {\r\n        tmpPatternElements[i] = \"*\";\r\n        wildcardIndexes.push(null);\r\n        incompleteCount++;\r\n        wildcardCount++;\r\n      } else {\r\n        const number = Number(element);\r\n        if (!Number.isNaN(number)) {\r\n          tmpPatternElements[i] = \"*\";\r\n          wildcardIndexes.push(number);\r\n          completeCount++;\r\n          wildcardCount++;\r\n        }\r\n      }\r\n      lastPath += element;\r\n      paths.push(lastPath);\r\n      lastPath += (i < elements.length - 1 ? \".\" : \"\");\r\n    }\r\n    const pattern = tmpPatternElements.join(\".\");\r\n    const info = getStructuredPathInfo(pattern);\r\n    if (incompleteCount > 0 || completeCount > 0) {\r\n      if (incompleteCount === wildcardCount) {\r\n        wildcardType = \"context\";\r\n      } else if (completeCount === wildcardCount) {\r\n        wildcardType = \"all\";\r\n      } else {\r\n        wildcardType = \"partial\";\r\n      }\r\n    }\r\n    this.name = name;\r\n    this.elements = elements;\r\n    this.paths = paths;\r\n    this.wildcardCount = wildcardCount;\r\n    this.wildcardType = wildcardType;\r\n    this.wildcardIndexes = wildcardIndexes;\r\n    this.info = info;\r\n  }\r\n}\r\n\r\nexport function getResolvedPathInfo(name:string):IResolvedPathInfo {\r\n  let nameInfo: IResolvedPathInfo | undefined;\r\n//  return _cache.get(name) ?? (_cache.set(name, nameInfo = new ResolvedPathInfo(name)), nameInfo);\r\n  return _cache[name] ?? (_cache[name] = new ResolvedPathInfo(name));\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IResolvedPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nexport function getListIndex(\r\n  info: IResolvedPathInfo, \r\n  engine: IComponentEngine\r\n): IListIndex | null {\r\n  if (info.info.wildcardCount === 0) {\r\n    return null;\r\n  }\r\n  let listIndex: IListIndex | null = null;\r\n  const lastWildcardPath = info.info.lastWildcardPath ?? \r\n    raiseError(`lastWildcardPath is null`);\r\n  if (info.wildcardType === \"context\") {\r\n    listIndex = engine.getContextListIndex(lastWildcardPath) ?? \r\n      raiseError(`ListIndex not found: ${info.info.pattern}`);\r\n  } else if (info.wildcardType === \"all\") {\r\n    let parentListIndex = null;\r\n    for(let i = 0; i < info.info.wildcardCount; i++) {\r\n      const wildcardParentPattern = info.info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPattern is null`);\r\n      const listIndexes: IListIndex[] = Array.from(engine.getListIndexesSet(wildcardParentPattern, parentListIndex) ?? []);\r\n      const wildcardIndex = info.wildcardIndexes[i] ?? raiseError(`wildcardIndex is null`);\r\n      parentListIndex = listIndexes[wildcardIndex] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    listIndex = parentListIndex;\r\n  } else if (info.wildcardType === \"partial\") {\r\n    // ToDo:listIndexを取得する必要がある\r\n  } else if (info.wildcardType === \"none\") {\r\n  }\r\n  return listIndex;\r\n}\r\n","import { getRouter } from \"../../Router/Router.js\";\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { getAll } from \"../apis/getAll.js\";\r\nimport { resolve } from \"../apis/resolve.js\";\r\nimport { getListIndex } from \"../getListIndex.js\";\r\nimport { getByRef } from \"../methods/getByRef.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst matchIndexPropertyName = new RegExp(/^\\$(\\d+)$/);\r\n\r\nconst apiProps = new Set([\r\n  \"$resolve\",\r\n  \"$getAll\",\r\n  \"$router\"\r\n]);\r\n\r\nexport function get(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  let value;\r\n  if (typeof prop === \"string\") {\r\n    if (matchIndexPropertyName.test(prop)) {\r\n      const number = prop.slice(1);\r\n      const index = Number(number);\r\n      const ref = handler.engine.getLastStatePropertyRef() ?? \r\n        raiseError(`get: this.engine.getLastStatePropertyRef() is null`);\r\n      return ref.listIndex?.at(index - 1)?.index ?? raiseError(`ListIndex not found: ${prop}`);\r\n    } else if (apiProps.has(prop)) {\r\n      if (prop === \"$resolve\") {\r\n        return resolve(target, prop, receiver, handler);\r\n      } else if (prop === \"$getAll\") {\r\n        return getAll(target, prop, receiver, handler);\r\n      } else if (prop === \"$router\") {\r\n        return getRouter();\r\n      }\r\n    } else {\r\n      const resolvedInfo = getResolvedPathInfo(prop);\r\n      const listIndex = getListIndex(resolvedInfo, handler.engine);\r\n      value = getByRef(\r\n        target, \r\n        resolvedInfo.info, \r\n        listIndex, \r\n        receiver,\r\n        handler\r\n      );\r\n    }\r\n  } else if (typeof prop === \"symbol\") {\r\n    if (prop in handler.callableApi) {\r\n      return handler.callableApi[prop](target, prop, receiver, handler);\r\n    }\r\n    value = Reflect.get(\r\n      target, \r\n      prop, \r\n      receiver\r\n    );\r\n  }\r\n  return value;\r\n}\r\n","import { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetAllSymbol, GetByRefSymbol, ResolveSymbol, SetByRefSymbol, SetCacheableSymbol } from \"./symbols.js\";\r\nimport { IState, IStateHandler, IStateProxy } from \"./types\";\r\nimport { getByRef as apiGetByRef } from \"./apis/getByRef.js\";\r\nimport { setByRef as apiSetByRef } from \"./apis/setByRef.js\";\r\nimport { setCacheable as apiSetCacheable } from \"./apis/setCacheable.js\";\r\nimport { connectedCallback } from \"./apis/connectedCallback.js\";\r\nimport { disconnectedCallback } from \"./apis/disconnectedCallback.js\";\r\nimport { resolve } from \"./apis/resolve.js\";\r\nimport { getAll } from \"./apis/getAll.js\";\r\nimport { get as trapGet } from \"./traps/get.js\";\r\nimport { set as trapSet } from \"./traps/set.js\";\r\n\r\nclass StateHandler implements IStateHandler {\r\n  engine   : IComponentEngine;\r\n  cacheable: boolean = false;\r\n  cache    : {[key:number]:any} = {};\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: IStructuredPathInfo[] = [];\r\n  \r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  callableApi: { [key:symbol]: Function } = {\r\n    [GetByRefSymbol]: apiGetByRef, \r\n    [SetByRefSymbol]: apiSetByRef, \r\n    [SetCacheableSymbol]: apiSetCacheable, \r\n    [ConnectedCallbackSymbol]: connectedCallback, \r\n    [DisconnectedCallbackSymbol]: disconnectedCallback, \r\n    [ResolveSymbol]: resolve, \r\n    [GetAllSymbol]: getAll,\r\n  };\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IStateProxy\r\n  ): boolean {\r\n    return trapSet(target, prop, value, receiver, this);\r\n  }\r\n}\r\n\r\nexport function createStateProxy(\r\n  engine: IComponentEngine, \r\n  state: Object\r\n): IStateProxy {\r\n  return new Proxy<IState>(state, new StateHandler(engine)) as IStateProxy;\r\n}\r\n\r\n","import { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { getListIndex } from \"../getListIndex.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nexport function set(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  value   : any, \r\n  receiver: IStateProxy,\r\n  handler : IStateHandler\r\n): boolean {\r\n  if (typeof prop === \"string\") {\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, handler.engine);\r\n    return setByRef(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      value, \r\n      receiver,\r\n      handler\r\n    );\r\n  } else {\r\n    return Reflect.set(\r\n      target, \r\n      prop, \r\n      value, \r\n      receiver\r\n    );\r\n  }\r\n}\r\n","import { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { DependencyType, IDependencyEdge } from \"./types\";\r\n\r\nexport function createDependencyKey(info: IStructuredPathInfo, type: DependencyType): string {\r\n  return `${info.pattern}@${type}`;\r\n}\r\n\r\nconst cache: {[key:string]:IDependencyEdge} = {};;\r\n\r\nexport function createDependencyEdge(\r\n  info: IStructuredPathInfo,\r\n  type: DependencyType,\r\n): IDependencyEdge {\r\n  const key = createDependencyKey(info, type);\r\n  return cache[key] ?? (cache[key] = { info, type });\r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { createDependencyKey } from \"./createDependencyEdge\";\r\nimport { DependencyType } from \"./types\";\r\n\r\nclass dependencyWalker {\r\n  engine: IComponentEngine;\r\n  entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null };\r\n  traced: Set<string> = new Set<string>();\r\n  constructor(\r\n    engine: IComponentEngine,\r\n    entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null },\r\n  ) {\r\n    this.engine = engine;\r\n    this.entryRef = entryRef;\r\n  }\r\n\r\n  walkSub(\r\n    info: IStructuredPathInfo,\r\n    type: DependencyType,\r\n    callback: (ref: IStatePropertyRef, info: IStructuredPathInfo, type: DependencyType) => void\r\n  ) {\r\n    const key = createDependencyKey(info, type);\r\n    if (this.traced.has(key)) {\r\n      return;\r\n    }\r\n    this.traced.add(key);\r\n    callback(this.entryRef, info, type);\r\n    const edges = this.engine.dependentTree.get(info) ?? [];\r\n    for(const edge of edges) {\r\n      const overridedType = edge.type === \"structured\" ? type : edge.type;\r\n      this.walkSub(edge.info, overridedType, callback);\r\n    }\r\n\r\n  }\r\n  walk(\r\n    callback: (ref: IStatePropertyRef, info: IStructuredPathInfo, type: DependencyType) => void\r\n  ) {\r\n    const traced = new Set<IStructuredPathInfo>();\r\n    this.walkSub(this.entryRef.info, \"structured\", callback);\r\n  } \r\n\r\n}\r\n\r\nexport function createDependencyWalker(\r\n  engine: IComponentEngine,\r\n  entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null },\r\n) {\r\n  return new dependencyWalker(engine, entryRef);\r\n}","import { IListIndex } from \"./types\";\r\n\r\nclass ListIndex implements IListIndex {\r\n  static id: number = 0;\r\n  id              : number = ++ListIndex.id;\r\n  #parentListIndex: IListIndex | null = null;\r\n  get parentListIndex(): IListIndex | null {\r\n    return this.#parentListIndex;\r\n  }\r\n  index: number;\r\n  get indexes(): number[] {\r\n    const indexes = this.parentListIndex?.indexes ?? [];\r\n    indexes.push(this.index);\r\n    return indexes;\r\n  }\r\n\r\n  get position(): number {\r\n    return (this.parentListIndex?.position ?? -1) + 1;\r\n  }\r\n\r\n  get length(): number {\r\n    return (this.parentListIndex?.length ?? 0) + 1;\r\n  }\r\n  \r\n  constructor(\r\n    parentListIndex: IListIndex | null,\r\n    index: number\r\n  ) {\r\n    this.#parentListIndex = parentListIndex;\r\n    this.index = index;\r\n  }\r\n  \r\n  truncate(length: number): IListIndex | null {\r\n    let listIndex: IListIndex | null = this;\r\n    while(listIndex !== null) {\r\n      if (listIndex.position < length) return listIndex;\r\n      listIndex = listIndex.parentListIndex;\r\n    }\r\n    return null;\r\n  }\r\n  add(value: number): IListIndex {\r\n    return new ListIndex(this, value);\r\n  }\r\n\r\n  *reverseIterator(): Generator<IListIndex> {\r\n    yield this;\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.reverseIterator();\r\n    }\r\n    return;\r\n  }\r\n\r\n  *iterator(): Generator<IListIndex> {\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.iterator();\r\n    }\r\n    yield this;\r\n    return;\r\n  }\r\n\r\n  toString(): string {\r\n    const parentListIndex = this.parentListIndex?.toString();\r\n    return (parentListIndex !== null) ? parentListIndex + \",\" + this.index.toString() : this.index.toString();\r\n  }\r\n\r\n  at(position: number): IListIndex | null {\r\n    let iterator;\r\n    if (position >= 0) {\r\n      iterator = this.iterator();\r\n    } else {\r\n      position = - position - 1 \r\n      iterator = this.reverseIterator();\r\n    }\r\n    let next;\r\n    while(position >= 0) {\r\n      next = iterator.next();\r\n      position--;\r\n    }\r\n    return next?.value ?? null;\r\n  }\r\n  \r\n}\r\n\r\nexport function createListIndex(\r\n  parentListIndex: IListIndex | null,\r\n  index          : number\r\n): IListIndex {\r\n  return new ListIndex(parentListIndex, index);\r\n}\r\n\r\nexport function getMaxListIndexId(): number {\r\n  return ListIndex.id;\r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\n\r\nfunction listWalkerSub(\r\n  engine: IComponentEngine,\r\n  info: IStructuredPathInfo, \r\n  listIndex: IListIndex | null, \r\n  callback:(info: IStructuredPathInfo, listIndex: IListIndex | null)=> void\r\n) {\r\n  const listIndexLen = listIndex?.length ?? 0;\r\n  if (info.wildcardCount === listIndexLen) {\r\n    callback(info, listIndex);\r\n  } else {\r\n    const parentInfo = info.wildcardParentInfos[listIndexLen] ?? raiseError(\"Invalid state property info\");\r\n    const listIndexes = engine.getListIndexesSet(parentInfo, listIndex);\r\n    for(const subListIndex of listIndexes ?? []) {\r\n      listWalkerSub(engine, info, subListIndex, callback);\r\n    }\r\n  }\r\n}\r\n\r\nexport function listWalker(\r\n  engine: IComponentEngine,\r\n  info:IStructuredPathInfo, \r\n  listIndex: IListIndex | null,\r\n  callback:(info: IStructuredPathInfo, listIndex: IListIndex | null)=> void\r\n) {\r\n  listWalkerSub(engine, info, listIndex, callback);\r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { createDependencyWalker } from \"../DependencyWalker/createDependencyWalker\";\r\nimport { createListIndex } from \"../ListIndex/createListIndex\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { listWalker } from \"../ListWalker/listWalker\";\r\nimport { GetByRefSymbol } from \"../StateClass/symbols\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { createRefKey } from \"../StatePropertyRef/getStatePropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst BLANK_LISTINDEXES_SET = new Set<IListIndex>();\r\n\r\nfunction buildListIndexTree(\r\n  engine   : IComponentEngine, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value: any[]\r\n): void {\r\n  const oldValue = engine.getList(info, listIndex) ?? [];\r\n  if (oldValue === value) {\r\n    return;\r\n  }\r\n  const newListIndexesSet:Set<IListIndex> = new Set();\r\n  const oldListIndexesSet = engine.getListIndexesSet(info, listIndex) ?? BLANK_LISTINDEXES_SET;\r\n  const oldListIndexesByItem = Map.groupBy(oldListIndexesSet, listIndex => oldValue[listIndex.index]);\r\n  for(let i = 0; i < value.length; i++) {\r\n    // リスト要素から古いリストインデックスを取得して、リストインデックスを更新する\r\n    // もし古いリストインデックスがなければ、新しいリストインデックスを作成する\r\n    let curListIndex = oldListIndexesByItem.get(value[i])?.shift() ?? createListIndex(listIndex, i);\r\n    if (curListIndex.index !== i) {\r\n      curListIndex.index = i;\r\n      // リストインデックスのインデックスを更新したので、リストインデックスを登録する\r\n      engine.updater.addUpdatedListIndex(curListIndex);\r\n    }\r\n    // リストインデックスを新しいリストインデックスセットに追加する\r\n    newListIndexesSet.add(curListIndex);\r\n  }\r\n  // 新しいリストインデックスセットを保存する\r\n  engine.saveListIndexesSet(info, listIndex, newListIndexesSet);\r\n  engine.saveList(info, listIndex, value.slice(0)); // コピーを保存\r\n\r\n}\r\n\r\nexport function restructListIndexes(\r\n  infos: IStatePropertyRef[],\r\n  engine: IComponentEngine,\r\n  updateValues: {[key:string]: any[]},\r\n  refKeys: Set<string>,\r\n  cache: Map<IStructuredPathInfo, Set<IListIndex|null>>,\r\n) {\r\n  for(const {info, listIndex} of infos) {\r\n    if (config.optimizeListElements && engine.elementInfoSet.has(info)) {\r\n      // スワップ処理のためスキップ\r\n      continue;\r\n    }\r\n    const dependentWalker = createDependencyWalker(engine, {info, listIndex});\r\n    const nowOnList = config.optimizeList && engine.listInfoSet.has(info);\r\n    dependentWalker.walk((ref, refInfo, type) => {\r\n      if (nowOnList && type === \"structured\" && ref.info !== refInfo) {\r\n        if (refInfo.cumulativeInfoSet.has(ref.info)) {\r\n          return;\r\n        }\r\n      }\r\n      const wildcardMatchPaths = Array.from(ref.info.wildcardInfoSet.intersection(refInfo.wildcardInfoSet));\r\n      const longestMatchAt = (wildcardMatchPaths.at(-1)?.wildcardCount ?? 0) - 1;\r\n      const listIndex = (longestMatchAt >= 0) ? (ref.listIndex?.at(longestMatchAt) ?? null) : null;\r\n      listWalker(engine, refInfo, listIndex, (_info, _listIndex) => {\r\n        if (!engine.existsBindingsByInfo(_info)) {\r\n          return;\r\n        }\r\n        const refKey = createRefKey(_info, _listIndex);\r\n        if (refKeys.has(refKey)) {\r\n          return;\r\n        }\r\n        let cacheListIndexSet = cache.get(_info);\r\n        if (!cacheListIndexSet) {\r\n          cacheListIndexSet = new Set<IListIndex|null>();\r\n          cache.set(_info, cacheListIndexSet);\r\n        }\r\n        cacheListIndexSet.add(_listIndex);\r\n        refKeys.add(refKey);\r\n        if (engine.listInfoSet.has(_info)) {\r\n          const values = updateValues[refKey] ?? engine.stateProxy[GetByRefSymbol](_info, _listIndex);\r\n          buildListIndexTree(engine, _info, _listIndex, values);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n","import { IBinding } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { render } from \"../Render/render.js\";\r\nimport { SetCacheableSymbol } from \"../StateClass/symbols.js\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { getGlobalConfig } from \"../WebComponents/getGlobalConfig.js\";\r\nimport { IUpdater } from \"./types\";\r\nimport { restructListIndexes } from \"./restructListIndex\";\r\nimport { createRefKey } from \"../StatePropertyRef/getStatePropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\n\r\ntype UpdatedArrayElementBinding = {\r\n  parentRef: IStatePropertyRef;\r\n  binding: IBinding;\r\n  listIndexes: IListIndex[];\r\n  values: any[];\r\n};\r\n\r\nclass Updater implements IUpdater {\r\n  processList      : (() => Promise<void> | void)[] = [];\r\n  updatedProperties: Set<IStatePropertyRef | IListIndex> = new Set;\r\n  updatedValues    : {[key:string]: any} = {};\r\n  engine           : IComponentEngine;\r\n  #version         : number = 0;\r\n\r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  get version(): number {\r\n    return this.#version;\r\n  }\r\n\r\n  addProcess(process: () => Promise<void> | void): void {\r\n    this.processList.push(process);\r\n    this.waitForQueueEntry.resolve();\r\n  }\r\n\r\n  addUpdatedStatePropertyRefValue(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any\r\n  ): void {\r\n    const refKey = createRefKey(info, listIndex);\r\n    this.updatedProperties.add({info, listIndex});\r\n    this.updatedValues[refKey] = value;\r\n    this.waitForQueueEntry.resolve();\r\n  }\r\n\r\n  addUpdatedListIndex(listIndex: IListIndex): void {\r\n    this.updatedProperties.add(listIndex);\r\n    this.waitForQueueEntry.resolve();\r\n  }\r\n\r\n  terminate(): PromiseWithResolvers<void> {\r\n    const waitForMainLoopTerminate = Promise.withResolvers<void>();\r\n    this.waitForQueueEntry.resolve(waitForMainLoopTerminate);\r\n    return waitForMainLoopTerminate;\r\n  }\r\n\r\n  waitForQueueEntry: PromiseWithResolvers<PromiseWithResolvers<void> | void> = \r\n    Promise.withResolvers<PromiseWithResolvers<void> | void>();\r\n  async main(waitForComponentInit: PromiseWithResolvers<void>) {\r\n    await waitForComponentInit.promise;\r\n    const config = getGlobalConfig();\r\n    while (true) {\r\n      try {\r\n        const waitForMainLoopTerminate: (PromiseWithResolvers<void> | void) = \r\n          await this.waitForQueueEntry.promise;\r\n          config.debug && performance.mark(`start`);\r\n        Updater.updatingCount++;\r\n        try {\r\n          await this.exec();\r\n          if (config.debug) {\r\n            performance.mark(`end`);\r\n            performance.measure(`exec`, `start`, `end`);\r\n            console.log(performance.getEntriesByType(\"measure\"));    \r\n            performance.clearMeasures(`exec`);\r\n            performance.clearMarks(`start`);\r\n            performance.clearMarks(`end`);\r\n          }\r\n        } finally {\r\n          Updater.updatingCount--;\r\n          if (waitForMainLoopTerminate) {\r\n            waitForMainLoopTerminate.resolve();\r\n            break;\r\n          }\r\n        }\r\n      } catch(e) {\r\n        console.error(e);\r\n      } finally {\r\n        this.waitForQueueEntry = Promise.withResolvers<PromiseWithResolvers<void> | void>();\r\n      }\r\n    }\r\n  }\r\n\r\n  async updateState() {\r\n    while(this.processList.length > 0) {\r\n      const processList = this.processList;\r\n      this.processList = [];\r\n      for(let i = 0; i < processList.length; i++) {\r\n        const process = processList[i];\r\n        await process();\r\n      }\r\n    }\r\n  }\r\n\r\n  async rebuild(): Promise<{bindings: IBinding[], arrayElementBindings: UpdatedArrayElementBinding[]}> {\r\n    const retArrayElementBindings: UpdatedArrayElementBinding[] = [];\r\n    const retBindings: IBinding[] = [];\r\n    const engine = this.engine;\r\n    while(this.updatedProperties.size > 0) {\r\n      const updatedProiperties = Array.from(this.updatedProperties.values());\r\n      this.updatedProperties.clear();\r\n      const bindingsByListIndex: IBinding[] = [];\r\n      const updatedRefs: IStatePropertyRef[] = []; // 更新されたプロパティ参照のリスト\r\n      const arrayElementBindingByParentRefKey = new Map<string, Partial<UpdatedArrayElementBinding>>();\r\n      for(let i = 0; i < updatedProiperties.length; i++) {\r\n        const item = updatedProiperties[i];\r\n        if (\"index\" in item) {\r\n          const bindings = engine.bindingsByListIndex.get(item as IListIndex) ?? [];\r\n          bindingsByListIndex.push(...bindings);\r\n        } else {\r\n          updatedRefs.push(item as IStatePropertyRef);\r\n          if (engine.elementInfoSet.has(item.info)) {\r\n            const parentInfo = item.info.parentInfo ?? raiseError(\"info is null\"); // リストのパス情報\r\n            const parentListIndex = item.listIndex?.at(-2) ?? null; // リストのインデックス\r\n            const parentRef = {info: parentInfo, listIndex: parentListIndex};\r\n            const parentRefKey = createRefKey(parentInfo, parentListIndex);\r\n            let info = arrayElementBindingByParentRefKey.get(parentRefKey);\r\n            if (!info) {\r\n              info = {\r\n                parentRef,\r\n                listIndexes: [],\r\n                values: []\r\n              };\r\n              arrayElementBindingByParentRefKey.set(parentRefKey, info);\r\n            }\r\n            const refKey = createRefKey(item.info, item.listIndex);\r\n            const value = this.updatedValues[refKey] ?? null;\r\n            info.values?.push(value);\r\n            info.listIndexes?.push(item.listIndex as IListIndex);\r\n          }\r\n        }\r\n      }\r\n      // リストインデックスの構築\r\n      const builtStatePropertyRefKeySet = new Set<string>();\r\n      const affectedRefs = new Map<IStructuredPathInfo, Set<IListIndex|null>>();\r\n      restructListIndexes(updatedRefs, engine, this.updatedValues, builtStatePropertyRefKeySet, affectedRefs);\r\n\r\n      // スワップの場合の情報を構築する\r\n      for(const [parentRefKey, info] of arrayElementBindingByParentRefKey) {\r\n        const parentInfo = info.parentRef?.info ?? raiseError(\"parentInfo is null\");\r\n        const parentListIndex = info.parentRef?.listIndex ?? null;\r\n        const bindings = engine.getBindings(parentInfo, parentListIndex);\r\n        for(const binding of bindings) {\r\n          if (!binding.bindingNode.isFor) {\r\n            continue;\r\n          }\r\n          const bindingInfo = Object.assign({}, info, { binding });\r\n          retArrayElementBindings.push(bindingInfo as UpdatedArrayElementBinding);\r\n        }\r\n      }\r\n      // 影響する全てのバインド情報を取得する\r\n      for(const [ info, listIndexes ] of affectedRefs.entries()) {\r\n        for(const listIndex of listIndexes) {\r\n          const bindings = engine.getBindings(info, listIndex);\r\n          retBindings.push(...bindings ?? []);\r\n        }\r\n      }\r\n      retBindings.push(...bindingsByListIndex);\r\n    }\r\n    this.updatedValues = {};\r\n    return {bindings: retBindings, arrayElementBindings: retArrayElementBindings};\r\n  }\r\n\r\n  async render(bindings: IBinding[]) {\r\n    this.#version++;\r\n    await this.engine.stateProxy[SetCacheableSymbol](async () => {\r\n      return render(bindings);\r\n    });\r\n  }\r\n\r\n  async exec() {\r\n    while(this.processList.length !== 0 || this.updatedProperties.size !== 0) {\r\n      // update state\r\n      await this.updateState();\r\n      // rebuild\r\n      const { bindings, arrayElementBindings } = await this.rebuild();\r\n      // render\r\n      for(const arrayElementBinding of arrayElementBindings) {\r\n        arrayElementBinding.binding.bindingNode.updateElements(arrayElementBinding.listIndexes, arrayElementBinding.values);\r\n      }\r\n      if (bindings.length > 0) {\r\n        await this.render(bindings);\r\n      }\r\n    }\r\n  }\r\n\r\n  static updatingCount = 0;\r\n}\r\n\r\nexport function createUpdater(engine: IComponentEngine): IUpdater {\r\n  return new Updater(engine);\r\n}\r\n\r\nexport function getUpdatingCount(): number {\r\n  return Updater.updatingCount;\r\n}","import { raiseError } from \"../utils.js\";\r\nimport { IComponentConfig } from \"../WebComponents/types\";\r\nimport { canHaveShadowRoot } from \"./canHaveShadowRoot.js\";\r\n\r\nfunction getParentShadowRoot(parentNode: Node | null): ShadowRoot|undefined{\r\n  let node: Node | null = parentNode;\r\n  while(node) {\r\n    if (node instanceof ShadowRoot) {\r\n      return node;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n}\r\n\r\nexport function attachShadow(element: HTMLElement, config: IComponentConfig, styleSheet: CSSStyleSheet): void {\r\n    if (config.enableShadowDom) {\r\n      if (config.extends === null || canHaveShadowRoot(config.extends)) {\r\n        const shadowRoot = element.attachShadow({ mode: 'open' });\r\n        shadowRoot.adoptedStyleSheets = [styleSheet];\r\n      } else {\r\n        raiseError(`ComponentEngine: Shadow DOM not supported for builtin components that extend ${config.extends}`);\r\n      }\r\n    } else {\r\n      const shadowRootOrDocument = getParentShadowRoot(element.parentNode) || document;\r\n      const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n      if (!styleSheets.includes(styleSheet)) {\r\n        shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, styleSheet];\r\n      }\r\n    }\r\n\r\n}","export function canHaveShadowRoot(tagName: string): boolean {\r\n  try {\r\n    // 一時的に要素を作成\r\n    const element = document.createElement(tagName);\r\n    // `attachShadow` メソッドが存在し、実行可能かを確認\r\n    return typeof element.attachShadow === \"function\";\r\n  } catch {\r\n    // 無効なタグ名などが渡された場合は false を返す\r\n    return false;\r\n  }\r\n}","import { createListIndex } from \"../ListIndex/createListIndex.js\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { GetByRefSymbol } from \"./symbols.js\";\r\n\r\nconst BLANK_LISTINDEXES_SET = new Set<IListIndex>();\r\n\r\nfunction buildListIndexTreeSub(\r\n  engine   : IComponentEngine, \r\n  listInfos: Set<IStructuredPathInfo>,\r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value: any[]\r\n): void {\r\n  const oldValue = engine.getList(info, listIndex) ?? [];\r\n  if (oldValue === value) {\r\n    return;\r\n  }\r\n  const newListIndexesSet:Set<IListIndex> = new Set();\r\n  const oldListIndexesSet = engine.getListIndexesSet(info, listIndex) ?? BLANK_LISTINDEXES_SET;\r\n  const oldListIndexesByItem = Map.groupBy(oldListIndexesSet, listIndex => oldValue[listIndex.index]);\r\n  for(let i = 0; i < value.length; i++) {\r\n    // リスト要素から古いリストインデックスを取得して、リストインデックスを更新する\r\n    // もし古いリストインデックスがなければ、新しいリストインデックスを作成する\r\n    let curListIndex = oldListIndexesByItem.get(value[i])?.shift() ?? createListIndex(listIndex, i);\r\n    if (curListIndex.index !== i) {\r\n      curListIndex.index = i;\r\n      // リストインデックスのインデックスを更新したので、リストインデックスを登録する\r\n      engine.updater.addUpdatedListIndex(curListIndex);\r\n    }\r\n    // リストインデックスを新しいリストインデックスセットに追加する\r\n    newListIndexesSet.add(curListIndex);\r\n  }\r\n  // 新しいリストインデックスセットを保存する\r\n  engine.saveListIndexesSet(info, listIndex, newListIndexesSet);\r\n  engine.saveList(info, listIndex, value.slice(0)); // コピーを保存\r\n\r\n  // サブ要素のリストインデックスを構築する\r\n  const searchPath = info.pattern + \".*\";\r\n  for(const info of listInfos) {\r\n    if (searchPath !== info.lastWildcardPath) {\r\n      continue;\r\n    }\r\n    for(const subListIndex of newListIndexesSet) {\r\n      const subValue = engine.stateProxy[GetByRefSymbol](info, subListIndex);\r\n      buildListIndexTreeSub(\r\n        engine, \r\n        listInfos, \r\n        info, \r\n        subListIndex, \r\n        subValue ?? []\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function buildListIndexTree(\r\n  engine   : IComponentEngine, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value    : any\r\n): void {\r\n  const listInfos = engine.listInfoSet;\r\n  // 配列じゃなければ何もしない\r\n  if (!engine.listInfoSet.has(info)) {\r\n    return;\r\n  }\r\n  const values = (value ?? []) as any[];\r\n  buildListIndexTreeSub(\r\n    engine, \r\n    engine.listInfoSet, \r\n    info, \r\n    listIndex, \r\n    values\r\n  );\r\n}\r\n","import { createBindContent } from \"../DataBinding/BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../DataBinding/types\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { IState, IStateProxy, IStructiveState } from \"../StateClass/types\";\r\nimport { createStateProxy } from \"../StateClass/createStateProxy.js\";\r\nimport { IUpdater } from \"../Updater/types\";\r\nimport { createUpdater } from \"../Updater/updater.js\";\r\nimport { ComponentType, IComponentConfig, IComponentStatic, StructiveComponent } from \"../WebComponents/types\";\r\nimport { attachShadow } from \"./attachShadow.js\";\r\nimport { ISaveInfoByResolvedPathInfo, IComponentEngine } from \"./types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { buildListIndexTree } from \"../StateClass/buildListIndexTree.js\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetByRefSymbol, SetCacheableSymbol } from \"../StateClass/symbols.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { BindParentComponentSymbol } from \"../ComponentState/symbols.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { DependencyType, IDependencyEdge } from \"../DependencyWalker/types.js\";\r\nimport { createDependencyEdge } from \"../DependencyWalker/createDependencyEdge.js\";\r\n\r\nexport class ComponentEngine implements IComponentEngine {\r\n  type          : ComponentType = 'autonomous';\r\n  config        : IComponentConfig;\r\n  template      : HTMLTemplateElement;\r\n  styleSheet    : CSSStyleSheet;\r\n  stateClass    : IStructiveState;\r\n  state         : IState;\r\n  stateProxy    : IStateProxy;\r\n  updater       : IUpdater;\r\n  inputFilters  : FilterWithOptions;\r\n  outputFilters : FilterWithOptions;\r\n  bindContent   : IBindContent;\r\n  baseClass     : typeof HTMLElement = HTMLElement;\r\n  owner         : StructiveComponent;\r\n  trackedGetters: Set<string>;\r\n\r\n  listInfoSet         : Set<IStructuredPathInfo> = new Set();\r\n  elementInfoSet      : Set<IStructuredPathInfo> = new Set();\r\n  bindingsByListIndex : WeakMap<IListIndex, Set<IBinding>> = new WeakMap();\r\n  dependentTree       : Map<IStructuredPathInfo, Set<IDependencyEdge>> = new Map();\r\n\r\n  bindingsByComponent: WeakMap<StructiveComponent, Set<IBinding>> = new WeakMap();\r\n\r\n  #waitForInitialize : PromiseWithResolvers<void> = Promise.withResolvers<void>();\r\n  #loopContext       : ILoopContext | null = null;\r\n  #stackStructuredPathInfo  : IStructuredPathInfo[] = [];\r\n  #stackListIndex    : (IListIndex | null)[] = [];\r\n\r\n  constructor(config: IComponentConfig, owner: StructiveComponent) {\r\n    this.config = config;\r\n    if (this.config.extends) {\r\n      this.type = 'builtin';\r\n    }\r\n    const componentClass = owner.constructor as IComponentStatic;\r\n    this.template = componentClass.template;\r\n    this.styleSheet = componentClass.styleSheet;\r\n    this.stateClass = componentClass.stateClass;\r\n    this.state = new this.stateClass();\r\n    this.stateProxy = createStateProxy(this, this.state);\r\n    this.updater = createUpdater(this);\r\n    this.inputFilters = componentClass.inputFilters;\r\n    this.outputFilters = componentClass.outputFilters;\r\n    this.owner = owner;\r\n    this.trackedGetters = componentClass.trackedGetters;\r\n    // 依存関係の木を作成する\r\n    const checkDependentProp = (info: IStructuredPathInfo) => {\r\n      const parentInfo = info.parentInfo;\r\n      if (parentInfo === null) return;\r\n      this.addDependentProp(info, parentInfo, \"structured\");\r\n      checkDependentProp(parentInfo);\r\n    }\r\n    for(const path of componentClass.paths) {\r\n      const info = getStructuredPathInfo(path);\r\n      checkDependentProp(info);\r\n    }\r\n    // 配列のプロパティ、配列要素のプロパティを登録する\r\n    for(const listPath of componentClass.listPaths) {\r\n      this.listInfoSet.add(getStructuredPathInfo(listPath));\r\n      this.elementInfoSet.add(getStructuredPathInfo(listPath + \".*\"));\r\n    }\r\n    this.bindContent = createBindContent(null, componentClass.id, this, null, null); // this.stateArrayPropertyNamePatternsが変更になる可能性がある\r\n    for(const info of this.listInfoSet) {\r\n      if (info.wildcardCount > 0) continue;\r\n      const value = this.stateProxy[GetByRefSymbol](info, null)\r\n      buildListIndexTree(this, info, null, value);\r\n    }\r\n  \r\n    this.updater.main(this.#waitForInitialize);\r\n  }\r\n\r\n  async connectedCallback(): Promise<void> {\r\n    if (this.owner.dataset.state) {\r\n      try {\r\n        const json = JSON.parse(this.owner.dataset.state);\r\n        for(const [key, value] of Object.entries(json)) {\r\n          const info = getStructuredPathInfo(key);\r\n          if (info.wildcardCount > 0) continue;\r\n          this.stateProxy[SetByRefSymbol](info, null, value);\r\n        }\r\n      } catch(e) {\r\n        raiseError(\"Failed to parse state from dataset\");\r\n      }\r\n    }\r\n    this.owner.state[BindParentComponentSymbol]();\r\n    attachShadow(this.owner, this.config, this.styleSheet);\r\n    await this.stateProxy[ConnectedCallbackSymbol]();\r\n    await this.stateProxy[SetCacheableSymbol](async () => {\r\n      this.bindContent.render();\r\n    });\r\n    this.bindContent.mount(this.owner.shadowRoot ?? this.owner);\r\n    this.#waitForInitialize.resolve();\r\n  }\r\n\r\n  async disconnectedCallback(): Promise<void> {\r\n    await this.stateProxy[DisconnectedCallbackSymbol]();\r\n  }\r\n\r\n  async setLoopContext(loopContext: ILoopContext, callback: ()=>Promise<void>): Promise<void> {\r\n    try {\r\n      if (this.#loopContext !== null) {\r\n        throw new Error(\"loopContext is already set\");\r\n      }\r\n      this.#loopContext = loopContext;\r\n      await this.asyncSetStatePropertyRef(loopContext.info, loopContext.listIndex, async () => {\r\n        await callback();\r\n      });\r\n    } finally {\r\n      this.#loopContext = null;\r\n    }\r\n  }\r\n\r\n  async asyncSetStatePropertyRef(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    callback : ()=>Promise<any>\r\n  ): Promise<any> {\r\n    this.#stackStructuredPathInfo.push(info);\r\n    this.#stackListIndex.push(listIndex);\r\n    try {\r\n      return await callback();\r\n    } finally {\r\n      this.#stackStructuredPathInfo.pop();\r\n      this.#stackListIndex.pop();\r\n    }\r\n  }\r\n\r\n  setStatePropertyRef(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    callback : ()=>any\r\n  ): any {\r\n    this.#stackStructuredPathInfo.push(info);\r\n    this.#stackListIndex.push(listIndex);\r\n    try {\r\n      return callback();\r\n    } finally {\r\n      this.#stackStructuredPathInfo.pop();\r\n      this.#stackListIndex.pop();\r\n    }\r\n  }\r\n\r\n  getLastStatePropertyRef(): {info:IStructuredPathInfo, listIndex:IListIndex | null} | null {\r\n    if (this.#stackStructuredPathInfo.length === 0) {\r\n      return null;\r\n    }\r\n    const info = this.#stackStructuredPathInfo[this.#stackStructuredPathInfo.length - 1];\r\n    if (typeof info === \"undefined\") {\r\n      return null;\r\n    }\r\n    const listIndex = this.#stackListIndex[this.#stackListIndex.length - 1];\r\n    if (typeof listIndex === \"undefined\") {\r\n      return null;\r\n    }\r\n    return {info, listIndex};\r\n  }\r\n\r\n  getContextListIndex(structuredPath: string): IListIndex | null{\r\n    const lastRef = this.getLastStatePropertyRef();\r\n    if (lastRef === null) {\r\n      return null;\r\n    }\r\n    const info = lastRef.info;\r\n    const index = info.wildcardPaths.indexOf(structuredPath);\r\n    if (index >= 0) {\r\n      return lastRef.listIndex?.at(index) ?? null;\r\n    }\r\n    return null;\r\n  }\r\n  getLoopContexts():ILoopContext[] {\r\n    if (this.#loopContext === null) {\r\n      throw new Error(\"loopContext is null\");\r\n    }\r\n    return this.#loopContext.serialize();\r\n  }\r\n\r\n  #saveInfoByListIndexByResolvedPathInfoId: { [id:number]: WeakMap<IListIndex,ISaveInfoByResolvedPathInfo> } = {};\r\n  #saveInfoByStructuredPathId: { [id:number]: ISaveInfoByResolvedPathInfo } = {};\r\n\r\n  createSaveInfo():ISaveInfoByResolvedPathInfo {\r\n    return {\r\n      list          : null,\r\n      listIndexesSet: null,\r\n      bindings      : [],\r\n    }\r\n  }\r\n\r\n  getSaveInfoByStatePropertyRef(info:IStructuredPathInfo, listIndex:IListIndex | null): ISaveInfoByResolvedPathInfo {\r\n    if (listIndex === null) {\r\n      let saveInfo = this.#saveInfoByStructuredPathId[info.id];\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        this.#saveInfoByStructuredPathId[info.id] = saveInfo;\r\n      }\r\n      return saveInfo;\r\n    } else {\r\n      let saveInfoByListIndex = this.#saveInfoByListIndexByResolvedPathInfoId[info.id];\r\n      if (typeof saveInfoByListIndex === \"undefined\") {\r\n        saveInfoByListIndex = new WeakMap<IListIndex, ISaveInfoByResolvedPathInfo>();\r\n        this.#saveInfoByListIndexByResolvedPathInfoId[info.id] = saveInfoByListIndex;\r\n      }\r\n      let saveInfo = saveInfoByListIndex.get(listIndex);\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        saveInfoByListIndex.set(listIndex, saveInfo);\r\n      }\r\n      return saveInfo;\r\n    }\r\n  }\r\n  \r\n  saveBinding(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    binding  : IBinding\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.bindings.push(binding);\r\n  }\r\n\r\n  saveListIndexesSet(\r\n    info              :IStructuredPathInfo, \r\n    listIndex         :IListIndex | null, \r\n    saveListIndexesSet:Set<IListIndex>\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.listIndexesSet = saveListIndexesSet;\r\n  }\r\n\r\n  saveList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null, \r\n    list     :any[]\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.list = list;\r\n  }\r\n\r\n  getBindings(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): IBinding[] {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.bindings;\r\n  }\r\n\r\n  existsBindingsByInfo(info: IStructuredPathInfo): boolean {\r\n    if (typeof this.#saveInfoByStructuredPathId[info.id] !== \"undefined\") {\r\n      return true;\r\n    }\r\n    if (typeof this.#saveInfoByListIndexByResolvedPathInfoId[info.id] !== \"undefined\") {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getListIndexesSet(info:IStructuredPathInfo, listIndex:IListIndex | null): Set<IListIndex> | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.listIndexesSet;\r\n  }\r\n    \r\n  getList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): any[] | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.list;\r\n  }\r\n\r\n  addDependentProp(info: IStructuredPathInfo, refInfo: IStructuredPathInfo, type: DependencyType) {\r\n    let dependents = this.dependentTree.get(refInfo);\r\n    if (typeof dependents === \"undefined\") {\r\n      dependents = new Set<IDependencyEdge>();\r\n      this.dependentTree.set(refInfo, dependents);\r\n    }\r\n    const edge = createDependencyEdge(info, type);\r\n    dependents.add(edge);\r\n  }\r\n\r\n  getPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex | null): any {\r\n    // プロパティの値を取得する\r\n    return this.stateProxy[GetByRefSymbol](info, listIndex);\r\n  }\r\n  setPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex | null, value: any): void {\r\n    // プロパティの値を設定する\r\n    this.updater.addProcess(() => {\r\n      this.stateProxy[SetByRefSymbol](info, listIndex, value);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createComponentEngine(config: IComponentConfig, component: StructiveComponent): IComponentEngine {\r\n  return new ComponentEngine(config, component);\r\n}","import { COMMENT_EMBED_MARK } from \"../constants.js\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nconst MUSTACHE_REGEXP = /\\{\\{([^\\}]+)\\}\\}/g;\r\nconst MUSTACHE_TYPES:Set<string> = new Set(['if', 'for', 'endif', 'endfor', 'elseif', 'else']);\r\n\r\ntype MustacheType = 'if' | 'for' | 'endif' | 'endfor' | 'elseif' | 'else';\r\ntype MustacheInfo = {\r\n  type: MustacheType;\r\n  remain: string; // after first ':'\r\n  expr: string;\r\n}\r\n\r\nexport function replaceMustacheWithTemplateTag(html: string): string {\r\n  const stack:MustacheInfo[] = [];\r\n  return html.replaceAll(MUSTACHE_REGEXP, (match, expr) => {\r\n    expr = expr.trim();\r\n    const [ type ] = expr.split(':');\r\n    if (!MUSTACHE_TYPES.has(type)) {\r\n      // embed\r\n      return `<!--${COMMENT_EMBED_MARK}${expr}-->`;\r\n    }\r\n    const remain = expr.slice(type.length + 1).trim();\r\n    const currentInfo:MustacheInfo = { type, expr, remain };\r\n    if (type === 'if' || type === 'for') {\r\n      stack.push(currentInfo);\r\n      return `<template data-bind=\"${expr}\">`;\r\n    } else if (type === 'endif') {\r\n      const endTags = [];\r\n      do {\r\n        const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        if (info.type === 'if') {\r\n          endTags.push('</template>');\r\n          break;\r\n        } else if (info.type === 'elseif') {\r\n          endTags.push('</template>');\r\n        } else {\r\n          raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        }\r\n      } while(true);\r\n      return endTags.join('');\r\n    } else if (type === 'endfor') {\r\n      const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n      if (info.type === 'for') {\r\n        return '</template>';\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: endfor without for');\r\n      }\r\n    } else if (type === 'elseif') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      if (lastInfo.type === 'if' || lastInfo.type === 'elseif') {\r\n        stack.push(currentInfo);\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\"><template data-bind=\"if:${remain}\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      }\r\n    } else if (type === 'else') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      if (lastInfo.type === 'if') {\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      }\r\n    } else {\r\n      raiseError('replaceMustacheToTemplateOrEmbed: unknown type');\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n","import { COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { registerTemplate } from \"./registerTemplate.js\";\r\n\r\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport function replaceTemplateTagWithComment(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number = id\r\n):number {\r\n  // テンプレートの親ノードが存在する場合は、テンプレートをコメントノードに置き換える\r\n  template.parentNode?.replaceChild(document.createComment(`${COMMENT_TEMPLATE_MARK}${id}`), template);\r\n  if (template.namespaceURI === SVG_NS) {\r\n    // SVGタグ内のtemplateタグを想定\r\n    const newTemplate = document.createElement(\"template\");\r\n    for(let childNode of Array.from(template.childNodes)) {\r\n      newTemplate.content.appendChild(childNode);\r\n    }\r\n    const bindText = template.getAttribute(DATA_BIND_ATTRIBUTE);\r\n    newTemplate.setAttribute(DATA_BIND_ATTRIBUTE, bindText ?? \"\");\r\n    template = newTemplate;\r\n  }\r\n  template.content.querySelectorAll(\"template\").forEach(template => {\r\n    replaceTemplateTagWithComment(generateId(), template, rootId);\r\n  });\r\n  registerTemplate(id, template, rootId);\r\n  return id;\r\n}\r\n","import { replaceMustacheWithTemplateTag } from \"./replaceMustacheWithTemplateTag.js\";\r\nimport { replaceTemplateTagWithComment } from \"./replaceTemplateTagWithComment.js\";\r\n\r\nexport function registerHtml(id: number, html:string) {\r\n  const template = document.createElement(\"template\");\r\n  template.dataset.id = id.toString();\r\n  template.innerHTML = replaceMustacheWithTemplateTag(html);\r\n  replaceTemplateTagWithComment(id, template);\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { BindParentComponentSymbol, RenderSymbol } from \"./symbols.js\";\r\nimport { IComponentState, IComponentStateHandler, IComponentStateProxy } from \"./types\";\r\n\r\nclass ComponentState implements IComponentState {\r\n  engine: IComponentEngine;\r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  bindParentProperty(binding: IBinding): void {\r\n    const propName = binding.bindingNode.subName;\r\n    Object.defineProperty(this.engine.state, propName, {\r\n      get: () => {\r\n        return binding.bindingState.filteredValue;\r\n      },\r\n      set: (value: any) => {\r\n        return binding.updateStateValue(value);\r\n      },\r\n    });\r\n  }\r\n\r\n  unbindParentProperty(binding: IBinding): void {\r\n    const propName = binding.bindingNode.subName;\r\n    Object.defineProperty(this.engine.state, propName, { value:undefined });\r\n  }\r\n  \r\n  bindParentComponent(): void {\r\n    // bindParentComponent\r\n    const parent = this.engine.owner.parentStructiveComponent;\r\n    if (parent === null) {\r\n      return;\r\n    }\r\n    const bindings = parent.getBindingsFromChild(this.engine.owner);\r\n    for (const binding of bindings ?? []) {\r\n      this.bindParentProperty(binding);\r\n    }\r\n  }\r\n\r\n  render(name: string, value:any): void {\r\n    // render\r\n    const info = getStructuredPathInfo(name);\r\n    this.engine.updater.addUpdatedStatePropertyRefValue(info, null, value)\r\n  }\r\n\r\n  getPropertyValue(name: string): any {\r\n    // getPropertyValue\r\n    const info = getStructuredPathInfo(name);\r\n    return this.engine.getPropertyValue(info, null);\r\n  }\r\n\r\n  setPropertyValue(name: string, value: any): void {\r\n    // setPropertyValue\r\n    const info = getStructuredPathInfo(name);\r\n    this.engine.setPropertyValue(info, null, value); \r\n  }\r\n}\r\n\r\nclass ComponentStateHandler implements IComponentStateHandler {\r\n  get(state: IComponentState, prop: PropertyKey, receiver: IComponentState): any {\r\n    if (prop === RenderSymbol) {\r\n      return state.render.bind(state);\r\n    } else if (prop === BindParentComponentSymbol) {\r\n      return state.bindParentComponent.bind(state);\r\n    } else if (typeof prop === 'string') {\r\n      return state.getPropertyValue(prop);\r\n    } else {\r\n      return Reflect.get(state, prop, receiver);\r\n    }\r\n  }\r\n\r\n  set(state: IComponentState, prop: PropertyKey, value: any, receiver: IComponentState): boolean {\r\n    if (typeof prop === 'string') {\r\n      state.setPropertyValue(prop, value);\r\n      return true;\r\n    } else {\r\n      return Reflect.set(state, prop, value, receiver);\r\n    }\r\n  }\r\n};\r\n\r\nexport const createComponentState = (engine: IComponentEngine): IComponentStateProxy => {\r\n  return new Proxy<IComponentState>(new ComponentState(engine), new ComponentStateHandler()) as IComponentStateProxy;\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { getStructuredPathInfo } from \"./getStructuredPathInfo\";\r\nimport { IAccessorFunctions, IStructuredPathInfo } from \"./types\";\r\n\r\nexport function createAccessorFunctions(info: IStructuredPathInfo, trackedGetters: Set<string>): IAccessorFunctions {\r\n  const matchPaths = new Set(info.cumulativePaths).intersection(trackedGetters);\r\n  let len = -1;\r\n  let matchPath = '';\r\n  for(const curPath of matchPaths) {\r\n    const pathSegments = curPath.split('.');\r\n    if (pathSegments.length === 1) {\r\n      continue;\r\n    }\r\n    if (pathSegments.length > len) {\r\n      len = pathSegments.length;\r\n      matchPath = curPath;\r\n    }\r\n  }\r\n  if (matchPath.length > 0) {\r\n    const matchInfo = getStructuredPathInfo(matchPath);\r\n    const segments = [];\r\n    let count = matchInfo.wildcardCount;\r\n    for(let i = matchInfo.pathSegments.length; i < info.pathSegments.length; i++) {\r\n      const segment = info.pathSegments[i];\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        segments.push(\".\" + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this[\"${matchPath}\"]${path};`) as ()=> any,\r\n      set : new Function('value', `this[\"${matchPath}\"]${path} = value;`) as (value: any) => void,\r\n    }\r\n  } else {\r\n    const segments = [];\r\n    let count = 0;\r\n    for(const segment of info.pathSegments) {\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        segments.push((segments.length > 0 ? \".\" : \"\") + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this.${path};`) as ()=> any,\r\n      set : new Function('value', `this.${path} = value;`) as (value: any) => void,\r\n    }\r\n  }\r\n\r\n}\r\n","import { inputBuiltinFilters, outputBuiltinFilters } from \"../Filter/builtinFilters.js\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { getStateClassById, registerStateClass } from \"../StateClass/registerStateClass.js\";\r\nimport { getStyleSheetById } from \"../StyleSheet/registerStyleSheet.js\";\r\nimport { registerCss } from \"../StyleSheet/regsiterCss.js\";\r\nimport { createComponentEngine } from \"../ComponentEngine/ComponentEngine.js\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types.js\";\r\nimport { registerHtml } from \"../Template/registerHtml.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { getBaseClass } from \"./getBaseClass.js\";\r\nimport { getComponentConfig } from \"./getComponentConfig.js\";\r\nimport { IComponent, IUserComponentData, IUserConfig, StructiveComponentClass, StructiveComponent } from \"./types\";\r\nimport { getListPathsSetById, getPathsSetById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { IStructiveState, IStructiveStaticState } from \"../StateClass/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { IComponentStateProxy } from \"../ComponentState/types\";\r\nimport { createComponentState } from \"../ComponentState/createComponentState.js\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { createAccessorFunctions } from \"../StateProperty/createAccessorFunctions.js\";\r\nimport { config as globalConfig } from \"./getGlobalConfig.js\";\r\n\r\nfunction findStructiveParent(el:StructiveComponent): IComponent | null {\r\n  let current = el.parentNode;\r\n  while (current) {\r\n    if ((current as StructiveComponent).state && (current as StructiveComponent).isStructive) {\r\n      return current as StructiveComponent;\r\n    }\r\n    current = current.parentNode;\r\n    if (current instanceof ShadowRoot) {\r\n      if (current.host && (current.host as StructiveComponent).state && (current.host as StructiveComponent).isStructive) {\r\n        return current.host as StructiveComponent;\r\n      }\r\n      current = current.host;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function createComponentClass(componentData: IUserComponentData): StructiveComponentClass {\r\n  const config = (componentData.stateClass.$config ?? {})as IUserConfig;\r\n  const componentConfig = getComponentConfig(config);\r\n  const id = generateId();\r\n  const { html, css, stateClass } = componentData;\r\n  const inputFilters:FilterWithOptions = Object.assign({}, inputBuiltinFilters);\r\n  const outputFilters:FilterWithOptions = Object.assign({}, outputBuiltinFilters);\r\n  stateClass.$isStructive = true;\r\n  registerHtml(id, html);\r\n  registerCss(id, css);\r\n  registerStateClass(id, stateClass);\r\n  const baseClass = getBaseClass(componentConfig.extends);\r\n  const extendTagName = componentConfig.extends;\r\n  return class extends baseClass implements IComponent {\r\n    #engine: IComponentEngine;\r\n    #componentState: IComponentStateProxy;\r\n\r\n    constructor() {\r\n      super();\r\n      this.#engine = createComponentEngine(componentConfig, this as StructiveComponent);\r\n      this.#componentState = createComponentState(this.#engine);\r\n    }\r\n\r\n    connectedCallback() {\r\n      this.#engine.connectedCallback();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n      this.#engine.disconnectedCallback();\r\n    }\r\n\r\n    #parentStructiveComponent: IComponent | null | undefined;\r\n    get parentStructiveComponent(): IComponent | null {\r\n      if (typeof this.#parentStructiveComponent === \"undefined\") {\r\n        this.#parentStructiveComponent = findStructiveParent(this as StructiveComponent);\r\n      }\r\n      return this.#parentStructiveComponent;\r\n    }\r\n\r\n    get state(): IComponentStateProxy {\r\n      return this.#componentState;\r\n    }\r\n\r\n    get isStructive(): boolean {\r\n      return this.#engine.stateClass.$isStructive ?? false;\r\n    }\r\n\r\n    getBindingsFromChild(component: IComponent): Set<IBinding> | null {\r\n      return this.#engine.bindingsByComponent.get(component as StructiveComponent) ?? null;\r\n    }\r\n\r\n    static define(tagName:string) {\r\n      if (extendTagName) {\r\n        customElements.define(tagName, this, { extends: extendTagName });\r\n      } else {\r\n        customElements.define(tagName, this);\r\n      }\r\n    }\r\n\r\n    static get id():number {\r\n      return id;\r\n    }\r\n    static #html:string = html;\r\n    static get html():string {\r\n      return this.#html;\r\n    }\r\n    static set html(value:string) {\r\n      this.#html = value;\r\n      registerHtml(this.id, value);\r\n      this.#template = null;\r\n    }\r\n\r\n    static #css:string = css;\r\n    static get css() {\r\n      return this.#css;\r\n    }\r\n    static set css(value:string) {\r\n      this.#css = value;\r\n      registerCss(this.id, value);\r\n      this.#styleSheet = null;\r\n    }\r\n    static #template: HTMLTemplateElement | null = null;\r\n    static get template():HTMLTemplateElement {\r\n      if (!this.#template) {\r\n        this.#template = getTemplateById(this.id);\r\n      }\r\n      return this.#template;\r\n    }\r\n    static #styleSheet: CSSStyleSheet | null = null;\r\n    static get styleSheet():CSSStyleSheet {\r\n      if (!this.#styleSheet) {\r\n        this.#styleSheet = getStyleSheetById(this.id);\r\n      }\r\n      return this.#styleSheet;\r\n    }\r\n    static #stateClass: IStructiveState | null = null;\r\n    static get stateClass():IStructiveState {\r\n      if (!this.#stateClass) {\r\n        this.#stateClass = getStateClassById(this.id) as IStructiveState;\r\n      }\r\n      return this.#stateClass;\r\n    }\r\n    static #inputFilters:FilterWithOptions = inputFilters;\r\n    static get inputFilters():FilterWithOptions {\r\n      return this.#inputFilters;\r\n    }\r\n    static #outputFilters:FilterWithOptions = outputFilters;\r\n    static get outputFilters():FilterWithOptions {\r\n      return this.#outputFilters;\r\n    }\r\n    static get listPaths(): Set<string> {\r\n      return getListPathsSetById(this.id);\r\n    }\r\n    static get paths(): Set<string> {\r\n      return getPathsSetById(this.id);\r\n    }\r\n    static #trackedGetters: Set<string> | null = null;\r\n    static get trackedGetters(): Set<string> {\r\n      if(this.#trackedGetters === null) {\r\n        this.#trackedGetters = new Set<string>();\r\n        let currentProto = this.stateClass.prototype;\r\n        while (currentProto && currentProto !== Object.prototype) {\r\n          const trackedGetters = Object.getOwnPropertyDescriptors(currentProto);\r\n          if (trackedGetters) {\r\n            for (const [key, desc] of Object.entries(trackedGetters)) {\r\n              if ((desc as PropertyDescriptor).get) {\r\n                this.#trackedGetters.add(key);\r\n              }\r\n            }\r\n          }\r\n          currentProto = Object.getPrototypeOf(currentProto);\r\n        }\r\n        if (globalConfig.optimizeAccessor) {\r\n          for(const path of this.paths) {\r\n            const info = getStructuredPathInfo(path);\r\n            if (info.pathSegments.length === 1) {\r\n              continue;\r\n            }\r\n            if (this.#trackedGetters.has(path)) {\r\n              continue;\r\n            }\r\n            const funcs = createAccessorFunctions(info, this.#trackedGetters);\r\n            Object.defineProperty(this.stateClass.prototype, path, {\r\n              get: funcs.get,\r\n              set: funcs.set,\r\n              enumerable: true,\r\n              configurable: true,\r\n            });\r\n          }\r\n        }\r\n      }\r\n      return this.#trackedGetters;\r\n\r\n    }\r\n  } as StructiveComponentClass;\r\n}\r\n","import { getGlobalConfig } from \"./getGlobalConfig.js\";\r\nimport { IUserConfig, IComponentConfig } from \"./types\";\r\n\r\nexport function getComponentConfig(userConfig: IUserConfig): IComponentConfig {\r\n  const globalConfig = getGlobalConfig();\r\n  return {\r\n    enableShadowDom: userConfig.enableShadowDom ?? globalConfig.enableShadowDom,\r\n    extends        : userConfig.extends ?? null,\r\n  };\r\n}","import { Constructor } from \"./types\";\r\n\r\nexport function getBaseClass(extendTagName: string | null):Constructor<HTMLElement> {\r\n  return extendTagName ? (document.createElement(extendTagName).constructor as Constructor<HTMLElement>) : HTMLElement;\r\n}","import { IStructiveState } from \"../StateClass/types\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nfunction escapeEmbed(html: string): string {\r\n  return html.replaceAll(/\\{\\{([^\\}]+)\\}\\}/g, (match, expr) => {\r\n    return `<!--{{${expr}}}-->`;\r\n  });\r\n}\r\n\r\nfunction unescapeEmbed(html:string):string {\r\n  return html.replaceAll(/<!--\\{\\{([^\\}]+)\\}\\}-->/g, (match, expr) => {\r\n    return `{{${expr}}}`;\r\n  });\r\n}\r\n\r\nexport async function createSingleFileComponent(text: string): Promise<IUserComponentData> {\r\n  const template = document.createElement(\"template\");\r\n  template.innerHTML = escapeEmbed(text);\r\n\r\n  const html = template.content.querySelector(\"template\");\r\n  html?.remove();\r\n\r\n  const script = template.content.querySelector(\"script[type=module]\") as HTMLScriptElement;\r\n  const b64 = btoa(String.fromCodePoint(...new TextEncoder().encode(script.text)));\r\n  const scriptModule = script ? await import(\"data:application/javascript;base64,\" + b64) : {};\r\n//  const scriptModule = script ? await import(\"data:text/javascript;charset=utf-8,\" + script.text) : {};\r\n  script?.remove();\r\n\r\n  const style = template.content.querySelector(\"style\");\r\n  style?.remove();\r\n\r\n  const stateClass = (scriptModule.default ?? class {}) as IStructiveState;\r\n  \r\n  return {\r\n    text,\r\n    html      : unescapeEmbed(html?.innerHTML ?? \"\").trim(),\r\n    css       : style?.textContent ?? \"\",\r\n    stateClass,\r\n  }\r\n}","import { createSingleFileComponent } from \"./createSingleFileComponent.js\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nexport async function loadSingleFileComponent(path: string): Promise<IUserComponentData> {\r\n  const response = await fetch(import.meta.resolve(path));\r\n  const text = await response.text();\r\n  return createSingleFileComponent(text);\r\n}\r\n","import { StructiveComponentClass } from \"./types\";\r\n\r\nexport function registerComponentClass(tagName: string, componentClass: StructiveComponentClass) {\r\n  componentClass.define(tagName);\r\n}","import { raiseError } from \"../utils\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst SLOT_KEY = \"router\";\r\nconst DEFAULT_LAYOUT = `<slot name=\"${SLOT_KEY}\"></slot>`;\r\n\r\nexport class MainWrapper extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n    if (config.enableShadowDom) {\r\n      this.attachShadow({ mode: 'open' });\r\n    }\r\n  }\r\n\r\n  async connectedCallback() {\r\n    await this.loadLayout();\r\n    this.render();\r\n  }\r\n\r\n  get root(): ShadowRoot | HTMLElement {\r\n    return this.shadowRoot ?? this;\r\n  }\r\n\r\n  async loadLayout() {\r\n    if (config.layoutPath) {\r\n      const response = await fetch(config.layoutPath);\r\n      if (response.ok) {\r\n        const layoutText = await response.text();\r\n        const workTemplate = document.createElement(\"template\");\r\n        workTemplate.innerHTML = layoutText;\r\n      \r\n        const template = workTemplate.content.querySelector(\"template\");\r\n        const style = workTemplate.content.querySelector(\"style\") as CSSStyleSheet | null;\r\n      \r\n        this.root.appendChild(template?.content ?? document.createDocumentFragment());\r\n        if (style) {\r\n          const shadowRootOrDocument = this.shadowRoot ?? document;\r\n          const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n          if (!styleSheets.includes(style)) {\r\n            shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, style];\r\n          }\r\n        }\r\n      } else {\r\n        raiseError(`Failed to load layout from ${config.layoutPath}`);\r\n      }\r\n    } else {\r\n      this.root.innerHTML = DEFAULT_LAYOUT;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // add router\r\n    if (config.enableRouter) {\r\n      const router = document.createElement(config.routerTagName);\r\n      router.setAttribute('slot', SLOT_KEY);\r\n      this.root.appendChild(router);\r\n    }\r\n  }\r\n}\r\n","import { entryRoute } from \"../Router/Router\";\r\nimport { createComponentClass } from \"./createComponentClass\";\r\nimport { loadImportmap } from \"./loadImportmap\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent\";\r\nimport { registerComponentClass } from \"./registerComponentClass\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nconst ROUTES_KEY = \"@routes/\";\r\nconst COMPONENTS_KEY = \"@components/\";\r\n\r\nexport async function loadFromImportMap(): Promise<void> {\r\n  const importmap = loadImportmap();\r\n  if (importmap.imports) {\r\n    for (const [alias, value] of Object.entries(importmap.imports)) {\r\n      let tagName;\r\n      if (alias.startsWith(ROUTES_KEY)) {\r\n        const path = alias.slice(ROUTES_KEY.length - 1); // remove the prefix '@routes'\r\n        const pathWithoutParams = path.replace(/:[^\\s/]+/g, \"\"); // remove the params\r\n        tagName = \"routes\" + pathWithoutParams.replace(/\\//g, \"-\"); // replace '/' with '-'\r\n        entryRoute(tagName, path === \"/root\" ? \"/\" : path); // routing\r\n      } if (alias.startsWith(COMPONENTS_KEY)) {\r\n        tagName = alias.slice(COMPONENTS_KEY.length - 1); // remove the prefix '@components'\r\n      }\r\n      if (!tagName) {\r\n        continue;\r\n      }\r\n\r\n      let componentData : IUserComponentData | null = null;\r\n      componentData = await loadSingleFileComponent(alias);\r\n      const componentClass = createComponentClass(componentData);\r\n      registerComponentClass(tagName, componentClass);\r\n    }\r\n  }\r\n\r\n} \r\n","import { IImportMap } from \"./types\";\r\n\r\nexport function loadImportmap():IImportMap {\r\n  const importmap: IImportMap = {};\r\n  document.querySelectorAll(\"script[type='importmap']\").forEach(script => {\r\n    const scriptImportmap = JSON.parse(script.innerHTML);\r\n    if (scriptImportmap.imports) {\r\n      importmap.imports = Object.assign(importmap.imports || {}, scriptImportmap.imports);\r\n    }\r\n  });\r\n  return importmap;\r\n}\r\n\r\n","import { registerSingleFileComponents } from \"./WebComponents/registerSingleFIleComponents.js\";\r\nimport { bootstrap } from \"./bootstrap.js\";\r\nimport { config as _config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { IConfig } from \"./WebComponents/types\";\r\n\r\nexport const config: IConfig = _config;\r\n\r\nlet initialized = false;\r\nexport async function defineComponents(singleFileComponents: Record<string, string>):Promise<void> {\r\n  await registerSingleFileComponents(singleFileComponents);\r\n  if (config.autoInit) {\r\n    await bootstrapStructive();\r\n  }\r\n}\r\n\r\nexport async function bootstrapStructive():Promise<void> {\r\n  if (!initialized) {\r\n    await bootstrap();\r\n    initialized = true;\r\n  }\r\n}\r\n\r\n","import { entryRoute } from \"../Router/Router.js\";\r\nimport { createComponentClass } from \"./createComponentClass.js\";\r\nimport { config } from \"./getGlobalConfig.js\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent.js\";\r\nimport { registerComponentClass } from \"./registerComponentClass.js\";\r\nimport { IUserComponentData, SingleFileComponents } from \"./types\";\r\n\r\nexport async function registerSingleFileComponents(singleFileComponents:SingleFileComponents):Promise<void> {\r\n  for(const [ tagName, path ] of Object.entries(singleFileComponents)) {\r\n    let componentData : IUserComponentData | null = null;\r\n    if (config.enableRouter) {\r\n      const routePath = path.startsWith(\"@routes\") ? path.slice(7) : path; // remove the prefix 'routes:'\r\n      entryRoute(tagName, routePath === \"/root\" ? \"/\" : routePath); // routing\r\n    }\r\n    componentData = await loadSingleFileComponent(path);\r\n    const componentClass = createComponentClass(componentData);\r\n    registerComponentClass(tagName, componentClass);\r\n  }\r\n}","import { MainWrapper } from \"./MainWrapper/MainWrapper.js\";\r\nimport { Router } from \"./Router/Router.js\";\r\nimport { config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { loadFromImportMap } from \"./WebComponents/loadFromImportMap.js\";\r\n\r\nexport async function bootstrap(): Promise<void> {\r\n  if (config.autoLoadFromImportMap) {\r\n    await loadFromImportMap();\r\n  }\r\n\r\n  if (config.enableRouter) {\r\n    customElements.define(config.routerTagName, Router);\r\n  }\r\n\r\n  if (config.enableMainWrapper) {\r\n    customElements.define(config.mainTagName, MainWrapper);\r\n    if (config.autoInsertMainWrapper) {\r\n      const mainWrapper = document.createElement(config.mainTagName);\r\n      document.body.appendChild(mainWrapper);\r\n    }\r\n  }\r\n}"],"names":["ROUTE_PATH_PREFIX","routeEntries","globalRouter","Router","HTMLElement","_popstateHandler","constructor","super","this","popstateHandler","bind","connectedCallback","innerHTML","window","addEventListener","dispatchEvent","Event","disconnectedCallback","removeEventListener","event","preventDefault","render","navigate","to","history","pushState","Array","from","childNodes","filter","n","getAttribute","forEach","removeChild","routePath","location","pathname","tagName","params","path","tag","regex","RegExp","replace","test","matches","match","key","index","substring","customElement","document","createElement","setAttribute","JSON","stringify","appendChild","messageElement","textContent","entryRoute","startsWith","push","globalConfig","debug","locale","enableShadowDom","enableMainWrapper","enableRouter","autoInsertMainWrapper","autoInit","mainTagName","routerTagName","layoutPath","autoLoadFromImportMap","optimizeList","optimizeListElements","optimizeAccessor","getGlobalConfig","config","optionsRequired","fnName","Error","optionMustBeNumber","valueMustBeNumber","valueMustBeDate","builtinFilters","eq","options","opt","optValue","Number","isNaN","value","ne","not","valueMustBeBoolean","lt","le","gt","ge","inc","dec","mul","div","fix","toFixed","toLocaleString","uc","toString","toUpperCase","lc","toLowerCase","cap","v","length","charAt","slice","trim","substr","opt1","opt1Value","opt2","opt2Value","pad","padStart","rep","repeat","rev","split","reverse","join","int","parseInt","float","parseFloat","round","Math","pow","floor","ceil","percent","date","Date","toLocaleDateString","time","toLocaleTimeString","datetime","ymd","year","getFullYear","month","getMonth","day","getDate","falsy","truthy","defaults","boolean","Boolean","number","string","String","null","outputBuiltinFilters","inputBuiltinFilters","id","generateId","raiseError","message","stateClassById","styleSheetById","registerCss","css","styleSheet","CSSStyleSheet","replaceSync","registerStyleSheet","textToFilter","filters","text","name","cache","Map","createFilters","texts","result","get","i","set","BindingNode","binding","node","decorates","bindContents","Set","subName","init","update","assignValue","bindingState","filteredValue","updateElements","listIndexes","values","isSelectElement","HTMLSelectElement","isFor","BindingNodeAttribute","BindingNodeCheckbox","isArray","element","checked","map","_val","includes","BindingNodeClassList","className","BindingNodeClassName","classList","add","remove","BindingNodeEvent","e","handler","engine","stateProxy","updater","loopContext","parentBindContent","currentLoopContext","indexes","serialize","context","listIndex","stopPropagation","addProcess","async","typeOfValue","setLoopContext","Reflect","apply","createBindingNodeEvent","filterTexts","filterFns","DATA_BIND_ATTRIBUTE","COMMENT_EMBED_MARK","COMMENT_TEMPLATE_MARK","BindingNodeBlock","BindingNodeIf","bindContent","trueBindContents","falseBindContents","createBindContent","parentNode","mountAfter","nextSibling","unmount","BindingNodeFor","bindContentsSet","bindContentByListIndex","WeakMap","bindContentPool","bindContentLastIndex","lastListIndexSet","assignListIndex","pattern","deleteBindContent","clearListIndex","poolLength","listIndexesSet","getListIndexesSet","info","newBindContensSet","lastBindContent","removeBindContentsSet","diff","difference","lastNode","getLastNode","firstChildNode","oldListValues","getList","currentBindContents","targetBindContents","lastChildNode","oldValue","targetIndex","indexOf","prevBindContent","saveList","createBindingNodeFor","DEFAULT_PROPERTY","defaultPropertyByElementType","kt","Ft","button","_cache","getDefaultPropertyByNodeType","HTMLTextAreaElement","HTMLOptionElement","HTMLButtonElement","HTMLAnchorElement","HTMLFormElement","HTMLInputElement","type","SVGElement","undefined","Text","Template","defaultEventByName","selected","BindingNodeProperty","defaultName","nodeType","getDefaultName","eventName","updateStateValue","createBindingNodeProperty","BindingNodeRadio","BindingNodeStyle","style","setProperty","symbolName","RenderSymbol","Symbol","for","BindParentComponentSymbol","BindingNodeComponent","bindings","bindingsByComponent","state","nodePropertyConstructorByNameByIsComment","At","jt","nodePropertyConstructorByFirstName","Gt","getBindingNodeCreator","propertyName","isComment","Comment","isElement","Element","fn","bindingNodeCreatorByName","nameElements","bindingNodeCreatorByFirstName","_getBindingNodeCreator","GetByRefSymbol","SetByRefSymbol","SetCacheableSymbol","ConnectedCallbackSymbol","DisconnectedCallbackSymbol","ResolveSymbol","GetAllSymbol","StructuredPathInfo","static","pathSegments","lastSegment","cumulativePaths","cumulativeInfos","cumulativeInfoSet","wildcardPaths","wildcardInfos","wildcardInfoSet","wildcardParentPaths","wildcardParentInfos","wildcardParentInfoSet","lastWildcardPath","lastWildcardInfo","parentPath","parentInfo","wildcardCount","children","getPattern","_pattern","getStructuredPathInfo","currentPatternPath","prevPatternPath","reservedWords","structuredPath","has","BindingState","listIndexRef","deref","find","saveBinding","BindingStateIndex","indexNumber","loopContexts","bindingsByListIndex","ereg","getBindingStateCreator","createBindingStateIndex","createBindingState","getTextByNodeType","Vt","getTemplateById","nodeTypeByNodeKey","getNodeType","nodeKey","createNodeKey","getNodeTypeByNode","s","re","decode","m","exec","decodeURIComponent","parseFilter","parseProperty","property","parseExpressions","expression","bindExpression","decoratesExpression","nodePropertyText","statePropertyText","nodeProperty","inputFilterTexts","stateProperty","outputFilterTexts","parseExpression","removeAttributeFromElement","removeAttribute","removeAttributeByNodeType","replaceTextNodeFn","textNode","createTextNode","replaceChild","DataBindAttributes","nodePath","bindTexts","creatorByText","bindText","getDataBindText","removeDataBindAttribute","replaceTextNodeFromComment","routeIndexes","getAbsoluteNodePath","parseBindText","creator","createBindingNode","getNodesHavingDataBind","root","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","acceptNode","hasAttribute","FILTER_ACCEPT","FILTER_SKIP","isCommentNode","nextNode","currentNode","listDataBindAttributesById","listPathsSetById","pathsSetById","getDataBindAttributesFromTemplate","content","createDataBindAttributes","templateById","registerTemplate","template","rootId","Node","TEXT_NODE","nodeValue","dataBindAttributes","paths","listPaths","attribute","j","registerDataBindAttributes","Binding","bindingNode","version","inputFilters","outputFilters","createBinding","LoopContext","WeakRef","parentLoopContext","currentBinding","parentBinding","walk","callback","results","unshift","bindingsWithSelectElement","createBindings","attributes","getDataBindAttributesById","reduce","BindContent","fragment","isMounted","lastBinding","size","at","importNode","createContent","createLoopContext","mount","mountBefore","beforeNode","insertBefore","afterNode","createRefKey","_getByRef","target","receiver","lastTrackingStack","lastPattern","addDependentProp","refKey","cacheable","setStatePropertyRef","parentListIndex","parentValue","getByRef","trackedGetters","trackingStack","pop","setTracking","prop","methodGetByRef","setByRef","addUpdatedStatePropertyRefValue","methodSetByRef","setCacheable","methodSetChargeable","call","resolve","wildcardParentPattern","getAll","_resolve","wildcardPattern","getContextListIndex","walkWildcardPattern","wildardIndexPos","indexPos","parentIndexes","listIndexSet","concat","resultIndexes","resultValues","ResolvedPathInfo","elements","wildcardType","wildcardIndexes","tmpPatternElements","incompleteCount","completeCount","lastPath","getResolvedPathInfo","getListIndex","matchIndexPropertyName","apiProps","ref","getLastStatePropertyRef","resolvedInfo","callableApi","StateHandler","apiGetByRef","apiSetByRef","apiSetCacheable","trapGet","trapSet","createDependencyKey","dependencyWalker","entryRef","traced","walkSub","edges","dependentTree","edge","overridedType","createDependencyWalker","ListIndex","position","truncate","reverseIterator","iterator","next","createListIndex","listWalkerSub","listIndexLen","subListIndex","listWalker","BLANK_LISTINDEXES_SET","buildListIndexTree","newListIndexesSet","oldListIndexesSet","oldListIndexesByItem","groupBy","curListIndex","shift","addUpdatedListIndex","saveListIndexesSet","restructListIndexes","infos","updateValues","refKeys","bt","elementInfoSet","dependentWalker","nowOnList","listInfoSet","refInfo","wildcardMatchPaths","intersection","longestMatchAt","_info","_listIndex","existsBindingsByInfo","cacheListIndexSet","Updater","processList","updatedProperties","updatedValues","process","waitForQueueEntry","terminate","waitForMainLoopTerminate","Promise","withResolvers","main","waitForComponentInit","promise","performance","mark","updatingCount","measure","console","log","getEntriesByType","clearMeasures","clearMarks","error","updateState","rebuild","retArrayElementBindings","retBindings","updatedProiperties","clear","updatedRefs","arrayElementBindingByParentRefKey","item","parentRef","parentRefKey","builtStatePropertyRefKeySet","affectedRefs","getBindings","bindingInfo","Object","assign","entries","arrayElementBindings","Ce","hn","arrayElementBinding","attachShadow","extends","canHaveShadowRoot","mode","adoptedStyleSheets","shadowRootOrDocument","ShadowRoot","getParentShadowRoot","styleSheets","buildListIndexTreeSub","listInfos","searchPath","subValue","ComponentEngine","stateClass","baseClass","owner","waitForInitialize","stackStructuredPathInfo","stackListIndex","componentClass","Proxy","createUpdater","checkDependentProp","listPath","dataset","json","parse","shadowRoot","asyncSetStatePropertyRef","lastRef","getLoopContexts","saveInfoByListIndexByResolvedPathInfoId","saveInfoByStructuredPathId","createSaveInfo","list","getSaveInfoByStatePropertyRef","saveInfo","saveInfoByListIndex","dependents","createDependencyEdge","getPropertyValue","setPropertyValue","MUSTACHE_REGEXP","MUSTACHE_TYPES","replaceTemplateTagWithComment","createComment","namespaceURI","newTemplate","childNode","querySelectorAll","registerHtml","html","stack","replaceAll","expr","remain","currentInfo","endTags","lastInfo","replaceMustacheWithTemplateTag","ComponentState","bindParentProperty","propName","defineProperty","unbindParentProperty","bindParentComponent","parent","parentStructiveComponent","getBindingsFromChild","ComponentStateHandler","createAccessorFunctions","matchPaths","len","matchPath","curPath","matchInfo","segments","count","segment","Function","createComponentClass","componentData","componentConfig","userConfig","getComponentConfig","$config","Mn","Rn","pn","$isStructive","registerStateClass","extendTagName","getBaseClass","componentState","component","createComponentEngine","el","current","isStructive","host","findStructiveParent","define","customElements","getStyleSheetById","getStateClassById","getListPathsSetById","getPathsSetById","currentProto","prototype","getOwnPropertyDescriptors","desc","getPrototypeOf","funcs","enumerable","configurable","unescapeEmbed","loadSingleFileComponent","response","fetch","escapeEmbed","querySelector","script","b64","btoa","fromCodePoint","TextEncoder","encode","scriptModule","import","default","createSingleFileComponent","registerComponentClass","SLOT_KEY","DEFAULT_LAYOUT","MainWrapper","loadLayout","ok","layoutText","workTemplate","createDocumentFragment","router","ROUTES_KEY","COMPONENTS_KEY","loadFromImportMap","importmap","scriptImportmap","imports","loadImportmap","alias","_config","initialized","defineComponents","singleFileComponents","registerSingleFileComponents","bootstrapStructive","mainWrapper","body","bootstrap"],"mappings":"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"}
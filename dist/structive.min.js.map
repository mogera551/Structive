{"version":3,"file":"structive.min.js","sources":["../src/Router/Router.ts","../src/WebComponents/getGlobalConfig.ts","../src/Filter/errorMessages.ts","../src/Filter/builtinFilters.ts","../src/GlobalId/generateId.ts","../src/utils.ts","../src/StateClass/registerStateClass.ts","../src/StyleSheet/registerStyleSheet.ts","../src/StyleSheet/regsiterCss.ts","../src/BindingBuilder/createFilters.ts","../src/DataBinding/BindingNode/BindingNode.ts","../src/DataBinding/BindingNode/BindingNodeAttribute.ts","../src/DataBinding/BindingNode/BindingNodeCheckbox.ts","../src/DataBinding/BindingNode/BindingNodeClassList.ts","../src/DataBinding/BindingNode/BindingNodeClassName.ts","../src/StateClass/symbols.ts","../src/DataBinding/BindingNode/BindingNodeEvent.ts","../src/constants.ts","../src/DataBinding/BindingNode/BindingNodeBlock.ts","../src/DataBinding/BindingNode/BindingNodeIf.ts","../src/DataBinding/BindingNode/BindingNodeFor.ts","../src/BindingBuilder/getDefaultName.ts","../src/DataBinding/BindingNode/BindingNodeProperty.ts","../src/DataBinding/BindingNode/BindingNodeRadio.ts","../src/DataBinding/BindingNode/BindingNodeStyle.ts","../src/ComponentState/symbols.ts","../src/DataBinding/BindingNode/BindingNodeComponent.ts","../src/BindingBuilder/getBindingNodeCreator.ts","../src/StateProperty/getStructuredPathInfo.ts","../src/DataBinding/BindingState/BindingState.ts","../src/DataBinding/BindingState/BindingStateIndex.ts","../src/BindingBuilder/getBindingStateCreator.ts","../src/BindingBuilder/getDataBindText.ts","../src/BindingBuilder/getNodeType.ts","../src/BindingBuilder/parseBindText.ts","../src/BindingBuilder/removeDataBindAttribute.ts","../src/BindingBuilder/replaceTextNodeFromComment.ts","../src/BindingBuilder/createDataBindAttributes.ts","../src/BindingBuilder/getAbsoluteNodePath.ts","../src/BindingBuilder/getNodesHavingDataBind.ts","../src/BindingBuilder/registerDataBindAttributes.ts","../src/Template/registerTemplate.ts","../src/Template/removeEmptyTextNodes.ts","../src/DataBinding/Binding.ts","../src/LoopContext/createLoopContext.ts","../src/Updater/render.ts","../src/DataBinding/BindContent.ts","../src/BindingBuilder/resolveNodeFromPath.ts","../src/DependencyWalker/createDependencyEdge.ts","../src/DependencyWalker/createDependencyWalker.ts","../src/ListIndex/createListIndex.ts","../src/ListWalker/listWalker.ts","../src/StatePropertyRef/getStatePropertyRef.ts","../src/Updater/restructListIndex.ts","../src/Updater/updater.ts","../src/ComponentEngine/attachShadow.ts","../src/ComponentEngine/canHaveShadowRoot.ts","../src/StateClass/buildListIndexTree.ts","../src/StateClass/methods/getByRef.ts","../src/StateClass/methods/setTracking.ts","../src/StateClass/apis/getByRef.ts","../src/StateClass/apis/setCacheable.ts","../src/StateClass/methods/setCacheable.ts","../src/StateClass/apis/connectedCallback.ts","../src/StateClass/apis/disconnectedCallback.ts","../src/StateClass/methods/setByRef.ts","../src/StateClass/apis/resolve.ts","../src/StateClass/apis/getAll.ts","../src/StateProperty/getResolvedPathInfo.ts","../src/StateClass/getListIndex.ts","../src/StateClass/traps/get.ts","../src/StateClass/apis/setStatePropertyRef.ts","../src/StateClass/methods/setStatePropertyRef.ts","../src/StateClass/apis/setLoopContext.ts","../src/StateClass/methods/setLoopContext.ts","../src/StateClass/methods/asyncSetStatePropertyRef.ts","../src/StateClass/methods/getLastStatePropertyRef.ts","../src/StateClass/apis/getLastStatePropertyRef.ts","../src/StateClass/apis/getContextListIndex.ts","../src/StateClass/methods/getContextListIndex.ts","../src/StateClass/createReadonlyStateProxy.ts","../src/StateClass/apis/setByRef.ts","../src/StateClass/createWritableStateProxy.ts","../src/StateClass/traps/set.ts","../src/ComponentEngine/ComponentEngine.ts","../src/Template/replaceMustacheWithTemplateTag.ts","../src/Template/replaceTemplateTagWithComment.ts","../src/Template/registerHtml.ts","../src/ComponentState/createComponentState.ts","../src/StateProperty/createAccessorFunctions.ts","../src/WebComponents/createComponentClass.ts","../src/WebComponents/getComponentConfig.ts","../src/WebComponents/getBaseClass.ts","../src/WebComponents/createSingleFileComponent.ts","../src/WebComponents/loadSingleFileComponent.ts","../src/WebComponents/registerComponentClass.ts","../src/MainWrapper/MainWrapper.ts","../src/WebComponents/loadFromImportMap.ts","../src/WebComponents/loadImportmap.ts","../src/exports.ts","../src/WebComponents/registerSingleFIleComponents.ts","../src/bootstrap.ts"],"sourcesContent":["/**\r\n * Router.ts\r\n *\r\n * シングルページアプリケーション（SPA）向けのカスタムエレメント Router の実装です。\r\n *\r\n * 主な役割:\r\n * - ルート定義（entryRoute）に基づき、URLパスに応じてカスタム要素を動的に生成・表示\r\n * - pushState/popstateイベントを利用した履歴管理とルーティング制御\r\n * - ルートパラメータの抽出とカスタム要素への受け渡し\r\n * - 404ページ（未定義ルート時）の表示\r\n *\r\n * 設計ポイント:\r\n * - entryRouteでルートパスとカスタム要素タグ名のペアを登録\r\n * - popstateイベントでURL変更時に自動で再描画\r\n * - ルートパスのパラメータ（:id等）も正規表現で抽出し、data-state属性で渡す\r\n * - getRouterでグローバルなRouterインスタンスを取得可能\r\n */\r\nimport { IRouter } from \"./types\";\r\n\r\nconst DEFAULT_ROUTE_PATH = '/'; // Default route path\r\nconst ROUTE_PATH_PREFIX = 'routes:'; // Prefix for route paths\r\n/**\r\n * example:\r\n * ```ts\r\n * entryRoute('my-view', '/my-view/:id');\r\n */\r\nconst routeEntries: Array<[string, string]> = [];\r\n\r\nlet globalRouter : Router | null = null;\r\n\r\nexport class Router extends HTMLElement implements IRouter {\r\n  _popstateHandler: (event: PopStateEvent) => void;\r\n  constructor() {\r\n    super();\r\n    this._popstateHandler = this.popstateHandler.bind(this);\r\n  }\r\n\r\n  connectedCallback() {\r\n    globalRouter = this;\r\n    this.innerHTML = '<slot name=\"content\"></slot>';\r\n    window.addEventListener('popstate', this._popstateHandler);\r\n    window.dispatchEvent(new Event(\"popstate\")); // Dispatch popstate event to trigger the initial render\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('popstate', this._popstateHandler);\r\n    globalRouter = null;\r\n  }\r\n\r\n  popstateHandler(event: PopStateEvent) {\r\n    event.preventDefault();\r\n    this.render();\r\n  }\r\n\r\n  navigate(to: string) {\r\n    history.pushState({}, '', to);\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    // スロットコンテントをクリア\r\n    const slotChildren = Array.from(this.childNodes).filter(\r\n      n => (n as HTMLElement).getAttribute?.('slot') === 'content'\r\n    );\r\n    slotChildren.forEach(n => this.removeChild(n));\r\n\r\n    const routePath = window.location.pathname || DEFAULT_ROUTE_PATH;\r\n    let tagName: string | undefined = undefined;\r\n    let params: Record<string, string> = {};\r\n    // Check if the routePath matches any of the defined routes\r\n    for (const [path, tag] of routeEntries) {\r\n      const regex = new RegExp(path.replace(/:[^\\s/]+/g, '([^/]+)'));\r\n      if (regex.test(routePath)) {\r\n        tagName = tag;\r\n        // Extract the parameters from the routePath\r\n        const matches = routePath.match(regex);\r\n        if (matches) {\r\n          const keys = path.match(/:[^\\s/]+/g) || [];\r\n          keys.forEach((key, index) => {\r\n            params[key.substring(1)] = matches[index + 1]; // +1 to skip the full match\r\n          });\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (tagName) {\r\n      // If a route matches, create the custom element and set its state\r\n      // Create the custom element with the tag name\r\n      // project the custom element into the router slot\r\n      const customElement = document.createElement(tagName) as HTMLElement;\r\n      customElement.setAttribute('data-state', JSON.stringify(params));\r\n      customElement.setAttribute('slot', 'content');\r\n      this.appendChild(customElement);\r\n    } else {\r\n      // If no route matches, show 404 content\r\n      const messageElement = document.createElement('h1') as HTMLElement;\r\n      messageElement.setAttribute('slot', 'content');\r\n      messageElement.textContent = '404 Not Found';\r\n      this.appendChild(messageElement);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function entryRoute(tagName: string, routePath: string): void {\r\n  if (routePath.startsWith(ROUTE_PATH_PREFIX)) {\r\n    routePath = routePath.substring(ROUTE_PATH_PREFIX.length); // Remove 'routes:' prefix\r\n  }\r\n  routeEntries.push([routePath, tagName]);\r\n}\r\n\r\nexport function getRouter(): Router | null {\r\n  return globalRouter;\r\n}\r\n\r\n","/**\r\n * getGlobalConfig.ts\r\n *\r\n * Structive全体で利用するグローバル設定（IConfig）を定義・取得するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - globalConfig: デフォルトのグローバル設定値（debug, locale, enableShadowDom等）を定義\r\n * - getGlobalConfig: グローバル設定オブジェクトを返す関数\r\n * - config: getGlobalConfig()のエイリアスとして即時取得用にエクスポート\r\n *\r\n * 設計ポイント:\r\n * - コンポーネント全体で共通利用する設定値を一元管理\r\n * - デフォルト値を明示し、拡張やカスタマイズにも対応しやすい設計\r\n */\r\nimport { IConfig } from \"./types\";\r\n\r\nconst globalConfig: IConfig = {\r\n  debug                : false,\r\n  locale               : \"en-US\", // The locale of the component, ex. \"en-US\", default is \"en-US\"\r\n  enableShadowDom      : true,\r\n  enableMainWrapper    : true, // Whether to use the main wrapper or not\r\n  enableRouter         : true, // Whether to use the router or not\r\n  autoInsertMainWrapper: false, // Whether to automatically insert the main wrapper or not\r\n  autoInit             : true, // Whether to automatically initialize the component or not\r\n  mainTagName          : \"app-main\", // The tag name of the main wrapper, default is \"app-main\"\r\n  routerTagName        : \"view-router\", // The tag name of the router, default is \"view-router\"\r\n  layoutPath           : \"\", // The path to the layout file, default is \"\"\r\n  autoLoadFromImportMap: false, // Whether to automatically load the component from the import map or not\r\n  optimizeList         : true, // Whether to optimize the list or not\r\n  optimizeListElements : true, // Whether to optimize the list elements or not\r\n  optimizeAccessor     : true, // Whether to optimize the accessors or not\r\n};\r\n\r\n\r\nexport function getGlobalConfig():IConfig {\r\n  return globalConfig;\r\n}\r\n\r\nexport const config = getGlobalConfig();\r\n","/**\r\n * errorMessages.ts\r\n *\r\n * フィルタ関数などで利用するエラーメッセージ生成ユーティリティです。\r\n *\r\n * 主な役割:\r\n * - フィルタのオプションや値の型チェックで条件を満たさない場合に、分かりやすいエラーメッセージを投げる\r\n * - 関数名を引数に取り、どのフィルタでエラーが発生したかを明示\r\n *\r\n * 設計ポイント:\r\n * - optionsRequired: オプションが必須なフィルタで未指定時にエラー\r\n * - optionMustBeNumber: オプション値が数値でない場合にエラー\r\n * - valueMustBeNumber: 値が数値でない場合にエラー\r\n * - valueMustBeBoolean: 値がbooleanでない場合にエラー\r\n * - valueMustBeDate: 値がDateでない場合にエラー\r\n */\r\nexport function optionsRequired(fnName:string): never {\r\n  throw new Error(`${fnName} requires at least one option`);\r\n}\r\n\r\nexport function optionMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number as option`);\r\n}\r\n\r\nexport function valueMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number value`);\r\n}\r\n\r\nexport function valueMustBeBoolean(fnName:string): never {\r\n  throw new Error(`${fnName} requires a boolean value`);\r\n}\r\n\r\nexport function valueMustBeDate(fnName:string): never {\r\n  throw new Error(`${fnName} requires a date value`);\r\n}","/**\r\n * builtinFilters.ts\r\n *\r\n * Structiveで利用可能な組み込みフィルタ関数群の実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - 数値・文字列・日付・真偽値などの変換・比較・整形・判定用フィルタを提供\r\n * - フィルタ名ごとにオプション付きの関数を定義し、バインディング時に柔軟に利用可能\r\n * - input/output両方のフィルタとして共通利用できる設計\r\n *\r\n * 設計ポイント:\r\n * - eq, ne, lt, gt, inc, fix, locale, uc, lc, cap, trim, slice, pad, int, float, round, date, time, ymd, falsy, truthy, defaults, boolean, number, string, null など多彩なフィルタを網羅\r\n * - オプション値の型チェックやエラーハンドリングも充実\r\n * - FilterWithOptions型でフィルタ関数群を一元管理し、拡張も容易\r\n * - builtinFilterFnでフィルタ名・オプションからフィルタ関数を動的に取得可能\r\n */\r\nimport { getGlobalConfig } from \"../WebComponents/getGlobalConfig.js\";\r\nimport { optionMustBeNumber, optionsRequired, valueMustBeBoolean, valueMustBeDate, valueMustBeNumber } from \"./errorMessages.js\";\r\nimport { FilterWithOptions } from \"./types\";\r\n\r\nconst config = getGlobalConfig();\r\n\r\nconst eq = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('eq');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('eq');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('eq');\r\n    return value === optValue;\r\n  }\r\n}\r\n\r\nconst ne = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ne');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ne');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ne');\r\n    return value !== optValue;\r\n  }\r\n}\r\n\r\nconst not = (options?:string[]) => {\r\n  return (value: any) => {\r\n    if (typeof value !== 'boolean') valueMustBeBoolean('not');\r\n    return !value;\r\n  }\r\n}\r\n\r\nconst lt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('lt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('lt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('lt');\r\n    return value < optValue;\r\n  }\r\n}\r\n\r\nconst le = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('le');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('le');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('le');\r\n    return value <= optValue;\r\n  }\r\n}\r\n\r\nconst gt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('gt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('gt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('gt');\r\n    return value > optValue;\r\n  }\r\n}\r\n\r\nconst ge = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ge');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ge');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ge');\r\n    return value >= optValue;\r\n  }\r\n}\r\n\r\nconst inc = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('inc');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('inc');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('inc');\r\n    return value + optValue;\r\n  }\r\n}\r\n\r\nconst dec = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('dec');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('dec');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('dec');\r\n    return value - optValue;\r\n  }\r\n}\r\n\r\nconst mul = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('mul');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('mul');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('mul');\r\n    return value * optValue;\r\n  }\r\n}\r\n\r\nconst div = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('div');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value / optValue;\r\n  }\r\n}\r\n\r\nconst fix = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value.toFixed(optValue);\r\n  }\r\n}\r\n\r\nconst locale = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('locale');\r\n    return value.toLocaleString(opt);\r\n  }\r\n}\r\n\r\nconst uc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toUpperCase();\r\n  }\r\n}\r\n\r\nconst lc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toLowerCase();\r\n  }\r\n}\r\n\r\nconst cap = (options?:string[]) => {\r\n  return (value: any) => {\r\n    const v = value.toString();\r\n    if (v.length === 0) return v;\r\n    if (v.length === 1) return v.toUpperCase();\r\n    return v.charAt(0).toUpperCase() + v.slice(1);\r\n  }\r\n}\r\n\r\nconst trim = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().trim();\r\n  }\r\n}\r\n\r\nconst slice = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('slice');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('slice');\r\n  return (value: any) => {\r\n    return value.toString().slice(optValue);\r\n  }\r\n}\r\n\r\nconst substr = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('substr');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('substr');\r\n  const opt2 = options?.[1] ?? optionsRequired('substr');\r\n  const opt2Value = Number(opt2);\r\n  if (isNaN(opt2Value)) optionMustBeNumber('substr');\r\n  return (value: any) => {\r\n    return value.toString().substr(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst pad = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('pad');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('pad');\r\n  const opt2 = options?.[1] ?? '0';\r\n  const opt2Value = opt2;\r\n  return (value: any) => {\r\n    return value.toString().padStart(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst rep = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('rep');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('rep');\r\n  return (value: any) => {\r\n    return value.toString().repeat(optValue);\r\n  }\r\n}\r\n\r\nconst rev = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().split('').reverse().join('');\r\n  }\r\n}\r\n\r\nconst int = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseInt(value, 10);\r\n  }\r\n}\r\n\r\nconst float = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseFloat(value);\r\n  }\r\n}\r\n\r\nconst round = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('round');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('round');\r\n    return Math.round(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst floor = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('floor');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('floor');\r\n    return Math.floor(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst ceil = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('ceil');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ceil');\r\n    return Math.ceil(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst percent = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('percent');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('percent');\r\n    return value.toFixed(optValue) + '%';\r\n  }\r\n}\r\n\r\nconst date = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date))  valueMustBeDate('date');\r\n    return value.toLocaleDateString(config.locale);\r\n  }\r\n}\r\n\r\nconst time = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('time');\r\n    return value.toLocaleTimeString(config.locale);\r\n  }\r\n}\r\n\r\nconst datetime = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('datetime');\r\n    return value.toLocaleString(config.locale);\r\n  }\r\n}\r\n\r\nconst ymd = (options?:string[]) => {\r\n  const opt = options?.[0] ?? '-';\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('ymd');\r\n    const year = value.getFullYear().toString();\r\n    const month = (value.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = value.getDate().toString().padStart(2, '0');\r\n    return `${year}${opt}${month}${opt}${day}`;\r\n  }\r\n}\r\n\r\nconst falsy = (options?:string[]) => {\r\n  return (value: any) => value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value);\r\n}\r\n\r\nconst truthy = (options?:string[]) => {\r\n  return (value: any) =>value !== false && value !== null && value !== undefined && value !== 0 && value !== '' && !Number.isNaN(value);\r\n}\r\n\r\nconst defaults = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('defaults');\r\n  return (value: any) => {\r\n    if (value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value)) return opt;\r\n    return value;\r\n  }\r\n}\r\n\r\nconst boolean = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Boolean(value);\r\n  }\r\n}\r\n\r\nconst number = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Number(value);\r\n  }\r\n}\r\n\r\nconst string = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return String(value);\r\n  }\r\n}\r\n\r\nconst _null = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return (value === \"\") ? null : value;\r\n  } \r\n}\r\n\r\nconst builtinFilters: FilterWithOptions = {\r\n  eq,\r\n  ne,\r\n  not,\r\n  \r\n  lt,\r\n  le,\r\n  gt,\r\n  ge,\r\n\r\n  inc,\r\n  dec,\r\n  mul,\r\n  div,\r\n\r\n  fix,\r\n  locale,\r\n  uc,\r\n  lc,\r\n  cap,\r\n  trim,\r\n  slice,\r\n  substr,\r\n  pad,\r\n  rep,\r\n  rev,\r\n\r\n  int,\r\n  float,\r\n  round,\r\n  floor,\r\n  ceil,\r\n  percent,\r\n\r\n  date,\r\n  time,\r\n  datetime,\r\n  ymd,\r\n\r\n  falsy,\r\n  truthy,\r\n  defaults,\r\n\r\n  boolean,\r\n  number,\r\n  string,\r\n  \"null\": _null,\r\n};\r\n\r\nexport const outputBuiltinFilters = builtinFilters;\r\nexport const inputBuiltinFilters = builtinFilters;\r\n\r\nexport const builtinFilterFn = (name:string, options: string[]) => (filters: FilterWithOptions) => {\r\n  const filter = filters[name];\r\n  if (!filter) throw new Error(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(options);\r\n}\r\n\r\n","\r\nlet id = 0;\r\n\r\nexport function generateId(): number {\r\n  return ++id;\r\n}","\r\nexport function raiseError(message: string): never {\r\n  throw new Error(message);\r\n}\r\n","/**\r\n * registerStateClass.ts\r\n *\r\n * StateClassインスタンスをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - stateClassById: IDをキーにStateClassインスタンスを管理するレコード\r\n * - registerStateClass: 指定IDでStateClassインスタンスを登録\r\n * - getStateClassById: 指定IDのStateClassインスタンスを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - グローバルにStateClassインスタンスを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IStructiveState } from \"./types\";\r\n\r\nconst stateClassById: Record<number,IStructiveState> = {};\r\n\r\nexport function registerStateClass(id: number, stateClass: IStructiveState) {\r\n  stateClassById[id] = stateClass;\r\n}\r\n\r\nexport function getStateClassById(id: number): IStructiveState {\r\n  return stateClassById[id] ?? raiseError(`getStateClassById: stateClass not found: ${id}`);\r\n}\r\n","/**\r\n * registerStyleSheet.ts\r\n *\r\n * CSSStyleSheetインスタンスをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - styleSheetById: IDをキーにCSSStyleSheetインスタンスを管理するレコード\r\n * - registerStyleSheet: 指定IDでCSSStyleSheetインスタンスを登録\r\n * - getStyleSheetById: 指定IDのCSSStyleSheetインスタンスを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - グローバルにCSSStyleSheetインスタンスを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nconst styleSheetById: Record<number,CSSStyleSheet> = {};\r\n\r\nexport function registerStyleSheet(id: number, css: CSSStyleSheet) {\r\n  styleSheetById[id] = css;\r\n}\r\n\r\nexport function getStyleSheetById(id: number): CSSStyleSheet {\r\n  return styleSheetById[id] ?? raiseError(`getStyleSheetById: stylesheet not found: ${id}`);\r\n}","/**\r\n * regsiterCss.ts\r\n *\r\n * CSS文字列をCSSStyleSheetとして生成し、IDで登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - CSS文字列からCSSStyleSheetインスタンスを生成\r\n * - registerStyleSheetを利用して、指定IDでCSSStyleSheetを登録\r\n *\r\n * 設計ポイント:\r\n * - styleSheet.replaceSyncで同期的にCSSを適用\r\n * - グローバルなスタイル管理や動的スタイル適用に利用可能\r\n */\r\nimport { registerStyleSheet } from \"./registerStyleSheet.js\";\r\n\r\nexport function registerCss(id: number, css: string) {\r\n  const styleSheet = new CSSStyleSheet();\r\n  styleSheet.replaceSync(css);\r\n  registerStyleSheet(id, styleSheet);\r\n}","import { FilterFn, Filters, FilterWithOptions } from \"../Filter/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\n\r\n/**\r\n * フィルターテキスト（nameとoptionsを持つ）から、実際のフィルター関数（FilterFn）を生成する。\r\n * \r\n * - textToFilter: フィルターテキストから対応するフィルター関数を取得し、オプションを適用して返す。\r\n * - createFilters: フィルターテキスト配列からフィルター関数配列を生成し、同じ入力にはキャッシュを利用する。\r\n */\r\nfunction textToFilter(filters:FilterWithOptions, text: IFilterText): FilterFn {\r\n  const filter = filters[text.name];\r\n  if (!filter) raiseError(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(text.options);\r\n}\r\n\r\nconst cache : Map<IFilterText[], Filters> = new Map();\r\n\r\n/**\r\n * フィルターテキスト配列（texts）からフィルター関数配列（Filters）を生成する。\r\n * すでに同じtextsがキャッシュされていればそれを返す。\r\n * \r\n * @param filters フィルター名→関数の辞書\r\n * @param texts   フィルターテキスト配列\r\n * @returns       フィルター関数配列\r\n */\r\nexport function createFilters(filters:FilterWithOptions, texts: IFilterText[]): Filters {\r\n  let result = cache.get(texts);\r\n  if (typeof result === \"undefined\") {\r\n    result = [];\r\n    for(let i = 0; i < texts.length; i++) {\r\n      result.push(textToFilter(filters, texts[i]));\r\n    }\r\n    cache.set(texts, result);\r\n  }\r\n  return result;\r\n}\r\n","import { Filters } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { IBindingNode } from \"./types\";\r\n\r\n/**\r\n * BindingNodeクラスは、1つのバインディング対象ノード（ElementやTextなど）に対する\r\n * バインディング処理の基底クラスです。\r\n *\r\n * 主な役割:\r\n * - ノード・プロパティ名・フィルタ・デコレータ・バインディング情報の保持\r\n * - バインディング値の更新（update）、値の割り当て（assignValue）のインターフェース提供\r\n * - 複数バインド内容（bindContents）の管理\r\n * - サブクラスでassignValueやupdateElementsを実装し、各種ノード・プロパティごとのバインディング処理を拡張\r\n *\r\n * 設計ポイント:\r\n * - assignValue, updateElementsは未実装（サブクラスでオーバーライド必須）\r\n * - isSelectElement, value, filteredValue, isForなどはサブクラスで用途に応じて拡張\r\n * - フィルタやデコレータ、バインド内容の管理も柔軟に対応\r\n */\r\nexport class BindingNode implements IBindingNode {\r\n  #binding: IBinding;\r\n  #node: Node;\r\n  #name: string;\r\n  #filters: Filters;\r\n  #decorates: string[];\r\n  #bindContents: Set<IBindContent> = new Set<IBindContent>();\r\n  get node(): Node {\r\n    return this.#node;\r\n  }\r\n  get name(): string {\r\n    return this.#name;\r\n  }\r\n  get subName(): string {\r\n    return this.#name;\r\n  }\r\n  get binding(): IBinding {\r\n    return this.#binding;\r\n  }\r\n  get decorates(): string[] {\r\n    return this.#decorates;\r\n  }\r\n  get filters(): Filters {\r\n    return this.#filters;\r\n  }\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#node = node;\r\n    this.#name = name;\r\n    this.#filters = filters;\r\n    this.#decorates = decorates;\r\n  }\r\n  init():void {\r\n    // サブクラスで初期化処理を実装可能\r\n  }\r\n  update(): void {\r\n    this.assignValue(this.binding.bindingState.filteredValue);\r\n  }\r\n  assignValue(value: any): void {\r\n    raiseError(`BindingNode: assignValue not implemented`);\r\n  }\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    raiseError(`BindingNode: updateElements not implemented`);\r\n  }\r\n  get isSelectElement(): boolean {\r\n    return this.node instanceof HTMLSelectElement;\r\n  }\r\n  get value():any {\r\n    return null;\r\n  }\r\n  get filteredValue():any {\r\n    return null;\r\n  }\r\n  get isFor(): boolean {\r\n    return false;\r\n  }\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeAttributeクラスは、属性バインディング（例: attr.src, attr.alt など）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - ノード属性名（subName）を抽出し、値を属性としてElementにセット\r\n * - null/undefined/NaNの場合は空文字列に変換してセット\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameから属性名（subName）を抽出（例: \"attr.src\" → \"src\"）\r\n * - assignValueで属性値を常に文字列として設定\r\n * - createBindingNodeAttributeファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeAttribute extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as Element;\r\n    element.setAttribute(this.subName, value.toString());\r\n  }\r\n}\r\n\r\n/**\r\n * 属性バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeAttributeインスタンスを生成\r\n */\r\nexport const createBindingNodeAttribute: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeAttribute(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeCheckboxクラスは、チェックボックス（input[type=\"checkbox\"]）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（配列）に現在のvalueが含まれているかどうかでchecked状態を制御\r\n * - 値が配列でない場合はエラーを投げる\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで配列内にvalueが含まれていればchecked=true\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeCheckbox extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeCheckbox.update: value is not array`, );\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.map(_val => _val.toString()).includes(element.value);\r\n  }\r\n}\r\n\r\n/**\r\n * チェックボックス用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeCheckboxインスタンスを生成\r\n */\r\nexport const createBindingNodeCheckbox: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeCheckbox(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeClassListクラスは、class属性（classList）のバインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（配列）を空白区切りのclass属性値としてElementにセット\r\n * - 値が配列でない場合はエラーを投げる\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで配列を受け取り、join(\" \")でclassNameに反映\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeClassList extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeClassList.update: value is not array`);\r\n    }\r\n    const element = this.node as Element;\r\n    element.className = value.join(\" \");\r\n  }\r\n}\r\n\r\n/**\r\n * classList用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeClassListインスタンスを生成\r\n */\r\nexport const createBindingNodeClassList: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassList(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeClassNameクラスは、class属性の個別クラス名（例: class.active など）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（boolean）に応じて、指定クラス名（subName）をElementに追加・削除\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからクラス名（subName）を抽出（例: \"class.active\" → \"active\"）\r\n * - assignValueでboolean値のみ許容し、型が異なる場合はエラー\r\n * - trueならclassList.add、falseならclassList.removeでクラス操作\r\n * - ファクトリ関数でフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeClassName extends BindingNode {\r\n  #subName: string;\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeClassName.update: value is not boolean`);\r\n    }\r\n    const element = this.node as Element;\r\n    if (value) {\r\n      element.classList.add(this.subName);\r\n    } else {\r\n      element.classList.remove(this.subName);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * class名バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeClassNameインスタンスを生成\r\n */\r\nexport const createBindingNodeClassName: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassName(binding, node, name, filterFns, decorates);\r\n  }\r\n","\r\nconst symbolName = \"state\";\r\n\r\nexport const GetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.GetByRef`);\r\nexport const SetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.SetByRef`);\r\nexport const SetCacheableSymbol        : unique symbol = Symbol.for(`${symbolName}.SetCacheable`);\r\nexport const ConnectedCallbackSymbol   : unique symbol = Symbol.for(`${symbolName}.ConnectedCallback`);\r\nexport const DisconnectedCallbackSymbol: unique symbol = Symbol.for(`${symbolName}.DisconnectedCallback`);\r\nexport const ResolveSymbol             : unique symbol = Symbol.for(`${symbolName}.Resolve`);\r\nexport const GetAllSymbol              : unique symbol = Symbol.for(`${symbolName}.GetAll`);\r\nexport const SetStatePropertyRefSymbol : unique symbol = Symbol.for(`${symbolName}.SetStatePropertyRef`);\r\nexport const SetLoopContextSymbol      : unique symbol = Symbol.for(`${symbolName}.SetLoopContext`);\r\nexport const GetLastStatePropertyRefSymbol: unique symbol = Symbol.for(`${symbolName}.GetLastStatePropertyRef`);\r\nexport const GetContextListIndexSymbol : unique symbol = Symbol.for(`${symbolName}.GetContextListIndex`);\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { SetLoopContextSymbol } from \"../../StateClass/symbols.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeEventクラスは、イベントバインディング（onClick, onInputなど）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - 指定イベント（on～）に対して、バインディングされた関数をイベントリスナーとして登録\r\n * - デコレータ（preventDefault, stopPropagation）によるイベント制御に対応\r\n * - ループコンテキストやリストインデックスも引数としてイベントハンドラに渡す\r\n * - ハンドラ実行時はstateProxyを生成し、Updater経由で非同期的に状態を更新\r\n *\r\n * 設計ポイント:\r\n * - nameからイベント名（subName）を抽出し、addEventListenerで登録\r\n * - バインディング値が関数でない場合はエラー\r\n * - デコレータでpreventDefault/stopPropagationを柔軟に制御\r\n * - ループ内イベントにも対応し、リストインデックスを引数展開\r\n */\r\nclass BindingNodeEvent extends BindingNode {\r\n  #subName    : string;\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#subName = this.name.slice(2); // on～\r\n    const element = node as HTMLElement;\r\n    element.addEventListener(this.subName, (e:Event) => this.handler(e));\r\n  }\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  update() {\r\n    // 何もしない（イベントバインディングは初期化時のみ）\r\n  }\r\n\r\n  handler(e: Event) {\r\n    const engine = this.binding.engine;\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n    const indexes = loopContext?.serialize().map((context) => context.listIndex.index) ?? [];\r\n    const options = this.decorates;\r\n    const value = this.binding.bindingState.value;\r\n    const typeOfValue = typeof value;\r\n    if (typeOfValue !== \"function\") {\r\n      raiseError(`BindingNodeEvent: ${this.name} is not a function.`);\r\n    }\r\n    if (options.includes(\"preventDefault\")) {\r\n      e.preventDefault();\r\n    }\r\n    if (options.includes(\"stopPropagation\")) {\r\n      e.stopPropagation();\r\n    }\r\n    this.binding.engine.updater.addProcess(async () => {\r\n      const stateProxy = engine.createWritableStateProxy();\r\n      await stateProxy[SetLoopContextSymbol](loopContext, async () => {\r\n        await Reflect.apply(value, stateProxy, [e, ...indexes]);\r\n      });\r\n    });\r\n  } \r\n}\r\n\r\n/**\r\n * イベントバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeEventインスタンスを生成\r\n */\r\nexport const createBindingNodeEvent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeEvent(binding, node, name, filterFns, decorates);\r\n  }\r\n","export const DATA_BIND_ATTRIBUTE = \"data-bind\";\r\nexport const COMMENT_EMBED_MARK = \"@@:\"; // 埋め込み変数のマーク\r\nexport const COMMENT_TEMPLATE_MARK = \"@@|\"; // テンプレートのマーク\r\n","import { COMMENT_TEMPLATE_MARK } from \"../../constants.js\";\r\nimport { Filters } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\n\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\n/**\r\n * BindingNodeBlockクラスは、テンプレートブロック（コメントノードによるテンプレート挿入部）を\r\n * バインディング対象とするためのバインディングノード実装です。\r\n *\r\n * 主な役割:\r\n * - コメントノード内のテンプレートIDを抽出し、idプロパティとして保持\r\n * - テンプレートブロックのバインディング処理の基盤となる\r\n *\r\n * 設計ポイント:\r\n * - コメントノードのテキストからテンプレートIDを抽出（COMMENT_TEMPLATE_MARK以降を数値変換）\r\n * - IDが取得できない場合はエラーを投げる\r\n * - 他のBindingNode系クラスと同様、フィルタやデコレータにも対応\r\n */\r\nexport class BindingNodeBlock extends BindingNode {\r\n  #id: number;\r\n  get id(): number {\r\n    return this.#id;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const id = this.node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN) ?? raiseError(\"BindingNodeBlock.id: invalid node\");\r\n    this.#id = Number(id);\r\n  }\r\n    \r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeIfクラスは、ifバインディング（条件付き描画）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（boolean）に応じて、BindContent（描画内容）のマウント・アンマウントを制御\r\n * - true/false時のBindContent集合を管理し、現在の描画状態をbindContentsで取得可能\r\n *\r\n * 設計ポイント:\r\n * - assignValueでboolean型以外が渡された場合はエラー\r\n * - trueならBindContentをrender・mount、falseならunmount\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeIf extends BindingNodeBlock {\r\n  #bindContent: IBindContent;\r\n  #trueBindContents: Set<IBindContent>;\r\n  #falseBindContents: Set<IBindContent> = new Set();\r\n  #bindContents: Set<IBindContent>;\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#bindContent = createBindContent(\r\n      this.binding, \r\n      this.id, \r\n      this.binding.engine, \r\n      \"\", \r\n      null\r\n    );\r\n    this.#trueBindContents = this.#bindContents = new Set([this.#bindContent]);\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeIf.update: value is not boolean`);\r\n    }\r\n    const parentNode = this.node.parentNode;\r\n    if (parentNode == null) {\r\n      raiseError(`BindingNodeIf.update: parentNode is null`);\r\n    }\r\n    if (value) {\r\n      this.#bindContent.render();\r\n      this.#bindContent.mountAfter(parentNode, this.node.nextSibling);\r\n      this.#bindContents = this.#trueBindContents;\r\n    } else {\r\n      this.#bindContent.unmount();\r\n      this.#bindContents = this.#falseBindContents;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * ifバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeIfインスタンスを生成\r\n */\r\nexport const createBindingNodeIf: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeIf(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeForクラスは、forバインディング（配列やリストの繰り返し描画）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - リストデータの各要素ごとにBindContent（バインディングコンテキスト）を生成・管理\r\n * - 配列の差分検出により、必要なBindContentの生成・再利用・削除・再描画を最適化\r\n * - DOM上での要素の並び替えや再利用、アンマウント・マウント処理を効率的に行う\r\n * - プール機構によりBindContentの再利用を促進し、パフォーマンスを向上\r\n *\r\n * 設計ポイント:\r\n * - assignValueでリストの差分を検出し、BindContentの生成・削除・再利用を管理\r\n * - updateElementsでリストの並び替えやSWAP処理にも対応\r\n * - BindContentのプール・インデックス管理でGCやDOM操作の最小化を図る\r\n * - バインディング状態やリストインデックス情報をエンジンに保存し、再描画や依存解決を容易にする\r\n *\r\n * ファクトリ関数 createBindingNodeFor でフィルタ・デコレータ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeFor extends BindingNodeBlock {\r\n  #bindContentsSet       : Set<IBindContent> = new Set<IBindContent>();\r\n  #bindContentByListIndex: WeakMap<IListIndex, IBindContent> = new WeakMap();\r\n  #bindContentPool       : IBindContent[] = [];\r\n  #bindContentLastIndex  : number = 0;\r\n  #lastListIndexSet      : Set<IListIndex> = new Set<IListIndex>();\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContentsSet;\r\n  }\r\n\r\n  get isFor(): boolean {\r\n    return true;\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  createBindContent(listIndex: IListIndex): IBindContent {\r\n    let bindContent: IBindContent;\r\n    if (this.#bindContentLastIndex >= 0) {\r\n      // プールの最後の要素を取得して、プールの長さをあとで縮減する\r\n      // 作るたびにプールを縮減すると、パフォーマンスが悪化するため\r\n      // プールの長さを縮減するのは、全ての要素を作った後に行う\r\n      bindContent = this.#bindContentPool[this.#bindContentLastIndex];\r\n      this.#bindContentLastIndex--;\r\n      bindContent.assignListIndex(listIndex);\r\n    } else {\r\n      bindContent = createBindContent(\r\n        this.binding, \r\n        this.id, \r\n        this.binding.engine, \r\n        this.binding.bindingState.pattern + \".*\", \r\n        listIndex);\r\n    }\r\n    // 登録\r\n    this.#bindContentByListIndex.set(listIndex, bindContent);\r\n    return bindContent;\r\n  }\r\n\r\n  deleteBindContent(bindContent: IBindContent): void {\r\n    bindContent.unmount();\r\n    bindContent.loopContext?.clearListIndex();\r\n  }\r\n\r\n  get bindContentLastIndex():number {\r\n    return this.#bindContentLastIndex;\r\n  }\r\n  set bindContentLastIndex(value:number) {\r\n    this.#bindContentLastIndex = value;\r\n  }\r\n\r\n  get poolLength():number {\r\n    return this.#bindContentPool.length;\r\n  }\r\n  set poolLength(length: number) {\r\n    if (length < 0) {\r\n      raiseError(`BindingNodeFor.setPoolLength: length is negative`);\r\n    }\r\n    this.#bindContentPool.length = length;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeFor.assignValue: value is not array`);\r\n    }\r\n    const listIndexesSet = this.binding.engine.getListIndexesSet(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex\r\n    );\r\n    if (listIndexesSet === null) {\r\n      raiseError(`BindingNodeFor.assignValue: listIndexes is not found`);\r\n    }\r\n    const newBindContensSet = new Set<IBindContent>();\r\n    let lastBindContent = null;\r\n    // 削除を先にする\r\n    const removeBindContentsSet = new Set<IBindContent>();\r\n    const diff = this.#lastListIndexSet.difference(listIndexesSet);\r\n    for(const listIndex of diff) {\r\n      const bindContent = this.#bindContentByListIndex.get(listIndex);\r\n      if (bindContent) {\r\n        this.deleteBindContent(bindContent);\r\n        removeBindContentsSet.add(bindContent);\r\n      }\r\n    }\r\n    this.#bindContentPool.push(...removeBindContentsSet);\r\n\r\n    const parentNode = this.node.parentNode ?? raiseError(`BindingNodeFor.update: parentNode is null`);\r\n    const firstNode = this.node;\r\n\r\n    this.bindContentLastIndex = this.poolLength - 1;\r\n    for(const listIndex of listIndexesSet) {\r\n      const lastNode = lastBindContent?.getLastNode(parentNode) ?? firstNode;\r\n      let bindContent = this.#bindContentByListIndex.get(listIndex);\r\n      if (typeof bindContent === \"undefined\") {\r\n        bindContent = this.createBindContent(listIndex);\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        if (lastNode?.nextSibling !== bindContent.firstChildNode) {\r\n          bindContent.mountAfter(parentNode, lastNode);\r\n        }\r\n      }\r\n      newBindContensSet.add(bindContent);\r\n      lastBindContent = bindContent;\r\n    }\r\n    // プールの長さを更新する\r\n    // プールの長さは、プールの最後の要素のインデックス+1であるため、\r\n    this.poolLength = this.bindContentLastIndex + 1;\r\n    this.#bindContentsSet = newBindContensSet;\r\n    this.#lastListIndexSet = new Set<IListIndex>(listIndexesSet);\r\n  }\r\n\r\n  /**\r\n   * SWAP処理を想定\r\n   * \r\n   * @param listIndexes \r\n   * @param values \r\n   * @returns \r\n   */\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    if (typeof values[0] !== \"object\") return;\r\n    const engine = this.binding.engine;\r\n    const oldListValues = \r\n      engine.getList(\r\n        this.binding.bindingState.info, \r\n        this.binding.bindingState.listIndex\r\n      ) ?? raiseError(`BindingNodeFor.updateElements: oldValues is not found`); \r\n    const parentNode = this.node.parentNode ?? raiseError(`BindingNodeFor.update: parentNode is null`);\r\n\r\n    // DOMから削除\r\n    const currentBindContents = Array.from(this.#bindContentsSet);\r\n    const targetBindContents: IBindContent[] = [];\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const bindContent = currentBindContents[listIndex.index];\r\n      bindContent.unmount();\r\n      targetBindContents.push(bindContent);\r\n    }\r\n\r\n    // DOMに追加、listIndexを更新\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const index = listIndex.index;\r\n\r\n      const lastBindContent = currentBindContents[index - 1] ?? null;\r\n      const lastNode = lastBindContent?.lastChildNode ?? this.node;\r\n\r\n      const oldValue = oldListValues[index];\r\n      const targetIndex = values.indexOf(oldValue);\r\n      const prevBindContent = targetBindContents[targetIndex];\r\n\r\n      if (typeof prevBindContent === \"undefined\") {\r\n        // 入れ替えるBindContentがない場合は再描画\r\n        const bindContent = targetBindContents[index];\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        prevBindContent.assignListIndex(listIndex);\r\n        prevBindContent.mountAfter(parentNode, lastNode);\r\n        this.#bindContentByListIndex.set(listIndex, prevBindContent);\r\n        currentBindContents[index] = prevBindContent;\r\n      }\r\n      if (targetIndex >= 0) {\r\n        values[targetIndex] = -1;\r\n      }\r\n    }\r\n    this.#bindContentsSet = new Set<IBindContent>(currentBindContents);\r\n    engine.saveList(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex, \r\n      this.binding.bindingState.value.slice(0)\r\n    );\r\n  }\r\n}\r\n\r\nexport const createBindingNodeFor: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeFor(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DEFAULT_PROPERTY = \"textContent\";\r\n\r\ntype DefaultPropertyByElementType = {\r\n  [key:string]: string;\r\n}\r\n\r\nconst defaultPropertyByElementType:DefaultPropertyByElementType = {\r\n  \"radio\"   : \"checked\",\r\n  \"checkbox\": \"checked\",\r\n  \"button\"  : \"onclick\",\r\n}\r\n\r\n/**\r\n * HTML要素のデフォルトプロパティを取得\r\n */\r\nconst getDefaultPropertyHTMLElement = (node:Node):string => \r\n  node instanceof HTMLSelectElement || node instanceof HTMLTextAreaElement || node instanceof HTMLOptionElement ? \"value\" : \r\n  node instanceof HTMLButtonElement ? \"onclick\" : \r\n  node instanceof HTMLAnchorElement ? \"onclick\" : \r\n  node instanceof HTMLFormElement ? \"onsubmit\" : \r\n  node instanceof HTMLInputElement ? (defaultPropertyByElementType[node.type] ?? \"value\") :\r\n  DEFAULT_PROPERTY;\r\n\r\ntype DefaultPropertyByKey = {\r\n  [key:string]: string | undefined;\r\n}\r\n\r\nconst _cache: DefaultPropertyByKey = {};\r\n\r\nconst textContentProperty = (node:Node):string => DEFAULT_PROPERTY;\r\n\r\ntype GetDefaultPropertyByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>string) | undefined;\r\n}\r\n\r\nconst getDefaultPropertyByNodeType: GetDefaultPropertyByNodeType = {\r\n  HTMLElement: getDefaultPropertyHTMLElement,\r\n  SVGElement : undefined,\r\n  Text       : textContentProperty,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * バインド情報でノードプロパティが省略された場合に、ノード種別・要素タイプごとに\r\n * 適切なデフォルトプロパティ名（例: textContent, value, checked, onclick など）を返すユーティリティ関数。\r\n *\r\n * - HTMLInputElementやHTMLSelectElementなど、要素ごとに最適なプロパティを判定\r\n * - input要素はtype属性（radio, checkboxなど）も考慮\r\n * - 一度判定した組み合わせはキャッシュし、パフォーマンス向上\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"HTMLElement\" | \"SVGElement\" | \"Text\" | \"Template\"）\r\n * @returns        デフォルトのプロパティ名（例: \"value\", \"checked\", \"textContent\" など）\r\n */\r\nexport function getDefaultName(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): string | undefined {\r\n  const key = node.constructor.name + \"\\t\" + ((node as HTMLInputElement).type ?? \"\"); // type attribute\r\n  return _cache[key] ?? (_cache[key] = getDefaultPropertyByNodeType[nodeType]?.(node));\r\n}\r\n  ","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { getDefaultName } from \"../../BindingBuilder/getDefaultName.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { SetLoopContextSymbol } from \"../../StateClass/symbols.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nfunction isTwoWayBindable(element: HTMLElement): boolean {\r\n  return element instanceof HTMLInputElement || \r\n    element instanceof HTMLTextAreaElement || \r\n    element instanceof HTMLSelectElement;\r\n}\r\n\r\nconst defaultEventByName: {[key:string]: string} = {\r\n  \"value\"   : \"input\",\r\n  \"checked\" : \"change\",\r\n  \"selected\": \"change\",\r\n};\r\n\r\n/**\r\n * BindingNodePropertyクラスは、ノードのプロパティ（value, checked, selected など）への\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - ノードプロパティへの値の割り当て・取得\r\n * - 双方向バインディング（input, changeイベント等）に対応\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - デフォルトプロパティ名と一致し、かつ双方向バインディング可能な要素の場合のみイベントリスナーを登録\r\n * - デコレータでイベント名を指定可能（onInput, onChangeなど）\r\n * - イベント発火時はUpdater経由でstateを非同期的に更新\r\n * - assignValueでnull/undefined/NaNは空文字列に変換してセット\r\n */\r\nclass BindingNodeProperty extends BindingNode {\r\n  get value(): any {\r\n    // @ts-ignore\r\n    return this.node[this.name];\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.filters.length; i++) {\r\n      value = this.filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n\r\n    const isElement = this.node instanceof HTMLElement;\r\n    if (!isElement) return;\r\n    if (!isTwoWayBindable(this.node)) return;\r\n    const defaultName = getDefaultName(this.node, \"HTMLElement\");\r\n    if (defaultName !== this.name) return;\r\n    if (decorates.length > 1) raiseError(`BindingNodeProperty: ${this.name} has multiple decorators`);\r\n    const event = (decorates[0]?.startsWith(\"on\") ? decorates[0]?.slice(2) : decorates[0]) ?? null;\r\n    const eventName = event ?? defaultEventByName[this.name] ?? \"readonly\";\r\n    if (eventName === \"readonly\" || eventName === \"ro\") return;\r\n\r\n    // 双方向バインディング: イベント発火時にstateを更新\r\n    const engine = this.binding.engine;\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n      const value = this.filteredValue;\r\n      this.node.addEventListener(eventName, async () => {\r\n      engine.updater.addProcess(async () => {\r\n        const stateProxy = engine.createWritableStateProxy();\r\n        await stateProxy[SetLoopContextSymbol](loopContext, async () => {\r\n          binding.updateStateValue(stateProxy, value);\r\n        });\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  init() {\r\n    // サブクラスで初期化処理を実装可能\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    // @ts-ignore\r\n    this.node[this.name] = value;\r\n  }\r\n}\r\n\r\n/**\r\n * プロパティバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodePropertyインスタンスを生成\r\n */\r\nexport const createBindingNodeProperty: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeProperty(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeRadioクラスは、ラジオボタン（input[type=\"radio\"]）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値とinput要素のvalueが一致していればchecked=trueにする\r\n * - null/undefined/NaNの場合は空文字列に変換して比較\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで値を文字列化し、input要素のvalueと比較してcheckedを制御\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeRadio extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.toString() === element.value.toString();\r\n  }\r\n}\r\n\r\n/**\r\n * ラジオボタン用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeRadioインスタンスを生成\r\n */\r\nexport const createBindingNodeRadio: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeRadio(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeStyleクラスは、style属性（インラインスタイル）のバインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値を指定のCSSプロパティ（subName）としてHTMLElementにセット\r\n * - null/undefined/NaNの場合は空文字列に変換してセット\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからCSSプロパティ名（subName）を抽出（例: \"style.color\" → \"color\"）\r\n * - assignValueで値を文字列化し、style.setPropertyで反映\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeStyle extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLElement;\r\n    element.style.setProperty(this.subName, value.toString());\r\n  }\r\n}\r\n\r\n/**\r\n * style属性バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeStyleインスタンスを生成\r\n */\r\nexport const createBindingNodeStyle: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeStyle(binding, node, name, filterFns, decorates);\r\n  }\r\n","\r\nconst symbolName = \"componentState\";\r\n\r\nexport const RenderSymbol : unique symbol = Symbol.for(`${symbolName}.render`);\r\nexport const BindParentComponentSymbol : unique symbol = Symbol.for(`${symbolName}.bindParentComponent`);\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { RenderSymbol } from \"../../ComponentState/symbols.js\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { StructiveComponent } from \"../../WebComponents/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeComponentクラスは、StructiveComponent（カスタムコンポーネント）への\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング対象のコンポーネントのstateプロパティ（subName）に値を反映\r\n * - バインディング情報をコンポーネント単位で管理（bindingsByComponentに登録）\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからstateプロパティ名（subName）を抽出（例: \"state.foo\" → \"foo\"）\r\n * - assignValueでコンポーネントのstateに値をセット（RenderSymbol経由で反映）\r\n * - 初期化時にbindingsByComponentへバインディング情報を登録\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeComponent extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  init(): void {\r\n    const engine = this.binding.engine;\r\n    let bindings = engine.bindingsByComponent.get(this.node as StructiveComponent);\r\n    if (typeof bindings === \"undefined\") {\r\n      bindings = new Set<IBinding>();\r\n      engine.bindingsByComponent.set(this.node as StructiveComponent, bindings);\r\n    }\r\n    bindings.add(this.binding);\r\n  }\r\n\r\n  assignValue(value: any): void {\r\n    const component = this.node as StructiveComponent;\r\n    component.state[RenderSymbol](this.subName, value);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * コンポーネント用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeComponentインスタンスを生成\r\n */\r\nexport const createBindingNodeComponent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeComponent(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createBindingNodeAttribute } from \"../DataBinding/BindingNode/BindingNodeAttribute.js\";\r\nimport { createBindingNodeCheckbox } from \"../DataBinding/BindingNode/BindingNodeCheckbox.js\";\r\nimport { createBindingNodeClassList } from \"../DataBinding/BindingNode/BindingNodeClassList.js\";\r\nimport { createBindingNodeClassName } from \"../DataBinding/BindingNode/BindingNodeClassName.js\";\r\nimport { createBindingNodeEvent } from \"../DataBinding/BindingNode/BindingNodeEvent.js\";\r\nimport { createBindingNodeIf } from \"../DataBinding/BindingNode/BindingNodeIf.js\";\r\nimport { createBindingNodeFor } from \"../DataBinding/BindingNode/BindingNodeFor.js\";\r\nimport { createBindingNodeProperty } from \"../DataBinding/BindingNode/BindingNodeProperty.js\";\r\nimport { createBindingNodeRadio } from \"../DataBinding/BindingNode/BindingNodeRadio.js\";\r\nimport { createBindingNodeStyle } from \"../DataBinding/BindingNode/BindingNodeStyle.js\";\r\nimport { CreateBindingNodeByNodeFn, CreateBindingNodeFn } from \"../DataBinding/BindingNode/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\nimport { createBindingNodeComponent } from \"../DataBinding/BindingNode/BindingNodeComponent.js\";\r\n\r\ntype NodePropertyConstructorByName = {[key:string]:CreateBindingNodeFn};\r\ntype NodePropertyConstructorByNameByIsComment = {[key:number]:NodePropertyConstructorByName};\r\n\r\nconst nodePropertyConstructorByNameByIsComment:NodePropertyConstructorByNameByIsComment = {\r\n  0: {\r\n    \"class\"   : createBindingNodeClassList,\r\n    \"checkbox\": createBindingNodeCheckbox,\r\n    \"radio\"   : createBindingNodeRadio,\r\n  },\r\n  1: {\r\n    \"if\" : createBindingNodeIf,\r\n  },\r\n};\r\n\r\ntype NodePropertyConstructorByFirstName = {[key:string]:CreateBindingNodeFn};\r\n\r\nconst nodePropertyConstructorByFirstName:NodePropertyConstructorByFirstName = {\r\n  \"class\": createBindingNodeClassName,\r\n  \"attr\" : createBindingNodeAttribute,\r\n  \"style\": createBindingNodeStyle,\r\n  \"state\": createBindingNodeComponent,\r\n//  \"popover\": PopoverTarget,\r\n//  \"commandfor\": CommandForTarget,\r\n};\r\n\r\n/**\r\n * バインディング対象ノードのプロパティ名やノード種別（Element/Comment）に応じて、\r\n * 適切なバインディングノード生成関数（CreateBindingNodeFn）を返すユーティリティ。\r\n *\r\n * - ノード種別やプロパティ名ごとに専用の生成関数をマッピング\r\n * - コメントノードや特殊プロパティ（for/if等）にも対応\r\n * - プロパティ名の先頭や\"on\"でイベントバインディングも判別\r\n * - 一度判定した組み合わせはキャッシュし、パフォーマンス向上\r\n *\r\n * これにより、テンプレートのdata-bindやコメントバインディングの各種ケースに柔軟に対応できる。\r\n */\r\nfunction _getBindingNodeCreator(isComment:boolean, isElement: boolean, propertyName: string): CreateBindingNodeFn {\r\n  // コメント/エレメント種別とプロパティ名で専用の生成関数を優先的に取得\r\n  const bindingNodeCreatorByName = nodePropertyConstructorByNameByIsComment[isComment ? 1 : 0][propertyName];\r\n  if (typeof bindingNodeCreatorByName !== \"undefined\") {\r\n    return bindingNodeCreatorByName;\r\n  }\r\n  // コメントノードでforの場合は専用関数\r\n  if (isComment && propertyName === \"for\") {\r\n    return createBindingNodeFor;\r\n  }\r\n  // コメントノードで未対応プロパティはエラー\r\n  if (isComment) {\r\n    raiseError(`getBindingNodeCreator: unknown node property ${propertyName}`);\r\n  }\r\n  // プロパティ名の先頭で判別（class.attr.style.state等）\r\n  const nameElements = propertyName.split(\".\");\r\n  const bindingNodeCreatorByFirstName = nodePropertyConstructorByFirstName[nameElements[0]];\r\n  if (typeof bindingNodeCreatorByFirstName !== \"undefined\") {\r\n    return bindingNodeCreatorByFirstName;\r\n  }\r\n  // エレメントノードでonから始まる場合はイベントバインディング\r\n  if (isElement) {\r\n    if (propertyName.startsWith(\"on\")) {\r\n      return createBindingNodeEvent;\r\n    } else {\r\n      return createBindingNodeProperty;\r\n    }\r\n  } else {\r\n    // それ以外は汎用プロパティバインディング\r\n    return createBindingNodeProperty;\r\n  }\r\n}\r\n\r\nconst _cache: {[key:string]:CreateBindingNodeFn} = {};\r\n\r\n/**\r\n * ノード・プロパティ名・フィルタ・デコレータ情報から\r\n * 適切なバインディングノード生成関数を取得し、呼び出すファクトリ関数。\r\n * \r\n * @param node         バインディング対象ノード\r\n * @param propertyName バインディングプロパティ名\r\n * @param filterTexts  フィルタ情報\r\n * @param decorates    デコレータ情報\r\n * @returns            バインディングノード生成関数の実行結果\r\n */\r\nexport function getBindingNodeCreator(\r\n  node        : Node, \r\n  propertyName: string,\r\n  filterTexts : IFilterText[],\r\n  decorates   : string[]\r\n): CreateBindingNodeByNodeFn {\r\n  const isComment = node instanceof Comment;\r\n  const isElement = node instanceof Element;\r\n  const key = isComment + \"\\t\" + isElement + \"\\t\" + propertyName;\r\n  // キャッシュを利用して生成関数を取得\r\n  const fn = _cache[key] ?? (_cache[key] = _getBindingNodeCreator(isComment, isElement, propertyName));\r\n  return fn(propertyName, filterTexts, decorates);\r\n}\r\n","/**\r\n * getStructuredPathInfo.ts\r\n *\r\n * Stateプロパティのパス文字列から、詳細な構造化パス情報（IStructuredPathInfo）を生成・キャッシュするユーティリティです。\r\n *\r\n * 主な役割:\r\n * - パス文字列を分割し、各セグメントやワイルドカード（*）の位置・親子関係などを解析\r\n * - cumulativePaths/wildcardPaths/parentPathなど、パス階層やワイルドカード階層の情報を構造化\r\n * - 解析結果をIStructuredPathInfoとしてキャッシュし、再利用性とパフォーマンスを両立\r\n * - reservedWords（予約語）チェックで安全性を担保\r\n *\r\n * 設計ポイント:\r\n * - パスごとにキャッシュし、同じパスへの複数回アクセスでも高速に取得可能\r\n * - ワイルドカードや親子関係、階層構造を厳密に解析し、バインディングや多重ループに最適化\r\n * - childrenプロパティでパス階層のツリー構造も構築\r\n * - 予約語や危険なパスはraiseErrorで例外を発生\r\n */\r\nimport { raiseError } from '../utils.js';\r\nimport { IStructuredPathInfo } from './types';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IStructuredPathInfo } = {};\r\n//const _cache: Map<string, IStructuredPathInfo> = new Map();\r\n\r\n/**\r\n * パターン情報を取得します\r\n * @param pattern パターン\r\n * @returns {IPatternInfo} パターン情報\r\n */\r\nclass StructuredPathInfo implements IStructuredPathInfo {\r\n  static id : number = 0;\r\n  id = ++StructuredPathInfo.id;\r\n  pattern;\r\n  pathSegments;\r\n  lastSegment;\r\n  cumulativePaths;\r\n  cumulativeInfos;\r\n  cumulativeInfoSet;\r\n  wildcardPaths;\r\n  wildcardInfos;\r\n  wildcardInfoSet;\r\n  wildcardParentPaths;\r\n  wildcardParentInfos;\r\n  wildcardParentInfoSet;\r\n  lastWildcardPath;\r\n  lastWildcardInfo;\r\n  parentPath;\r\n  parentInfo;\r\n  wildcardCount;\r\n  children = {};\r\n\r\n  constructor(pattern: string) {\r\n    const getPattern = (_pattern: string): IStructuredPathInfo => {\r\n      return (pattern === _pattern) ? this : getStructuredPathInfo(_pattern);\r\n    };\r\n    const pathSegments = pattern.split(\".\");\r\n    const cumulativePaths = [];\r\n    const cumulativeInfos: IStructuredPathInfo[] = [];\r\n    const wildcardPaths = [];\r\n    const wildcardInfos = [];\r\n    const wildcardParentPaths = [];\r\n    const wildcardParentInfos = [];\r\n    let currentPatternPath = \"\", prevPatternPath = \"\";\r\n    let wildcardCount = 0;\r\n    for(let i = 0; i < pathSegments.length; i++) {\r\n      currentPatternPath += pathSegments[i];\r\n      if (pathSegments[i] === \"*\") {\r\n        wildcardPaths.push(currentPatternPath);\r\n        wildcardInfos.push(getPattern(currentPatternPath));\r\n        wildcardParentPaths.push(prevPatternPath);\r\n        wildcardParentInfos.push(getPattern(prevPatternPath));\r\n        wildcardCount++;\r\n      }\r\n      cumulativePaths.push(currentPatternPath);\r\n      cumulativeInfos.push(getPattern(currentPatternPath));\r\n      prevPatternPath = currentPatternPath;\r\n      currentPatternPath += \".\";\r\n    }\r\n    const lastWildcardPath = wildcardPaths.length > 0 ? wildcardPaths[wildcardPaths.length - 1] : null;\r\n    const parentPath = cumulativePaths.length > 1 ? cumulativePaths[cumulativePaths.length - 2] : null;\r\n    this.pattern = pattern;\r\n    this.pathSegments = pathSegments;\r\n    this.lastSegment = pathSegments[pathSegments.length - 1];\r\n    this.cumulativePaths = cumulativePaths;\r\n    this.cumulativeInfos = cumulativeInfos;\r\n    this.cumulativeInfoSet = new Set(cumulativeInfos);\r\n    this.wildcardPaths = wildcardPaths;\r\n    this.wildcardInfos = wildcardInfos;\r\n    this.wildcardInfoSet = new Set(wildcardInfos);\r\n    this.wildcardParentPaths = wildcardParentPaths;\r\n    this.wildcardParentInfos = wildcardParentInfos;\r\n    this.wildcardParentInfoSet = new Set(wildcardParentInfos);\r\n    this.lastWildcardPath = lastWildcardPath;\r\n    this.lastWildcardInfo = lastWildcardPath ? getPattern(lastWildcardPath) : null;\r\n    this.parentPath = parentPath;\r\n    this.parentInfo = parentPath ? getPattern(parentPath) : null;\r\n    this.wildcardCount = wildcardCount;\r\n    if (this.parentInfo) {\r\n      this.parentInfo.children[this.lastSegment] = this;\r\n    }\r\n  }\r\n}\r\n\r\nconst reservedWords = new Set([\r\n  \"constructor\", \"prototype\", \"__proto__\", \"toString\",\r\n  \"valueOf\", \"hasOwnProperty\", \"isPrototypeOf\",\r\n  \"watch\", \"unwatch\", \"eval\", \"arguments\",\r\n  \"let\", \"var\", \"const\", \"class\", \"function\",\r\n  \"null\", \"true\", \"false\", \"new\", \"return\",\r\n]);\r\n\r\nexport function getStructuredPathInfo(structuredPath: string): IStructuredPathInfo {\r\n  let info: IStructuredPathInfo | undefined;\r\n  info = _cache[structuredPath];\r\n  if (typeof info !== \"undefined\") {\r\n    return info;\r\n  }\r\n  if (reservedWords.has(structuredPath)) {\r\n    raiseError(`getStructuredPathInfo: pattern is reserved word: ${structuredPath}`);\r\n  }\r\n  return (_cache[structuredPath] = new StructuredPathInfo(structuredPath));\r\n}\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { GetByRefSymbol, SetByRefSymbol, SetLoopContextSymbol } from \"../../StateClass/symbols.js\";\r\nimport { IStateProxy } from \"../../StateClass/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\n/**\r\n * BindingStateクラスは、バインディング対象の状態（State）プロパティへのアクセス・更新・フィルタ適用を担当する実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング対象の状態プロパティ（pattern, info）やリストインデックス（listIndex）を管理\r\n * - get valueで現在の値を取得し、get filteredValueでフィルタ適用後の値を取得\r\n * - initでリストバインディング時のループコンテキストやインデックス参照を初期化\r\n * - assignValueで状態プロキシに値を書き込む（双方向バインディング対応）\r\n * - バインディング情報をエンジンに登録し、依存解決や再描画を効率化\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードパス（配列バインディング等）にも対応し、ループごとのインデックス管理が可能\r\n * - フィルタ適用は配列で柔軟に対応\r\n * - createBindingStateファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingState implements IBindingState {\r\n  #binding     : IBinding;\r\n  #pattern     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return this.#pattern;\r\n  }\r\n  get info() {\r\n    return this.#info;\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#pattern = pattern;\r\n    this.#info = getStructuredPathInfo(pattern);\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.#state[GetByRefSymbol](this.info, this.listIndex);\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    if (this.info.wildcardCount > 0) {\r\n      const lastWildcardPath = this.info.lastWildcardPath ?? \r\n        raiseError(`BindingState.init: wildcardLastParentPath is null`);\r\n      const loopContext = this.binding.parentBindContent.loopContext?.find(lastWildcardPath) ?? \r\n        raiseError(`BindingState.init: loopContext is null`);\r\n      this.#listIndexRef = loopContext.listIndexRef;\r\n    }\r\n    this.binding.engine.saveBinding(this.info, this.listIndex, this.binding);\r\n  }\r\n  assignValue(writeState: IStateProxy, value: any) {\r\n    writeState[SetByRefSymbol](this.info, this.listIndex, value);\r\n  }\r\n}\r\n\r\nexport const createBindingState: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n    return new BindingState(binding, state, name, filterFns);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStateProxy } from \"../../StateClass/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\n/**\r\n * BindingStateIndexクラスは、forバインディング等のループ内で利用される\r\n * インデックス値（$1, $2, ...）のバインディング状態を管理する実装です。\r\n *\r\n * 主な役割:\r\n * - ループコンテキストからインデックス値を取得し、value/filteredValueで参照可能にする\r\n * - バインディング時にbindingsByListIndexへ自身を登録し、依存解決や再描画を効率化\r\n * - フィルタ適用にも対応\r\n *\r\n * 設計ポイント:\r\n * - pattern（例: \"$1\"）からインデックス番号を抽出し、ループコンテキストから該当インデックスを取得\r\n * - initでループコンテキストやlistIndexRefを初期化し、バインディング情報をエンジンに登録\r\n * - assignValueは未実装（インデックスは書き換え不可のため）\r\n * - createBindingStateIndexファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingStateIndex implements IBindingState {\r\n  #binding     : IBinding;\r\n  #indexNumber : number;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get info() {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    const indexNumber = Number(pattern.slice(1));\r\n    if (isNaN(indexNumber)) {\r\n      raiseError(\"BindingStateIndex: pattern is not a number\");\r\n    }\r\n    this.#indexNumber = indexNumber;\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.listIndex?.index ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext ??\r\n      raiseError(`BindingState.init: loopContext is null`);\r\n    const loopContexts = loopContext.serialize();\r\n    this.#listIndexRef = loopContexts[this.#indexNumber - 1].listIndexRef ??\r\n      raiseError(`BindingState.init: listIndexRef is null`);\r\n    const listIndex = this.listIndex ?? raiseError(\"listIndex is null\");\r\n    const bindings = this.binding.engine.bindingsByListIndex.get(listIndex);\r\n    if (bindings === undefined) {\r\n      this.binding.engine.bindingsByListIndex.set(listIndex, new Set([this.binding]));\r\n    } else {\r\n      bindings.add(this.binding);\r\n    }\r\n  }\r\n  assignValue(writeState:IStateProxy, value:any): void {\r\n    raiseError(\"BindingStateIndex: assignValue is not implemented\");\r\n  }\r\n}\r\n\r\nexport const createBindingStateIndex: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n\r\n    return new BindingStateIndex(binding, state, name, filterFns);\r\n  }\r\n","import { createBindingState } from \"../DataBinding/BindingState/BindingState.js\";\r\nimport { createBindingStateIndex } from \"../DataBinding/BindingState/BindingStateIndex.js\";\r\nimport { CreateBindingStateByStateFn } from \"../DataBinding/BindingState/types\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nconst ereg = new RegExp(/^\\$\\d+$/);\r\n\r\n/**\r\n * バインディング対象の状態プロパティ名とフィルタ情報から、\r\n * 適切なバインディング状態生成関数（CreateBindingStateByStateFn）を返すユーティリティ。\r\n *\r\n * - プロパティ名が \"$数字\"（例: \"$1\"）の場合は createBindingStateIndex を使用（インデックスバインディング用）\r\n * - それ以外は通常の createBindingState を使用\r\n *\r\n * @param name        バインディング対象の状態プロパティ名\r\n * @param filterTexts フィルタ情報\r\n * @returns           バインディング状態生成関数\r\n */\r\nexport function getBindingStateCreator(\r\n  name       : string, \r\n  filterTexts: IFilterText[]\r\n): CreateBindingStateByStateFn {\r\n  if (ereg.test(name)) {\r\n    // \"$数字\"形式の場合はインデックスバインディング用の生成関数を返す\r\n    return createBindingStateIndex(name, filterTexts);\r\n  } else {\r\n    // 通常のプロパティ名の場合は標準の生成関数を返す\r\n    return createBindingState(name, filterTexts);\r\n  }\r\n}","import { COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst COMMENT_EMBED_MARK_LEN = COMMENT_EMBED_MARK.length;\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\nconst getTextFromContent   = (node:Node):string        => node.textContent?.slice(COMMENT_EMBED_MARK_LEN).trim() ?? \"\";\r\nconst getTextFromAttribute = (node:HTMLElement):string => node.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\nconst getTextFromTemplate  = (node:Node):string        => {\r\n  const text = node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN).trim(); \r\n  const id = Number(text);\r\n  const template = getTemplateById(id) ?? raiseError(`Template not found: ${text}`);\r\n  return template.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n};\r\nconst getTextFromSVGElement = (node:SVGElement):string => node.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n\r\nconst getTextByNodeType = {\r\n  \"Text\":        getTextFromContent,\r\n  \"HTMLElement\": getTextFromAttribute,\r\n  \"Template\":    getTextFromTemplate,\r\n  \"SVGElement\":  getTextFromSVGElement\r\n};\r\n\r\n/**\r\n * ノード種別ごとにdata-bindテキスト（バインディング定義文字列）を取得するユーティリティ関数。\r\n *\r\n * - Textノード: コメントマーク以降のテキストを取得し、\"textContent:\"を付与\r\n * - HTMLElement: data-bind属性値を取得\r\n * - Templateノード: コメントマーク以降のIDからテンプレートを取得し、そのdata-bind属性値を取得\r\n * - SVGElement: data-bind属性値を取得\r\n *\r\n * @param nodeType ノード種別（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）\r\n * @param node     対象ノード\r\n * @returns        バインディング定義文字列\r\n */\r\nexport function getDataBindText(nodeType: NodeType, node: Node): string {\r\n  const bindText = getTextByNodeType[nodeType](node as any) ?? \"\";\r\n  if (nodeType === \"Text\") {\r\n    // Textノードの場合は\"textContent:\"を付与\r\n    return \"textContent:\" + bindText;\r\n  } else {\r\n    return bindText;\r\n  }\r\n}\r\n","import { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst createNodeKey = (node:Node):string => node.constructor.name + \"\\t\" + ((node instanceof Comment) ? (node.textContent?.[2] ?? \"\") : \"\");\r\n\r\ntype NodeTypeByNodeKey = {\r\n  [nodeKey:string]:NodeType;\r\n};\r\n\r\nconst nodeTypeByNodeKey:NodeTypeByNodeKey = {};\r\n\r\nconst getNodeTypeByNode = (node:Node):NodeType =>\r\n  (node instanceof Comment && node.textContent?.[2] === \":\") ? \"Text\" : \r\n  (node instanceof HTMLElement) ? \"HTMLElement\" :\r\n  (node instanceof Comment && node.textContent?.[2] === \"|\") ? \"Template\" : \r\n  (node instanceof SVGElement) ? \"SVGElement\" : raiseError(`Unknown NodeType: ${node.nodeType}`);\r\n\r\n/**\r\n * ノードのタイプ（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）を判定・キャッシュするユーティリティ関数。\r\n *\r\n * - コメントノードの場合、3文字目が \":\" なら \"Text\"、\"|\" なら \"Template\" と判定\r\n * - HTMLElement, SVGElement もそれぞれ判定\r\n * - 未知のノード型はエラー\r\n * - ノードごとに一意なキー（constructor名＋コメント種別）でキャッシュし、再判定を省略\r\n *\r\n * @param node    判定対象のノード\r\n * @param nodeKey キャッシュ用のノードキー（省略時は自動生成）\r\n * @returns       ノードタイプ（NodeType）\r\n */\r\nexport function getNodeType(\r\n  node   : Node, \r\n  nodeKey: string = createNodeKey(node)\r\n): NodeType {\r\n  return nodeTypeByNodeKey[nodeKey] ?? (nodeTypeByNodeKey[nodeKey] = getNodeTypeByNode(node));\r\n}\r\n","import { IFilterText, IBindText } from \"./types\";\r\n\r\nconst trim = (s:string):string => s.trim();\r\n\r\nconst has = (s:string):boolean => s.length > 0; // check length\r\n\r\nconst re = new RegExp(/^#(.*)#$/);\r\nconst decode = (s:string):string => {\r\n  const m = re.exec(s);\r\n  return m ? decodeURIComponent(m[1]) : s;\r\n};\r\n\r\n/**\r\n * parse filter part\r\n * \"eq,100|falsey\" ---> [Filter(eq, [100]), Filter(falsey)]\r\n */\r\nconst parseFilter = (text:string): IFilterText => {\r\n  const [name, ...options] = text.split(\",\").map(trim);\r\n  return {name, options:options.map(decode)};\r\n};\r\n\r\ntype ReturnParseStateProperty = {property:string,filters:IFilterText[]};\r\n/**\r\n * parse expression\r\n * \"value|eq,100|falsey\" ---> [\"value\", Filter[]]\r\n */\r\nconst parseProperty = (text:string): ReturnParseStateProperty => {\r\n  const [property, ...filterTexts] = text.split(\"|\").map(trim);\r\n  return {property, filters:filterTexts.map(parseFilter)};\r\n};\r\n\r\n/**\r\n * parse expressions\r\n * \"textContent:value|eq,100|falsey\" ---> [\"textContent\", \"value\", Filter[eq, falsey]]\r\n */\r\nconst parseExpression = (expression:string): IBindText => {\r\n  const [ bindExpression, decoratesExpression = null ] = expression.split(\"@\").map(trim);\r\n  const decorates = decoratesExpression ? decoratesExpression.split(\",\").map(trim) : [];\r\n  const [nodePropertyText, statePropertyText] = bindExpression.split(\":\").map(trim);\r\n  const { property:nodeProperty, filters:inputFilterTexts } = parseProperty(nodePropertyText);\r\n  const { property:stateProperty, filters:outputFilterTexts } = parseProperty(statePropertyText);\r\n  return { nodeProperty, stateProperty, inputFilterTexts, outputFilterTexts, decorates };\r\n};\r\n\r\n/**\r\n * parse bind text and return BindText[]\r\n */\r\nconst parseExpressions = (text:string): IBindText[] => {\r\n  return text.split(\";\").map(trim).filter(has).map(s => parseExpression(s));\r\n};\r\n\r\nconst cache:{[key:string]: IBindText[]} = {};\r\n\r\n/**\r\n * バインドテキスト（data-bind属性やコメント等から取得した文字列）を解析し、\r\n * バインディング情報（IBindText[]）に変換するユーティリティ関数群。\r\n *\r\n * - フィルターやデコレータ、プロパティ名などをパースし、構造化データとして返す\r\n * - \"textContent:value|eq,100|falsey@decorate1,decorate2\" のような複雑な記法にも対応\r\n * - セミコロン区切りで複数バインドもサポート\r\n * - パース結果はキャッシュし、同じ入力の再解析を防止\r\n *\r\n * @param text バインドテキスト\r\n * @returns    解析済みバインディング情報（IBindText[]）\r\n */\r\nexport function parseBindText(\r\n  text: string\r\n): IBindText[] {\r\n  if (text.trim() === \"\") {\r\n    return [];\r\n  }\r\n  return cache[text] ?? (cache[text] = parseExpressions(text));\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DATASET_BIND_PROPERTY = 'data-bind';\r\n\r\nconst removeAttributeFromElement = (node:Node):void => {\r\n  const element = node as Element;\r\n  element.removeAttribute(DATASET_BIND_PROPERTY);\r\n}\r\n\r\ntype RemoveAttributeByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>void) | undefined;\r\n}\r\n\r\nconst removeAttributeByNodeType:RemoveAttributeByNodeType = {\r\n  HTMLElement: removeAttributeFromElement,\r\n  SVGElement : removeAttributeFromElement,\r\n  Text       : undefined,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * 指定ノードから data-bind 属性を削除するユーティリティ関数。\r\n *\r\n * - ノードタイプ（HTMLElement, SVGElement）の場合のみ data-bind 属性を削除\r\n * - Text, Template ノードは対象外\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"HTMLElement\" | \"SVGElement\" | \"Text\" | \"Template\"）\r\n * @returns        なし\r\n */\r\nexport function removeDataBindAttribute(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n):void {\r\n  return removeAttributeByNodeType[nodeType]?.(node);\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst replaceTextNodeText = (node:Node):Node => {\r\n  const textNode = document.createTextNode(\"\");\r\n  node.parentNode?.replaceChild(textNode, node);\r\n  return textNode;\r\n}\r\n\r\ntype ReplaceTextNodeFn = {\r\n  [key in NodeType]: ((node:Node)=>Node) | undefined;\r\n}\r\n\r\nconst replaceTextNodeFn:ReplaceTextNodeFn = {\r\n  Text       : replaceTextNodeText,\r\n  HTMLElement: undefined,\r\n  Template   : undefined,\r\n  SVGElement : undefined\r\n}\r\n\r\n/**\r\n * コメントノードをテキストノードに置き換えるユーティリティ関数。\r\n *\r\n * - ノードタイプが \"Text\" の場合のみ、コメントノードを空のテキストノードに置換する\r\n * - それ以外のノードタイプ（HTMLElement, Template, SVGElement）は何もしない\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）\r\n * @returns        置換後のノード（または元のノード）\r\n */\r\nexport function replaceTextNodeFromComment(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): Node {\r\n  return replaceTextNodeFn[nodeType]?.(node) ?? node;\r\n}\r\n","import { getAbsoluteNodePath } from \"./getAbsoluteNodePath.js\";\r\nimport { getBindingNodeCreator } from \"./getBindingNodeCreator.js\";\r\nimport { getBindingStateCreator } from \"./getBindingStateCreator.js\";\r\nimport { getDataBindText } from \"./getDataBindText.js\";\r\nimport { getNodeType } from \"./getNodeType.js\";\r\nimport { parseBindText } from \"./parseBindText.js\";\r\nimport { removeDataBindAttribute } from \"./removeDataBindAttribute.js\";\r\nimport { replaceTextNodeFromComment } from \"./replaceTextNodeFromComment.js\";\r\nimport { IBindingCreator, IBindText, IDataBindAttributes, NodePath, NodeType } from \"./types\";\r\n\r\n/**\r\n * DataBindAttributesクラスは、DOMノードからバインディング情報を抽出・解析し、\r\n * バインディング生成に必要な情報（ノード種別・パス・バインドテキスト・クリエイター）を管理します。\r\n *\r\n * - ノード種別やパスを特定\r\n * - data-bind属性やコメントノードからバインドテキストを取得・解析\r\n * - バインドテキストごとにバインディング生成関数（ノード用・状態用）を用意\r\n * - data-bind属性やコメントノードはパース後に削除・置換\r\n *\r\n * これにより、テンプレート内のバインディング定義を一元的に管理し、後続のバインディング構築処理を効率化します。\r\n */\r\nclass DataBindAttributes implements IDataBindAttributes {\r\n  nodeType     : NodeType; // ノードの種別\r\n  nodePath     : NodePath; // ノードのルート\r\n  bindTexts    : IBindText[]; // BINDテキストの解析結果\r\n  creatorByText: Map<IBindText, IBindingCreator> = new Map(); // BINDテキストからバインディングクリエイターを取得\r\n  constructor(node: Node) {\r\n    this.nodeType = getNodeType(node);\r\n    const text = getDataBindText(this.nodeType, node);\r\n\r\n    // コメントノードの場合はTextノードに置換（template.contentが書き換わる点に注意）\r\n    node = replaceTextNodeFromComment(node, this.nodeType);\r\n\r\n    // data-bind属性を削除（パース後は不要なため）\r\n    removeDataBindAttribute(node, this.nodeType);\r\n\r\n    this.nodePath = getAbsoluteNodePath(node);\r\n    this.bindTexts = parseBindText(text);\r\n\r\n    // 各バインドテキストごとにバインディング生成関数を用意\r\n    for(let i = 0; i < this.bindTexts.length; i++) {\r\n      const bindText = this.bindTexts[i];\r\n      const creator: IBindingCreator = {\r\n        createBindingNode : getBindingNodeCreator(\r\n          node, \r\n          bindText.nodeProperty, \r\n          bindText.inputFilterTexts,\r\n          bindText.decorates\r\n        ),\r\n        createBindingState: getBindingStateCreator(\r\n          bindText.stateProperty, \r\n          bindText.outputFilterTexts\r\n        ),\r\n      }\r\n      this.creatorByText.set(bindText, creator);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * 指定ノードからDataBindAttributesインスタンスを生成するファクトリ関数。\r\n */\r\nexport function createDataBindAttributes(node: Node): IDataBindAttributes {\r\n  return new DataBindAttributes(node);\r\n}","import { NodePath } from \"./types\";\r\n\r\n/**\r\n * 指定ノードの「親からのインデックス」をルートまで辿り、絶対パス（NodePath）として返すユーティリティ関数。\r\n *\r\n * 例: ルートから見て [0, 2, 1] のような配列を返す。\r\n *     これは「親→子→孫…」とたどったときの各階層でのインデックスを表す。\r\n *\r\n * @param node 対象のDOMノード\r\n * @returns    ルートからこのノードまでのインデックス配列（NodePath）\r\n */\r\nexport function getAbsoluteNodePath(node: Node): NodePath {\r\n  let routeIndexes: NodePath = [];\r\n  while(node.parentNode !== null) {\r\n    const childNodes = Array.from(node.parentNode.childNodes) as Node[];\r\n    routeIndexes = [ childNodes.indexOf(node), ...routeIndexes ];\r\n    node = node.parentNode;\r\n  }\r\n  return routeIndexes;\r\n}","import { DATA_BIND_ATTRIBUTE, COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK } from \"../constants.js\";\r\n\r\n/**\r\n * \"@@:\"もしくは\"@@|\"で始まるコメントノードを取得する\r\n */\r\nfunction isCommentNode(node: Node): boolean {\r\n  return node instanceof Comment && (\r\n    (node.textContent?.indexOf(COMMENT_EMBED_MARK) === 0) || (node.textContent?.indexOf(COMMENT_TEMPLATE_MARK) === 0)\r\n  );\r\n} \r\n\r\n/**\r\n * 指定ノード以下のツリーから「data-bind属性を持つ要素」または\r\n * 「特定のマーク（@@: または @@|）で始まるコメントノード」をすべて取得するユーティリティ関数。\r\n *\r\n * - Elementノードの場合: data-bind属性があるものだけを抽出\r\n * - Commentノードの場合: COMMENT_EMBED_MARK または COMMENT_TEMPLATE_MARK で始まるものだけを抽出\r\n * - DOMツリー全体をTreeWalkerで効率的に走査\r\n *\r\n * @param root 探索の起点となるノード\r\n * @returns    条件に合致したノードの配列\r\n */\r\nexport function getNodesHavingDataBind(root: Node): Node[] {\r\n  const nodes: Node[] = [];\r\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT, {\r\n    acceptNode(node:Node) {\r\n      return (node instanceof Element) ? \r\n        (node.hasAttribute(DATA_BIND_ATTRIBUTE) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP)\r\n        : (isCommentNode(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP);\r\n    }\r\n  });\r\n  while (walker.nextNode()) {\r\n    nodes.push(walker.currentNode);\r\n  }\r\n  return nodes;\r\n}\r\n\r\n","import { createDataBindAttributes } from \"./createDataBindAttributes.js\";\r\nimport { getNodesHavingDataBind } from \"./getNodesHavingDataBind.js\";\r\nimport { IDataBindAttributes } from \"./types\";\r\n\r\nconst listDataBindAttributesById: {[key:number]:IDataBindAttributes[]} = {};\r\n\r\nconst listPathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nconst pathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nfunction getDataBindAttributesFromTemplate(content: DocumentFragment): IDataBindAttributes[] {\r\n  const nodes = getNodesHavingDataBind(content);\r\n  return nodes.map(node => createDataBindAttributes(node));\r\n}\r\n\r\n/**\r\n * テンプレート（DocumentFragment）内のバインディング情報（data-bind属性やコメント）を解析・登録し、\r\n * 各テンプレートIDごとにバインディング属性情報・状態パス集合を管理するユーティリティ。\r\n *\r\n * - getNodesHavingDataBindで対象ノードを抽出し、createDataBindAttributesで解析\r\n * - 各テンプレートIDごとにバインディング属性リスト・状態パス集合・リストパス集合をキャッシュ\r\n * - forバインディング（ループ）のstatePropertyはlistPathsにも登録\r\n *\r\n * @param id      テンプレートID\r\n * @param content テンプレートのDocumentFragment\r\n * @param rootId  ルートテンプレートID（省略時はidと同じ）\r\n * @returns       解析済みバインディング属性リスト\r\n */\r\nexport function registerDataBindAttributes(\r\n  id     : number, \r\n  content: DocumentFragment,\r\n  rootId : number = id\r\n): IDataBindAttributes[] {\r\n  const dataBindAttributes = getDataBindAttributesFromTemplate(content);\r\n  const paths = pathsSetById[rootId] ?? (pathsSetById[rootId] = new Set<string>());\r\n  const listPaths = listPathsSetById[rootId] ?? (listPathsSetById[rootId] = new Set<string>());\r\n  for(let i = 0; i < dataBindAttributes.length; i++) {\r\n    const attribute = dataBindAttributes[i];\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      paths.add(bindText.stateProperty);\r\n      if (bindText.nodeProperty === \"for\") {\r\n        listPaths.add(bindText.stateProperty);\r\n      }\r\n    }\r\n  }\r\n  return listDataBindAttributesById[id] = dataBindAttributes;\r\n}\r\n\r\n/**\r\n * テンプレートIDからバインディング属性リストを取得\r\n */\r\nexport const getDataBindAttributesById = (id: number): IDataBindAttributes[] => {\r\n  return listDataBindAttributesById[id];\r\n}\r\n\r\n/**\r\n * テンプレートIDからforバインディングのstateProperty集合を取得\r\n */\r\nexport const getListPathsSetById = (id: number): Set<string> => {\r\n  return listPathsSetById[id] ?? [];\r\n};\r\n\r\n/**\r\n * テンプレートIDから全バインディングのstateProperty集合を取得\r\n */\r\nexport const getPathsSetById = (id: number): Set<string> => {\r\n  return pathsSetById[id] ?? [];\r\n};","/**\r\n * registerTemplate.ts\r\n *\r\n * HTMLTemplateElementをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - templateById: IDをキーにHTMLTemplateElementを管理するレコード\r\n * - registerTemplate: 指定IDでテンプレートを登録し、空テキストノード除去やデータバインド属性の登録も実行\r\n * - getTemplateById: 指定IDのテンプレートを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - テンプレート登録時にremoveEmptyTextNodesで空テキストノードを除去し、クリーンなDOMを維持\r\n * - registerDataBindAttributesでデータバインド属性を自動付与\r\n * - グローバルにテンプレートを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { registerDataBindAttributes } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { removeEmptyTextNodes } from \"./removeEmptyTextNodes.js\";\r\n\r\nconst templateById:Record<number, HTMLTemplateElement> = {};\r\n\r\nexport function registerTemplate(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number\r\n): number {\r\n  removeEmptyTextNodes(template.content);\r\n  registerDataBindAttributes(id, template.content, rootId);  \r\n  templateById[id] = template;\r\n  return id;\r\n}\r\n\r\nexport function getTemplateById(id: number): HTMLTemplateElement {\r\n  return templateById[id] ?? raiseError(`getTemplateById: template not found: ${id}`);\r\n}","/**\r\n * removeEmptyTextNodes.ts\r\n *\r\n * DocumentFragment内の空テキストノードを削除するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - content（DocumentFragment）の直下にある空白のみのテキストノードを検出し、削除する\r\n *\r\n * 設計ポイント:\r\n * - childNodesをArray.fromで配列化し、forEachで全ノードを走査\r\n * - nodeTypeがTEXT_NODEかつ、nodeValueが空白のみの場合にremoveChildで削除\r\n * - テンプレート処理やクリーンなDOM生成時に利用\r\n */\r\nexport function removeEmptyTextNodes(content:DocumentFragment):void {\r\n  Array.from(content.childNodes).forEach(node => {\r\n    if (node.nodeType === Node.TEXT_NODE && !(node.nodeValue ?? \"\").trim()) {\r\n      content.removeChild(node);\r\n    }\r\n  });  \r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IStateProxy } from \"../StateClass/types\";\r\nimport { CreateBindingNodeByNodeFn, IBindingNode } from \"./BindingNode/types\";\r\nimport { CreateBindingStateByStateFn, IBindingState } from \"./BindingState/types\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\n\r\n/**\r\n * Bindingクラスは、1つのバインディング（ノードと状態の対応）を管理する中核的な実装です。\r\n *\r\n * 主な役割:\r\n * - DOMノードと状態（State）を結びつけるバインディングノード（bindingNode）とバインディング状態（bindingState）の生成・管理\r\n * - バインディングの初期化（init）、再描画（render）、状態値の更新（updateStateValue）などの処理を提供\r\n * - バージョン管理により、不要な再描画を防止\r\n *\r\n * 設計ポイント:\r\n * - createBindingNode, createBindingStateファクトリで柔軟なバインディング構造に対応\r\n * - renderでバージョン差分がある場合のみバインディングノードを更新\r\n * - 双方向バインディング時はupdateStateValueで状態プロキシに値を反映\r\n * - createBinding関数で一貫したバインディング生成を提供\r\n */\r\nclass Binding implements IBinding {\r\n  parentBindContent: IBindContent;\r\n  node             : Node;\r\n  engine           : IComponentEngine;\r\n  bindingNode      : IBindingNode;\r\n  bindingState     : IBindingState;\r\n  version          : number | undefined;\r\n  constructor(\r\n    parentBindContent : IBindContent,\r\n    node              : Node,\r\n    engine            : IComponentEngine,\r\n    createBindingNode : CreateBindingNodeByNodeFn, \r\n    createBindingState: CreateBindingStateByStateFn,\r\n  ) {\r\n    this.parentBindContent = parentBindContent\r\n    this.node = node;\r\n    this.engine = engine\r\n    this.bindingNode = createBindingNode(this, node, engine.inputFilters);\r\n    this.bindingState = createBindingState(this, engine.readonlyState, engine.outputFilters);\r\n  }\r\n\r\n  get bindContents() {\r\n    return this.bindingNode.bindContents;\r\n  }\r\n\r\n  init() {\r\n    this.bindingNode.init();\r\n    this.bindingState.init();\r\n  }\r\n\r\n  render() {\r\n    if (this.version !== this.engine.updater.version) {\r\n      try {\r\n        this.bindingNode.update();\r\n      } finally {\r\n        this.version = this.engine.updater.version;\r\n      }\r\n    }\r\n  }\r\n\r\n  updateStateValue(writeState:IStateProxy, value: any) {\r\n    return this.bindingState.assignValue(writeState, value);\r\n  }\r\n}\r\n\r\n/**\r\n * バインディング生成用ファクトリ関数\r\n * - 各種ファクトリ・エンジン・ノード情報からBindingインスタンスを生成\r\n */\r\nexport function createBinding(\r\n  parentBindContent : IBindContent,\r\n  node              : Node, \r\n  engine            : IComponentEngine, \r\n  createBindingNode : CreateBindingNodeByNodeFn, \r\n  createBindingState: CreateBindingStateByStateFn\r\n): IBinding {\r\n  return new Binding(\r\n    parentBindContent, \r\n    node, \r\n    engine, \r\n    createBindingNode, \r\n    createBindingState\r\n  );\r\n}","/**\r\n * createLoopContext.ts\r\n *\r\n * ループバインディング（for等）で利用するLoopContext（ループコンテキスト）管理クラスとファクトリ関数の実装です。\r\n *\r\n * 主な役割:\r\n * - ループごとのプロパティパス・インデックス・BindContentを紐付けて管理\r\n * - 親ループコンテキストの探索やキャッシュ、インデックスの再割り当て・クリアなどを提供\r\n * - ループ階層をたどるwalk/serializeや、名前でのfind検索も可能\r\n *\r\n * 設計ポイント:\r\n * - WeakRefでlistIndexを保持し、GCフレンドリーな設計\r\n * - parentLoopContextで親ループを遅延探索・キャッシュし、効率的な親子関係管理を実現\r\n * - findで名前からループコンテキストを高速検索（キャッシュ付き）\r\n * - walk/serializeでループ階層をたどる処理を簡潔に記述可能\r\n * - createLoopContextファクトリで一貫した生成・管理が可能\r\n */\r\nimport { IBindContent } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { ILoopContext } from \"./types\";\r\n\r\nclass LoopContext implements ILoopContext {\r\n  #path     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null;\r\n  #bindContent : IBindContent;\r\n  constructor(\r\n    path    : string | null,\r\n    listIndex  : IListIndex,\r\n    bindContent: IBindContent\r\n  ) {\r\n    this.#path = path ?? raiseError(\"name is required\");\r\n    this.#info = getStructuredPathInfo(this.#path);\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    this.#bindContent = bindContent;\r\n  }\r\n  get path(): string {\r\n    return this.#path;\r\n  }\r\n  get info(): IStructuredPathInfo {\r\n    return this.#info;\r\n  }\r\n  get listIndex(): IListIndex {\r\n    return this.#listIndexRef?.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get listIndexRef(): WeakRef<IListIndex> {\r\n    return this.#listIndexRef ?? raiseError(\"listIndexRef is null\");\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    // 構造は変わらないので、#parentLoopContext、#cacheはクリアする必要はない\r\n  }\r\n  clearListIndex():void {\r\n    this.#listIndexRef = null;\r\n  }\r\n  get bindContent(): IBindContent {\r\n    return this.#bindContent;\r\n  }\r\n\r\n  #parentLoopContext: ILoopContext | null | undefined;\r\n  get parentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#parentLoopContext === \"undefined\") {\r\n      let currentBinding: IBindContent | null = this.bindContent;\r\n      while(currentBinding !== null) {\r\n        if (currentBinding.loopContext !== null && currentBinding.loopContext !== this) {\r\n          this.#parentLoopContext = currentBinding.loopContext;\r\n          break;\r\n        }\r\n        currentBinding = currentBinding.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      if (typeof this.#parentLoopContext === \"undefined\") this.#parentLoopContext = null;\r\n    }\r\n    return this.#parentLoopContext;\r\n  }\r\n\r\n  #cache:Record<string, ILoopContext | null> = {};\r\n  find(name: string): ILoopContext | null {\r\n    let loopContext = this.#cache[name];\r\n    if (typeof loopContext === \"undefined\") {\r\n      let currentLoopContext: ILoopContext | null = this;\r\n      while(currentLoopContext !== null) {\r\n        if (currentLoopContext.path === name) break;\r\n        currentLoopContext = currentLoopContext.parentLoopContext;\r\n      }\r\n      loopContext = this.#cache[name] = currentLoopContext;\r\n    }\r\n    return loopContext;\r\n  }\r\n\r\n  walk(callback: (loopContext: ILoopContext) => void): void {\r\n    let currentLoopContext: ILoopContext | null = this;\r\n    while(currentLoopContext !== null) {\r\n      callback(currentLoopContext);\r\n      currentLoopContext = currentLoopContext.parentLoopContext;\r\n    }\r\n  }\r\n\r\n  serialize(): ILoopContext[] {\r\n    const results: ILoopContext[] = [];\r\n    this.walk((loopContext) => {\r\n      results.unshift(loopContext);\r\n    });\r\n    return results;\r\n  }\r\n\r\n}\r\n\r\n// 生成されたあと、IBindContentのloopContextに登録される\r\n// IBindContentにずっと保持される\r\nexport function createLoopContext(\r\n  pattern: string | null,\r\n  listIndex: IListIndex,\r\n  bindContent: IBindContent\r\n): ILoopContext {\r\n  return new LoopContext(pattern, listIndex, bindContent);\r\n}","/**\r\n * render.ts\r\n *\r\n * DataBindingのバインディング配列を受け取り、各バインディングのrender処理を実行するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - bindings配列を走査し、isSelectElementフラグが立っているものは後回しでレンダリング\r\n * - それ以外のバインディングは即時renderを実行\r\n * - select要素のバインディングは最後にまとめてrenderを実行（依存関係や描画順序の問題を回避）\r\n *\r\n * 設計ポイント:\r\n * - select要素の描画順序を制御することで、option要素のバインディングや値の整合性を担保\r\n * - 通常のバインディングとselect要素のバインディングを分離して処理\r\n */\r\nimport { IBinding } from \"../DataBinding/types\";\r\n\r\nexport function render(bindings: IBinding[]) {\r\n  const bindingsWithSelectElement = [];\r\n  for(let i = 0; i < bindings.length; i++) {\r\n    const binding = bindings[i];\r\n    if (binding.bindingNode.isSelectElement) {\r\n      bindingsWithSelectElement.push(binding);\r\n    } else {\r\n      binding.render();\r\n    }\r\n  }\r\n  for(let i = 0; i < bindingsWithSelectElement.length; i++) {\r\n    bindingsWithSelectElement[i].render();\r\n  }\r\n}\r\n","import { resolveNodeFromPath } from \"../BindingBuilder/resolveNodeFromPath.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { createBinding } from \"./Binding.js\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\nimport { createLoopContext } from \"../LoopContext/createLoopContext.js\";\r\nimport { render } from \"../Updater/render.js\";\r\nimport { getDataBindAttributesById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\n\r\nfunction createContent(id: number): DocumentFragment {\r\n  const template = getTemplateById(id) ?? \r\n    raiseError(`BindContent: template is not found: ${id}`);\r\n  return document.importNode(template.content, true);\r\n}\r\n\r\nfunction createBindings(\r\n  bindContent: IBindContent, \r\n  id         : number, \r\n  engine     : IComponentEngine, \r\n  content    : DocumentFragment\r\n): IBinding[] {\r\n  const attributes = getDataBindAttributesById(id) ?? \r\n    raiseError(`BindContent: data-bind is not set`);\r\n  const bindings: IBinding[] = [];\r\n  for(let i = 0; i < attributes.length; i++) {\r\n    const attribute = attributes[i];\r\n    const node = resolveNodeFromPath(content, attribute.nodePath) ?? \r\n      raiseError(`BindContent: node is not found: ${attribute.nodePath}`);\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      const creator = attribute.creatorByText.get(bindText) ?? \r\n        raiseError(`BindContent: creator is not found: ${bindText}`);\r\n      const binding = createBinding(\r\n        bindContent, \r\n        node, \r\n        engine, \r\n        creator.createBindingNode, \r\n        creator.createBindingState\r\n      );\r\n      bindings.push(binding);\r\n    }\r\n  }\r\n  return bindings;\r\n}\r\n\r\n/**\r\n * BindContentクラスは、テンプレートから生成されたDOM断片（DocumentFragment）と\r\n * そのバインディング情報（IBinding配列）を管理するための実装です。\r\n *\r\n * 主な役割:\r\n * - テンプレートIDからDOM断片を生成し、バインディング情報を構築\r\n * - mount/mountBefore/mountAfter/unmountでDOMへの挿入・削除を制御\r\n * - renderでバインディングの再描画、initで初期化処理を実行\r\n * - ループバインディング時のLoopContextやリストインデックス管理にも対応\r\n * - getLastNodeで再帰的に最後のノードを取得し、リスト描画や差し替えに利用\r\n * - assignListIndexでループ内のリストインデックスを再割り当てし、再初期化\r\n *\r\n * 設計ポイント:\r\n * - fragmentとchildNodesの両方を管理し、効率的なDOM操作を実現\r\n * - バインディング情報はテンプレートごとに動的に生成され、各ノードに紐付く\r\n * - ループや条件分岐など複雑なバインディング構造にも柔軟に対応\r\n * - createBindContentファクトリ関数で一貫した生成・初期化を提供\r\n */\r\nclass BindContent implements IBindContent {\r\n  loopContext  : ILoopContext | null;\r\n  parentBinding: IBinding | null;\r\n  childNodes   : Node[];\r\n  fragment     : DocumentFragment;\r\n  engine       : IComponentEngine | undefined;\r\n  #id;\r\n  get id() {\r\n    return this.#id;\r\n  }\r\n  get isMounted() {\r\n    return this.childNodes.length > 0 && this.childNodes[0].parentNode !== this.fragment;\r\n  }\r\n  get firstChildNode() {\r\n    return this.childNodes[0] ?? null;\r\n  }\r\n  get lastChildNode() {\r\n    return this.childNodes[this.childNodes.length - 1] ?? null;\r\n  }\r\n  getLastNode(parentNode: Node): Node | null {\r\n    const lastBinding = this.bindings[this.bindings.length - 1];\r\n    const lastChildNode = this.lastChildNode;\r\n    if (lastBinding.node === lastChildNode) {\r\n      if (lastBinding.bindContents.size > 0) {\r\n        const childBindContent = Array.from(lastBinding.bindContents).at(-1) ?? raiseError(`BindContent: childBindContent is not found`);\r\n        const lastNode = childBindContent.getLastNode(parentNode);\r\n        if (lastNode !== null) {\r\n          return lastNode;\r\n        }\r\n      }\r\n    }\r\n    if (parentNode !== lastChildNode?.parentNode) {\r\n      return null;\r\n    }\r\n    return lastChildNode;\r\n  }\r\n  #currentLoopContext: ILoopContext | null | undefined;\r\n  get currentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#currentLoopContext === \"undefined\") {\r\n      let bindContent: IBindContent | null = this;\r\n      while(bindContent !== null) {\r\n        if (bindContent.loopContext !== null) break; ;\r\n        bindContent = bindContent.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      this.#currentLoopContext = bindContent?.loopContext ?? null;\r\n    }\r\n    return this.#currentLoopContext;\r\n  }\r\n  constructor(\r\n    parentBinding: IBinding | null,\r\n    id           : number, \r\n    engine       : IComponentEngine, \r\n    loopContext  : string | null,\r\n    listIndex    : IListIndex | null\r\n  ) {\r\n    this.parentBinding = parentBinding;\r\n    this.#id = id;\r\n    this.fragment = createContent(id);\r\n    this.childNodes = Array.from(this.fragment.childNodes);\r\n    this.engine = engine;\r\n    this.loopContext = (listIndex !== null) ? createLoopContext(loopContext, listIndex, this) : null;\r\n    this.bindings = createBindings(\r\n      this, \r\n      id, \r\n      engine, \r\n      this.fragment\r\n    );\r\n  }\r\n  mount(parentNode: Node) {\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        parentNode.appendChild(this.childNodes[i]);\r\n      }\r\n    } else {\r\n      parentNode.appendChild(this.fragment);\r\n    }\r\n  }\r\n  mountBefore(parentNode: Node, beforeNode: Node | null) {\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n      }\r\n    } else {\r\n      parentNode.insertBefore(this.fragment, beforeNode);\r\n    }\r\n  }\r\n  mountAfter(parentNode: Node, afterNode: Node | null) {\r\n    const beforeNode = afterNode?.nextSibling ?? null;\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n      }\r\n    } else {\r\n      parentNode.insertBefore(this.fragment, beforeNode);\r\n    }\r\n  }\r\n  unmount() {\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      this.fragment.appendChild(this.childNodes[i]);\r\n    }\r\n  }\r\n  bindings: IBinding[] = [];\r\n  render() {\r\n    render(this.bindings);\r\n  }\r\n  init() {\r\n    this.bindings.forEach(binding => binding.init());\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    if (this.loopContext == null) raiseError(`BindContent: loopContext is null`);\r\n    this.loopContext.assignListIndex(listIndex);\r\n    this.init();\r\n  }\r\n}\r\n\r\nexport function createBindContent(\r\n  parentBinding: IBinding | null,\r\n  id           : number, \r\n  engine       :IComponentEngine, \r\n  loopContext  : string | null, \r\n  listIndex    :IListIndex | null\r\n):IBindContent {\r\n  const bindContent = new BindContent(\r\n    parentBinding, \r\n    id, \r\n    engine, \r\n    loopContext, \r\n    listIndex\r\n  );\r\n  bindContent.init();\r\n  return bindContent;\r\n}","import { NodePath } from \"./types\";\r\n\r\n/**\r\n * ルートノードとノードパス（インデックス配列）から、該当するノードを辿って取得するユーティリティ関数。\r\n *\r\n * - NodePathは各階層でのchildNodesのインデックスを表す配列\r\n * - ルートから順にchildNodes[index]を辿り、該当ノードを返す\r\n * - パスが不正な場合やノードが存在しない場合はnullを返す\r\n *\r\n * @param root  探索の起点となるルートノード\r\n * @param path  各階層のインデックス配列（NodePath）\r\n * @returns     パスで指定されたノード、またはnull\r\n */\r\nexport function resolveNodeFromPath(root: Node, path: NodePath): Node | null {\r\n  return path.reduce((node, index) => node?.childNodes[index] ?? null, root);\r\n}","/**\r\n * createDependencyEdge.ts\r\n *\r\n * 依存関係グラフのエッジ（IDependencyEdge）を生成・キャッシュするユーティリティです。\r\n *\r\n * 主な役割:\r\n * - IStructuredPathInfo（プロパティパス情報）とDependencyType（依存種別）から一意なキーを生成\r\n * - 同じ依存エッジはキャッシュし、重複生成を防止\r\n * - createDependencyEdgeでIDependencyEdgeインスタンスを取得（キャッシュ利用）\r\n *\r\n * 設計ポイント:\r\n * - createDependencyKeyで「パターン@種別」の一意キーを生成\r\n * - cacheオブジェクトでIDependencyEdgeを再利用し、メモリ効率と比較効率を向上\r\n */\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { DependencyType, IDependencyEdge } from \"./types\";\r\n\r\n/**\r\n * infoとtypeから依存関係エッジの一意キーを生成\r\n */\r\nexport function createDependencyKey(info: IStructuredPathInfo, type: DependencyType): string {\r\n  return `${info.pattern}@${type}`;\r\n}\r\n\r\nconst cache: {[key:string]:IDependencyEdge} = {};;\r\n\r\n/**\r\n * 依存関係エッジ（IDependencyEdge）を生成・キャッシュして返す\r\n */\r\nexport function createDependencyEdge(\r\n  info: IStructuredPathInfo,\r\n  type: DependencyType,\r\n): IDependencyEdge {\r\n  const key = createDependencyKey(info, type);\r\n  return cache[key] ?? (cache[key] = { info, type });\r\n}\r\n","/**\r\n * createDependencyWalker.ts\r\n *\r\n * 依存関係グラフを辿るためのDependencyWalkerクラスと、その生成ファクトリです。\r\n *\r\n * 主な役割:\r\n * - 依存関係グラフ（dependentTree）を深さ優先で再帰的に探索し、各依存ノードに対してコールバックを実行\r\n * - ループ検出のためにtracedセットで訪問済みノードを管理し、無限ループを防止\r\n * - 依存種別（DependencyType）に応じて探索方法を柔軟に切り替え\r\n *\r\n * 設計ポイント:\r\n * - walkSubで再帰的に依存ノードを探索し、structured依存の場合は親のtypeを引き継ぐ\r\n * - tracedセットで一度訪れたノードは再訪しない\r\n * - walkでエントリポイントから探索を開始し、コールバックを全ノードに適用\r\n * - createDependencyWalkerファクトリで一貫した生成・利用が可能\r\n */\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { createDependencyKey } from \"./createDependencyEdge\";\r\nimport { DependencyType } from \"./types\";\r\n\r\nclass dependencyWalker {\r\n  engine: IComponentEngine;\r\n  entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null };\r\n  traced: Set<string> = new Set<string>();\r\n  constructor(\r\n    engine: IComponentEngine,\r\n    entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null },\r\n  ) {\r\n    this.engine = engine;\r\n    this.entryRef = entryRef;\r\n  }\r\n\r\n  walkSub(\r\n    info: IStructuredPathInfo,\r\n    type: DependencyType,\r\n    callback: (ref: IStatePropertyRef, info: IStructuredPathInfo, type: DependencyType) => void\r\n  ) {\r\n    const key = createDependencyKey(info, type);\r\n    if (this.traced.has(key)) {\r\n      return;\r\n    }\r\n    this.traced.add(key);\r\n    callback(this.entryRef, info, type);\r\n    const edges = this.engine.dependentTree.get(info) ?? [];\r\n    for(const edge of edges) {\r\n      const overridedType = edge.type === \"structured\" ? type : edge.type;\r\n      this.walkSub(edge.info, overridedType, callback);\r\n    }\r\n\r\n  }\r\n  walk(\r\n    callback: (ref: IStatePropertyRef, info: IStructuredPathInfo, type: DependencyType) => void\r\n  ) {\r\n    const traced = new Set<IStructuredPathInfo>();\r\n    this.walkSub(this.entryRef.info, \"structured\", callback);\r\n  } \r\n\r\n}\r\n\r\nexport function createDependencyWalker(\r\n  engine: IComponentEngine,\r\n  entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null },\r\n) {\r\n  return new dependencyWalker(engine, entryRef);\r\n}","/**\r\n * createListIndex.ts\r\n *\r\n * リストバインディングやループ処理で利用する「リストインデックス」管理クラスとファクトリ関数の実装です。\r\n *\r\n * 主な役割:\r\n * - ListIndexクラスで多重ループやネスト構造のインデックス情報をツリー状に管理\r\n * - indexes, position, lengthなどで階層的なインデックス情報を取得可能\r\n * - iterator/reverseIteratorで親子関係を辿るイテレータを提供\r\n * - atメソッドで指定位置のListIndexをキャッシュ付きで取得（WeakRefによるメモリ効率化）\r\n * - truncateで指定長さまでの親ListIndexを取得\r\n * - addで新たな子ListIndexを生成\r\n *\r\n * 設計ポイント:\r\n * - ListIndexは親子関係を持つことで多重ループやforバインディングに柔軟に対応\r\n * - atメソッドはキャッシュとWeakRefを活用し、GCフレンドリーかつ高速なインデックス参照を実現\r\n * - createListIndexファクトリで一貫した生成・管理が可能\r\n * - getMaxListIndexIdで現在の最大IDを取得可能（デバッグや管理用途）\r\n */\r\nimport { IListIndex } from \"./types\";\r\n\r\nclass ListIndex implements IListIndex {\r\n  static id: number = 0;\r\n  id              : number = ++ListIndex.id;\r\n  #parentListIndex: IListIndex | null = null;\r\n  get parentListIndex(): IListIndex | null {\r\n    return this.#parentListIndex;\r\n  }\r\n  index: number;\r\n  get indexes(): number[] {\r\n    const indexes = this.parentListIndex?.indexes ?? [];\r\n    indexes.push(this.index);\r\n    return indexes;\r\n  }\r\n\r\n  get position(): number {\r\n    return (this.parentListIndex?.position ?? -1) + 1;\r\n  }\r\n\r\n  get length(): number {\r\n    return (this.parentListIndex?.length ?? 0) + 1;\r\n  }\r\n  \r\n  constructor(\r\n    parentListIndex: IListIndex | null,\r\n    index: number\r\n  ) {\r\n    this.#parentListIndex = parentListIndex;\r\n    this.index = index;\r\n  }\r\n  \r\n  truncate(length: number): IListIndex | null {\r\n    let listIndex: IListIndex | null = this;\r\n    while(listIndex !== null) {\r\n      if (listIndex.position < length) return listIndex;\r\n      listIndex = listIndex.parentListIndex;\r\n    }\r\n    return null;\r\n  }\r\n  add(value: number): IListIndex {\r\n    return new ListIndex(this, value);\r\n  }\r\n\r\n  *reverseIterator(): Generator<IListIndex> {\r\n    yield this;\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.reverseIterator();\r\n    }\r\n    return;\r\n  }\r\n\r\n  *iterator(): Generator<IListIndex> {\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.iterator();\r\n    }\r\n    yield this;\r\n    return;\r\n  }\r\n\r\n  toString(): string {\r\n    const parentListIndex = this.parentListIndex?.toString();\r\n    return (parentListIndex !== null) ? parentListIndex + \",\" + this.index.toString() : this.index.toString();\r\n  }\r\n\r\n  #atcache:{[key:number]:(WeakRef<IListIndex> | null)} = {};\r\n  at(position: number): IListIndex | null {\r\n    const value = this.#atcache[position];\r\n    if (value !== undefined) {\r\n      return value ? (value.deref() ?? null) : null;\r\n    }\r\n    let iterator;\r\n    if (position >= 0) {\r\n      iterator = this.iterator();\r\n    } else {\r\n      position = - position - 1 \r\n      iterator = this.reverseIterator();\r\n    }\r\n    let next;\r\n    while(position >= 0) {\r\n      next = iterator.next();\r\n      position--;\r\n    }\r\n    const lisIndex = next?.value ?? null;\r\n    this.#atcache[position] = lisIndex ? new WeakRef(lisIndex) : null;\r\n    return lisIndex;\r\n  }\r\n  \r\n}\r\n\r\nexport function createListIndex(\r\n  parentListIndex: IListIndex | null,\r\n  index          : number\r\n): IListIndex {\r\n  return new ListIndex(parentListIndex, index);\r\n}\r\n\r\nexport function getMaxListIndexId(): number {\r\n  return ListIndex.id;\r\n}\r\n","/**\r\n * listWalker.ts\r\n *\r\n * Stateプロパティのワイルドカード（配列・多重ループ）に対応したリスト探索ユーティリティです。\r\n *\r\n * 主な役割:\r\n * - 指定したプロパティパス（IStructuredPathInfo）とリストインデックス（IListIndex）に対し、\r\n *   再帰的に全てのリスト要素（多重ループ含む）を探索し、コールバックを実行\r\n * - ワイルドカード階層が一致した場合のみコールバックを呼び出し、それ以外は親階層を辿って再帰探索\r\n *\r\n * 設計ポイント:\r\n * - listWalkerSubで再帰的にリストインデックスを探索し、全要素に対してコールバックを適用\r\n * - listWalkerでエントリポイントを提供し、外部から簡単に利用可能\r\n * - 多重ループやネストした配列バインディングにも柔軟に対応\r\n */\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\n\r\nfunction listWalkerSub(\r\n  engine: IComponentEngine,\r\n  info: IStructuredPathInfo, \r\n  listIndex: IListIndex | null, \r\n  callback:(info: IStructuredPathInfo, listIndex: IListIndex | null)=> void\r\n) {\r\n  const listIndexLen = listIndex?.length ?? 0;\r\n  if (info.wildcardCount === listIndexLen) {\r\n    callback(info, listIndex);\r\n  } else {\r\n    const parentInfo = info.wildcardParentInfos[listIndexLen] ?? raiseError(\"Invalid state property info\");\r\n    const listIndexes = engine.getListIndexesSet(parentInfo, listIndex);\r\n    for(const subListIndex of listIndexes ?? []) {\r\n      listWalkerSub(engine, info, subListIndex, callback);\r\n    }\r\n  }\r\n}\r\n\r\nexport function listWalker(\r\n  engine: IComponentEngine,\r\n  info:IStructuredPathInfo, \r\n  listIndex: IListIndex | null,\r\n  callback:(info: IStructuredPathInfo, listIndex: IListIndex | null)=> void\r\n) {\r\n  listWalkerSub(engine, info, listIndex, callback);\r\n}\r\n","/**\r\n * getStatePropertyRef.ts\r\n *\r\n * StatePropertyRefのユーティリティとして、構造化パス情報（IStructuredPathInfo）と\r\n * リストインデックス（IListIndex）から一意な参照キー（refKey）を生成する関数です。\r\n *\r\n * 主な役割:\r\n * - info.idとlistIndex.idを組み合わせて、StatePropertyRefを一意に識別するキーを生成\r\n * - listIndexがnullの場合は0を利用し、全ての参照に対して一貫したキーを提供\r\n *\r\n * 設計ポイント:\r\n * - キャッシュや依存解決など、StatePropertyRefの識別・管理に利用\r\n * - シンプルな文字列連結で高速かつ衝突のないキー生成を実現\r\n */\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\n\r\nexport function createRefKey(\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n) {\r\n  return info.id + \":\" + (listIndex?.id ?? 0);\r\n}\r\n\r\n","/**\r\n * restructListIndex.ts\r\n *\r\n * StateClassのリストインデックス構造を再構築するためのユーティリティです。\r\n *\r\n * 主な役割:\r\n * - buildListIndexTree: 指定されたinfo/listIndex/valueに基づき、リストインデックスのツリー構造を再構築・更新\r\n *   - 既存のリストインデックスと新しいリスト要素を比較し、必要に応じてインデックスを再割り当て\r\n *   - インデックス変更時はengine.updater.addUpdatedListIndexで更新情報を登録\r\n *   - 新しいリストインデックス集合をengine.saveListIndexesSetで保存\r\n * - restructListIndexes: 依存関係を辿りながら、必要なリストインデックスの再構築を一括で実行\r\n *   - 依存関係のある全てのinfo/listIndexに対してbuildListIndexTreeを呼び出し\r\n *   - キャッシュやrefKeyを利用して重複処理や不要な再構築を防止\r\n *   - config.optimizeListElementsやoptimizeListによる最適化にも対応\r\n *\r\n * 設計ポイント:\r\n * - 依存関係の再帰的な探索と、リストインデックスの効率的な再利用・再構築を両立\r\n * - スワップや最適化設定時のスキップ処理、キャッシュによる高速化\r\n * - リストバインディングや多重ループ時のインデックス整合性を担保\r\n */\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { createDependencyWalker } from \"../DependencyWalker/createDependencyWalker\";\r\nimport { createListIndex } from \"../ListIndex/createListIndex\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { listWalker } from \"../ListWalker/listWalker\";\r\nimport { GetByRefSymbol } from \"../StateClass/symbols\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { createRefKey } from \"../StatePropertyRef/getStatePropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst BLANK_LISTINDEXES_SET = new Set<IListIndex>();\r\n\r\nfunction buildListIndexTree(\r\n  engine   : IComponentEngine, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value: any[]\r\n): void {\r\n  const oldValue = engine.getList(info, listIndex) ?? [];\r\n  if (oldValue === value) {\r\n    return;\r\n  }\r\n  const newListIndexesSet:Set<IListIndex> = new Set();\r\n  const oldListIndexesSet = engine.getListIndexesSet(info, listIndex) ?? BLANK_LISTINDEXES_SET;\r\n  const oldListIndexesByItem = Map.groupBy(oldListIndexesSet, listIndex => oldValue[listIndex.index]);\r\n  for(let i = 0; i < value.length; i++) {\r\n    // リスト要素から古いリストインデックスを取得して、リストインデックスを更新する\r\n    // もし古いリストインデックスがなければ、新しいリストインデックスを作成する\r\n    let curListIndex = oldListIndexesByItem.get(value[i])?.shift() ?? createListIndex(listIndex, i);\r\n    if (curListIndex.index !== i) {\r\n      curListIndex.index = i;\r\n      // リストインデックスのインデックスを更新したので、リストインデックスを登録する\r\n      engine.updater.addUpdatedListIndex(curListIndex);\r\n    }\r\n    // リストインデックスを新しいリストインデックスセットに追加する\r\n    newListIndexesSet.add(curListIndex);\r\n  }\r\n  // 新しいリストインデックスセットを保存する\r\n  engine.saveListIndexesSet(info, listIndex, newListIndexesSet);\r\n  engine.saveList(info, listIndex, value.slice(0)); // コピーを保存\r\n\r\n}\r\n\r\nexport function restructListIndexes(\r\n  infos: IStatePropertyRef[],\r\n  engine: IComponentEngine,\r\n  updateValues: {[key:string]: any[]},\r\n  refKeys: Set<string>,\r\n  cache: Map<IStructuredPathInfo, Set<IListIndex|null>>,\r\n) {\r\n  for(const {info, listIndex} of infos) {\r\n    if (config.optimizeListElements && engine.elementInfoSet.has(info)) {\r\n      // スワップ処理のためスキップ\r\n      continue;\r\n    }\r\n    const dependentWalker = createDependencyWalker(engine, {info, listIndex});\r\n    const nowOnList = config.optimizeList && engine.listInfoSet.has(info);\r\n    dependentWalker.walk((ref, refInfo, type) => {\r\n      if (nowOnList && type === \"structured\" && ref.info !== refInfo) {\r\n        if (refInfo.cumulativeInfoSet.has(ref.info)) {\r\n          return;\r\n        }\r\n      }\r\n      const wildcardMatchPaths = Array.from(ref.info.wildcardInfoSet.intersection(refInfo.wildcardInfoSet));\r\n      const longestMatchAt = (wildcardMatchPaths.at(-1)?.wildcardCount ?? 0) - 1;\r\n      const listIndex = (longestMatchAt >= 0) ? (ref.listIndex?.at(longestMatchAt) ?? null) : null;\r\n      listWalker(engine, refInfo, listIndex, (_info, _listIndex) => {\r\n        if (!engine.existsBindingsByInfo(_info)) {\r\n          return;\r\n        }\r\n        const refKey = createRefKey(_info, _listIndex);\r\n        if (refKeys.has(refKey)) {\r\n          return;\r\n        }\r\n        let cacheListIndexSet = cache.get(_info);\r\n        if (!cacheListIndexSet) {\r\n          cacheListIndexSet = new Set<IListIndex|null>();\r\n          cache.set(_info, cacheListIndexSet);\r\n        }\r\n        cacheListIndexSet.add(_listIndex);\r\n        refKeys.add(refKey);\r\n        if (engine.listInfoSet.has(_info)) {\r\n          const values = updateValues[refKey] ?? engine.readonlyState[GetByRefSymbol](_info, _listIndex);\r\n          buildListIndexTree(engine, _info, _listIndex, values);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n","/**\r\n * updater.ts\r\n *\r\n * StateClassの更新処理・変更検知・再描画を一元管理するUpdaterクラスの実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - Stateプロパティやリストインデックスの変更を検知し、再描画や依存解決をトリガー\r\n * - addUpdatedStatePropertyRefValue/addUpdatedListIndexで変更情報を登録し、entryRenderで描画処理をエントリーポイント化\r\n * - rebuildで変更の影響範囲を再計算し、必要なバインディングやリストインデックスの再構築を実行\r\n * - renderでバインディング配列をまとめて描画\r\n *\r\n * 設計ポイント:\r\n * - 変更検知・再描画を非同期でバッチ処理し、パフォーマンスを最適化\r\n * - リストバインディングや多重ループ、スワップ・最適化にも対応\r\n * - StateClassエンジンとの連携やキャッシュ機構も考慮した設計\r\n */\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { render } from \"./render.js\";\r\nimport { SetCacheableSymbol } from \"../StateClass/symbols.js\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IUpdater } from \"./types\";\r\nimport { restructListIndexes } from \"./restructListIndex\";\r\nimport { createRefKey } from \"../StatePropertyRef/getStatePropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\n\r\ntype UpdatedArrayElementBinding = {\r\n  parentRef: IStatePropertyRef;\r\n  binding: IBinding;\r\n  listIndexes: IListIndex[];\r\n  values: any[];\r\n};\r\n\r\nclass Updater implements IUpdater {\r\n  updatedProperties: Set<IStatePropertyRef | IListIndex> = new Set;\r\n  updatedValues    : {[key:string]: any} = {};\r\n  engine           : IComponentEngine;\r\n  #version         : number = 0;\r\n\r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  get version(): number {\r\n    return this.#version;\r\n  }\r\n\r\n  addProcess(process: () => Promise<void> | void): void {\r\n    queueMicrotask(process);\r\n  }\r\n\r\n  addUpdatedStatePropertyRefValue(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any\r\n  ): void {\r\n    const refKey = createRefKey(info, listIndex);\r\n    this.updatedProperties.add({info, listIndex});\r\n    this.updatedValues[refKey] = value;\r\n    this.entryRender();\r\n  }\r\n\r\n  addUpdatedListIndex(listIndex: IListIndex): void {\r\n    this.updatedProperties.add(listIndex);\r\n    this.entryRender();\r\n  }\r\n\r\n  #isEntryRender = false;\r\n  entryRender() {\r\n    if (this.#isEntryRender) return;\r\n    this.#isEntryRender = true;\r\n    setTimeout(() => {\r\n      try {\r\n        const { bindings, arrayElementBindings } = this.rebuild();\r\n        // render\r\n        for(const arrayElementBinding of arrayElementBindings) {\r\n          arrayElementBinding.binding.bindingNode.updateElements(arrayElementBinding.listIndexes, arrayElementBinding.values);\r\n        }\r\n        if (bindings.length > 0) {\r\n          this.render(bindings);\r\n        }\r\n      } finally {\r\n        this.#isEntryRender = false;\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  rebuild(): {bindings: IBinding[], arrayElementBindings: UpdatedArrayElementBinding[]} {\r\n    const retArrayElementBindings: UpdatedArrayElementBinding[] = [];\r\n    const retBindings: IBinding[] = [];\r\n    const engine = this.engine;\r\n    while(this.updatedProperties.size > 0) {\r\n      const updatedProiperties = Array.from(this.updatedProperties.values());\r\n      this.updatedProperties.clear();\r\n      const bindingsByListIndex: IBinding[] = [];\r\n      const updatedRefs: IStatePropertyRef[] = []; // 更新されたプロパティ参照のリスト\r\n      const arrayElementBindingByParentRefKey = new Map<string, Partial<UpdatedArrayElementBinding>>();\r\n      for(let i = 0; i < updatedProiperties.length; i++) {\r\n        const item = updatedProiperties[i];\r\n        if (\"index\" in item) {\r\n          const bindings = engine.bindingsByListIndex.get(item as IListIndex) ?? [];\r\n          bindingsByListIndex.push(...bindings);\r\n        } else {\r\n          updatedRefs.push(item as IStatePropertyRef);\r\n          if (engine.elementInfoSet.has(item.info)) {\r\n            const parentInfo = item.info.parentInfo ?? raiseError(\"info is null\"); // リストのパス情報\r\n            const parentListIndex = item.listIndex?.at(-2) ?? null; // リストのインデックス\r\n            const parentRef = {info: parentInfo, listIndex: parentListIndex};\r\n            const parentRefKey = createRefKey(parentInfo, parentListIndex);\r\n            let info = arrayElementBindingByParentRefKey.get(parentRefKey);\r\n            if (!info) {\r\n              info = {\r\n                parentRef,\r\n                listIndexes: [],\r\n                values: []\r\n              };\r\n              arrayElementBindingByParentRefKey.set(parentRefKey, info);\r\n            }\r\n            const refKey = createRefKey(item.info, item.listIndex);\r\n            const value = this.updatedValues[refKey] ?? null;\r\n            info.values?.push(value);\r\n            info.listIndexes?.push(item.listIndex as IListIndex);\r\n          }\r\n        }\r\n      }\r\n      // リストインデックスの構築\r\n      const builtStatePropertyRefKeySet = new Set<string>();\r\n      const affectedRefs = new Map<IStructuredPathInfo, Set<IListIndex|null>>();\r\n      restructListIndexes(updatedRefs, engine, this.updatedValues, builtStatePropertyRefKeySet, affectedRefs);\r\n\r\n      // スワップの場合の情報を構築する\r\n      for(const [parentRefKey, info] of arrayElementBindingByParentRefKey) {\r\n        const parentInfo = info.parentRef?.info ?? raiseError(\"parentInfo is null\");\r\n        const parentListIndex = info.parentRef?.listIndex ?? null;\r\n        const bindings = engine.getBindings(parentInfo, parentListIndex);\r\n        for(const binding of bindings) {\r\n          if (!binding.bindingNode.isFor) {\r\n            continue;\r\n          }\r\n          const bindingInfo = Object.assign({}, info, { binding });\r\n          retArrayElementBindings.push(bindingInfo as UpdatedArrayElementBinding);\r\n        }\r\n      }\r\n      // 影響する全てのバインド情報を取得する\r\n      for(const [ info, listIndexes ] of affectedRefs.entries()) {\r\n        for(const listIndex of listIndexes) {\r\n          const bindings = engine.getBindings(info, listIndex);\r\n          retBindings.push(...bindings ?? []);\r\n        }\r\n      }\r\n      retBindings.push(...bindingsByListIndex);\r\n    }\r\n    this.updatedValues = {};\r\n    return {bindings: retBindings, arrayElementBindings: retArrayElementBindings};\r\n  }\r\n\r\n  render(bindings: IBinding[]) {\r\n    this.#version++;\r\n    this.engine.readonlyState[SetCacheableSymbol](() => {\r\n      return render(bindings);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createUpdater(engine: IComponentEngine): IUpdater {\r\n  return new Updater(engine);\r\n}\r\n\r\n","import { raiseError } from \"../utils.js\";\r\nimport { IComponentConfig } from \"../WebComponents/types\";\r\nimport { canHaveShadowRoot } from \"./canHaveShadowRoot.js\";\r\n\r\nfunction getParentShadowRoot(parentNode: Node | null): ShadowRoot|undefined{\r\n  let node: Node | null = parentNode;\r\n  while(node) {\r\n    if (node instanceof ShadowRoot) {\r\n      return node;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n}\r\n\r\n/**\r\n * 指定したHTMLElementにShadow DOMをアタッチし、スタイルシートを適用するユーティリティ関数。\r\n *\r\n * - config.enableShadowDomがtrueの場合は、ShadowRootを生成し、adoptedStyleSheetsでスタイルを適用\r\n * - extends指定がある場合はcanHaveShadowRootで拡張可能かチェック\r\n * - Shadow DOMを使わない場合は、親のShadowRootまたはdocumentにスタイルシートを追加\r\n * - すでに同じスタイルシートが含まれていれば重複追加しない\r\n *\r\n * @param element    対象のHTMLElement\r\n * @param config     コンポーネント設定\r\n * @param styleSheet 適用するCSSStyleSheet\r\n * @throws           Shadow DOM非対応の組み込み要素を拡張しようとした場合はエラー\r\n */\r\nexport function attachShadow(element: HTMLElement, config: IComponentConfig, styleSheet: CSSStyleSheet): void {\r\n    if (config.enableShadowDom) {\r\n      if (config.extends === null || canHaveShadowRoot(config.extends)) {\r\n        const shadowRoot = element.attachShadow({ mode: 'open' });\r\n        shadowRoot.adoptedStyleSheets = [styleSheet];\r\n      } else {\r\n        raiseError(`ComponentEngine: Shadow DOM not supported for builtin components that extend ${config.extends}`);\r\n      }\r\n    } else {\r\n      const shadowRootOrDocument = getParentShadowRoot(element.parentNode) || document;\r\n      const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n      if (!styleSheets.includes(styleSheet)) {\r\n        shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, styleSheet];\r\n      }\r\n    }\r\n\r\n}","/**\r\n * 指定したタグ名の要素がShadowRootを持てるかどうかを判定するユーティリティ関数。\r\n *\r\n * - 指定タグ名で要素を生成し、attachShadowメソッドが存在するかどうかで判定\r\n * - 無効なタグ名やattachShadow未対応の場合はfalseを返す\r\n *\r\n * @param tagName 判定したい要素のタグ名（例: \"div\", \"span\", \"input\" など）\r\n * @returns       ShadowRootを持てる場合はtrue、持てない場合はfalse\r\n */\r\nexport function canHaveShadowRoot(tagName: string): boolean {\r\n  try {\r\n    // 一時的に要素を作成\r\n    const element = document.createElement(tagName);\r\n    // `attachShadow` メソッドが存在し、実行可能かを確認\r\n    return typeof element.attachShadow === \"function\";\r\n  } catch {\r\n    // 無効なタグ名などが渡された場合は false を返す\r\n    return false;\r\n  }\r\n}\r\n","import { createListIndex } from \"../ListIndex/createListIndex.js\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { GetByRefSymbol } from \"./symbols.js\";\r\n\r\nconst BLANK_LISTINDEXES_SET = new Set<IListIndex>();\r\n\r\nfunction buildListIndexTreeSub(\r\n  engine   : IComponentEngine, \r\n  listInfos: Set<IStructuredPathInfo>,\r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value: any[]\r\n): void {\r\n  const oldValue = engine.getList(info, listIndex) ?? [];\r\n  if (oldValue === value) {\r\n    return;\r\n  }\r\n  const newListIndexesSet:Set<IListIndex> = new Set();\r\n  const oldListIndexesSet = engine.getListIndexesSet(info, listIndex) ?? BLANK_LISTINDEXES_SET;\r\n  const oldListIndexesByItem = Map.groupBy(oldListIndexesSet, listIndex => oldValue[listIndex.index]);\r\n  for(let i = 0; i < value.length; i++) {\r\n    // リスト要素から古いリストインデックスを取得して、リストインデックスを更新する\r\n    // もし古いリストインデックスがなければ、新しいリストインデックスを作成する\r\n    let curListIndex = oldListIndexesByItem.get(value[i])?.shift() ?? createListIndex(listIndex, i);\r\n    if (curListIndex.index !== i) {\r\n      curListIndex.index = i;\r\n      // リストインデックスのインデックスを更新したので、リストインデックスを登録する\r\n      engine.updater.addUpdatedListIndex(curListIndex);\r\n    }\r\n    // リストインデックスを新しいリストインデックスセットに追加する\r\n    newListIndexesSet.add(curListIndex);\r\n  }\r\n  // 新しいリストインデックスセットを保存する\r\n  engine.saveListIndexesSet(info, listIndex, newListIndexesSet);\r\n  engine.saveList(info, listIndex, value.slice(0)); // コピーを保存\r\n\r\n  // サブ要素のリストインデックスを構築する\r\n  const searchPath = info.pattern + \".*\";\r\n  for(const info of listInfos) {\r\n    if (searchPath !== info.lastWildcardPath) {\r\n      continue;\r\n    }\r\n    for(const subListIndex of newListIndexesSet) {\r\n      const subValue = engine.readonlyState[GetByRefSymbol](info, subListIndex);\r\n      buildListIndexTreeSub(\r\n        engine, \r\n        listInfos, \r\n        info, \r\n        subListIndex, \r\n        subValue ?? []\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function buildListIndexTree(\r\n  engine   : IComponentEngine, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value    : any\r\n): void {\r\n  const listInfos = engine.listInfoSet;\r\n  // 配列じゃなければ何もしない\r\n  if (!engine.listInfoSet.has(info)) {\r\n    return;\r\n  }\r\n  const values = (value ?? []) as any[];\r\n  buildListIndexTreeSub(\r\n    engine, \r\n    engine.listInfoSet, \r\n    info, \r\n    listIndex, \r\n    values\r\n  );\r\n}\r\n","/**\r\n * getByRef.ts\r\n *\r\n * StateClassの内部APIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * 状態オブジェクト（target）から値を取得するための関数（getByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定されたパス・インデックスに対応するState値を取得（多重ループやワイルドカードにも対応）\r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyで値をキャッシュ）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * - 存在しない場合は親infoやlistIndexを辿って再帰的に値を取得\r\n *\r\n * 設計ポイント:\r\n * - handler.engine.trackedGettersに含まれる場合はsetTrackingで依存追跡を有効化\r\n * - キャッシュ有効時はrefKeyで値をキャッシュし、取得・再利用を最適化\r\n * - ワイルドカードや多重ループにも柔軟に対応し、再帰的な値取得を実現\r\n * - finallyでキャッシュへの格納を保証\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { createRefKey } from \"../../StatePropertyRef/getStatePropertyRef\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { SetStatePropertyRefSymbol } from \"../symbols\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setTracking } from \"./setTracking.js\";\r\n\r\n/**\r\n * 構造化パス情報(info, listIndex)をもとに、状態オブジェクト(target)から値を取得する。\r\n * \r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyでキャッシュ）\r\n * - ネスト・ワイルドカード対応（親infoやlistIndexを辿って再帰的に値を取得）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * \r\n * @param target    状態オブジェクト\r\n * @param info      構造化パス情報\r\n * @param listIndex リストインデックス（多重ループ対応）\r\n * @param receiver  プロキシ\r\n * @param handler   状態ハンドラ\r\n * @returns         対象プロパティの値\r\n */\r\nfunction _getByRef(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  receiver : IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  // 依存関係の自動登録\r\n  if (handler.lastTrackingStack != null && handler.lastTrackingStack !== info) {\r\n    const lastPattern = handler.lastTrackingStack;\r\n    if (lastPattern.parentInfo !== info) {\r\n      handler.engine.addDependentProp(lastPattern, info, \"reference\");\r\n    }\r\n  }\r\n\r\n  // キャッシュが有効な場合はrefKeyで値をキャッシュ\r\n  let refKey = '';\r\n  if (handler.cacheable) {\r\n    refKey = createRefKey(info, listIndex);\r\n    const value = handler.cache[refKey];\r\n    if (typeof value !== \"undefined\") {\r\n      return value;\r\n    }\r\n    if (refKey in handler.cache) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  let value;\r\n  try {\r\n    // パターンがtargetに存在する場合はgetter経由で取得\r\n    if (info.pattern in target) {\r\n      return (value = receiver[SetStatePropertyRefSymbol](info, listIndex, () => {\r\n        return Reflect.get(target, info.pattern, receiver);\r\n      }));\r\n    } else {\r\n      // 存在しない場合は親infoを辿って再帰的に取得\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRef(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        // ワイルドカードの場合はlistIndexのindexでアクセス\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return (value = Reflect.get(parentValue, index));\r\n      } else {\r\n        // 通常のプロパティアクセス\r\n        return (value = Reflect.get(parentValue, lastSegment));\r\n      }\r\n    }\r\n  } finally {\r\n    // キャッシュが有効な場合は取得値をキャッシュ\r\n    if (handler.cacheable && !(refKey in handler.cache)) {\r\n      handler.cache[refKey] = value;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * trackedGettersに含まれる場合は依存追跡(setTracking)を有効化し、値取得を行う。\r\n * それ以外は通常の_getByRefで取得。\r\n */\r\nexport function getByRef(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  receiver : IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  if (handler.engine.trackedGetters.has(info.pattern)) {\r\n    return setTracking(info, handler, () => {\r\n      return _getByRef(target, info, listIndex, receiver, handler);\r\n    });\r\n  } else {\r\n    return _getByRef(target, info, listIndex, receiver, handler);\r\n  }\r\n\r\n}\r\n","/**\r\n * setTracking.ts\r\n *\r\n * StateClassの内部APIとして、依存関係トラッキング用のスコープを一時的に設定し、\r\n * 指定したコールバックをそのスコープ内で実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.trackingStackにinfo（依存対象のパス情報）をpushしてトラッキングスコープを設定\r\n * - 指定したcallbackをそのスコープ内で実行\r\n * - finallyで必ずtrackingStackからpopし、スコープ外への影響を防止\r\n * - lastTrackingStackも適切に更新\r\n *\r\n * 設計ポイント:\r\n * - コールバック実行中のみ依存トラッキングを有効化し、例外発生時も状態復元を保証\r\n * - ネストした依存トラッキングにも対応可能\r\n */\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function setTracking(info: IStructuredPathInfo, handler: IStateHandler, callback: () => any): any {\r\n  handler.trackingStack.push(info);\r\n  handler.lastTrackingStack = info;\r\n  try {\r\n    return callback();\r\n  } finally {\r\n    handler.trackingStack.pop();\r\n    handler.lastTrackingStack = handler.trackingStack[handler.trackingStack.length - 1] ?? null;\r\n  }\r\n}\r\n","/**\r\n * getByRef.ts\r\n *\r\n * StateClassのAPIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * Stateの値を取得するための関数（getByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - getByRefメソッドを通じて、指定されたパス・インデックスに対応するState値を取得\r\n * - 内部的にはmethods/getByRef.jsのロジックを呼び出し、値の解決を委譲\r\n *\r\n * 設計ポイント:\r\n * - target, receiver, handlerなどStateClassのプロキシ情報を引数として受け取り、柔軟な値取得を実現\r\n * - pattern（IStructuredPathInfo）とlistIndexで多重ループやネストしたパスにも対応\r\n * - 関数として返すことで、バインディングやAPI経由での柔軟な利用が可能\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef as methodGetByRef } from \"../methods/getByRef.js\";\r\n\r\nexport function getByRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (pattern: IStructuredPathInfo, listIndex: IListIndex | null) => \r\n    methodGetByRef(target, pattern, listIndex, receiver, handler);\r\n} \r\n","/**\r\n * setCacheable.ts\r\n *\r\n * StateClassのAPIとして、キャッシュ可能な処理を登録するための関数（setCacheable）の実装です。\r\n *\r\n * 主な役割:\r\n * - StateClassのプロキシAPI経由で、キャッシュ可能なコールバック処理を登録\r\n * - 内部的にはmethods/setCacheable.jsのロジックを呼び出して処理を委譲\r\n *\r\n * 設計ポイント:\r\n * - target, prop, receiver, handlerなどStateClassのプロキシ情報を引数として受け取る\r\n * - コールバック関数を引数に取り、キャッシュ可能な処理として登録\r\n * - バインディングやAPI経由での柔軟な利用が可能\r\n */\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setCacheable as methodSetChargeable } from \"../methods/setCacheable.js\";\r\n\r\nexport function setCacheable(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (callback: () => void) => {\r\n    methodSetChargeable(handler, callback);\r\n  }\r\n}","/**\r\n * setCacheable.ts\r\n *\r\n * StateClassの内部APIとして、キャッシュ可能なスコープを一時的に有効化し、\r\n * 指定したコールバック処理をキャッシュ付きで実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.cacheableをtrueに設定し、キャッシュ用オブジェクトを初期化\r\n * - 指定したcallbackをキャッシュ有効状態で実行\r\n * - finallyで必ずcacheableをfalseに戻し、スコープ外ではキャッシュを無効化\r\n *\r\n * 設計ポイント:\r\n * - コールバック実行中のみキャッシュを有効化し、スコープ外への影響を防止\r\n * - finallyで状態復元を保証し、例外発生時も安全\r\n */\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function setCacheable(handler: IStateHandler, callback: () => void): void {\r\n  handler.cacheable = true;\r\n  handler.cache = {}\r\n  try {\r\n    callback();\r\n  } finally {\r\n    handler.cacheable = false;\r\n  }\r\n}\r\n","/**\r\n * connectedCallback.ts\r\n *\r\n * StateClassのライフサイクルフック「$connectedCallback」を呼び出すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - オブジェクト（target）に$connectedCallbackメソッドが定義されていれば呼び出す\r\n * - コールバックはtargetのthisコンテキストで呼び出し、IStateProxy（receiver）を引数として渡す\r\n * - 非同期関数として実行可能（await対応）\r\n *\r\n * 設計ポイント:\r\n * - Reflect.getで$connectedCallbackプロパティを安全に取得\r\n * - 存在しない場合は何もしない\r\n * - ライフサイクル管理やカスタム初期化処理に利用\r\n */\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst CONNECTED_CALLBACK = \"$connectedCallback\";\r\n\r\nexport function connectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, CONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","/**\r\n * disconnectedCallback.ts\r\n *\r\n * StateClassのライフサイクルフック「$disconnectedCallback」を呼び出すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - オブジェクト（target）に$disconnectedCallbackメソッドが定義されていれば呼び出す\r\n * - コールバックはtargetのthisコンテキストで呼び出し、IStateProxy（receiver）を引数として渡す\r\n * - 非同期関数として実行可能（await対応）\r\n *\r\n * 設計ポイント:\r\n * - Reflect.getで$disconnectedCallbackプロパティを安全に取得\r\n * - 存在しない場合は何もしない\r\n * - ライフサイクル管理やクリーンアップ処理に利用\r\n */\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst DISCONNECTED_CALLBACK = \"$disconnectedCallback\";\r\n\r\nexport function disconnectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, DISCONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","/**\r\n * setByRef.ts\r\n *\r\n * StateClassの内部APIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * 状態オブジェクト（target）に値を設定するための関数（setByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定されたパス・インデックスに対応するState値を設定（多重ループやワイルドカードにも対応）\r\n * - getter/setter経由で値設定時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * - 存在しない場合は親infoやlistIndexを辿って再帰的に値を設定\r\n * - 設定後はengine.updater.addUpdatedStatePropertyRefValueで更新情報を登録\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードや多重ループにも柔軟に対応し、再帰的な値設定を実現\r\n * - finallyで必ず更新情報を登録し、再描画や依存解決に利用\r\n * - getter/setter経由のスコープ切り替えも考慮した設計\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { SetStatePropertyRefSymbol } from \"../symbols\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef } from \"./getByRef.js\";\r\n\r\nexport function setByRef(\r\n    target   : Object, \r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any, \r\n    receiver : IStateProxy,\r\n    handler  : IStateHandler\r\n): any {\r\n  try {\r\n    if (info.pattern in target) {\r\n      if (info.wildcardCount > 0) {\r\n        if (listIndex === null) {\r\n          raiseError(`propRef.listIndex is null`);\r\n        }\r\n        return receiver[SetStatePropertyRefSymbol](info, listIndex, () => {\r\n          return Reflect.set(target, info.pattern, value, receiver);\r\n        });\r\n      } else {\r\n        return Reflect.set(target, info.pattern, value, receiver);\r\n      }\r\n    } else {\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRef(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return Reflect.set(parentValue, index, value);\r\n      } else {\r\n        return Reflect.set(parentValue, lastSegment, value);\r\n      }\r\n    }\r\n  } finally {\r\n    handler.engine.updater.addUpdatedStatePropertyRefValue(info, listIndex, value);\r\n  }\r\n}\r\n","/**\r\n * resolve.ts\r\n *\r\n * StateClassのAPIとして、パス（path）とインデックス（indexes）を指定して\r\n * Stateの値を取得・設定するための関数（resolve）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列パス（path）とインデックス配列（indexes）から、該当するState値の取得・設定を行う\r\n * - ワイルドカードや多重ループを含むパスにも対応\r\n * - value未指定時は取得（getByRef）、指定時は設定（setByRef）を実行\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパスを解析し、ワイルドカード階層ごとにリストインデックスを解決\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n * - getByRef/setByRefで値の取得・設定を一元的に処理\r\n * - 柔軟なバインディングやAPI経由での利用が可能\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef } from \"../methods/getByRef.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\n\r\nexport function resolve(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (path: string, indexes: number[], value?:any): any => {\r\n    const info = getStructuredPathInfo(path);\r\n    let listIndex: IListIndex | null = null;\r\n    for(let i = 0; i < info.wildcardParentInfos.length; i++) {\r\n      const wildcardParentPattern = info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPath is null`);\r\n      const listIndexes: IListIndex[] = Array.from(handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? []);\r\n      const index = indexes[i] ?? raiseError(`index is null`);\r\n      listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    if (typeof value === \"undefined\") {\r\n      return getByRef(target, info, listIndex, receiver, handler);\r\n    } else {\r\n      return setByRef(target, info, listIndex, value, receiver, handler);\r\n    }\r\n  };\r\n} ","/**\r\n * getAll.ts\r\n *\r\n * StateClassのAPIとして、ワイルドカードを含むStateプロパティパスに対応した\r\n * 全要素取得関数（getAll）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定パス（path）に一致する全てのState要素を配列で取得\r\n * - 多重ループやワイルドカード（*）を含むパスにも対応\r\n * - indexes未指定時は現在のループコンテキストから自動でインデックスを解決\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパス情報を解析し、依存関係も自動で登録\r\n * - walkWildcardPatternでワイルドカード階層を再帰的に探索し、全インデックス組み合わせを列挙\r\n * - resolveで各インデックス組み合わせに対応する値を取得し、配列で返却\r\n * - GetContextListIndexSymbolで現在のループインデックスを取得\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { GetContextListIndexSymbol } from \"../symbols\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { resolve as _resolve } from \"./resolve.js\";\r\n\r\nexport function getAll(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n    const resolve = _resolve(target, prop, receiver, handler);\r\n    return (path: string, indexes?: number[]): any[] => {\r\n      const info = getStructuredPathInfo(path);\r\n      if (handler.lastTrackingStack != null && handler.lastTrackingStack !== info) {\r\n        const lastPattern = handler.lastTrackingStack;\r\n        if (lastPattern.parentInfo !== info) {\r\n          handler.engine.addDependentProp(lastPattern, info, \"reference\");\r\n        }\r\n      }\r\n  \r\n      if (typeof indexes === \"undefined\") {\r\n        for(let i = 0; i < info.wildcardInfos.length; i++) {\r\n          const wildcardPattern = info.wildcardInfos[i] ?? raiseError(`wildcardPattern is null`);\r\n          const listIndex = receiver[GetContextListIndexSymbol](wildcardPattern.pattern);\r\n          if (listIndex) {\r\n            indexes = listIndex.indexes;\r\n            break;\r\n          }\r\n        }\r\n        if (typeof indexes === \"undefined\") {\r\n          indexes = [];\r\n        }\r\n      }\r\n      const walkWildcardPattern = (\r\n        wildcardParentInfos: IStructuredPathInfo[],\r\n        wildardIndexPos: number,\r\n        listIndex: IListIndex | null,\r\n        indexes: number[],\r\n        indexPos: number,\r\n        parentIndexes: number[],\r\n        results: number[][]\r\n      ) => {\r\n        const wildcardParentPattern = wildcardParentInfos[wildardIndexPos] ?? null;\r\n        if (wildcardParentPattern === null) {\r\n          results.push(parentIndexes);\r\n          return;\r\n        }\r\n        const listIndexSet = handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n        const listIndexes = Array.from(listIndexSet);\r\n        const index = indexes[indexPos] ?? null;\r\n        if (index === null) {\r\n          for(let i = 0; i < listIndexes.length; i++) {\r\n            const listIndex = listIndexes[i];\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results);\r\n          }\r\n        } else {\r\n          const listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n          if ((wildardIndexPos + 1) < wildcardParentInfos.length) {\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results\r\n            );\r\n          }\r\n        }\r\n      }\r\n      const resultIndexes: number[][] = [];\r\n      walkWildcardPattern(\r\n        info.wildcardParentInfos, \r\n        0, \r\n        null, \r\n        indexes, \r\n        0, \r\n        [], \r\n        resultIndexes\r\n      );\r\n      const resultValues: any[] = [];\r\n      for(let i = 0; i < resultIndexes.length; i++) {\r\n        resultValues.push(resolve(\r\n          info.pattern,\r\n          resultIndexes[i]\r\n        ));\r\n      }\r\n      return resultValues;\r\n    }\r\n  }","/**\r\n * getResolvedPathInfo.ts\r\n *\r\n * Stateプロパティ名（パス文字列）から、ワイルドカードやインデックス情報を含む\r\n * 詳細なパス情報（IResolvedPathInfo）を解析・生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - プロパティ名を分解し、ワイルドカードやインデックスの有無・種別を判定\r\n * - context/all/partial/none のワイルドカード種別を自動判定\r\n * - パスごとにキャッシュし、再利用性とパフォーマンスを両立\r\n * - getStructuredPathInfoで構造化パス情報も取得\r\n *\r\n * 設計ポイント:\r\n * - \"constructor\"や\"toString\"などの予約語も扱えるよう、Mapではなくオブジェクトでキャッシュ\r\n * - ワイルドカード（*）や数値インデックスを柔軟に判定し、wildcardIndexesに格納\r\n * - context型は未確定インデックス、all型は全て確定インデックス、partial型は混在を示す\r\n * - ResolvedPathInfoクラスでパス解析・情報保持を一元化\r\n */\r\nimport { IResolvedPathInfo, WildcardType } from './types';\r\nimport { getStructuredPathInfo } from './getStructuredPathInfo.js';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IResolvedPathInfo } = {};\r\n//const _cache: Map<string, IResolvedPathInfo> = new Map();\r\n\r\nclass ResolvedPathInfo implements IResolvedPathInfo {\r\n  static id : number = 0;\r\n  id = ++ResolvedPathInfo.id;\r\n  name;\r\n  elements;\r\n  paths;\r\n  wildcardCount;\r\n  wildcardType;\r\n  wildcardIndexes;\r\n  info;\r\n  constructor(name: string) {\r\n    const elements = name.split(\".\");\r\n    const tmpPatternElements = elements.slice();\r\n    const paths = [];\r\n    let incompleteCount = 0;\r\n    let completeCount = 0;\r\n    let lastPath = \"\";\r\n    let wildcardCount = 0;\r\n    let wildcardType: WildcardType = \"none\";\r\n    let wildcardIndexes: (number | null)[] = [];\r\n    for(let i = 0; i < elements.length; i++) {\r\n      const element = elements[i];\r\n      if (element === \"*\") {\r\n        tmpPatternElements[i] = \"*\";\r\n        wildcardIndexes.push(null);\r\n        incompleteCount++;\r\n        wildcardCount++;\r\n      } else {\r\n        const number = Number(element);\r\n        if (!Number.isNaN(number)) {\r\n          tmpPatternElements[i] = \"*\";\r\n          wildcardIndexes.push(number);\r\n          completeCount++;\r\n          wildcardCount++;\r\n        }\r\n      }\r\n      lastPath += element;\r\n      paths.push(lastPath);\r\n      lastPath += (i < elements.length - 1 ? \".\" : \"\");\r\n    }\r\n    const pattern = tmpPatternElements.join(\".\");\r\n    const info = getStructuredPathInfo(pattern);\r\n    if (incompleteCount > 0 || completeCount > 0) {\r\n      if (incompleteCount === wildcardCount) {\r\n        wildcardType = \"context\";\r\n      } else if (completeCount === wildcardCount) {\r\n        wildcardType = \"all\";\r\n      } else {\r\n        wildcardType = \"partial\";\r\n      }\r\n    }\r\n    this.name = name;\r\n    this.elements = elements;\r\n    this.paths = paths;\r\n    this.wildcardCount = wildcardCount;\r\n    this.wildcardType = wildcardType;\r\n    this.wildcardIndexes = wildcardIndexes;\r\n    this.info = info;\r\n  }\r\n}\r\n\r\nexport function getResolvedPathInfo(name:string):IResolvedPathInfo {\r\n  let nameInfo: IResolvedPathInfo | undefined;\r\n//  return _cache.get(name) ?? (_cache.set(name, nameInfo = new ResolvedPathInfo(name)), nameInfo);\r\n  return _cache[name] ?? (_cache[name] = new ResolvedPathInfo(name));\r\n}","/**\r\n * getListIndex.ts\r\n *\r\n * StateClassの内部APIとして、パス情報（IResolvedPathInfo）から\r\n * 対応するリストインデックス（IListIndex）を取得する関数です。\r\n *\r\n * 主な役割:\r\n * - パスのワイルドカード種別（context/all/partial/none）に応じてリストインデックスを解決\r\n * - context型は現在のループコンテキストからリストインデックスを取得\r\n * - all型は各階層のリストインデックス集合からインデックスを辿って取得\r\n * - partial型やnone型は未実装またはnullを返す\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードや多重ループ、ネストした配列バインディングに柔軟に対応\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n * - エラー時はraiseErrorで詳細な例外を投げる\r\n */\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IResolvedPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { GetContextListIndexSymbol } from \"./symbols\";\r\nimport { IStateHandler, IStateProxy } from \"./types\";\r\n\r\nexport function getListIndex(\r\n  info: IResolvedPathInfo, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): IListIndex | null {\r\n  if (info.info.wildcardCount === 0) {\r\n    return null;\r\n  }\r\n  let listIndex: IListIndex | null = null;\r\n  const lastWildcardPath = info.info.lastWildcardPath ?? \r\n    raiseError(`lastWildcardPath is null`);\r\n  if (info.wildcardType === \"context\") {\r\n    listIndex = receiver[GetContextListIndexSymbol](lastWildcardPath) ?? \r\n      raiseError(`ListIndex not found: ${info.info.pattern}`);\r\n  } else if (info.wildcardType === \"all\") {\r\n    let parentListIndex = null;\r\n    for(let i = 0; i < info.info.wildcardCount; i++) {\r\n      const wildcardParentPattern = info.info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPattern is null`);\r\n      const listIndexes: IListIndex[] = Array.from(handler.engine.getListIndexesSet(wildcardParentPattern, parentListIndex) ?? []);\r\n      const wildcardIndex = info.wildcardIndexes[i] ?? raiseError(`wildcardIndex is null`);\r\n      parentListIndex = listIndexes[wildcardIndex] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    listIndex = parentListIndex;\r\n  } else if (info.wildcardType === \"partial\") {\r\n    // ToDo:listIndexを取得する必要がある\r\n  } else if (info.wildcardType === \"none\") {\r\n  }\r\n  return listIndex;\r\n}\r\n","/**\r\n * get.ts\r\n *\r\n * StateClassのProxyトラップとして、プロパティアクセス時の値取得処理を担う関数（get）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列プロパティの場合、特殊プロパティ（$1〜$9, $resolve, $getAll, $router）に応じた値やAPIを返却\r\n * - 通常のプロパティはgetResolvedPathInfoでパス情報を解決し、getListIndexでリストインデックスを取得\r\n * - getByRefで構造化パス・リストインデックスに対応した値を取得\r\n * - シンボルプロパティの場合はhandler.callableApi経由でAPIを呼び出し\r\n * - それ以外はReflect.getで通常のプロパティアクセスを実行\r\n *\r\n * 設計ポイント:\r\n * - $1〜$9は直近のStatePropertyRefのリストインデックス値を返す特殊プロパティ\r\n * - $resolve, $getAll, $routerはAPI関数やルーターインスタンスを返す\r\n * - 通常のプロパティアクセスもバインディングや多重ループに対応\r\n * - シンボルAPIやReflect.getで拡張性・互換性も確保\r\n */\r\nimport { getRouter } from \"../../Router/Router.js\";\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { getAll } from \"../apis/getAll.js\";\r\nimport { resolve } from \"../apis/resolve.js\";\r\nimport { getListIndex } from \"../getListIndex.js\";\r\nimport { getByRef } from \"../methods/getByRef.js\";\r\nimport { GetLastStatePropertyRefSymbol } from \"../symbols.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nexport function get(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  let value;\r\n  if (typeof prop === \"string\") {\r\n    if (prop.charCodeAt(0) === 36) {\r\n      if (prop.length === 2) {\r\n        const d = prop.charCodeAt(1) - 48;\r\n        if (d >= 1 && d <= 9) {\r\n          const ref = receiver[GetLastStatePropertyRefSymbol]() ?? \r\n            raiseError(`get: receiver[GetLastStatePropertyRefSymbol]() is null`);\r\n          return ref.listIndex?.at(d - 1)?.index ?? raiseError(`ListIndex not found: ${prop}`);\r\n        }\r\n      }\r\n      if (prop === \"$resolve\") {\r\n        return resolve(target, prop, receiver, handler);\r\n      } else if (prop === \"$getAll\") {\r\n        return getAll(target, prop, receiver, handler);\r\n      } else if (prop === \"$router\") {\r\n        return getRouter();\r\n      }\r\n    }\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, receiver, handler);\r\n    value = getByRef(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      receiver,\r\n      handler\r\n    );\r\n\r\n  } else if (typeof prop === \"symbol\") {\r\n    if (prop in handler.callableApi) {\r\n      return handler.callableApi[prop](target, prop, receiver, handler);\r\n    }\r\n    value = Reflect.get(\r\n      target, \r\n      prop, \r\n      receiver\r\n    );\r\n  }\r\n  return value;\r\n}\r\n","/**\r\n * setStatePropertyRef.ts\r\n *\r\n * StateClassのAPIとして、Stateプロパティ参照（StatePropertyRef）を設定するための関数（setStatePropertyRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - StateClassのプロキシAPI経由で、指定したパス情報（IStructuredPathInfo）とリストインデックス（IListIndex）に対応する\r\n *   StatePropertyRefを一時的に設定し、コールバックを実行\r\n * - 内部的にはmethods/setStatePropertyRefのロジックを呼び出して処理を委譲\r\n *\r\n * 設計ポイント:\r\n * - target, prop, receiver, handlerなどStateClassのプロキシ情報を引数として受け取る\r\n * - コールバック関数を引数に取り、StatePropertyRefを一時的に切り替えて処理を実行\r\n * - バインディングやAPI経由での柔軟な利用が可能\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setStatePropertyRef as methodSetStatePropertyRef } from \"../methods/setStatePropertyRef\";\r\n\r\nexport function setStatePropertyRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): Function {\r\n  return (info: IStructuredPathInfo, listIndex: IListIndex | null, callback: () => void) => \r\n    methodSetStatePropertyRef(handler, info, listIndex, callback);\r\n}","/**\r\n * setStatePropertyRef.ts\r\n *\r\n * StateClassの内部APIとして、状態プロパティ参照（IStructuredPathInfo, IListIndex）のスコープを\r\n * 一時的に設定し、指定したコールバックをそのスコープ内で実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.structuredPathInfoStackとhandler.listIndexStackにinfoとlistIndexをpushしてスコープを設定\r\n * - 指定したcallbackをそのスコープ内で実行\r\n * - finallyで必ずスタックからpopし、スコープ外への影響を防止\r\n *\r\n * 設計ポイント:\r\n * - コールバック実行中のみスコープを切り替え、例外発生時も状態復元を保証\r\n * - ネストしたスコープにも対応可能\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function setStatePropertyRef(\r\n  handler: IStateHandler,\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  callback: () => void\r\n): void {\r\n  handler.structuredPathInfoStack.push(info);\r\n  handler.listIndexStack.push(listIndex);\r\n  try {\r\n    return callback();\r\n  } finally {\r\n    handler.structuredPathInfoStack.pop();\r\n    handler.listIndexStack.pop();\r\n  }\r\n}\r\n","/**\r\n * setLoopContext.ts\r\n *\r\n * StateClassのAPIとして、ループコンテキスト（for等のループ状態）を設定するための関数（setLoopContext）の実装です。\r\n *\r\n * 主な役割:\r\n * - StateClassのプロキシAPI経由で、ループコンテキスト（ILoopContext）を一時的に設定し、コールバックを実行\r\n * - 内部的にはmethods/setLoopContext.jsのロジックを呼び出して処理を委譲\r\n *\r\n * 設計ポイント:\r\n * - target, prop, receiver, handlerなどStateClassのプロキシ情報を引数として受け取る\r\n * - コールバック関数を引数に取り、ループコンテキストを一時的に切り替えて非同期処理を実行\r\n * - バインディングやAPI経由での柔軟な利用が可能\r\n */\r\nimport { ILoopContext } from \"../../LoopContext/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setLoopContext as methodSetLoopContext } from \"../methods/setLoopContext.js\";\r\n\r\nexport function setLoopContext(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): Function {\r\n  return (loopContext: ILoopContext | null, callback: () => Promise<void>) => \r\n    methodSetLoopContext(handler, loopContext, callback);\r\n}","/**\r\n * setLoopContext.ts\r\n *\r\n * StateClassの内部APIとして、ループコンテキスト（ILoopContext）を一時的に設定し、\r\n * 指定した非同期コールバックをそのスコープ内で実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.loopContextにループコンテキストを一時的に設定\r\n * - 既にループコンテキストが設定されている場合はエラーを投げる\r\n * - loopContextが存在する場合はasyncSetStatePropertyRefでスコープを設定しコールバックを実行\r\n * - loopContextがnullの場合はそのままコールバックを実行\r\n * - finallyで必ずloopContextをnullに戻し、スコープ外への影響を防止\r\n *\r\n * 設計ポイント:\r\n * - ループバインディングや多重ループ時のスコープ管理を安全に行う\r\n * - finallyで状態復元を保証し、例外発生時も安全\r\n * - 非同期処理にも対応\r\n */\r\nimport { ILoopContext } from \"../../LoopContext/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IStateHandler } from \"../types\";\r\nimport { asyncSetStatePropertyRef } from \"./asyncSetStatePropertyRef\";\r\n\r\nexport async function setLoopContext(\r\n  handler: IStateHandler,\r\n  loopContext: ILoopContext | null,\r\n  callback: () => Promise<void>\r\n): Promise<void> {\r\n  if (handler.loopContext) {\r\n    raiseError('already in loop context');\r\n  }\r\n  handler.loopContext = loopContext;\r\n  try {\r\n    if (loopContext) {\r\n      await asyncSetStatePropertyRef(handler, loopContext.info, loopContext.listIndex, callback);\r\n    } else {\r\n      await callback();\r\n    }\r\n  } finally {\r\n    handler.loopContext = null;\r\n  }\r\n}\r\n","/**\r\n * asyncSetStatePropertyRef.ts\r\n *\r\n * 状態プロパティ参照のスコープを一時的に設定し、非同期コールバックを実行するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - handlerのstructuredPathInfoStackとlistIndexStackに、infoとlistIndexをpushしてスコープを設定\r\n * - 指定した非同期コールバック（callback）をそのスコープ内で実行\r\n * - callback実行後は必ずpopしてスコープを元に戻す（finallyで保証）\r\n *\r\n * 設計ポイント:\r\n * - 非同期処理中も正しいスコープ情報（パス・リストインデックス）が維持される\r\n * - ネストした非同期処理にも対応可能\r\n * - スコープのpush/popは例外発生時も確実に実行される\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\n/**\r\n * 状態プロパティ参照のスコープを一時的に設定し、非同期コールバックを実行します。\r\n * \r\n * @param handler   スコープ管理用のハンドラ\r\n * @param info      現在の構造化パス情報\r\n * @param listIndex 現在のリストインデックス（ネスト対応用）\r\n * @param callback  スコープ内で実行する非同期処理\r\n * \r\n * スタックに info と listIndex をpushし、callback実行後に必ずpopします。\r\n * これにより、非同期処理中も正しいスコープ情報が維持されます。\r\n */\r\nexport async function asyncSetStatePropertyRef(\r\n  handler: IStateHandler,\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  callback: () => Promise<void>\r\n): Promise<void> {\r\n  handler.structuredPathInfoStack.push(info);\r\n  handler.listIndexStack.push(listIndex);\r\n  try {\r\n    await callback();\r\n  } finally {\r\n    handler.structuredPathInfoStack.pop();\r\n    handler.listIndexStack.pop();\r\n  }\r\n}\r\n","/**\r\n * getLastStatePropertyRef.ts\r\n *\r\n * StateClassの内部APIとして、最後にアクセスされたStateプロパティ参照（IStatePropertyRef）を取得する関数です。\r\n *\r\n * 主な役割:\r\n * - handlerのstructuredPathInfoStackおよびlistIndexStackから、直近のパス情報とリストインデックスを取得\r\n * - それらをIStatePropertyRefとして返却\r\n * - スタックが空、または値が未定義の場合はnullを返す\r\n *\r\n * 設計ポイント:\r\n * - StateClassのプロパティアクセス時に、現在の参照スコープ情報を安全に取得\r\n * - バインディングや依存解決など、直近の参照情報が必要な場面で利用\r\n */\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function getLastStatePropertyRef(\r\n  handler: IStateHandler\r\n): IStatePropertyRef | null {\r\n  if (handler.structuredPathInfoStack.length === 0) {\r\n    return null;\r\n  }\r\n  const info = handler.structuredPathInfoStack[handler.structuredPathInfoStack.length - 1];\r\n  if (typeof info === \"undefined\") {\r\n    return null;\r\n  }\r\n  const listIndex = handler.listIndexStack[handler.listIndexStack.length - 1];\r\n  if (typeof listIndex === \"undefined\") {\r\n    return null;\r\n  }\r\n  return {info, listIndex};\r\n}\r\n","/**\r\n * getLastStatePropertyRef.ts\r\n *\r\n * StateClassのAPIとして、最後にアクセスされたStateプロパティ参照（StatePropertyRef）を取得する関数の実装です。\r\n *\r\n * 主な役割:\r\n * - StateClassのプロキシAPI経由で、最後にアクセスされたStatePropertyRefを取得\r\n * - 内部的にはmethods/getLastStatePropertyRef.jsのロジックを呼び出して値を解決\r\n *\r\n * 設計ポイント:\r\n * - target, prop, receiver, handlerなどStateClassのプロキシ情報を引数として受け取る\r\n * - 関数として返すことで、バインディングやAPI経由での柔軟な利用が可能\r\n */\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getLastStatePropertyRef as methodGetLastStatePropertyRef } from \"../methods/getLastStatePropertyRef.js\";\r\n\r\nexport function getLastStatePropertyRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): Function {\r\n  return () => \r\n    methodGetLastStatePropertyRef(handler);\r\n}","/**\r\n * getContextListIndex.ts\r\n *\r\n * StateClassのAPIとして、現在のループコンテキストに対応するリストインデックスを取得する関数（getContextListIndex）の実装です。\r\n *\r\n * 主な役割:\r\n * - StateClassのプロキシAPI経由で、指定したstructuredPath（プロパティパス）に対応するリストインデックスを取得\r\n * - 内部的にはmethods/getContextListIndexのロジックを呼び出して値を解決\r\n *\r\n * 設計ポイント:\r\n * - target, prop, receiver, handlerなどStateClassのプロキシ情報を引数として受け取る\r\n * - structuredPathを指定することで、多重ループやネストした配列バインディングにも対応\r\n * - 関数として返すことで、バインディングやAPI経由での柔軟な利用が可能\r\n */\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getContextListIndex as methodGetContextListIndex } from \"../methods/getContextListIndex\";\r\n\r\nexport function getContextListIndex(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): Function {\r\n  return (structuredPath: string) => \r\n    methodGetContextListIndex(handler, structuredPath);\r\n}","/**\r\n * getContextListIndex.ts\r\n *\r\n * StateClassの内部APIとして、現在のプロパティ参照スコープにおける\r\n * 指定したstructuredPath（ワイルドカード付きプロパティパス）に対応する\r\n * リストインデックス（IListIndex）を取得する関数です。\r\n *\r\n * 主な役割:\r\n * - handlerの最後にアクセスされたStatePropertyRefから、指定パスに対応するリストインデックスを取得\r\n * - ワイルドカード階層に対応し、多重ループやネストした配列バインディングにも利用可能\r\n *\r\n * 設計ポイント:\r\n * - getLastStatePropertyRefで直近のプロパティ参照情報を取得\r\n * - info.wildcardPathsからstructuredPathのインデックスを特定\r\n * - listIndex.at(index)で該当階層のリストインデックスを取得\r\n * - パスが一致しない場合や参照が存在しない場合はnullを返す\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStateHandler } from \"../types\";\r\nimport { getLastStatePropertyRef } from \"./getLastStatePropertyRef\";\r\n\r\nexport function getContextListIndex(\r\n  handler: IStateHandler,\r\n  structuredPath: string\r\n): IListIndex | null {\r\n  const lastRef = getLastStatePropertyRef(handler);\r\n  if (lastRef === null) {\r\n    return null;\r\n  }\r\n  const info = lastRef.info;\r\n  const index = info.wildcardPaths.indexOf(structuredPath);\r\n  if (index >= 0) {\r\n    return lastRef.listIndex?.at(index) ?? null;\r\n  }\r\n  return null;\r\n}\r\n","/**\r\n * createReadonlyStateProxy.ts\r\n *\r\n * StateClassの「読み取り専用」プロキシを生成するための実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - Stateオブジェクトに対して、読み取り専用のProxyを作成\r\n * - StateHandlerクラスで各種APIやトラップ（get/set）を実装\r\n * - getトラップでバインディングやAPI呼び出し、依存解決などに対応\r\n * - setトラップではエラーを投げて書き込みを禁止\r\n *\r\n * 設計ポイント:\r\n * - StateHandlerはIReadonlyStateHandlerを実装し、状態管理やAPI呼び出しの基盤となる\r\n * - callableApiに各種APIシンボルと関数をマッピングし、柔軟なAPI拡張が可能\r\n * - createReadonlyStateProxyで一貫した生成・利用が可能\r\n * - 依存解決やキャッシュ、ループ・プロパティ参照スコープ管理など多機能な設計\r\n */\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetAllSymbol, GetByRefSymbol, GetContextListIndexSymbol, GetLastStatePropertyRefSymbol, ResolveSymbol, SetByRefSymbol, SetCacheableSymbol, SetLoopContextSymbol, SetStatePropertyRefSymbol } from \"./symbols.js\";\r\nimport { IReadonlyStateHandler, IState, IStateHandler, IStateProxy, IWritableStateHandler } from \"./types\";\r\nimport { getByRef as apiGetByRef } from \"./apis/getByRef.js\";\r\nimport { setCacheable as apiSetCacheable } from \"./apis/setCacheable.js\";\r\nimport { connectedCallback } from \"./apis/connectedCallback.js\";\r\nimport { disconnectedCallback } from \"./apis/disconnectedCallback.js\";\r\nimport { resolve } from \"./apis/resolve.js\";\r\nimport { getAll } from \"./apis/getAll.js\";\r\nimport { get as trapGet } from \"./traps/get.js\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { setStatePropertyRef } from \"./apis/setStatePropertyRef\";\r\nimport { setLoopContext } from \"./apis/setLoopContext\";\r\nimport { getLastStatePropertyRef } from \"./apis/getLastStatePropertyRef\";\r\nimport { getContextListIndex } from \"./apis/getContextListIndex\";\r\n\r\nclass StateHandler implements IReadonlyStateHandler {\r\n  engine   : IComponentEngine;\r\n  cacheable: boolean = false;\r\n  cache    : {[key:number]:any} = {};\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: IStructuredPathInfo[] = [];\r\n  structuredPathInfoStack: IStructuredPathInfo[] = [];\r\n  listIndexStack: (IListIndex | null)[] = [];\r\n  loopContext: ILoopContext | null = null;\r\n  \r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  callableApi: { [key:symbol]: Function } = {\r\n    [GetByRefSymbol]: apiGetByRef, \r\n    [SetCacheableSymbol]: apiSetCacheable, \r\n    [ConnectedCallbackSymbol]: connectedCallback, \r\n    [DisconnectedCallbackSymbol]: disconnectedCallback, \r\n    [ResolveSymbol]: resolve, \r\n    [GetAllSymbol]: getAll,\r\n    [SetStatePropertyRefSymbol]: setStatePropertyRef,\r\n    [SetLoopContextSymbol]: setLoopContext,\r\n    [GetLastStatePropertyRefSymbol]: getLastStatePropertyRef,\r\n    [GetContextListIndexSymbol]: getContextListIndex\r\n  };\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IStateProxy\r\n  ): boolean {\r\n    raiseError(`Cannot set property ${String(prop)} of readonly state.`);\r\n  }\r\n}\r\n\r\nexport function createReadonlyStateProxy(\r\n  engine: IComponentEngine, \r\n  state: Object\r\n): IStateProxy {\r\n  return new Proxy<IState>(state, new StateHandler(engine)) as IStateProxy;\r\n}\r\n\r\n","/**\r\n * setByRef.ts\r\n *\r\n * StateClassのAPIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * Stateの値を設定するための関数（setByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - setByRefメソッドを通じて、指定されたパス・インデックスに対応するState値を設定\r\n * - 内部的にはmethods/setByRef.jsのロジックを呼び出し、値の設定処理を委譲\r\n *\r\n * 設計ポイント:\r\n * - target, receiver, handlerなどStateClassのプロキシ情報を引数として受け取り、柔軟な値設定を実現\r\n * - pattern（IStructuredPathInfo）とlistIndexで多重ループやネストしたパスにも対応\r\n * - 関数として返すことで、バインディングやAPI経由での柔軟な利用が可能\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setByRef as methodSetByRef } from \"../methods/setByRef.js\";\r\n\r\nexport function setByRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (pattern: IStructuredPathInfo, listIndex: IListIndex | null, value: any) => \r\n    methodSetByRef(target, pattern, listIndex, value, receiver, handler);\r\n}","/**\r\n * createWritableStateProxy.ts\r\n *\r\n * StateClassの「書き込み可能」プロキシを生成するための実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - Stateオブジェクトに対して、書き込み可能なProxyを作成\r\n * - StateHandlerクラスで各種APIやトラップ（get/set）を実装\r\n * - getトラップでバインディングやAPI呼び出し、依存解決などに対応\r\n * - setトラップで値の書き込みや副作用（依存解決・再描画）を一元管理\r\n *\r\n * 設計ポイント:\r\n * - StateHandlerはIWritableStateHandlerを実装し、状態管理やAPI呼び出しの基盤となる\r\n * - callableApiに各種APIシンボルと関数をマッピングし、柔軟なAPI拡張が可能\r\n * - createWritableStateProxyで一貫した生成・利用が可能\r\n * - 依存解決やキャッシュ、ループ・プロパティ参照スコープ管理など多機能な設計\r\n */\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetAllSymbol, GetByRefSymbol, GetContextListIndexSymbol, GetLastStatePropertyRefSymbol, ResolveSymbol, SetByRefSymbol, SetLoopContextSymbol, SetStatePropertyRefSymbol } from \"./symbols.js\";\r\nimport { IState, IStateProxy, IWritableStateHandler } from \"./types\";\r\nimport { getByRef as apiGetByRef } from \"./apis/getByRef.js\";\r\nimport { setByRef as apiSetByRef } from \"./apis/setByRef.js\";\r\nimport { connectedCallback } from \"./apis/connectedCallback.js\";\r\nimport { disconnectedCallback } from \"./apis/disconnectedCallback.js\";\r\nimport { resolve } from \"./apis/resolve.js\";\r\nimport { getAll } from \"./apis/getAll.js\";\r\nimport { get as trapGet } from \"./traps/get.js\";\r\nimport { set as trapSet } from \"./traps/set.js\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { setStatePropertyRef } from \"./apis/setStatePropertyRef\";\r\nimport { setLoopContext } from \"./apis/setLoopContext\";\r\nimport { getLastStatePropertyRef } from \"./apis/getLastStatePropertyRef\";\r\nimport { getContextListIndex } from \"./apis/getContextListIndex\";\r\n\r\nclass StateHandler implements IWritableStateHandler {\r\n  engine   : IComponentEngine;\r\n  cacheable: boolean = false;\r\n  cache    : {[key:number]:any} = {};\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: IStructuredPathInfo[] = [];\r\n  structuredPathInfoStack: IStructuredPathInfo[] = [];\r\n  listIndexStack: (IListIndex | null)[] = [];\r\n  loopContext: ILoopContext | null = null;\r\n  \r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  callableApi: { [key:symbol]: Function } = {\r\n    [GetByRefSymbol]: apiGetByRef, \r\n    [SetByRefSymbol]: apiSetByRef, \r\n    [ConnectedCallbackSymbol]: connectedCallback, \r\n    [DisconnectedCallbackSymbol]: disconnectedCallback, \r\n    [ResolveSymbol]: resolve, \r\n    [GetAllSymbol]: getAll,\r\n    [SetStatePropertyRefSymbol]: setStatePropertyRef,\r\n    [SetLoopContextSymbol]: setLoopContext,\r\n    [GetLastStatePropertyRefSymbol]: getLastStatePropertyRef,\r\n   [GetContextListIndexSymbol]: getContextListIndex\r\n   };\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IStateProxy\r\n  ): boolean {\r\n    return trapSet(target, prop, value, receiver, this);\r\n  }\r\n}\r\n\r\nexport function createWritableStateProxy(\r\n  engine: IComponentEngine, \r\n  state: Object\r\n): IStateProxy {\r\n  return new Proxy<IState>(state, new StateHandler(engine)) as IStateProxy;\r\n}\r\n\r\n","/**\r\n * set.ts\r\n *\r\n * StateClassのProxyトラップとして、プロパティ設定時の値セット処理を担う関数（set）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列プロパティの場合、getResolvedPathInfoでパス情報を解決し、getListIndexでリストインデックスを取得\r\n * - setByRefで構造化パス・リストインデックスに対応した値設定を実行\r\n * - それ以外（シンボル等）の場合はReflect.setで通常のプロパティ設定を実行\r\n *\r\n * 設計ポイント:\r\n * - バインディングや多重ループ、ワイルドカードを含むパスにも柔軟に対応\r\n * - setByRefを利用することで、依存解決や再描画などの副作用も一元管理\r\n * - Reflect.setで標準的なプロパティ設定の互換性も確保\r\n */\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { getListIndex } from \"../getListIndex.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nexport function set(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  value   : any, \r\n  receiver: IStateProxy,\r\n  handler : IStateHandler\r\n): boolean {\r\n  if (typeof prop === \"string\") {\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, receiver, handler);\r\n    return setByRef(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      value, \r\n      receiver,\r\n      handler\r\n    );\r\n  } else {\r\n    return Reflect.set(\r\n      target, \r\n      prop, \r\n      value, \r\n      receiver\r\n    );\r\n  }\r\n}\r\n","import { createBindContent } from \"../DataBinding/BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../DataBinding/types\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { IState, IStateProxy, IStructiveState } from \"../StateClass/types\";\r\nimport { IUpdater } from \"../Updater/types\";\r\nimport { createUpdater } from \"../Updater/updater.js\";\r\nimport { ComponentType, IComponentConfig, IComponentStatic, StructiveComponent } from \"../WebComponents/types\";\r\nimport { attachShadow } from \"./attachShadow.js\";\r\nimport { ISaveInfoByResolvedPathInfo, IComponentEngine } from \"./types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { buildListIndexTree } from \"../StateClass/buildListIndexTree.js\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetByRefSymbol, SetCacheableSymbol, SetLoopContextSymbol } from \"../StateClass/symbols.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { BindParentComponentSymbol } from \"../ComponentState/symbols.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { DependencyType, IDependencyEdge } from \"../DependencyWalker/types.js\";\r\nimport { createDependencyEdge } from \"../DependencyWalker/createDependencyEdge.js\";\r\nimport { createReadonlyStateProxy } from \"../StateClass/createReadonlyStateProxy.js\";\r\nimport { createWritableStateProxy } from \"../StateClass/createWritableStateProxy.js\";\r\n\r\n/**\r\n * ComponentEngineクラスは、Structiveコンポーネントの状態管理・依存関係管理・\r\n * バインディング・ライフサイクル・レンダリングなどの中核的な処理を担うエンジンです。\r\n *\r\n * 主な役割:\r\n * - 状態インスタンスやプロキシの生成・管理\r\n * - テンプレート・スタイルシート・フィルター・バインディング情報の管理\r\n * - 依存関係グラフ（dependentTree）の構築と管理\r\n * - バインディング情報やリスト情報の保存・取得\r\n * - ライフサイクル（connectedCallback/disconnectedCallback）処理\r\n * - Shadow DOMやスタイルシートの適用\r\n * - 状態プロパティの取得・設定\r\n * - バインディングの追加・存在判定・リスト管理\r\n *\r\n * 構造・設計上の特徴:\r\n * - 状態や依存関係、バインディング情報を効率的に管理するためのキャッシュやマップを多用\r\n * - テンプレートやリスト構造の多重管理に対応\r\n * - 非同期初期化やUpdaterによるバッチ的な状態更新設計\r\n * - 疎結合な設計で、各種ユーティリティやファクトリ関数と連携\r\n *\r\n * 典型的なWeb Componentsのライフサイクルやリアクティブな状態管理を、Structive独自の構造で実現しています。\r\n */\r\nexport class ComponentEngine implements IComponentEngine {\r\n  type          : ComponentType = 'autonomous';\r\n  config        : IComponentConfig;\r\n  template      : HTMLTemplateElement;\r\n  styleSheet    : CSSStyleSheet;\r\n  stateClass    : IStructiveState;\r\n  state         : IState;\r\n  readonlyState : IStateProxy;\r\n  updater       : IUpdater;\r\n  inputFilters  : FilterWithOptions;\r\n  outputFilters : FilterWithOptions;\r\n  bindContent   : IBindContent;\r\n  baseClass     : typeof HTMLElement = HTMLElement;\r\n  owner         : StructiveComponent;\r\n  trackedGetters: Set<string>;\r\n\r\n  listInfoSet         : Set<IStructuredPathInfo> = new Set();\r\n  elementInfoSet      : Set<IStructuredPathInfo> = new Set();\r\n  bindingsByListIndex : WeakMap<IListIndex, Set<IBinding>> = new WeakMap();\r\n  dependentTree       : Map<IStructuredPathInfo, Set<IDependencyEdge>> = new Map();\r\n\r\n  bindingsByComponent: WeakMap<StructiveComponent, Set<IBinding>> = new WeakMap();\r\n\r\n  #waitForInitialize : PromiseWithResolvers<void> = Promise.withResolvers<void>();\r\n\r\n  constructor(config: IComponentConfig, owner: StructiveComponent) {\r\n    this.config = config;\r\n    if (this.config.extends) {\r\n      this.type = 'builtin';\r\n    }\r\n    const componentClass = owner.constructor as IComponentStatic;\r\n    this.template = componentClass.template;\r\n    this.styleSheet = componentClass.styleSheet;\r\n    this.stateClass = componentClass.stateClass;\r\n    this.state = new this.stateClass();\r\n    this.readonlyState = createReadonlyStateProxy(this, this.state);\r\n    this.updater = createUpdater(this);\r\n    this.inputFilters = componentClass.inputFilters;\r\n    this.outputFilters = componentClass.outputFilters;\r\n    this.owner = owner;\r\n    this.trackedGetters = componentClass.trackedGetters;\r\n    // 依存関係の木を作成する\r\n    const checkDependentProp = (info: IStructuredPathInfo) => {\r\n      const parentInfo = info.parentInfo;\r\n      if (parentInfo === null) return;\r\n      this.addDependentProp(info, parentInfo, \"structured\");\r\n      checkDependentProp(parentInfo);\r\n    }\r\n    for(const path of componentClass.paths) {\r\n      const info = getStructuredPathInfo(path);\r\n      checkDependentProp(info);\r\n    }\r\n    // 配列のプロパティ、配列要素のプロパティを登録する\r\n    for(const listPath of componentClass.listPaths) {\r\n      this.listInfoSet.add(getStructuredPathInfo(listPath));\r\n      this.elementInfoSet.add(getStructuredPathInfo(listPath + \".*\"));\r\n    }\r\n    this.bindContent = createBindContent(null, componentClass.id, this, null, null); // this.stateArrayPropertyNamePatternsが変更になる可能性がある\r\n    for(const info of this.listInfoSet) {\r\n      if (info.wildcardCount > 0) continue;\r\n      const value = this.readonlyState[GetByRefSymbol](info, null)\r\n      buildListIndexTree(this, info, null, value);\r\n    }\r\n  }\r\n\r\n  async connectedCallback(): Promise<void> {\r\n    if (this.owner.dataset.state) {\r\n      try {\r\n        const json = JSON.parse(this.owner.dataset.state);\r\n        const writableState = createWritableStateProxy(this, this.state);\r\n        await writableState[SetLoopContextSymbol](null, async () => {\r\n          for(const [key, value] of Object.entries(json)) {\r\n            const info = getStructuredPathInfo(key);\r\n            if (info.wildcardCount > 0) continue;\r\n            writableState[SetByRefSymbol](info, null, value);\r\n          }\r\n\r\n        });\r\n      } catch(e) {\r\n        raiseError(\"Failed to parse state from dataset\");\r\n      }\r\n    }\r\n    this.owner.state[BindParentComponentSymbol]();\r\n    attachShadow(this.owner, this.config, this.styleSheet);\r\n    await this.readonlyState[ConnectedCallbackSymbol]();\r\n    this.readonlyState[SetCacheableSymbol](() => {\r\n      this.bindContent.render();\r\n    });\r\n    this.bindContent.mount(this.owner.shadowRoot ?? this.owner);\r\n    this.#waitForInitialize.resolve();\r\n  }\r\n\r\n  async disconnectedCallback(): Promise<void> {\r\n    await this.readonlyState[DisconnectedCallbackSymbol]();\r\n  }\r\n\r\n  #saveInfoByListIndexByResolvedPathInfoId: { [id:number]: WeakMap<IListIndex,ISaveInfoByResolvedPathInfo> } = {};\r\n  #saveInfoByStructuredPathId: { [id:number]: ISaveInfoByResolvedPathInfo } = {};\r\n\r\n  createSaveInfo():ISaveInfoByResolvedPathInfo {\r\n    return {\r\n      list          : null,\r\n      listIndexesSet: null,\r\n      bindings      : [],\r\n    }\r\n  }\r\n\r\n  getSaveInfoByStatePropertyRef(info:IStructuredPathInfo, listIndex:IListIndex | null): ISaveInfoByResolvedPathInfo {\r\n    if (listIndex === null) {\r\n      let saveInfo = this.#saveInfoByStructuredPathId[info.id];\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        this.#saveInfoByStructuredPathId[info.id] = saveInfo;\r\n      }\r\n      return saveInfo;\r\n    } else {\r\n      let saveInfoByListIndex = this.#saveInfoByListIndexByResolvedPathInfoId[info.id];\r\n      if (typeof saveInfoByListIndex === \"undefined\") {\r\n        saveInfoByListIndex = new WeakMap<IListIndex, ISaveInfoByResolvedPathInfo>();\r\n        this.#saveInfoByListIndexByResolvedPathInfoId[info.id] = saveInfoByListIndex;\r\n      }\r\n      let saveInfo = saveInfoByListIndex.get(listIndex);\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        saveInfoByListIndex.set(listIndex, saveInfo);\r\n      }\r\n      return saveInfo;\r\n    }\r\n  }\r\n  \r\n  saveBinding(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    binding  : IBinding\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.bindings.push(binding);\r\n  }\r\n\r\n  saveListIndexesSet(\r\n    info              :IStructuredPathInfo, \r\n    listIndex         :IListIndex | null, \r\n    saveListIndexesSet:Set<IListIndex>\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.listIndexesSet = saveListIndexesSet;\r\n  }\r\n\r\n  saveList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null, \r\n    list     :any[]\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.list = list;\r\n  }\r\n\r\n  getBindings(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): IBinding[] {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.bindings;\r\n  }\r\n\r\n  existsBindingsByInfo(info: IStructuredPathInfo): boolean {\r\n    if (typeof this.#saveInfoByStructuredPathId[info.id] !== \"undefined\") {\r\n      return true;\r\n    }\r\n    if (typeof this.#saveInfoByListIndexByResolvedPathInfoId[info.id] !== \"undefined\") {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getListIndexesSet(info:IStructuredPathInfo, listIndex:IListIndex | null): Set<IListIndex> | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.listIndexesSet;\r\n  }\r\n    \r\n  getList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): any[] | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.list;\r\n  }\r\n\r\n  addDependentProp(info: IStructuredPathInfo, refInfo: IStructuredPathInfo, type: DependencyType) {\r\n    let dependents = this.dependentTree.get(refInfo);\r\n    if (typeof dependents === \"undefined\") {\r\n      dependents = new Set<IDependencyEdge>();\r\n      this.dependentTree.set(refInfo, dependents);\r\n    }\r\n    const edge = createDependencyEdge(info, type);\r\n    dependents.add(edge);\r\n  }\r\n\r\n  getPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex | null): any {\r\n    // プロパティの値を取得する\r\n    const readonlyState = createReadonlyStateProxy(this, this.state);\r\n    return readonlyState[GetByRefSymbol](info, listIndex);\r\n  }\r\n  setPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex | null, value: any): void {\r\n    // プロパティの値を設定する\r\n    this.updater.addProcess(() => {\r\n      // ToDo: ここよく検討すること\r\n      const writableState = createWritableStateProxy(this, this.state);\r\n      writableState[SetByRefSymbol](info, listIndex, value);\r\n    });\r\n  }\r\n  // 読み取り専用の状態プロキシを作成する\r\n  createReadonlyStateProxy(): IStateProxy {\r\n    return createReadonlyStateProxy(this, this.state);\r\n  }\r\n  // 書き込み可能な状態プロキシを作成する\r\n  createWritableStateProxy(): IStateProxy {\r\n    return createWritableStateProxy(this, this.state);\r\n  }\r\n\r\n}\r\n\r\nexport function createComponentEngine(config: IComponentConfig, component: StructiveComponent): IComponentEngine {\r\n  return new ComponentEngine(config, component);\r\n}","/**\r\n * replaceMustacheWithTemplateTag.ts\r\n *\r\n * Mustache構文（{{if:条件}}, {{for:式}}, {{endif}}, {{endfor}}, {{elseif:条件}}, {{else}} など）を\r\n * <template>タグやコメントノードに変換するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - HTML文字列内のMustache構文を正規表現で検出し、<template data-bind=\"...\">やコメントノードに変換\r\n * - if/for/endif/endfor/elseif/elseなどの制御構文をネスト対応で<template>タグに変換\r\n * - 通常の埋め込み式（{{expr}}）はコメントノード（<!--embed:expr-->）に変換\r\n *\r\n * 設計ポイント:\r\n * - stackでネスト構造を管理し、endif/endfor/elseif/elseの対応関係を厳密にチェック\r\n * - 不正なネストや対応しない構文にはraiseErrorで例外を発生\r\n * - elseif/elseはnot条件のtemplateを自動生成し、条件分岐を表現\r\n * - コメントノードへの変換で埋め込み式の安全なDOM挿入を実現\r\n */\r\nimport { COMMENT_EMBED_MARK } from \"../constants.js\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nconst MUSTACHE_REGEXP = /\\{\\{([^\\}]+)\\}\\}/g;\r\nconst MUSTACHE_TYPES:Set<string> = new Set(['if', 'for', 'endif', 'endfor', 'elseif', 'else']);\r\n\r\ntype MustacheType = 'if' | 'for' | 'endif' | 'endfor' | 'elseif' | 'else';\r\ntype MustacheInfo = {\r\n  type: MustacheType;\r\n  remain: string; // after first ':'\r\n  expr: string;\r\n}\r\n\r\nexport function replaceMustacheWithTemplateTag(html: string): string {\r\n  const stack:MustacheInfo[] = [];\r\n  return html.replaceAll(MUSTACHE_REGEXP, (match, expr) => {\r\n    expr = expr.trim();\r\n    const [ type ] = expr.split(':');\r\n    if (!MUSTACHE_TYPES.has(type)) {\r\n      // embed\r\n      return `<!--${COMMENT_EMBED_MARK}${expr}-->`;\r\n    }\r\n    const remain = expr.slice(type.length + 1).trim();\r\n    const currentInfo:MustacheInfo = { type, expr, remain };\r\n    if (type === 'if' || type === 'for') {\r\n      stack.push(currentInfo);\r\n      return `<template data-bind=\"${expr}\">`;\r\n    } else if (type === 'endif') {\r\n      const endTags = [];\r\n      do {\r\n        const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        if (info.type === 'if') {\r\n          endTags.push('</template>');\r\n          break;\r\n        } else if (info.type === 'elseif') {\r\n          endTags.push('</template>');\r\n        } else {\r\n          raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        }\r\n      } while(true);\r\n      return endTags.join('');\r\n    } else if (type === 'endfor') {\r\n      const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n      if (info.type === 'for') {\r\n        return '</template>';\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: endfor without for');\r\n      }\r\n    } else if (type === 'elseif') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      if (lastInfo.type === 'if' || lastInfo.type === 'elseif') {\r\n        stack.push(currentInfo);\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\"><template data-bind=\"if:${remain}\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      }\r\n    } else if (type === 'else') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      if (lastInfo.type === 'if') {\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      }\r\n    } else {\r\n      raiseError('replaceMustacheToTemplateOrEmbed: unknown type');\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n","/**\r\n * replaceTemplateTagWithComment.ts\r\n *\r\n * <template>タグをコメントノードに置換し、テンプレートを再帰的に登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 指定したHTMLTemplateElementをコメントノード（<!--template:id-->）に置換\r\n * - SVG内のtemplateタグは通常のtemplate要素に変換し、属性や子ノードを引き継ぐ\r\n * - テンプレート内の入れ子templateも再帰的に置換・登録\r\n * - registerTemplateでテンプレートをID付きで管理\r\n *\r\n * 設計ポイント:\r\n * - テンプレートの階層構造を維持しつつ、DOM上はコメントノードでマーク\r\n * - SVG対応や属性引き継ぎなど、汎用的なテンプレート処理に対応\r\n * - generateIdでユニークIDを割り当て、テンプレート管理を一元化\r\n */\r\nimport { COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { registerTemplate } from \"./registerTemplate.js\";\r\n\r\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport function replaceTemplateTagWithComment(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number = id\r\n):number {\r\n  // テンプレートの親ノードが存在する場合は、テンプレートをコメントノードに置き換える\r\n  template.parentNode?.replaceChild(document.createComment(`${COMMENT_TEMPLATE_MARK}${id}`), template);\r\n  if (template.namespaceURI === SVG_NS) {\r\n    // SVGタグ内のtemplateタグを想定\r\n    const newTemplate = document.createElement(\"template\");\r\n    for(let childNode of Array.from(template.childNodes)) {\r\n      newTemplate.content.appendChild(childNode);\r\n    }\r\n    const bindText = template.getAttribute(DATA_BIND_ATTRIBUTE);\r\n    newTemplate.setAttribute(DATA_BIND_ATTRIBUTE, bindText ?? \"\");\r\n    template = newTemplate;\r\n  }\r\n  template.content.querySelectorAll(\"template\").forEach(template => {\r\n    replaceTemplateTagWithComment(generateId(), template, rootId);\r\n  });\r\n  registerTemplate(id, template, rootId);\r\n  return id;\r\n}\r\n","/**\r\n * registerHtml.ts\r\n *\r\n * HTML文字列をテンプレートとして登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 指定IDでHTMLテンプレートを生成し、data-id属性を付与\r\n * - Mustache構文（{{ }})をテンプレートタグに変換（replaceMustacheWithTemplateTagを利用）\r\n * - テンプレートタグをコメントに置換（replaceTemplateTagWithCommentを利用）\r\n *\r\n * 設計ポイント:\r\n * - テンプレートの動的生成・管理や、構文変換による柔軟なテンプレート処理に対応\r\n * - テンプレートはdocument.createElement(\"template\")で生成し、data-idで識別\r\n */\r\nimport { replaceMustacheWithTemplateTag } from \"./replaceMustacheWithTemplateTag.js\";\r\nimport { replaceTemplateTagWithComment } from \"./replaceTemplateTagWithComment.js\";\r\n\r\nexport function registerHtml(id: number, html:string) {\r\n  const template = document.createElement(\"template\");\r\n  template.dataset.id = id.toString();\r\n  template.innerHTML = replaceMustacheWithTemplateTag(html);\r\n  replaceTemplateTagWithComment(id, template);\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { SetLoopContextSymbol } from \"../StateClass/symbols\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { BindParentComponentSymbol, RenderSymbol } from \"./symbols.js\";\r\nimport { IComponentState, IComponentStateHandler, IComponentStateProxy } from \"./types\";\r\n\r\n/**\r\n * createComponentState.ts\r\n * \r\n * Structiveコンポーネントの状態管理を担う「ComponentState」クラスと、そのプロキシ生成関数の実装。\r\n *\r\n * 主な役割:\r\n * - 親コンポーネントとのバインディング（親プロパティのgetter/setterを動的に定義）\r\n * - 親コンポーネントからのバインディング一括登録（bindParentComponent）\r\n * - 状態プロパティの取得・設定・レンダリング（getPropertyValue, setPropertyValue, render）\r\n * - Proxyハンドラで、プロパティアクセスを自動的にget/set/特殊メソッドに振り分け\r\n *\r\n * 構造・設計ポイント:\r\n * - 親子コンポーネント間のデータ連携を柔軟に実現\r\n * - ループコンテキストや非同期更新にも対応\r\n * - Proxyによる柔軟なAPI（state.xxxで直接アクセス可能）\r\n *\r\n * @param engine IComponentEngineインスタンス\r\n * @returns      IComponentStateProxy（Proxyラップされた状態オブジェクト）\r\n */\r\nclass ComponentState implements IComponentState {\r\n  engine: IComponentEngine;\r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  bindParentProperty(binding: IBinding): void {\r\n    const propName = binding.bindingNode.subName;\r\n    Object.defineProperty(this.engine.state, propName, {\r\n      get: () => {\r\n        return binding.bindingState.filteredValue;\r\n      },\r\n      set: (value: any) => {\r\n        const engine = binding.engine;\r\n        const loopContext = binding.parentBindContent.currentLoopContext;\r\n        engine.updater.addProcess(async () => {\r\n          const stateProxy = engine.createWritableStateProxy();\r\n          await stateProxy[SetLoopContextSymbol](loopContext, async () => {\r\n            return binding.updateStateValue(stateProxy, value);\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  unbindParentProperty(binding: IBinding): void {\r\n    const propName = binding.bindingNode.subName;\r\n    Object.defineProperty(this.engine.state, propName, { value:undefined });\r\n  }\r\n  \r\n  bindParentComponent(): void {\r\n    // bindParentComponent\r\n    const parent = this.engine.owner.parentStructiveComponent;\r\n    if (parent === null) {\r\n      return;\r\n    }\r\n    const bindings = parent.getBindingsFromChild(this.engine.owner);\r\n    for (const binding of bindings ?? []) {\r\n      this.bindParentProperty(binding);\r\n    }\r\n  }\r\n\r\n  render(name: string, value:any): void {\r\n    // render\r\n    const info = getStructuredPathInfo(name);\r\n    this.engine.updater.addUpdatedStatePropertyRefValue(info, null, value)\r\n  }\r\n\r\n  getPropertyValue(name: string): any {\r\n    // getPropertyValue\r\n    const info = getStructuredPathInfo(name);\r\n    return this.engine.getPropertyValue(info, null);\r\n  }\r\n\r\n  setPropertyValue(name: string, value: any): void {\r\n    // setPropertyValue\r\n    const info = getStructuredPathInfo(name);\r\n    this.engine.setPropertyValue(info, null, value); \r\n  }\r\n}\r\n\r\nclass ComponentStateHandler implements IComponentStateHandler {\r\n  get(state: IComponentState, prop: PropertyKey, receiver: IComponentState): any {\r\n    if (prop === RenderSymbol) {\r\n      return state.render.bind(state);\r\n    } else if (prop === BindParentComponentSymbol) {\r\n      return state.bindParentComponent.bind(state);\r\n    } else if (typeof prop === 'string') {\r\n      return state.getPropertyValue(prop);\r\n    } else {\r\n      return Reflect.get(state, prop, receiver);\r\n    }\r\n  }\r\n\r\n  set(state: IComponentState, prop: PropertyKey, value: any, receiver: IComponentState): boolean {\r\n    if (typeof prop === 'string') {\r\n      state.setPropertyValue(prop, value);\r\n      return true;\r\n    } else {\r\n      return Reflect.set(state, prop, value, receiver);\r\n    }\r\n  }\r\n};\r\n\r\nexport const createComponentState = (engine: IComponentEngine): IComponentStateProxy => {\r\n  return new Proxy<IComponentState>(new ComponentState(engine), new ComponentStateHandler()) as IComponentStateProxy;\r\n}","/**\r\n * createAccessorFunctions.ts\r\n *\r\n * Stateプロパティのパス情報（IStructuredPathInfo）から、動的なgetter/setter関数を生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - パス情報とgetter集合から、最適なアクセサ関数（get/set）を動的に生成\r\n * - ワイルドカード（*）やネストしたプロパティパスにも対応\r\n * - パスやセグメントのバリデーションも実施\r\n *\r\n * 設計ポイント:\r\n * - matchPathsから最長一致のgetterパスを探索し、そこからの相対パスでアクセサを構築\r\n * - パスが一致しない場合はinfo.pathSegmentsから直接アクセサを生成\r\n * - new Functionで高速なgetter/setterを動的生成\r\n * - パスやセグメント名は正規表現で厳密にチェックし、安全性を担保\r\n */\r\nimport { getStructuredPathInfo } from \"./getStructuredPathInfo\";\r\nimport { IAccessorFunctions, IStructuredPathInfo } from \"./types\";\r\n\r\nconst checkSegmentRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\r\nconst checkPathRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*(\\.[a-zA-Z_$][0-9a-zA-Z_$]*|\\.\\*)*$/;\r\n\r\nexport function createAccessorFunctions(info: IStructuredPathInfo, getters: Set<string>): IAccessorFunctions {\r\n  const matchPaths = new Set(info.cumulativePaths).intersection(getters);\r\n  let len = -1;\r\n  let matchPath = '';\r\n  for(const curPath of matchPaths) {\r\n    const pathSegments = curPath.split('.');\r\n    if (pathSegments.length === 1) {\r\n      continue;\r\n    }\r\n    if (pathSegments.length > len) {\r\n      len = pathSegments.length;\r\n      matchPath = curPath;\r\n    }\r\n  }\r\n  if (matchPath.length > 0) {\r\n    if (!checkPathRegexp.test(matchPath)) {\r\n      throw new Error(`Invalid path: ${matchPath}`);\r\n    }\r\n    const matchInfo = getStructuredPathInfo(matchPath);\r\n    const segments = [];\r\n    let count = matchInfo.wildcardCount;\r\n    for(let i = matchInfo.pathSegments.length; i < info.pathSegments.length; i++) {\r\n      const segment = info.pathSegments[i];\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          throw new Error(`Invalid segment name: ${segment}`);\r\n        }\r\n        segments.push(\".\" + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this[\"${matchPath}\"]${path};`) as ()=> any,\r\n      set : new Function('value', `this[\"${matchPath}\"]${path} = value;`) as (value: any) => void,\r\n    }\r\n  } else {\r\n    const segments = [];\r\n    let count = 0;\r\n    for(const segment of info.pathSegments) {\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          throw new Error(`Invalid segment name: ${segment}`);\r\n        }\r\n        segments.push((segments.length > 0 ? \".\" : \"\") + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this.${path};`) as ()=> any,\r\n      set : new Function('value', `this.${path} = value;`) as (value: any) => void,\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * createComponentClass.ts\r\n *\r\n * StructiveのWeb Components用カスタム要素クラスを動的に生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - ユーザー定義のcomponentData（stateClass, html, css等）からWeb Componentsクラスを生成\r\n * - StateClass/テンプレート/CSS/バインディング情報などをIDで一元管理・登録\r\n * - 独自のget/setトラップやバインディング、親子コンポーネント探索、フィルター拡張など多機能な基盤を提供\r\n * - 静的プロパティでテンプレート・スタイル・StateClass・フィルター・getter情報などにアクセス可能\r\n * - defineメソッドでカスタム要素として登録\r\n *\r\n * 設計ポイント:\r\n * - findStructiveParentで親Structiveコンポーネントを探索し、階層的な状態管理を実現\r\n * - getter/setter/バインディング最適化やアクセサ自動生成（optimizeAccessor）に対応\r\n * - テンプレート・CSS・StateClass・バインディング情報をIDで一元管理し、再利用性・拡張性を確保\r\n * - フィルターやバインディング情報も静的プロパティで柔軟に拡張可能\r\n */\r\nimport { inputBuiltinFilters, outputBuiltinFilters } from \"../Filter/builtinFilters.js\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { getStateClassById, registerStateClass } from \"../StateClass/registerStateClass.js\";\r\nimport { getStyleSheetById } from \"../StyleSheet/registerStyleSheet.js\";\r\nimport { registerCss } from \"../StyleSheet/regsiterCss.js\";\r\nimport { createComponentEngine } from \"../ComponentEngine/ComponentEngine.js\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types.js\";\r\nimport { registerHtml } from \"../Template/registerHtml.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { getBaseClass } from \"./getBaseClass.js\";\r\nimport { getComponentConfig } from \"./getComponentConfig.js\";\r\nimport { IComponent, IUserComponentData, IUserConfig, StructiveComponentClass, StructiveComponent } from \"./types\";\r\nimport { getListPathsSetById, getPathsSetById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { IStructiveState } from \"../StateClass/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { IComponentStateProxy } from \"../ComponentState/types\";\r\nimport { createComponentState } from \"../ComponentState/createComponentState.js\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { createAccessorFunctions } from \"../StateProperty/createAccessorFunctions.js\";\r\nimport { config as globalConfig } from \"./getGlobalConfig.js\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nfunction findStructiveParent(el:StructiveComponent): IComponent | null {\r\n  let current = el.parentNode;\r\n  while (current) {\r\n    if ((current as StructiveComponent).state && (current as StructiveComponent).isStructive) {\r\n      return current as StructiveComponent;\r\n    }\r\n    current = current.parentNode;\r\n    if (current instanceof ShadowRoot) {\r\n      if (current.host && (current.host as StructiveComponent).state && (current.host as StructiveComponent).isStructive) {\r\n        return current.host as StructiveComponent;\r\n      }\r\n      current = current.host;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function createComponentClass(componentData: IUserComponentData): StructiveComponentClass {\r\n  const config = (componentData.stateClass.$config ?? {})as IUserConfig;\r\n  const componentConfig = getComponentConfig(config);\r\n  const id = generateId();\r\n  const { html, css, stateClass } = componentData;\r\n  const inputFilters:FilterWithOptions = Object.assign({}, inputBuiltinFilters);\r\n  const outputFilters:FilterWithOptions = Object.assign({}, outputBuiltinFilters);\r\n  stateClass.$isStructive = true;\r\n  registerHtml(id, html);\r\n  registerCss(id, css);\r\n  registerStateClass(id, stateClass);\r\n  const baseClass = getBaseClass(componentConfig.extends);\r\n  const extendTagName = componentConfig.extends;\r\n  return class extends baseClass implements IComponent {\r\n    #engine: IComponentEngine;\r\n    #componentState: IComponentStateProxy;\r\n\r\n    constructor() {\r\n      super();\r\n      this.#engine = createComponentEngine(componentConfig, this as StructiveComponent);\r\n      this.#componentState = createComponentState(this.#engine);\r\n    }\r\n\r\n    connectedCallback() {\r\n      this.#engine.connectedCallback();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n      this.#engine.disconnectedCallback();\r\n    }\r\n\r\n    #parentStructiveComponent: IComponent | null | undefined;\r\n    get parentStructiveComponent(): IComponent | null {\r\n      if (typeof this.#parentStructiveComponent === \"undefined\") {\r\n        this.#parentStructiveComponent = findStructiveParent(this as StructiveComponent);\r\n      }\r\n      return this.#parentStructiveComponent;\r\n    }\r\n\r\n    get state(): IComponentStateProxy {\r\n      return this.#componentState;\r\n    }\r\n\r\n    get isStructive(): boolean {\r\n      return this.#engine.stateClass.$isStructive ?? false;\r\n    }\r\n\r\n    getBindingsFromChild(component: IComponent): Set<IBinding> | null {\r\n      return this.#engine.bindingsByComponent.get(component as StructiveComponent) ?? null;\r\n    }\r\n\r\n    static define(tagName:string) {\r\n      if (extendTagName) {\r\n        customElements.define(tagName, this, { extends: extendTagName });\r\n      } else {\r\n        customElements.define(tagName, this);\r\n      }\r\n    }\r\n\r\n    static get id():number {\r\n      return id;\r\n    }\r\n    static #html:string = html;\r\n    static get html():string {\r\n      return this.#html;\r\n    }\r\n    static set html(value:string) {\r\n      this.#html = value;\r\n      registerHtml(this.id, value);\r\n      this.#template = null;\r\n    }\r\n\r\n    static #css:string = css;\r\n    static get css() {\r\n      return this.#css;\r\n    }\r\n    static set css(value:string) {\r\n      this.#css = value;\r\n      registerCss(this.id, value);\r\n      this.#styleSheet = null;\r\n    }\r\n    static #template: HTMLTemplateElement | null = null;\r\n    static get template():HTMLTemplateElement {\r\n      if (!this.#template) {\r\n        this.#template = getTemplateById(this.id);\r\n      }\r\n      return this.#template;\r\n    }\r\n    static #styleSheet: CSSStyleSheet | null = null;\r\n    static get styleSheet():CSSStyleSheet {\r\n      if (!this.#styleSheet) {\r\n        this.#styleSheet = getStyleSheetById(this.id);\r\n      }\r\n      return this.#styleSheet;\r\n    }\r\n    static #stateClass: IStructiveState | null = null;\r\n    static get stateClass():IStructiveState {\r\n      if (!this.#stateClass) {\r\n        this.#stateClass = getStateClassById(this.id) as IStructiveState;\r\n      }\r\n      return this.#stateClass;\r\n    }\r\n    static #inputFilters:FilterWithOptions = inputFilters;\r\n    static get inputFilters():FilterWithOptions {\r\n      return this.#inputFilters;\r\n    }\r\n    static #outputFilters:FilterWithOptions = outputFilters;\r\n    static get outputFilters():FilterWithOptions {\r\n      return this.#outputFilters;\r\n    }\r\n    static get listPaths(): Set<string> {\r\n      return getListPathsSetById(this.id);\r\n    }\r\n    static get paths(): Set<string> {\r\n      return getPathsSetById(this.id);\r\n    }\r\n    static #getters: Set<string> | null = null;\r\n    static get getters(): Set<string> {\r\n      return this.#getters ?? raiseError(\"getters is null\");\r\n    }\r\n    static #trackedGetters: Set<string> | null = null;\r\n    static get trackedGetters(): Set<string> {\r\n      if(this.#trackedGetters === null) {\r\n        this.#trackedGetters = new Set<string>();\r\n        this.#getters = new Set<string>();\r\n        let currentProto = this.stateClass.prototype;\r\n        while (currentProto && currentProto !== Object.prototype) {\r\n          const trackedGetters = Object.getOwnPropertyDescriptors(currentProto);\r\n          if (trackedGetters) {\r\n            for (const [key, desc] of Object.entries(trackedGetters)) {\r\n              if ((desc as PropertyDescriptor).get && !(desc as PropertyDescriptor).set) {\r\n                this.#trackedGetters.add(key);\r\n              }\r\n              this.#getters.add(key);\r\n            }\r\n          }\r\n          currentProto = Object.getPrototypeOf(currentProto);\r\n        }\r\n        if (globalConfig.optimizeAccessor) {\r\n          for(const path of this.paths) {\r\n            const info = getStructuredPathInfo(path);\r\n            if (info.pathSegments.length === 1) {\r\n              continue;\r\n            }\r\n            if (this.#getters.has(path)) {\r\n              continue;\r\n            }\r\n            const funcs = createAccessorFunctions(info, this.#getters);\r\n            Object.defineProperty(this.stateClass.prototype, path, {\r\n              get: funcs.get,\r\n              set: funcs.set,\r\n              enumerable: true,\r\n              configurable: true,\r\n            });\r\n          }\r\n        }\r\n      }\r\n      return this.#trackedGetters;\r\n\r\n    }\r\n  } as StructiveComponentClass;\r\n}\r\n","/**\r\n * getComponentConfig.ts\r\n *\r\n * ユーザー設定（IUserConfig）とグローバル設定を統合し、コンポーネントの設定（IComponentConfig）を生成するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - getGlobalConfigでグローバル設定を取得\r\n * - ユーザー設定が優先され、未指定の場合はグローバル設定値を利用\r\n * - enableShadowDomやextendsなどの設定値を一元的に返却\r\n *\r\n * 設計ポイント:\r\n * - ユーザーごとの個別設定と全体のデフォルト設定を柔軟に統合\r\n * - 設定値のデフォルト化や拡張性を考慮した設計\r\n */\r\nimport { getGlobalConfig } from \"./getGlobalConfig.js\";\r\nimport { IUserConfig, IComponentConfig } from \"./types\";\r\n\r\nexport function getComponentConfig(userConfig: IUserConfig): IComponentConfig {\r\n  const globalConfig = getGlobalConfig();\r\n  return {\r\n    enableShadowDom: userConfig.enableShadowDom ?? globalConfig.enableShadowDom,\r\n    extends        : userConfig.extends ?? null,\r\n  };\r\n}","/**\r\n * getBaseClass.ts\r\n *\r\n * 指定したタグ名（extendTagName）から、その要素のコンストラクタ（基底クラス）を取得するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - extendTagNameが指定されていれば、そのタグのHTMLElementコンストラクタを返す\r\n * - 指定がなければHTMLElementを返す\r\n *\r\n * 設計ポイント:\r\n * - カスタム要素の継承元クラスを動的に取得し、柔軟なWeb Components拡張に対応\r\n */\r\nimport { Constructor } from \"./types\";\r\n\r\nexport function getBaseClass(extendTagName: string | null):Constructor<HTMLElement> {\r\n  return extendTagName ? (document.createElement(extendTagName).constructor as Constructor<HTMLElement>) : HTMLElement;\r\n}","/**\r\n * createSingleFileComponent.ts\r\n *\r\n * Structive用のシングルファイルコンポーネント（SFC）をパースし、各要素（HTML, CSS, StateClass）を抽出・生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - テキストから<template>・<script type=\"module\">・<style>を抽出し、それぞれを分離\r\n * - <script type=\"module\">はBase64エンコードして動的importし、StateClassとして利用\r\n * - {{...}}埋め込み式は一時的にコメントノード化してHTMLパース時の消失を防止し、復元\r\n * - 各要素（html, css, stateClass, text）をIUserComponentDataとして返却\r\n *\r\n * 設計ポイント:\r\n * - escapeEmbed/unescapeEmbedでMustache構文の安全なパースを実現\r\n * - scriptはdata:URL経由で安全に動的import\r\n * - テンプレート・スクリプト・スタイルを柔軟に分離・管理できる設計\r\n */\r\nimport { IStructiveState } from \"../StateClass/types\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nfunction escapeEmbed(html: string): string {\r\n  return html.replaceAll(/\\{\\{([^\\}]+)\\}\\}/g, (match, expr) => {\r\n    return `<!--{{${expr}}}-->`;\r\n  });\r\n}\r\n\r\nfunction unescapeEmbed(html:string):string {\r\n  return html.replaceAll(/<!--\\{\\{([^\\}]+)\\}\\}-->/g, (match, expr) => {\r\n    return `{{${expr}}}`;\r\n  });\r\n}\r\n\r\nexport async function createSingleFileComponent(text: string): Promise<IUserComponentData> {\r\n  const template = document.createElement(\"template\");\r\n  template.innerHTML = escapeEmbed(text);\r\n\r\n  const html = template.content.querySelector(\"template\");\r\n  html?.remove();\r\n\r\n  const script = template.content.querySelector(\"script[type=module]\") as HTMLScriptElement;\r\n  const b64 = btoa(String.fromCodePoint(...new TextEncoder().encode(script.text)));\r\n  const scriptModule = script ? await import(\"data:application/javascript;base64,\" + b64) : {};\r\n//  const scriptModule = script ? await import(\"data:text/javascript;charset=utf-8,\" + script.text) : {};\r\n  script?.remove();\r\n\r\n  const style = template.content.querySelector(\"style\");\r\n  style?.remove();\r\n\r\n  const stateClass = (scriptModule.default ?? class {}) as IStructiveState;\r\n  \r\n  return {\r\n    text,\r\n    html      : unescapeEmbed(html?.innerHTML ?? \"\").trim(),\r\n    css       : style?.textContent ?? \"\",\r\n    stateClass,\r\n  }\r\n}","/**\r\n * loadSingleFileComponent.ts\r\n *\r\n * 指定パスのシングルファイルコンポーネント（SFC）をfetchし、パースしてIUserComponentDataとして返すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - fetchで指定パスのSFCファイルを取得\r\n * - テキストとして読み込み、createSingleFileComponentでパース\r\n * - パース結果（IUserComponentData）を返却\r\n *\r\n * 設計ポイント:\r\n * - import.meta.resolveを利用し、パス解決の柔軟性を確保\r\n * - 非同期処理で動的なコンポーネントロードに対応\r\n */\r\nimport { createSingleFileComponent } from \"./createSingleFileComponent.js\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nexport async function loadSingleFileComponent(path: string): Promise<IUserComponentData> {\r\n  const response = await fetch(import.meta.resolve(path));\r\n  const text = await response.text();\r\n  return createSingleFileComponent(text);\r\n}\r\n","/**\r\n * registerComponentClass.ts\r\n *\r\n * StructiveのWeb Componentsクラスを指定したタグ名でカスタム要素として登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - registerComponentClass: 渡されたcomponentClassをtagNameでdefineメソッドを使って登録\r\n *\r\n * 設計ポイント:\r\n * - Web Componentsのカスタム要素登録を簡潔にラップし、再利用性を高める設計\r\n */\r\nimport { StructiveComponentClass } from \"./types\";\r\n\r\nexport function registerComponentClass(tagName: string, componentClass: StructiveComponentClass) {\r\n  componentClass.define(tagName);\r\n}","/**\r\n * MainWrapper.ts\r\n *\r\n * アプリ全体のレイアウトやルーティングを管理するカスタムエレメント MainWrapper の実装です。\r\n *\r\n * 主な役割:\r\n * - Shadow DOMの有効化やレイアウトテンプレートの動的読み込み\r\n * - レイアウトテンプレートやスタイルの適用\r\n * - ルーター要素（routerTagName）の動的追加\r\n *\r\n * 設計ポイント:\r\n * - config.enableShadowDom でShadow DOMの有効/無効を切り替え\r\n * - config.layoutPath が指定されていればfetchでレイアウトHTMLを取得し、テンプレート・スタイルを適用\r\n * - スタイルはadoptedStyleSheetsでShadowRootまたはdocumentに適用\r\n * - レイアウトが指定されていない場合はデフォルトのslotを挿入\r\n * - config.enableRouter が有効な場合はrouter要素をslotに追加\r\n */\r\nimport { raiseError } from \"../utils\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst SLOT_KEY = \"router\";\r\nconst DEFAULT_LAYOUT = `<slot name=\"${SLOT_KEY}\"></slot>`;\r\n\r\nexport class MainWrapper extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n    if (config.enableShadowDom) {\r\n      this.attachShadow({ mode: 'open' });\r\n    }\r\n  }\r\n\r\n  async connectedCallback() {\r\n    await this.loadLayout();\r\n    this.render();\r\n  }\r\n\r\n  get root(): ShadowRoot | HTMLElement {\r\n    return this.shadowRoot ?? this;\r\n  }\r\n\r\n  async loadLayout() {\r\n    if (config.layoutPath) {\r\n      const response = await fetch(config.layoutPath);\r\n      if (response.ok) {\r\n        const layoutText = await response.text();\r\n        const workTemplate = document.createElement(\"template\");\r\n        workTemplate.innerHTML = layoutText;\r\n      \r\n        const template = workTemplate.content.querySelector(\"template\");\r\n        const style = workTemplate.content.querySelector(\"style\") as CSSStyleSheet | null;\r\n      \r\n        this.root.appendChild(template?.content ?? document.createDocumentFragment());\r\n        if (style) {\r\n          const shadowRootOrDocument = this.shadowRoot ?? document;\r\n          const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n          if (!styleSheets.includes(style)) {\r\n            shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, style];\r\n          }\r\n        }\r\n      } else {\r\n        raiseError(`Failed to load layout from ${config.layoutPath}`);\r\n      }\r\n    } else {\r\n      this.root.innerHTML = DEFAULT_LAYOUT;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // add router\r\n    if (config.enableRouter) {\r\n      const router = document.createElement(config.routerTagName);\r\n      router.setAttribute('slot', SLOT_KEY);\r\n      this.root.appendChild(router);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * loadFromImportMap.ts\r\n *\r\n * importmapの情報をもとに、Structiveのルートやコンポーネントを動的にロード・登録するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - importmap.imports内のエイリアスを走査し、@routes/や@components/のプレフィックスで判定\r\n * - @routes/の場合はルーティング情報をentryRouteで登録\r\n * - @components/の場合はloadSingleFileComponentでSFCをロードし、createComponentClassでクラス化してregisterComponentClassで登録\r\n *\r\n * 設計ポイント:\r\n * - importmapのエイリアスを利用して、ルーティングやコンポーネントの自動登録を実現\r\n * - パスやタグ名の正規化、パラメータ除去なども自動で処理\r\n * - 非同期でSFCをロードし、動的なWeb Components登録に対応\r\n */\r\nimport { entryRoute } from \"../Router/Router\";\r\nimport { createComponentClass } from \"./createComponentClass\";\r\nimport { loadImportmap } from \"./loadImportmap\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent\";\r\nimport { registerComponentClass } from \"./registerComponentClass\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nconst ROUTES_KEY = \"@routes/\";\r\nconst COMPONENTS_KEY = \"@components/\";\r\n\r\nexport async function loadFromImportMap(): Promise<void> {\r\n  const importmap = loadImportmap();\r\n  if (importmap.imports) {\r\n    for (const [alias, value] of Object.entries(importmap.imports)) {\r\n      let tagName;\r\n      if (alias.startsWith(ROUTES_KEY)) {\r\n        const path = alias.slice(ROUTES_KEY.length - 1); // remove the prefix '@routes'\r\n        const pathWithoutParams = path.replace(/:[^\\s/]+/g, \"\"); // remove the params\r\n        tagName = \"routes\" + pathWithoutParams.replace(/\\//g, \"-\"); // replace '/' with '-'\r\n        entryRoute(tagName, path === \"/root\" ? \"/\" : path); // routing\r\n      } if (alias.startsWith(COMPONENTS_KEY)) {\r\n        tagName = alias.slice(COMPONENTS_KEY.length - 1); // remove the prefix '@components'\r\n      }\r\n      if (!tagName) {\r\n        continue;\r\n      }\r\n\r\n      let componentData : IUserComponentData | null = null;\r\n      componentData = await loadSingleFileComponent(alias);\r\n      const componentClass = createComponentClass(componentData);\r\n      registerComponentClass(tagName, componentClass);\r\n    }\r\n  }\r\n\r\n} \r\n","/**\r\n * loadImportmap.ts\r\n *\r\n * HTML内の<script type=\"importmap\">タグからimportmap情報を取得・統合するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 複数のimportmapスクリプトタグを走査し、全てのimportsをマージしてIImportMap型で返却\r\n *\r\n * 設計ポイント:\r\n * - scriptタグのinnerHTMLをJSON.parseでパースし、importsプロパティを統合\r\n * - importmap.importsが複数存在する場合もObject.assignでマージ\r\n * - importmap仕様に準拠し、柔軟なimportエイリアス管理を実現\r\n */\r\nimport { IImportMap } from \"./types\";\r\n\r\nexport function loadImportmap():IImportMap {\r\n  const importmap: IImportMap = {};\r\n  document.querySelectorAll(\"script[type='importmap']\").forEach(script => {\r\n    const scriptImportmap = JSON.parse(script.innerHTML);\r\n    if (scriptImportmap.imports) {\r\n      importmap.imports = Object.assign(importmap.imports || {}, scriptImportmap.imports);\r\n    }\r\n  });\r\n  return importmap;\r\n}\r\n\r\n","/**\r\n * exports.ts\r\n *\r\n * Structiveの主要なエントリーポイント・APIを外部公開するモジュールです。\r\n *\r\n * 主な役割:\r\n * - registerSingleFileComponents, bootstrap, config などの主要APIをエクスポート\r\n * - defineComponents: SFC群をまとめて登録し、autoInitが有効なら自動で初期化\r\n * - bootstrapStructive: 初期化処理を一度だけ実行\r\n *\r\n * 設計ポイント:\r\n * - グローバル設定(config)を外部から参照・変更可能\r\n * - 初期化処理の多重実行を防止し、安全な起動を保証\r\n */\r\nimport { registerSingleFileComponents } from \"./WebComponents/registerSingleFIleComponents.js\";\r\nimport { bootstrap } from \"./bootstrap.js\";\r\nimport { config as _config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { IConfig } from \"./WebComponents/types\";\r\n\r\nexport const config: IConfig = _config;\r\n\r\nlet initialized = false;\r\nexport async function defineComponents(singleFileComponents: Record<string, string>):Promise<void> {\r\n  await registerSingleFileComponents(singleFileComponents);\r\n  if (config.autoInit) {\r\n    await bootstrapStructive();\r\n  }\r\n}\r\n\r\nexport async function bootstrapStructive():Promise<void> {\r\n  if (!initialized) {\r\n    await bootstrap();\r\n    initialized = true;\r\n  }\r\n}\r\n\r\n","/**\r\n * registerSingleFileComponents.ts\r\n *\r\n * 複数のシングルファイルコンポーネント（SFC）をまとめてStructiveのWeb Componentsとして登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - singleFileComponents（tagNameとパスのマップ）を走査し、各SFCを非同期で取得・パース\r\n * - enableRouterが有効な場合はentryRouteでルーティング情報も登録\r\n * - createComponentClassでWeb Componentsクラスを生成し、registerComponentClassでカスタム要素として登録\r\n *\r\n * 設計ポイント:\r\n * - SFCのロードからWeb Components登録、ルーティング登録までを一括で自動化\r\n * - 非同期処理で複数コンポーネントの動的登録に対応\r\n * - ルートパス\"/root\"の正規化や、@routesプレフィックスの除去など柔軟なパス処理\r\n */\r\nimport { entryRoute } from \"../Router/Router.js\";\r\nimport { createComponentClass } from \"./createComponentClass.js\";\r\nimport { config } from \"./getGlobalConfig.js\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent.js\";\r\nimport { registerComponentClass } from \"./registerComponentClass.js\";\r\nimport { IUserComponentData, SingleFileComponents } from \"./types\";\r\n\r\nexport async function registerSingleFileComponents(singleFileComponents:SingleFileComponents):Promise<void> {\r\n  for(const [ tagName, path ] of Object.entries(singleFileComponents)) {\r\n    let componentData : IUserComponentData | null = null;\r\n    if (config.enableRouter) {\r\n      const routePath = path.startsWith(\"@routes\") ? path.slice(7) : path; // remove the prefix 'routes:'\r\n      entryRoute(tagName, routePath === \"/root\" ? \"/\" : routePath); // routing\r\n    }\r\n    componentData = await loadSingleFileComponent(path);\r\n    const componentClass = createComponentClass(componentData);\r\n    registerComponentClass(tagName, componentClass);\r\n  }\r\n}","/**\r\n * bootstrap.ts\r\n *\r\n * Structiveアプリケーションの初期化処理を行うエントリーポイントです。\r\n *\r\n * 主な役割:\r\n * - グローバル設定(config)に従い、必要なコンポーネントやルーター、メインラッパーを登録・初期化\r\n * - autoLoadFromImportMapが有効な場合はimportmapからルートやコンポーネントを動的ロード\r\n * - enableRouterが有効な場合はRouterコンポーネントをカスタム要素として登録\r\n * - enableMainWrapperが有効な場合はMainWrapperをカスタム要素として登録し、autoInsertMainWrapperが有効ならbodyに自動挿入\r\n *\r\n * 設計ポイント:\r\n * - 設定値に応じて初期化処理を柔軟に制御\r\n * - importmapやカスタム要素の登録、DOMへの自動挿入など、Structiveの起動に必要な処理を一元化\r\n */\r\nimport { MainWrapper } from \"./MainWrapper/MainWrapper.js\";\r\nimport { Router } from \"./Router/Router.js\";\r\nimport { config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { loadFromImportMap } from \"./WebComponents/loadFromImportMap.js\";\r\n\r\nexport async function bootstrap(): Promise<void> {\r\n  if (config.autoLoadFromImportMap) {\r\n    await loadFromImportMap();\r\n  }\r\n\r\n  if (config.enableRouter) {\r\n    customElements.define(config.routerTagName, Router);\r\n  }\r\n\r\n  if (config.enableMainWrapper) {\r\n    customElements.define(config.mainTagName, MainWrapper);\r\n    if (config.autoInsertMainWrapper) {\r\n      const mainWrapper = document.createElement(config.mainTagName);\r\n      document.body.appendChild(mainWrapper);\r\n    }\r\n  }\r\n}"],"names":["ROUTE_PATH_PREFIX","routeEntries","globalRouter","Router","HTMLElement","_popstateHandler","constructor","super","this","popstateHandler","bind","connectedCallback","innerHTML","window","addEventListener","dispatchEvent","Event","disconnectedCallback","removeEventListener","event","preventDefault","render","navigate","to","history","pushState","Array","from","childNodes","filter","n","getAttribute","forEach","removeChild","routePath","location","pathname","tagName","params","path","tag","regex","RegExp","replace","test","matches","match","key","index","substring","customElement","document","createElement","setAttribute","JSON","stringify","appendChild","messageElement","textContent","entryRoute","startsWith","push","globalConfig","debug","locale","enableShadowDom","enableMainWrapper","enableRouter","autoInsertMainWrapper","autoInit","mainTagName","routerTagName","layoutPath","autoLoadFromImportMap","optimizeList","optimizeListElements","optimizeAccessor","getGlobalConfig","config","optionsRequired","fnName","Error","optionMustBeNumber","valueMustBeNumber","valueMustBeDate","builtinFilters","eq","options","opt","optValue","Number","isNaN","value","ne","not","valueMustBeBoolean","lt","le","gt","ge","inc","dec","mul","div","fix","toFixed","toLocaleString","uc","toString","toUpperCase","lc","toLowerCase","cap","v","length","charAt","slice","trim","substr","opt1","opt1Value","opt2","opt2Value","pad","padStart","rep","repeat","rev","split","reverse","join","int","parseInt","float","parseFloat","round","Math","pow","floor","ceil","percent","date","Date","toLocaleDateString","time","toLocaleTimeString","datetime","ymd","year","getFullYear","month","getMonth","day","getDate","falsy","truthy","defaults","boolean","Boolean","number","string","String","null","outputBuiltinFilters","inputBuiltinFilters","id","generateId","raiseError","message","stateClassById","styleSheetById","registerCss","css","styleSheet","CSSStyleSheet","replaceSync","registerStyleSheet","textToFilter","filters","text","name","cache","Map","createFilters","texts","result","get","i","set","BindingNode","binding","node","decorates","bindContents","Set","subName","init","update","assignValue","bindingState","filteredValue","updateElements","listIndexes","values","isSelectElement","HTMLSelectElement","isFor","BindingNodeAttribute","BindingNodeCheckbox","isArray","element","checked","map","_val","includes","BindingNodeClassList","className","BindingNodeClassName","classList","add","remove","symbolName","GetByRefSymbol","Symbol","for","SetByRefSymbol","SetCacheableSymbol","ConnectedCallbackSymbol","DisconnectedCallbackSymbol","ResolveSymbol","GetAllSymbol","SetStatePropertyRefSymbol","SetLoopContextSymbol","GetLastStatePropertyRefSymbol","GetContextListIndexSymbol","BindingNodeEvent","e","handler","engine","loopContext","parentBindContent","currentLoopContext","indexes","serialize","context","listIndex","stopPropagation","updater","addProcess","async","stateProxy","createWritableStateProxy","Reflect","apply","createBindingNodeEvent","filterTexts","filterFns","DATA_BIND_ATTRIBUTE","COMMENT_EMBED_MARK","COMMENT_TEMPLATE_MARK","BindingNodeBlock","BindingNodeIf","bindContent","trueBindContents","falseBindContents","createBindContent","parentNode","mountAfter","nextSibling","unmount","BindingNodeFor","bindContentsSet","bindContentByListIndex","WeakMap","bindContentPool","bindContentLastIndex","lastListIndexSet","assignListIndex","pattern","deleteBindContent","clearListIndex","poolLength","listIndexesSet","getListIndexesSet","info","newBindContensSet","lastBindContent","removeBindContentsSet","diff","difference","firstNode","lastNode","getLastNode","firstChildNode","oldListValues","getList","currentBindContents","targetBindContents","lastChildNode","oldValue","targetIndex","indexOf","prevBindContent","saveList","createBindingNodeFor","DEFAULT_PROPERTY","defaultPropertyByElementType","kt","Rt","button","_cache","getDefaultPropertyByNodeType","HTMLTextAreaElement","HTMLOptionElement","HTMLButtonElement","HTMLAnchorElement","HTMLFormElement","HTMLInputElement","type","SVGElement","undefined","Text","Template","defaultEventByName","selected","BindingNodeProperty","defaultName","nodeType","getDefaultName","eventName","updateStateValue","createBindingNodeProperty","BindingNodeRadio","BindingNodeStyle","style","setProperty","RenderSymbol","BindParentComponentSymbol","BindingNodeComponent","bindings","bindingsByComponent","state","nodePropertyConstructorByNameByIsComment","At","Ht","nodePropertyConstructorByFirstName","jt","getBindingNodeCreator","propertyName","isComment","Comment","isElement","Element","fn","bindingNodeCreatorByName","nameElements","bindingNodeCreatorByFirstName","_getBindingNodeCreator","StructuredPathInfo","static","pathSegments","lastSegment","cumulativePaths","cumulativeInfos","cumulativeInfoSet","wildcardPaths","wildcardInfos","wildcardInfoSet","wildcardParentPaths","wildcardParentInfos","wildcardParentInfoSet","lastWildcardPath","lastWildcardInfo","parentPath","parentInfo","wildcardCount","children","getPattern","_pattern","getStructuredPathInfo","currentPatternPath","prevPatternPath","reservedWords","structuredPath","has","BindingState","listIndexRef","deref","find","saveBinding","writeState","BindingStateIndex","indexNumber","loopContexts","bindingsByListIndex","ereg","getBindingStateCreator","createBindingStateIndex","createBindingState","getTextByNodeType","Ft","getTemplateById","nodeTypeByNodeKey","getNodeType","nodeKey","createNodeKey","getNodeTypeByNode","s","re","decode","m","exec","decodeURIComponent","parseFilter","parseProperty","property","parseExpressions","expression","bindExpression","decoratesExpression","nodePropertyText","statePropertyText","nodeProperty","inputFilterTexts","stateProperty","outputFilterTexts","parseExpression","removeAttributeFromElement","removeAttribute","removeAttributeByNodeType","replaceTextNodeFn","textNode","createTextNode","replaceChild","DataBindAttributes","nodePath","bindTexts","creatorByText","bindText","getDataBindText","removeDataBindAttribute","replaceTextNodeFromComment","routeIndexes","getAbsoluteNodePath","parseBindText","creator","createBindingNode","getNodesHavingDataBind","root","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","acceptNode","hasAttribute","FILTER_ACCEPT","FILTER_SKIP","isCommentNode","nextNode","currentNode","listDataBindAttributesById","listPathsSetById","pathsSetById","getDataBindAttributesFromTemplate","content","createDataBindAttributes","templateById","registerTemplate","template","rootId","Node","TEXT_NODE","nodeValue","dataBindAttributes","paths","listPaths","attribute","j","registerDataBindAttributes","Binding","bindingNode","version","inputFilters","readonlyState","outputFilters","createBinding","LoopContext","WeakRef","parentLoopContext","currentBinding","parentBinding","walk","callback","results","unshift","bindingsWithSelectElement","createBindings","attributes","getDataBindAttributesById","reduce","BindContent","fragment","isMounted","lastBinding","size","at","importNode","createContent","createLoopContext","mount","mountBefore","beforeNode","insertBefore","afterNode","createDependencyKey","dependencyWalker","entryRef","traced","walkSub","edges","dependentTree","edge","overridedType","createDependencyWalker","ListIndex","parentListIndex","position","truncate","reverseIterator","iterator","atcache","next","lisIndex","createListIndex","listWalkerSub","listIndexLen","subListIndex","listWalker","createRefKey","BLANK_LISTINDEXES_SET","buildListIndexTree","newListIndexesSet","oldListIndexesSet","oldListIndexesByItem","groupBy","curListIndex","shift","addUpdatedListIndex","saveListIndexesSet","restructListIndexes","infos","updateValues","refKeys","dt","elementInfoSet","dependentWalker","nowOnList","listInfoSet","ref","refInfo","wildcardMatchPaths","intersection","longestMatchAt","_info","_listIndex","existsBindingsByInfo","refKey","cacheListIndexSet","Updater","updatedProperties","updatedValues","process","queueMicrotask","addUpdatedStatePropertyRefValue","entryRender","isEntryRender","setTimeout","Ce","qe","arrayElementBindings","rebuild","arrayElementBinding","retArrayElementBindings","retBindings","updatedProiperties","clear","updatedRefs","arrayElementBindingByParentRefKey","item","parentRef","parentRefKey","builtStatePropertyRefKeySet","affectedRefs","getBindings","bindingInfo","Object","assign","entries","attachShadow","extends","canHaveShadowRoot","mode","adoptedStyleSheets","shadowRootOrDocument","ShadowRoot","getParentShadowRoot","styleSheets","buildListIndexTreeSub","listInfos","searchPath","subValue","_getByRef","target","receiver","lastTrackingStack","lastPattern","addDependentProp","cacheable","parentValue","getByRef","trackedGetters","trackingStack","pop","setTracking","prop","methodGetByRef","setCacheable","methodSetChargeable","call","setByRef","resolve","wildcardParentPattern","getAll","_resolve","wildcardPattern","walkWildcardPattern","wildardIndexPos","indexPos","parentIndexes","listIndexSet","concat","resultIndexes","resultValues","ResolvedPathInfo","elements","wildcardType","wildcardIndexes","tmpPatternElements","incompleteCount","completeCount","lastPath","getResolvedPathInfo","getListIndex","charCodeAt","d","resolvedInfo","callableApi","setStatePropertyRef","structuredPathInfoStack","listIndexStack","methodSetStatePropertyRef","setLoopContext","asyncSetStatePropertyRef","methodSetLoopContext","getLastStatePropertyRef","methodGetLastStatePropertyRef","getContextListIndex","lastRef","methodGetContextListIndex","StateHandler$1","apiGetByRef","apiSetCacheable","trapGet","createReadonlyStateProxy","Proxy","StateHandler","methodSetByRef","apiSetByRef","trapSet","ComponentEngine","stateClass","baseClass","owner","waitForInitialize","Promise","withResolvers","componentClass","checkDependentProp","listPath","dataset","json","parse","writableState","shadowRoot","saveInfoByListIndexByResolvedPathInfoId","saveInfoByStructuredPathId","createSaveInfo","list","getSaveInfoByStatePropertyRef","saveInfo","saveInfoByListIndex","dependents","createDependencyEdge","getPropertyValue","setPropertyValue","MUSTACHE_REGEXP","MUSTACHE_TYPES","replaceTemplateTagWithComment","createComment","namespaceURI","newTemplate","childNode","querySelectorAll","registerHtml","html","stack","replaceAll","expr","remain","currentInfo","endTags","lastInfo","replaceMustacheWithTemplateTag","ComponentState","bindParentProperty","propName","defineProperty","unbindParentProperty","bindParentComponent","parent","parentStructiveComponent","getBindingsFromChild","ComponentStateHandler","checkSegmentRegexp","checkPathRegexp","createAccessorFunctions","getters","matchPaths","len","matchPath","curPath","matchInfo","segments","count","segment","Function","createComponentClass","componentData","componentConfig","userConfig","Ue","getComponentConfig","$config","$n","Tn","cn","$isStructive","registerStateClass","extendTagName","getBaseClass","componentState","component","createComponentEngine","el","current","isStructive","host","findStructiveParent","define","customElements","getStyleSheetById","getStateClassById","getListPathsSetById","getPathsSetById","currentProto","prototype","getOwnPropertyDescriptors","desc","getPrototypeOf","funcs","enumerable","configurable","unescapeEmbed","loadSingleFileComponent","response","fetch","escapeEmbed","querySelector","script","b64","btoa","fromCodePoint","TextEncoder","encode","scriptModule","import","default","createSingleFileComponent","registerComponentClass","SLOT_KEY","DEFAULT_LAYOUT","MainWrapper","loadLayout","ok","layoutText","workTemplate","createDocumentFragment","router","ROUTES_KEY","COMPONENTS_KEY","loadFromImportMap","importmap","scriptImportmap","imports","loadImportmap","alias","_config","initialized","defineComponents","singleFileComponents","registerSingleFileComponents","bootstrapStructive","mainWrapper","body","bootstrap"],"mappings":"AAmBA,MACMA,EAAoB,UAMpBC,EAAwC,GAE9C,IAAIC,EAA+B,KAE7B,MAAOC,UAAeC,YAC1BC,EACA,WAAAC,GACEC,QACAC,KAAKH,EAAmBG,KAAKC,EAAgBC,KAAKF,KACnD,CAED,iBAAAG,GACET,EAAeM,KACfA,KAAKI,UAAY,+BACjBC,OAAOC,iBAAiB,WAAYN,KAAKH,GACzCQ,OAAOE,cAAc,IAAIC,MAAM,YAChC,CAED,oBAAAC,GACEJ,OAAOK,oBAAoB,WAAYV,KAAKH,GAC5CH,EAAe,IAChB,CAED,CAAAO,CAAgBU,GACdA,EAAMC,iBACNZ,KAAKa,GACN,CAED,QAAAC,CAASC,GACPC,QAAQC,UAAU,CAAA,EAAI,GAAIF,GAC1Bf,KAAKa,GACN,CAED,CAAAA,GAEuBK,MAAMC,KAAKnB,KAAKoB,YAAYC,QAC/CC,GAAmD,YAA7CA,EAAkBC,eAAe,UAE5BC,SAAQF,GAAKtB,KAAKyB,YAAYH,KAE3C,MAAMI,EAAYrB,OAAOsB,SAASC,UA/CX,IAgDvB,IAAIC,EACAC,EAAiC,CAAA,EAErC,IAAK,MAAOC,EAAMC,KAAQvC,EAAc,CACtC,MAAMwC,EAAQ,IAAIC,OAAOH,EAAKI,QAAQ,YAAa,YACnD,GAAIF,EAAMG,KAAKV,GAAY,CACzBG,EAAUG,EAEV,MAAMK,EAAUX,EAAUY,MAAML,GAChC,GAAII,EAAS,EACEN,EAAKO,MAAM,cAAgB,IACnCd,SAAQ,CAACe,EAAKC,KACjBV,EAAOS,EAAIE,UAAU,IAAMJ,EAAQG,EAAQ,EAAE,GAEhD,CACD,KACD,CACF,CACD,GAAIX,EAAS,CAIX,MAAMa,EAAgBC,SAASC,cAAcf,GAC7Ca,EAAcG,aAAa,aAAcC,KAAKC,UAAUjB,IACxDY,EAAcG,aAAa,OAAQ,WACnC7C,KAAKgD,YAAYN,EAClB,KAAM,CAEL,MAAMO,EAAiBN,SAASC,cAAc,MAC9CK,EAAeJ,aAAa,OAAQ,WACpCI,EAAeC,YAAc,gBAC7BlD,KAAKgD,YAAYC,EAClB,CACF,EAIa,SAAAE,EAAWtB,EAAiBH,GACtCA,EAAU0B,WAAW5D,KACvBkC,EAAYA,EAAUe,UAAUjD,IAElCC,EAAa4D,KAAK,CAAC3B,EAAWG,GAChC,CC7FA,MAAMyB,EAAwB,CAC5BC,OAAuB,EACvBC,OAAuB,QACvBC,GAAuB,EACvBC,GAAuB,EACvBC,GAAuB,EACvBC,GAAuB,EACvBC,GAAuB,EACvBC,EAAuB,WACvBC,EAAuB,cACvBC,EAAuB,GACvBC,GAAuB,EACvBC,GAAuB,EACvBC,GAAuB,EACvBC,GAAuB,YAITC,IACd,OAAOf,CACT,CAEO,MAAMgB,EAASD,ICtBhB,SAAUE,EAAgBC,GAC9B,MAAM,IAAIC,MAAM,GAAGD,iCACrB,CAEM,SAAUE,EAAmBF,GACjC,MAAM,IAAIC,MAAM,GAAGD,gCACrB,CAEM,SAAUG,EAAkBH,GAChC,MAAM,IAAIC,MAAM,GAAGD,4BACrB,CAMM,SAAUI,EAAgBJ,GAC9B,MAAM,IAAIC,MAAM,GAAGD,0BACrB,CCdA,MAAMF,EAASD,IAwUTQ,EAAoC,CACxCC,EAvUUC,IACV,MAAMC,EAAMD,IAAU,IAAMR,EAAgB,MACtCU,EAAWC,OAAOF,GAExB,OADIG,MAAMF,IAAWP,EAAmB,MAChCU,IACe,iBAAVA,GAAoBT,EAAkB,MAC1CS,IAAUH,EAClB,EAiUDI,EA9TUN,IACV,MAAMC,EAAMD,IAAU,IAAMR,EAAgB,MACtCU,EAAWC,OAAOF,GAExB,OADIG,MAAMF,IAAWP,EAAmB,MAChCU,IACe,iBAAVA,GAAoBT,EAAkB,MAC1CS,IAAUH,EAClB,EAwTDK,EArTWP,GACHK,IACe,kBAAVA,GDhBT,SAA6BZ,GACjC,MAAM,IAAIC,MAAM,GAAGD,6BACrB,CCcoCe,CAAmB,QAC3CH,GAoTVI,EAhTUT,IACV,MAAMC,EAAMD,IAAU,IAAMR,EAAgB,MACtCU,EAAWC,OAAOF,GAExB,OADIG,MAAMF,IAAWP,EAAmB,MAChCU,IACe,iBAAVA,GAAoBT,EAAkB,MAC1CS,EAAQH,EAChB,EA0SDQ,EAvSUV,IACV,MAAMC,EAAMD,IAAU,IAAMR,EAAgB,MACtCU,EAAWC,OAAOF,GAExB,OADIG,MAAMF,IAAWP,EAAmB,MAChCU,IACe,iBAAVA,GAAoBT,EAAkB,MAC1CS,GAASH,EACjB,EAiSDS,EA9RUX,IACV,MAAMC,EAAMD,IAAU,IAAMR,EAAgB,MACtCU,EAAWC,OAAOF,GAExB,OADIG,MAAMF,IAAWP,EAAmB,MAChCU,IACe,iBAAVA,GAAoBT,EAAkB,MAC1CS,EAAQH,EAChB,EAwRDU,EArRUZ,IACV,MAAMC,EAAMD,IAAU,IAAMR,EAAgB,MACtCU,EAAWC,OAAOF,GAExB,OADIG,MAAMF,IAAWP,EAAmB,MAChCU,IACe,iBAAVA,GAAoBT,EAAkB,MAC1CS,GAASH,EACjB,EAgRDW,EA7QWb,IACX,MAAMC,EAAMD,IAAU,IAAMR,EAAgB,OACtCU,EAAWC,OAAOF,GAExB,OADIG,MAAMF,IAAWP,EAAmB,OAChCU,IACe,iBAAVA,GAAoBT,EAAkB,OAC1CS,EAAQH,EAChB,EAuQDY,EApQWd,IACX,MAAMC,EAAMD,IAAU,IAAMR,EAAgB,OACtCU,EAAWC,OAAOF,GAExB,OADIG,MAAMF,IAAWP,EAAmB,OAChCU,IACe,iBAAVA,GAAoBT,EAAkB,OAC1CS,EAAQH,EAChB,EA8PDa,IA3PWf,IACX,MAAMC,EAAMD,IAAU,IAAMR,EAAgB,OACtCU,EAAWC,OAAOF,GAExB,OADIG,MAAMF,IAAWP,EAAmB,OAChCU,IACe,iBAAVA,GAAoBT,EAAkB,OAC1CS,EAAQH,EAChB,EAqPDc,IAlPWhB,IACX,MAAMC,EAAMD,IAAU,IAAMR,EAAgB,OACtCU,EAAWC,OAAOF,GAExB,OADIG,MAAMF,IAAWP,EAAmB,OAChCU,IACe,iBAAVA,GAAoBT,EAAkB,OAC1CS,EAAQH,EAChB,EA6ODe,EA1OWjB,IACX,MACME,EAAWC,OADLH,IAAU,IAAM,GAG5B,OADII,MAAMF,IAAWP,EAAmB,OAChCU,IACe,iBAAVA,GAAoBT,EAAkB,OAC1CS,EAAMa,QAAQhB,GACtB,EAoODzB,OAjOcuB,IACd,MAAMC,EAAMD,IAAU,IAAMT,EAAOd,OACnC,OAAQ4B,IACe,iBAAVA,GAAoBT,EAAkB,UAC1CS,EAAMc,eAAelB,GAC7B,EA6NDmB,EA1NUpB,GACFK,GACCA,EAAMgB,WAAWC,cAyN1BC,EArNUvB,GACFK,GACCA,EAAMgB,WAAWG,cAoN1BC,IAhNWzB,GACHK,IACN,MAAMqB,EAAIrB,EAAMgB,WAChB,OAAiB,IAAbK,EAAEC,OAAqBD,EACV,IAAbA,EAAEC,OAAqBD,EAAEJ,cACtBI,EAAEE,OAAO,GAAGN,cAAgBI,EAAEG,MAAM,EAAE,OAInC7B,GACJK,GACCA,EAAMgB,WAAWS,OAuM1BD,MAnMa7B,IACb,MAAMC,EAAMD,IAAU,IAAMR,EAAgB,SACtCU,EAAWC,OAAOF,GAExB,OADIG,MAAMF,IAAWP,EAAmB,SAChCU,GACCA,EAAMgB,WAAWQ,MAAM3B,EAC/B,EA8LD6B,OA3Lc/B,IACd,MAAMgC,EAAOhC,IAAU,IAAMR,EAAgB,UACvCyC,EAAY9B,OAAO6B,GACrB5B,MAAM6B,IAAYtC,EAAmB,UACzC,MAAMuC,EAAOlC,IAAU,IAAMR,EAAgB,UACvC2C,EAAYhC,OAAO+B,GAEzB,OADI9B,MAAM+B,IAAYxC,EAAmB,UACjCU,GACCA,EAAMgB,WAAWU,OAAOE,EAAWE,EAC3C,EAmLDC,IAhLWpC,IACX,MAAMgC,EAAOhC,IAAU,IAAMR,EAAgB,OACvCyC,EAAY9B,OAAO6B,GACrB5B,MAAM6B,IAAYtC,EAAmB,OACzC,MACMwC,EADOnC,IAAU,IAAM,IAE7B,OAAQK,GACCA,EAAMgB,WAAWgB,SAASJ,EAAWE,EAC7C,EAyKDG,EAtKWtC,IACX,MAAMC,EAAMD,IAAU,IAAMR,EAAgB,OACtCU,EAAWC,OAAOF,GAExB,OADIG,MAAMF,IAAWP,EAAmB,OAChCU,GACCA,EAAMgB,WAAWkB,OAAOrC,EAChC,EAiKDsC,IA9JWxC,GACHK,GACCA,EAAMgB,WAAWoB,MAAM,IAAIC,UAAUC,KAAK,IA8JnDC,EA1JW5C,GACHK,GACCwC,SAASxC,EAAO,IAyJzByC,MArJa9C,GACLK,GACC0C,WAAW1C,GAoJpB2C,MAhJahD,IACb,MAAMC,EAAMD,IAAU,IAAM,EACtBE,EAAW+C,KAAKC,IAAI,GAAI/C,OAAOF,IAErC,OADIG,MAAMF,IAAWP,EAAmB,SAChCU,IACe,iBAAVA,GAAoBT,EAAkB,SAC1CqD,KAAKD,MAAM3C,EAAQH,GAAYA,EACvC,EA0IDiD,MAvIanD,IACb,MAAMC,EAAMD,IAAU,IAAM,EACtBE,EAAW+C,KAAKC,IAAI,GAAI/C,OAAOF,IAErC,OADIG,MAAMF,IAAWP,EAAmB,SAChCU,IACe,iBAAVA,GAAoBT,EAAkB,SAC1CqD,KAAKE,MAAM9C,EAAQH,GAAYA,EACvC,EAiIDkD,KA9HYpD,IACZ,MAAMC,EAAMD,IAAU,IAAM,EACtBE,EAAW+C,KAAKC,IAAI,GAAI/C,OAAOF,IAErC,OADIG,MAAMF,IAAWP,EAAmB,QAChCU,IACe,iBAAVA,GAAoBT,EAAkB,QAC1CqD,KAAKG,KAAK/C,EAAQH,GAAYA,EACtC,EAwHDmD,QArHerD,IACf,MACME,EAAWC,OADLH,IAAU,IAAM,GAG5B,OADII,MAAMF,IAAWP,EAAmB,WAChCU,IACe,iBAAVA,GAAoBT,EAAkB,WAC1CS,EAAMa,QAAQhB,GAAY,IAClC,EAgHDoD,EA7GYtD,IACAA,IAAU,IAAMT,EAAOd,OAC3B4B,IACAA,aAAiBkD,MAAQ1D,EAAgB,QACxCQ,EAAMmD,mBAAmBjE,EAAOd,UA0GzCgF,KAtGYzD,IACAA,IAAU,IAAMT,EAAOd,OAC3B4B,IACAA,aAAiBkD,MAAO1D,EAAgB,QACvCQ,EAAMqD,mBAAmBnE,EAAOd,UAmGzCkF,EA/FgB3D,IACJA,IAAU,IAAMT,EAAOd,OAC3B4B,IACAA,aAAiBkD,MAAO1D,EAAgB,YACvCQ,EAAMc,eAAe5B,EAAOd,UA4FrCmF,EAxFW5D,IACX,MAAMC,EAAMD,IAAU,IAAM,IAC5B,OAAQK,IACAA,aAAiBkD,MAAO1D,EAAgB,OAC9C,MAAMgE,EAAOxD,EAAMyD,cAAczC,WAC3B0C,GAAS1D,EAAM2D,WAAa,GAAG3C,WAAWgB,SAAS,EAAG,KACtD4B,EAAM5D,EAAM6D,UAAU7C,WAAWgB,SAAS,EAAG,KACnD,MAAO,GAAGwB,IAAO5D,IAAM8D,IAAQ9D,IAAMgE,GAAK,CAC3C,EAkFDE,EA/EanE,GACLK,IAAyB,IAAVA,SAAmBA,GAAmD,IAAVA,GAAyB,KAAVA,GAAgBF,OAAOC,MAAMC,GA+E/H+D,EA5EcpE,GACNK,IAAwB,IAAVA,SAAmBA,GAAmD,IAAVA,GAAyB,KAAVA,IAAiBF,OAAOC,MAAMC,GA4E/HgE,EAzEgBrE,IAChB,MAAMC,EAAMD,IAAU,IAAMR,EAAgB,YAC5C,OAAQa,IACQ,IAAVA,SAAmBA,GAAmD,IAAVA,GAAyB,KAAVA,GAAgBF,OAAOC,MAAMC,GAAeJ,EACpHI,CACR,EAsEDiE,EAnEetE,GACPK,GACCkE,QAAQlE,GAkEjBmE,OA9DcxE,GACNK,GACCF,OAAOE,GA6DhBoE,OAzDczE,GACNK,GACCqE,OAAOrE,GAwDhBsE,KApDa3E,GACLK,GACY,KAAVA,EAAgB,KAAOA,GAqDtBuE,EAAuB9E,EACvB+E,EAAsB/E,EC7YnC,IAAIgF,EAAK,WAEOC,IACd,QAASD,CACX,CCJM,SAAUE,EAAWC,GACzB,MAAM,IAAIvF,MAAMuF,EAClB,CCcA,MAAMC,EAAiD,CAAA,ECDvD,MAAMC,EAA+C,CAAA,ECDrC,SAAAC,EAAYN,EAAYO,GACtC,MAAMC,EAAa,IAAIC,cACvBD,EAAWE,YAAYH,GDCT,SAAmBP,EAAYO,GAC7CF,EAAeL,GAAMO,CACvB,CCFEI,CAAmBX,EAAIQ,EACzB,CCTA,SAASI,EAAaC,EAA2BC,GAC/C,MAAMtJ,EAASqJ,EAAQC,EAAKC,MAE5B,OADKvJ,GAAQ0I,EAAW,6CAA6Ca,QAC9DvJ,EAAOsJ,EAAK5F,QACrB,CAEA,MAAM8F,EAAsC,IAAIC,IAUhC,SAAAC,EAAcL,EAA2BM,GACvD,IAAIC,EAASJ,EAAMK,IAAIF,GACvB,QAAsB,IAAXC,EAAwB,CACjCA,EAAS,GACT,IAAI,IAAIE,EAAI,EAAGA,EAAIH,EAAMtE,OAAQyE,IAC/BF,EAAO5H,KAAKoH,EAAaC,EAASM,EAAMG,KAE1CN,EAAMO,IAAIJ,EAAOC,EAClB,CACD,OAAOA,CACT,OCfaI,EACXC,GACAC,GACAX,GACAF,GACAc,GACAC,GAAmC,IAAIC,IACvC,QAAIH,GACF,OAAOvL,MAAKuL,CACb,CACD,QAAIX,GACF,OAAO5K,MAAK4K,CACb,CACD,KAAIe,GACF,OAAO3L,MAAK4K,CACb,CACD,WAAIU,GACF,OAAOtL,MAAKsL,CACb,CACD,KAAIE,GACF,OAAOxL,MAAKwL,CACb,CACD,WAAId,GACF,OAAO1K,MAAK0K,CACb,CACD,MAAIe,GACF,OAAOzL,MAAKyL,CACb,CACD,WAAA3L,CACEwL,EACAC,EACAX,EACAF,EACAc,GAEAxL,MAAKsL,EAAWA,EAChBtL,MAAKuL,EAAQA,EACbvL,MAAK4K,EAAQA,EACb5K,MAAK0K,EAAWA,EAChB1K,MAAKwL,EAAaA,CACnB,CACD,IAAAI,GAEC,CACD,MAAAC,GACE7L,KAAK8L,GAAY9L,KAAKsL,QAAQS,GAAaC,GAC5C,CACD,EAAAF,CAAY1G,GACV2E,EAAW,2CACZ,CACD,EAAAkC,CAAeC,EAA2BC,GACxCpC,EAAW,8CACZ,CACD,MAAIqC,GACF,OAAOpM,KAAKuL,gBAAgBc,iBAC7B,CACD,SAAIjH,GACF,OAAO,IACR,CACD,MAAI4G,GACF,OAAO,IACR,CACD,MAAIM,GACF,OAAO,CACR,ECjEH,MAAMC,UAA6BlB,EACjCM,GACA,KAAIA,GACF,OAAO3L,MAAK2L,CACb,CACD,WAAA7L,CACEwL,EACAC,EACAX,EACAF,EACAc,GAEAzL,MAAMuL,EAASC,EAAMX,EAAMF,EAASc,GACpC,MAAM,CAAGG,GAAW3L,KAAK4K,KAAKpD,MAAM,KACpCxH,MAAK2L,EAAWA,CACjB,CACD,EAAAG,CAAY1G,IACNA,SAAyCF,OAAOC,MAAMC,MACxDA,EAAQ,IAEMpF,KAAKuL,KACb1I,aAAa7C,KAAK2L,EAASvG,EAAMgB,WAC1C,ECrBH,MAAMoG,UAA4BnB,EAChC,EAAAS,CAAY1G,GACLlE,MAAMuL,QAAQrH,IACjB2E,EAAW,kDAEb,MAAM2C,EAAU1M,KAAKuL,KACrBmB,EAAQC,QAAUvH,EAAMwH,KAAIC,GAAQA,EAAKzG,aAAY0G,SAASJ,EAAQtH,MACvE,ECRH,MAAM2H,UAA6B1B,EACjC,EAAAS,CAAY1G,GACLlE,MAAMuL,QAAQrH,IACjB2E,EAAW,mDAEG/J,KAAKuL,KACbyB,UAAY5H,EAAMsC,KAAK,IAChC,ECLH,MAAMuF,UAA6B5B,EACjCM,GACA,KAAIA,GACF,OAAO3L,MAAK2L,CACb,CACD,WAAA7L,CACEwL,EACAC,EACAX,EACAF,EACAc,GAEAzL,MAAMuL,EAASC,EAAMX,EAAMF,EAASc,GACpC,MAAM,CAAGG,GAAW3L,KAAK4K,KAAKpD,MAAM,KACpCxH,MAAK2L,EAAWA,CACjB,CAED,EAAAG,CAAY1G,GACW,kBAAVA,GACT2E,EAAW,qDAEb,MAAM2C,EAAU1M,KAAKuL,KACjBnG,EACFsH,EAAQQ,UAAUC,IAAInN,KAAK2L,GAE3Be,EAAQQ,UAAUE,OAAOpN,KAAK2L,EAEjC,EAOI,MCvDD0B,EAAa,QAENC,EAA4CC,OAAOC,IAAI,GAAGH,cAC1DI,EAA4CF,OAAOC,IAAI,GAAGH,cAC1DK,EAA4CH,OAAOC,IAAI,GAAGH,kBAC1DM,EAA4CJ,OAAOC,IAAI,GAAGH,uBAC1DO,EAA4CL,OAAOC,IAAI,GAAGH,0BAC1DQ,EAA4CN,OAAOC,IAAI,GAAGH,aAC1DS,EAA4CP,OAAOC,IAAI,GAAGH,YAC1DU,EAA4CR,OAAOC,IAAI,GAAGH,yBAC1DW,EAA4CT,OAAOC,IAAI,GAAGH,oBAC1DY,EAA+CV,OAAOC,IAAI,GAAGH,6BAC7Da,EAA4CX,OAAOC,IAAI,GAAGH,yBCWvE,MAAMc,UAAyB9C,EAC7BM,GACA,WAAA7L,CACEwL,EACAC,EACAX,EACAF,EACAc,GAEAzL,MAAMuL,EAASC,EAAMX,EAAMF,EAASc,GACpCxL,MAAK2L,EAAW3L,KAAK4K,KAAKhE,MAAM,GAChB2E,EACRjL,iBAAiBN,KAAK2L,GAAUyC,GAAYpO,KAAKqO,GAAQD,IAClE,CACD,KAAIzC,GACF,OAAO3L,MAAK2L,CACb,CACD,MAAAE,GAEC,CAED,EAAAwC,CAAQD,GACN,MAAME,EAAStO,KAAKsL,QAAQgD,GACtBC,EAAcvO,KAAKsL,QAAQkD,GAAkBC,GAC7CC,EAAUH,GAAaI,KAAY/B,KAAKgC,GAAYA,EAAQC,GAAUrM,SAAU,GAChFuC,EAAU/E,KAAKwL,EACfpG,EAAQpF,KAAKsL,QAAQS,GAAa3G,MAEpB,oBADOA,GAEzB2E,EAAW,qBAAqB/J,KAAK4K,2BAEnC7F,EAAQ+H,SAAS,mBACnBsB,EAAExN,iBAEAmE,EAAQ+H,SAAS,oBACnBsB,EAAEU,kBAEJ9O,KAAKsL,QAAQgD,GAAOS,GAAQC,IAAWC,UACrC,MAAMC,EAAaZ,EAAOa,WACpBD,EAAWlB,GAAsBO,GAAaU,gBAC5CG,QAAQC,MAAMjK,EAAO8J,EAAY,CAACd,KAAMM,GAAS,GACvD,GAEL,EAOI,MAAMY,EACb,CAAC1E,EAAc2E,EAA4B/D,IACzC,CAACF,EAAkBC,EAAYb,KAC7B,MAAM8E,EAAYzE,EAAcL,EAAS6E,GACzC,OAAO,IAAIpB,EAAiB7C,EAASC,EAAMX,EAAM4E,EAAWhE,EAAU,EC9E7DiE,EAAsB,YACtBC,EAAqB,MACrBC,EAAwB,MCmB/B,MAAOC,UAAyBvE,EACpCxB,GACA,MAAIA,GACF,OAAO7J,MAAK6J,CACb,CACD,WAAA/J,CACEwL,EACAC,EACAX,EACAF,EACAc,GAEAzL,MAAMuL,EAASC,EAAMX,EAAMF,EAASc,GACpC,MAAM3B,EAAK7J,KAAKuL,KAAKrI,aAAa0D,MA5BJ+I,IA4BwC5F,EAAW,qCACjF/J,MAAK6J,EAAM3E,OAAO2E,EACnB,ECfH,MAAMgG,UAAsBD,EAC1BE,GACAC,GACAC,GAAwC,IAAItE,IAC5CD,GAEA,MAAIA,GACF,OAAOzL,MAAKyL,CACb,CAED,WAAA3L,CACEwL,EACAC,EACAX,EACAF,EACAc,GAEAzL,MAAMuL,EAASC,EAAMX,EAAMF,EAASc,GACpCxL,MAAK8P,EAAeG,GAClBjQ,KAAKsL,QACLtL,KAAK6J,GACL7J,KAAKsL,QAAQgD,GACb,GACA,MAEFtO,MAAK+P,EAAoB/P,MAAKyL,EAAgB,IAAIC,IAAI,CAAC1L,MAAK8P,GAC7D,CAED,EAAAhE,CAAY1G,GACW,kBAAVA,GACT2E,EAAW,8CAEb,MAAMmG,EAAalQ,KAAKuL,KAAK2E,WACX,MAAdA,GACFnG,EAAW,4CAET3E,GACFpF,MAAK8P,EAAajP,IAClBb,MAAK8P,EAAaK,GAAWD,EAAYlQ,KAAKuL,KAAK6E,aACnDpQ,MAAKyL,EAAgBzL,MAAK+P,IAE1B/P,MAAK8P,EAAaO,UAClBrQ,MAAKyL,EAAgBzL,MAAKgQ,EAE7B,ECtCH,MAAMM,UAAuBV,EAC3BW,GAA6C,IAAI7E,IACjD8E,GAA6D,IAAIC,QACjEC,GAA0C,GAC1CC,GAAkC,EAClCC,GAA2C,IAAIlF,IAE/C,MAAID,GACF,OAAOzL,MAAKuQ,CACb,CAED,MAAIjE,GACF,OAAO,CACR,CAED,IAAAV,GACC,CAED,EAAAqE,CAAkBpB,GAChB,IAAIiB,EAkBJ,OAjBI9P,MAAK2Q,GAAyB,GAIhCb,EAAc9P,MAAK0Q,EAAiB1Q,MAAK2Q,GACzC3Q,MAAK2Q,IACLb,EAAYe,GAAgBhC,IAE5BiB,EAAcG,GACZjQ,KAAKsL,QACLtL,KAAK6J,GACL7J,KAAKsL,QAAQgD,GACbtO,KAAKsL,QAAQS,GAAa+E,QAAU,KACpCjC,GAGJ7O,MAAKwQ,EAAwBpF,IAAIyD,EAAWiB,GACrCA,CACR,CAED,EAAAiB,CAAkBjB,GAChBA,EAAYO,UACZP,EAAYvB,IAAayC,IAC1B,CAED,MAAIL,GACF,OAAO3Q,MAAK2Q,CACb,CACD,MAAIA,CAAqBvL,GACvBpF,MAAK2Q,EAAwBvL,CAC9B,CAED,MAAI6L,GACF,OAAOjR,MAAK0Q,EAAiBhK,MAC9B,CACD,MAAIuK,CAAWvK,GACTA,EAAS,GACXqD,EAAW,oDAEb/J,MAAK0Q,EAAiBhK,OAASA,CAChC,CAED,EAAAoF,CAAY1G,GACLlE,MAAMuL,QAAQrH,IACjB2E,EAAW,kDAEb,MAAMmH,EAAiBlR,KAAKsL,QAAQgD,GAAO6C,GACzCnR,KAAKsL,QAAQS,GAAaqF,KAC1BpR,KAAKsL,QAAQS,GAAa8C,IAEL,OAAnBqC,GACFnH,EAAW,wDAEb,MAAMsH,EAAoB,IAAI3F,IAC9B,IAAI4F,EAAkB,KAEtB,MAAMC,EAAwB,IAAI7F,IAC5B8F,EAAOxR,MAAK4Q,EAAkBa,WAAWP,GAC/C,IAAI,MAAMrC,KAAa2C,EAAM,CAC3B,MAAM1B,EAAc9P,MAAKwQ,EAAwBtF,IAAI2D,GACjDiB,IACF9P,KAAK+Q,GAAkBjB,GACvByB,EAAsBpE,IAAI2C,GAE7B,CACD9P,MAAK0Q,EAAiBrN,QAAQkO,GAE9B,MAAMrB,EAAalQ,KAAKuL,KAAK2E,YAAcnG,EAAW,6CAChD2H,EAAY1R,KAAKuL,KAEvBvL,KAAK2Q,GAAuB3Q,KAAKiR,GAAa,EAC9C,IAAI,MAAMpC,KAAaqC,EAAgB,CACrC,MAAMS,EAAWL,GAAiBM,GAAY1B,IAAewB,EAC7D,IAAI5B,EAAc9P,MAAKwQ,EAAwBtF,IAAI2D,QACxB,IAAhBiB,GACTA,EAAc9P,KAAKiQ,GAAkBpB,GACrCiB,EAAYjP,IACZiP,EAAYK,GAAWD,EAAYyB,IAE/BA,GAAUvB,cAAgBN,EAAY+B,IACxC/B,EAAYK,GAAWD,EAAYyB,GAGvCN,EAAkBlE,IAAI2C,GACtBwB,EAAkBxB,CACnB,CAGD9P,KAAKiR,GAAajR,KAAK2Q,GAAuB,EAC9C3Q,MAAKuQ,EAAmBc,EACxBrR,MAAK4Q,EAAoB,IAAIlF,IAAgBwF,EAC9C,CASD,EAAAjF,CAAeC,EAA2BC,GACxC,GAAyB,iBAAdA,EAAO,GAAiB,OACnC,MAAMmC,EAAStO,KAAKsL,QAAQgD,GACtBwD,EACJxD,EAAOyD,GACL/R,KAAKsL,QAAQS,GAAaqF,KAC1BpR,KAAKsL,QAAQS,GAAa8C,KACvB9E,EAAW,yDACZmG,EAAalQ,KAAKuL,KAAK2E,YAAcnG,EAAW,6CAGhDiI,EAAsB9Q,MAAMC,KAAKnB,MAAKuQ,GACtC0B,EAAqC,GAC3C,IAAI,IAAI9G,EAAI,EAAGA,EAAIe,EAAYxF,OAAQyE,IAAK,CAC1C,MACM2E,EAAckC,EADF9F,EAAYf,GACoB3I,OAClDsN,EAAYO,UACZ4B,EAAmB5O,KAAKyM,EACzB,CAGD,IAAI,IAAI3E,EAAI,EAAGA,EAAIe,EAAYxF,OAAQyE,IAAK,CAC1C,MAAM0D,EAAY3C,EAAYf,GACxB3I,EAAQqM,EAAUrM,MAElB8O,EAAkBU,EAAoBxP,EAAQ,IAAM,KACpDmP,EAAWL,GAAiBY,IAAiBlS,KAAKuL,KAElD4G,EAAWL,EAActP,GACzB4P,EAAcjG,EAAOkG,QAAQF,GAC7BG,EAAkBL,EAAmBG,GAE3C,QAA+B,IAApBE,EAAiC,CAE1C,MAAMxC,EAAcmC,EAAmBzP,GACvCsN,EAAYjP,IACZiP,EAAYK,GAAWD,EAAYyB,EACpC,MACCW,EAAgBzB,GAAgBhC,GAChCyD,EAAgBnC,GAAWD,EAAYyB,GACvC3R,MAAKwQ,EAAwBpF,IAAIyD,EAAWyD,GAC5CN,EAAoBxP,GAAS8P,EAE3BF,GAAe,IACjBjG,EAAOiG,IAAgB,EAE1B,CACDpS,MAAKuQ,EAAmB,IAAI7E,IAAkBsG,GAC9C1D,EAAOiE,GACLvS,KAAKsL,QAAQS,GAAaqF,KAC1BpR,KAAKsL,QAAQS,GAAa8C,GAC1B7O,KAAKsL,QAAQS,GAAa3G,MAAMwB,MAAM,GAEzC,EAGI,MAAM4L,EACb,CAAC5H,EAAc2E,EAA4B/D,IACzC,CAACF,EAAkBC,EAAYb,KAC7B,MAAM8E,EAAYzE,EAAcL,EAAS6E,GACzC,OAAO,IAAIe,EAAehF,EAASC,EAAMX,EAAM4E,EAAWhE,EAAU,EC7MlEiH,EAAmB,cAMnBC,EAA4D,CAChEC,GAAY,UACZC,GAAY,UACZC,OAAY,WAkBRC,EAA+B,CAAA,EAQ/BC,GAA6D,CACjEnT,YArBqC2L,GACrCA,aAAgBc,mBAAqBd,aAAgByH,qBAAuBzH,aAAgB0H,kBAAoB,QAChH1H,aAAgB2H,mBAChB3H,aAAgB4H,kBADoB,UAEpC5H,aAAgB6H,gBAAkB,WAClC7H,aAAgB8H,iBAAoBX,EAA6BnH,EAAK+H,OAAS,QAC/Eb,EAgBAc,gBAAaC,EACbC,KAT2BlI,GAAqBkH,EAUhDiB,QAAaF,GCzBf,MAAMG,GAA6C,CACjDvO,MAAY,QACZuH,QAAY,SACZiH,SAAY,UAkBd,MAAMC,WAA4BxI,EAChC,SAAIjG,GAEF,OAAOpF,KAAKuL,KAAKvL,KAAK4K,KACvB,CACD,MAAIoB,GACF,IAAI5G,EAAQpF,KAAKoF,MACjB,IAAI,IAAI+F,EAAI,EAAGA,EAAInL,KAAK0K,QAAQhE,OAAQyE,IACtC/F,EAAQpF,KAAK0K,QAAQS,GAAG/F,GAE1B,OAAOA,CACR,CACD,WAAAtF,CACEwL,EACAC,EACAX,EACAF,EACAc,GAEAzL,MAAMuL,EAASC,EAAMX,EAAMF,EAASc,GAGpC,KADkBxL,KAAKuL,gBAAgB3L,aACvB,OAChB,MAlDsB8M,EAkDA1M,KAAKuL,gBAjDH8H,kBACxB3G,aAAmBsG,qBACnBtG,aAAmBL,mBA+Ce,OAlDtC,IAA0BK,EAmDtB,MAAMoH,EDLM,SACdvI,EACAwI,GAEA,MAAMxR,EAAMgJ,EAAKzL,YAAY8K,KAAO,MAASW,EAA0B+H,MAAQ,IAC/E,OAAOR,EAAOvQ,KAASuQ,EAAOvQ,GAAOwQ,GAA6BgB,KAAYxI,GAChF,CCDwByI,CAAehU,KAAKuL,KAAM,eAC9C,GAAIuI,IAAgB9T,KAAK4K,KAAM,OAC3BY,EAAU9E,OAAS,GAAGqD,EAAW,wBAAwB/J,KAAK4K,gCAClE,MACMqJ,GADSzI,EAAU,IAAIpI,WAAW,MAAQoI,EAAU,IAAI5E,MAAM,GAAK4E,EAAU,KAAO,MAC/DmI,GAAmB3T,KAAK4K,OAAS,WAC5D,GAAkB,aAAdqJ,GAA0C,OAAdA,EAAoB,OAGpD,MAAM3F,EAAStO,KAAKsL,QAAQgD,GACtBC,EAAcvO,KAAKsL,QAAQkD,GAAkBC,GAC3CrJ,EAAQpF,KAAKgM,GACnBhM,KAAKuL,KAAKjL,iBAAiB2T,GAAWhF,UACtCX,EAAOS,GAAQC,IAAWC,UACxB,MAAMC,EAAaZ,EAAOa,WACpBD,EAAWlB,GAAsBO,GAAaU,UAClD3D,EAAQ4I,GAAiBhF,EAAY9J,EAAM,GAC3C,GACF,GAGL,CAED,IAAAwG,GAEC,CAED,EAAAE,CAAY1G,IACNA,SAAyCF,OAAOC,MAAMC,MACxDA,EAAQ,IAGVpF,KAAKuL,KAAKvL,KAAK4K,MAAQxF,CACxB,EAOI,MAAM+O,GACb,CAACvJ,EAAc2E,EAA4B/D,IACzC,CAACF,EAAkBC,EAAYb,KAC7B,MAAM8E,EAAYzE,EAAcL,EAAS6E,GACzC,OAAO,IAAIsE,GAAoBvI,EAASC,EAAMX,EAAM4E,EAAWhE,EAAU,ECpF7E,MAAM4I,WAAyB/I,EAC7B,EAAAS,CAAY1G,IACNA,SAAyCF,OAAOC,MAAMC,MACxDA,EAAQ,IAEV,MAAMsH,EAAU1M,KAAKuL,KACrBmB,EAAQC,QAAUvH,EAAMgB,aAAesG,EAAQtH,MAAMgB,UACtD,ECPH,MAAMiO,WAAyBhJ,EAC7BM,GACA,KAAIA,GACF,OAAO3L,MAAK2L,CACb,CACD,WAAA7L,CACEwL,EACAC,EACAX,EACAF,EACAc,GAEAzL,MAAMuL,EAASC,EAAMX,EAAMF,EAASc,GACpC,MAAM,CAAGG,GAAW3L,KAAK4K,KAAKpD,MAAM,KACpCxH,MAAK2L,EAAWA,CACjB,CACD,EAAAG,CAAY1G,IACNA,SAAyCF,OAAOC,MAAMC,MACxDA,EAAQ,IAEMpF,KAAKuL,KACb+I,MAAMC,YAAYvU,KAAK2L,EAASvG,EAAMgB,WAC/C,EAOI,MChDDiH,GAAa,iBAENmH,GAA+BjH,OAAOC,IAAI,GAAGH,aAC7CoH,GAA4ClH,OAAOC,IAAI,GAAGH,0BCoBvE,MAAMqH,WAA6BrJ,EACjCM,GACA,KAAIA,GACF,OAAO3L,MAAK2L,CACb,CACD,WAAA7L,CACEwL,EACAC,EACAX,EACAF,EACAc,GAEAzL,MAAMuL,EAASC,EAAMX,EAAMF,EAASc,GACpC,MAAM,CAAGG,GAAW3L,KAAK4K,KAAKpD,MAAM,KACpCxH,MAAK2L,EAAWA,CACjB,CAED,IAAAC,GACE,MAAM0C,EAAStO,KAAKsL,QAAQgD,GAC5B,IAAIqG,EAAWrG,EAAOsG,GAAoB1J,IAAIlL,KAAKuL,WAC3B,IAAboJ,IACTA,EAAW,IAAIjJ,IACf4C,EAAOsG,GAAoBxJ,IAAIpL,KAAKuL,KAA4BoJ,IAElEA,EAASxH,IAAInN,KAAKsL,QACnB,CAED,EAAAQ,CAAY1G,GACQpF,KAAKuL,KACbsJ,MAAML,IAAcxU,KAAK2L,EAASvG,EAC7C,EAQI,MC5CD0P,GAAoF,CACxF,EAAG,CACDC,GdeJ,CAACnK,EAAc2E,EAA4B/D,IACzC,CAACF,EAAkBC,EAAYb,KAC7B,MAAM8E,EAAYzE,EAAcL,EAAS6E,GACzC,OAAO,IAAIxC,EAAqBzB,EAASC,EAAMX,EAAM4E,EAAWhE,EAAU,EcjB1EoH,GfeJ,CAAChI,EAAc2E,EAA4B/D,IACzC,CAACF,EAAkBC,EAAYb,KAC7B,MAAM8E,EAAYzE,EAAcL,EAAS6E,GACzC,OAAO,IAAI/C,EAAoBlB,EAASC,EAAMX,EAAM4E,EAAWhE,EAAU,EejBzEmH,GJaJ,CAAC/H,EAAc2E,EAA4B/D,IACzC,CAACF,EAAkBC,EAAYb,KAC7B,MAAM8E,EAAYzE,EAAcL,EAAS6E,GACzC,OAAO,IAAI6E,GAAiB9I,EAASC,EAAMX,EAAM4E,EAAWhE,EAAU,GIdxE,EAAG,CACDwJ,GRgDJ,CAACpK,EAAc2E,EAA4B/D,IACzC,CAACF,EAAkBC,EAAYb,KAC7B,MAAM8E,EAAYzE,EAAcL,EAAS6E,GACzC,OAAO,IAAIM,EAAcvE,EAASC,EAAMX,EAAM4E,EAAWhE,EAAU,IQ7CjEyJ,GAAwE,CAC5EF,GbyBF,CAACnK,EAAc2E,EAA4B/D,IACzC,CAACF,EAAkBC,EAAYb,KAC7B,MAAM8E,EAAYzE,EAAcL,EAAS6E,GACzC,OAAO,IAAItC,EAAqB3B,EAASC,EAAMX,EAAM4E,EAAWhE,EAAU,Ea3B5E0J,GhBiBF,CAACtK,EAAc2E,EAA4B/D,IACzC,CAACF,EAAkBC,EAAYb,KAC7B,MAAM8E,EAAYzE,EAAcL,EAAS6E,GACzC,OAAO,IAAIhD,EAAqBjB,EAASC,EAAMX,EAAM4E,EAAWhE,EAAU,EgBnB5E8I,MHgBF,CAAC1J,EAAc2E,EAA4B/D,IACzC,CAACF,EAAkBC,EAAYb,KAC7B,MAAM8E,EAAYzE,EAAcL,EAAS6E,GACzC,OAAO,IAAI8E,GAAiB/I,EAASC,EAAMX,EAAM4E,EAAWhE,EAAU,EGlBxEqJ,MD4BF,CAACjK,EAAc2E,EAA4B/D,IACzC,CAACF,EAAkBC,EAAYb,KAC7B,MAAM8E,EAAYzE,EAAcL,EAAS6E,GACzC,OAAO,IAAImF,GAAqBpJ,EAASC,EAAMX,EAAM4E,EAAWhE,EAAU,GCkB9E,MAAMsH,GAA6C,CAAA,EAY7C,SAAUqC,GACd5J,EACA6J,EACA7F,EACA/D,GAEA,MAAM6J,EAAY9J,aAAgB+J,QAC5BC,EAAYhK,aAAgBiK,QAC5BjT,EAAM8S,EAAY,KAAOE,EAAY,KAAOH,EAE5CK,EAAK3C,GAAOvQ,KAASuQ,GAAOvQ,GAvDpC,SAAgC8S,EAAmBE,EAAoBH,GAErE,MAAMM,EAA2BZ,GAAyCO,EAAY,EAAI,GAAGD,GAC7F,QAAwC,IAA7BM,EACT,OAAOA,EAGT,GAAIL,GAA8B,QAAjBD,EACf,OAAO5C,EAGL6C,GACFtL,EAAW,gDAAgDqL,KAG7D,MAAMO,EAAeP,EAAa5N,MAAM,KAClCoO,EAAgCX,GAAmCU,EAAa,IACtF,YAA6C,IAAlCC,EACFA,EAGLL,GACEH,EAAahS,WAAW,MACnBkM,EAMF6E,EAEX,CAwB2C0B,CAAuBR,EAAWE,EAAWH,IACtF,OAAOK,EAAGL,EAAc7F,EAAa/D,EACvC,CCnFA,MAAMsH,GAAgD,CAAA,EAQtD,MAAMgD,GACJC,UAAqB,EACrBlM,KAAOiM,GAAmBjM,GAC1BiH,QACAkF,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,SAAW,CAAA,EAEX,WAAAlX,CAAYgR,GACV,MAAMmG,EAAcC,GACVpG,IAAYoG,EAAYlX,KAAOmX,GAAsBD,GAEzDlB,EAAelF,EAAQtJ,MAAM,KAC7B0O,EAAkB,GAClBC,EAAyC,GACzCE,EAAgB,GAChBC,EAAgB,GAChBE,EAAsB,GACtBC,EAAsB,GAC5B,IAAIW,EAAqB,GAAIC,EAAkB,GAC3CN,EAAgB,EACpB,IAAI,IAAI5L,EAAI,EAAGA,EAAI6K,EAAatP,OAAQyE,IACtCiM,GAAsBpB,EAAa7K,GACX,MAApB6K,EAAa7K,KACfkL,EAAchT,KAAK+T,GACnBd,EAAcjT,KAAK4T,EAAWG,IAC9BZ,EAAoBnT,KAAKgU,GACzBZ,EAAoBpT,KAAK4T,EAAWI,IACpCN,KAEFb,EAAgB7S,KAAK+T,GACrBjB,EAAgB9S,KAAK4T,EAAWG,IAChCC,EAAkBD,EAClBA,GAAsB,IAExB,MAAMT,EAAmBN,EAAc3P,OAAS,EAAI2P,EAAcA,EAAc3P,OAAS,GAAK,KACxFmQ,EAAaX,EAAgBxP,OAAS,EAAIwP,EAAgBA,EAAgBxP,OAAS,GAAK,KAC9F1G,KAAK8Q,QAAUA,EACf9Q,KAAKgW,GAAeA,EACpBhW,KAAKiW,GAAcD,EAAaA,EAAatP,OAAS,GACtD1G,KAAKkW,GAAkBA,EACvBlW,KAAKmW,GAAkBA,EACvBnW,KAAKoW,GAAoB,IAAI1K,IAAIyK,GACjCnW,KAAKqW,GAAgBA,EACrBrW,KAAKsW,GAAgBA,EACrBtW,KAAKuW,GAAkB,IAAI7K,IAAI4K,GAC/BtW,KAAKwW,GAAsBA,EAC3BxW,KAAKyW,GAAsBA,EAC3BzW,KAAK0W,GAAwB,IAAIhL,IAAI+K,GACrCzW,KAAK2W,GAAmBA,EACxB3W,KAAK4W,GAAmBD,EAAmBM,EAAWN,GAAoB,KAC1E3W,KAAK6W,GAAaA,EAClB7W,KAAK8W,GAAaD,EAAaI,EAAWJ,GAAc,KACxD7W,KAAK+W,GAAgBA,EACjB/W,KAAK8W,KACP9W,KAAK8W,GAAWE,SAAShX,KAAKiW,IAAejW,KAEhD,EAGH,MAAMsX,GAAgB,IAAI5L,IAAI,CAC5B,cAAe,YAAa,YAAa,WACzC,UAAW,iBAAkB,gBAC7B,QAAS,UAAW,OAAQ,YAC5B,MAAO,MAAO,QAAS,QAAS,WAChC,OAAQ,OAAQ,QAAS,MAAO,WAG5B,SAAUyL,GAAsBI,GACpC,IAAInG,EAEJ,OADAA,EAAO0B,GAAOyE,QACM,IAATnG,EACFA,GAELkG,GAAcE,IAAID,IACpBxN,EAAW,oDAAoDwN,KAEzDzE,GAAOyE,GAAkB,IAAIzB,GAAmByB,GAC1D,CClGA,MAAME,GACJnM,GACAwF,GACAM,GACAsG,GAA4C,KAC5C7C,GACAnK,GACA,WAAIoG,GACF,OAAO9Q,MAAK8Q,CACb,CACD,QAAIM,GACF,OAAOpR,MAAKoR,CACb,CACD,MAAIvC,GACF,OAA2B,OAAvB7O,MAAK0X,EAA+B,KACjC1X,MAAK0X,EAAcC,SAAW5N,EAAW,oBACjD,CACD,SAAI8K,GACF,OAAO7U,MAAK6U,CACb,CACD,WAAInK,GACF,OAAO1K,MAAK0K,CACb,CACD,WAAIY,GACF,OAAOtL,MAAKsL,CACb,CACD,WAAAxL,CACEwL,EACAuJ,EACA/D,EACApG,GAEA1K,MAAKsL,EAAWA,EAChBtL,MAAK8Q,EAAWA,EAChB9Q,MAAKoR,EAAQ+F,GAAsBrG,GACnC9Q,MAAK6U,EAASA,EACd7U,MAAK0K,EAAWA,CACjB,CACD,SAAItF,GACF,OAAOpF,MAAK6U,EAAOvH,GAAgBtN,KAAKoR,KAAMpR,KAAK6O,GACpD,CACD,MAAI7C,GACF,IAAI5G,EAAQpF,KAAKoF,MACjB,IAAI,IAAI+F,EAAI,EAAGA,EAAInL,MAAK0K,EAAShE,OAAQyE,IACvC/F,EAAQpF,MAAK0K,EAASS,GAAG/F,GAE3B,OAAOA,CACR,CACD,IAAAwG,GACE,GAAI5L,KAAKoR,KAAK2F,GAAgB,EAAG,CAC/B,MAAMJ,EAAmB3W,KAAKoR,KAAKuF,IACjC5M,EAAW,qDACPwE,EAAcvO,KAAKsL,QAAQkD,GAAkBD,IAAaqJ,KAAKjB,IACnE5M,EAAW,0CACb/J,MAAK0X,EAAgBnJ,EAAYmJ,EAClC,CACD1X,KAAKsL,QAAQgD,GAAOuJ,GAAY7X,KAAKoR,KAAMpR,KAAK6O,GAAW7O,KAAKsL,QACjE,CACD,EAAAQ,CAAYgM,EAAyB1S,GACnC0S,EAAWrK,GAAgBzN,KAAKoR,KAAMpR,KAAK6O,GAAWzJ,EACvD,EC/DH,MAAM2S,GACJzM,GACA0M,GACAN,GAA4C,KAC5C7C,GACAnK,GACA,WAAIoG,GACF,OAAO/G,EAAW,kBACnB,CACD,QAAIqH,GACF,OAAOrH,EAAW,kBACnB,CACD,MAAI8E,GACF,OAA2B,OAAvB7O,MAAK0X,EAA+B,KACjC1X,MAAK0X,EAAcC,SAAW5N,EAAW,oBACjD,CACD,SAAI8K,GACF,OAAO7U,MAAK6U,CACb,CACD,WAAInK,GACF,OAAO1K,MAAK0K,CACb,CACD,WAAIY,GACF,OAAOtL,MAAKsL,CACb,CACD,WAAAxL,CACEwL,EACAuJ,EACA/D,EACApG,GAEA1K,MAAKsL,EAAWA,EAChB,MAAM0M,EAAc9S,OAAO4L,EAAQlK,MAAM,IACrCzB,MAAM6S,IACRjO,EAAW,8CAEb/J,MAAKgY,EAAeA,EACpBhY,MAAK6U,EAASA,EACd7U,MAAK0K,EAAWA,CACjB,CACD,SAAItF,GACF,OAAOpF,KAAK6O,IAAWrM,OAASuH,EAAW,oBAC5C,CACD,MAAIiC,GACF,IAAI5G,EAAQpF,KAAKoF,MACjB,IAAI,IAAI+F,EAAI,EAAGA,EAAInL,MAAK0K,EAAShE,OAAQyE,IACvC/F,EAAQpF,MAAK0K,EAASS,GAAG/F,GAE3B,OAAOA,CACR,CACD,IAAAwG,GACE,MAEMqM,GAFcjY,KAAKsL,QAAQkD,GAAkBC,IACjD1E,EAAW,2CACoB4E,KACjC3O,MAAK0X,EAAgBO,EAAajY,MAAKgY,EAAe,GAAGN,IACvD3N,EAAW,2CACb,MAAM8E,EAAY7O,KAAK6O,IAAa9E,EAAW,qBACzC4K,EAAW3U,KAAKsL,QAAQgD,GAAO4J,GAAoBhN,IAAI2D,QAC5C2E,IAAbmB,EACF3U,KAAKsL,QAAQgD,GAAO4J,GAAoB9M,IAAIyD,EAAW,IAAInD,IAAI,CAAC1L,KAAKsL,WAErEqJ,EAASxH,IAAInN,KAAKsL,QAErB,CACD,EAAAQ,CAAYgM,EAAwB1S,GAClC2E,EAAW,oDACZ,EAGI,MCxFDoO,GAAO,IAAIjW,OAAO,WAaR,SAAAkW,GACdxN,EACA2E,GAEA,OAAI4I,GAAK/V,KAAKwI,GDwEhB,EAACA,EAAc2E,IACb,CAACjE,EAAkBuJ,EAAoBnK,KACrC,MAAM8E,EAAYzE,EAAcL,EAAS6E,GAEzC,OAAO,IAAIwI,GAAkBzM,EAASuJ,EAAOjK,EAAM4E,EAAU,EC1EtD6I,CAAwBzN,EAAM2E,GFmEzC,EAAC3E,EAAc2E,IACb,CAACjE,EAAkBuJ,EAAoBnK,KACrC,MAAM8E,EAAYzE,EAAcL,EAAS6E,GACzC,OAAO,IAAIkI,GAAanM,EAASuJ,EAAOjK,EAAM4E,EAAU,EEnEjD8I,CAAmB1N,EAAM2E,EAEpC,CCxBA,MAaMgJ,GAAoB,CACxB9E,KAX4BlI,GAA4BA,EAAKrI,aAAa0D,MAH7C8I,GAG2E7I,QAAU,GAYlHjH,YAX4B2L,GAA4BA,EAAKhK,aAAakO,IAAwB,GAYlG+I,GAX4BjN,IAC5B,MAAMZ,EAAOY,EAAKrI,aAAa0D,MALC+I,GAKgC9I,OAGhE,OADiB4R,GADNvT,OAAOyF,KACsBZ,EAAW,uBAAuBY,MAC1DpJ,aAAakO,IAAwB,EAAE,EAQvD8D,WAN6BhI,GAA2BA,EAAKhK,aAAakO,IAAwB,ICbpG,MAMMiJ,GAAsC,CAAA,EAoBtC,SAAUC,GACdpN,EACAqN,EA5BoB,CAACrN,GAAqBA,EAAKzL,YAAY8K,KAAO,MAASW,aAAgB+J,QAAY/J,EAAKrI,cAAc,IAAM,GAAM,IA4BpH2V,CAActN,IAEhC,OAAOmN,GAAkBE,KAAaF,GAAkBE,GAtBhC,CAACrN,GACxBA,aAAgB+J,SAAqC,MAA1B/J,EAAKrI,cAAc,GAAc,OAC5DqI,aAAgB3L,YAAe,cAC/B2L,aAAgB+J,SAAqC,MAA1B/J,EAAKrI,cAAc,GAAc,WAC5DqI,aAAgBgI,WAAc,aAAexJ,EAAW,qBAAqBwB,EAAKwI,YAkBhB+E,CAAkBvN,GACvF,CChCA,MAAM1E,GAAQkS,GAAoBA,EAAElS,OAE9B2Q,GAAOuB,GAAqBA,EAAErS,OAAS,EAEvCsS,GAAK,IAAI9W,OAAO,YAChB+W,GAAUF,IACd,MAAMG,EAAIF,GAAGG,KAAKJ,GAClB,OAAOG,EAAIE,mBAAmBF,EAAE,IAAMH,CAAC,EAOnCM,GAAe1O,IACnB,MAAOC,KAAS7F,GAAW4F,EAAKnD,MAAM,KAAKoF,IAAI/F,IAC/C,MAAO,CAAC+D,OAAM7F,QAAQA,EAAQ6H,IAAIqM,IAAQ,EAQtCK,GAAiB3O,IACrB,MAAO4O,KAAahK,GAAe5E,EAAKnD,MAAM,KAAKoF,IAAI/F,IACvD,MAAO,CAAC0S,KAAU7O,QAAQ6E,EAAY3C,IAAIyM,IAAa,EAmBnDG,GAAoB7O,GACjBA,EAAKnD,MAAM,KAAKoF,IAAI/F,IAAMxF,OAAOmW,IAAK5K,KAAImM,GAb3B,CAACU,IACvB,MAAQC,EAAgBC,EAAsB,MAASF,EAAWjS,MAAM,KAAKoF,IAAI/F,IAC3E2E,EAAYmO,EAAsBA,EAAoBnS,MAAM,KAAKoF,IAAI/F,IAAQ,IAC5E+S,EAAkBC,GAAqBH,EAAelS,MAAM,KAAKoF,IAAI/F,KACpE0S,GAASO,EAAcpP,QAAQqP,GAAqBT,GAAcM,IAClEL,GAASS,EAAetP,QAAQuP,GAAsBX,GAAcO,GAC5E,MAAO,CAAEC,KAAcE,KAAeD,KAAkBE,KAAmBzO,IAAW,EAOhC0O,CAAgBnB,KAGlElO,GAAoC,CAAA,ECjD1C,MAEMsP,GAA8B5O,IAClBA,EACR6O,gBAJoB,YAIkB,EAO1CC,GAAsD,CAC1Dza,YAAaua,GACb5G,WAAa4G,GACb1G,UAAaD,EACbE,QAAaF,GCff,MAUM8G,GAAsC,CAC1C7G,KAX2BlI,IAC3B,MAAMgP,EAAW5X,SAAS6X,eAAe,IAEzC,OADAjP,EAAK2E,YAAYuK,aAAaF,EAAUhP,GACjCgP,CAAQ,EASf3a,iBAAa4T,EACbE,QAAaF,EACbD,gBAAaC,GCKf,MAAMkH,GACJ3G,SACA4G,GACAC,GACAC,GAAiD,IAAI/P,IACrD,WAAAhL,CAAYyL,GACVvL,KAAK+T,SAAW4E,GAAYpN,GAC5B,MAAMZ,ELSM,SAAgBoJ,EAAoBxI,GAClD,MAAMuP,EAAWvC,GAAkBxE,GAAUxI,IAAgB,GAC7D,MAAiB,SAAbwI,EAEK,eAAiB+G,EAEjBA,CAEX,CKjBiBC,CAAgB/a,KAAK+T,SAAUxI,IFEhC,SACdA,EACAwI,GAEOsG,GAA0BtG,KAAYxI,EAC/C,EEDIyP,CAHAzP,EDFY,SACdA,EACAwI,GAEA,OAAOuG,GAAkBvG,KAAYxI,IAASA,CAChD,CCHW0P,CAA2B1P,EAAMvL,KAAK+T,UAGf/T,KAAK+T,UAEnC/T,KAAK2a,GCzBH,SAA8BpP,GAClC,IAAI2P,EAAyB,GAC7B,KAA0B,OAApB3P,EAAK2E,YAETgL,EAAe,CADIha,MAAMC,KAAKoK,EAAK2E,WAAW9O,YAClBiR,QAAQ9G,MAAU2P,GAC9C3P,EAAOA,EAAK2E,WAEd,OAAOgL,CACT,CDiBoBC,CAAoB5P,GACpCvL,KAAK4a,GH4BH,SACJjQ,GAEA,MAAoB,KAAhBA,EAAK9D,OACA,GAEFgE,GAAMF,KAAUE,GAAMF,GAAQ6O,GAAiB7O,GACxD,CGnCqByQ,CAAczQ,GAG/B,IAAI,IAAIQ,EAAI,EAAGA,EAAInL,KAAK4a,GAAUlU,OAAQyE,IAAK,CAC7C,MAAM2P,EAAW9a,KAAK4a,GAAUzP,GAC1BkQ,EAA2B,CAC/BC,GAAoBnG,GAClB5J,EACAuP,EAAShB,GACTgB,EAASf,GACTe,EAAStP,GAEX8M,GAAoBF,GAClB0C,EAASd,GACTc,EAASb,KAGbja,KAAK6a,GAAczP,IAAI0P,EAAUO,EAClC,CACF,EElCG,SAAUE,GAAuBC,GACrC,MAAMC,EAAgB,GAChBC,EAAS/Y,SAASgZ,iBAAiBH,EAAMI,WAAWC,aAAeD,WAAWE,aAAc,CAChGC,WAAWxQ,GACDA,aAAgBiK,QACrBjK,EAAKyQ,aAAavM,GAAuBmM,WAAWK,cAAgBL,WAAWM,YAtBxF,SAAuB3Q,GACrB,OAAOA,aAAgB+J,UAC8B,IAAlD/J,EAAKrI,aAAamP,QAAQ3C,IAAoF,IAArDnE,EAAKrI,aAAamP,QAAQ1C,GAExF,CAmBWwM,CAAc5Q,GAAQqQ,WAAWK,cAAgBL,WAAWM,cAGrE,KAAOR,EAAOU,YACZX,EAAMpY,KAAKqY,EAAOW,aAEpB,OAAOZ,CACT,CC/BA,MAAMa,GAAmE,CAAA,EAEnEC,GAA+C,CAAA,EAE/CC,GAA2C,CAAA,EAEjD,SAASC,GAAkCC,GAEzC,OADcnB,GAAuBmB,GACxB9P,KAAIrB,GHmDb,SAAmCA,GACvC,OAAO,IAAImP,GAAmBnP,EAChC,CGrD2BoR,CAAyBpR,IACpD,CCOA,MAAMqR,GAAmD,CAAA,WAEzCC,GACdhT,EACAiT,EACAC,GCZI,IAA+BL,EDiBnC,OCjBmCA,EDcdI,EAASJ,QCb9Bxb,MAAMC,KAAKub,EAAQtb,YAAYI,SAAQ+J,IACjCA,EAAKwI,WAAaiJ,KAAKC,YAAe1R,EAAK2R,WAAa,IAAIrW,QAC9D6V,EAAQjb,YAAY8J,EACrB,IFWC,SACJ1B,EACA6S,EACAK,EAAkBlT,GAElB,MAAMsT,EAAqBV,GAAkCC,GACvDU,EAAQZ,GAAaO,KAAYP,GAAaO,GAAU,IAAIrR,KAC5D2R,EAAYd,GAAiBQ,KAAYR,GAAiBQ,GAAU,IAAIrR,KAC9E,IAAI,IAAIP,EAAI,EAAGA,EAAIgS,EAAmBzW,OAAQyE,IAAK,CACjD,MAAMmS,EAAYH,EAAmBhS,GACrC,IAAI,IAAIoS,EAAI,EAAGA,EAAID,EAAU1C,GAAUlU,OAAQ6W,IAAK,CAClD,MAAMzC,EAAWwC,EAAU1C,GAAU2C,GACrCH,EAAMjQ,IAAI2N,EAASd,IACW,QAA1Bc,EAAShB,IACXuD,EAAUlQ,IAAI2N,EAASd,GAE1B,CACF,CACMsC,GAA2BzS,GAAMsT,CAC1C,CCnBEK,CAA2B3T,EAAIiT,EAASJ,QAASK,GACjDH,GAAa/S,GAAMiT,EACZjT,CACT,CAEM,SAAU4O,GAAgB5O,GAC9B,OAAO+S,GAAa/S,IAAOE,EAAW,wCAAwCF,IAChF,CEfA,MAAM4T,GACJjP,GACAjD,KACA+C,GACAoP,GACA3R,GACA4R,QACA,WAAA7d,CACE0O,EACAjD,EACA+C,EACAgN,EACAhD,GAEAtY,KAAKwO,GAAoBA,EACzBxO,KAAKuL,KAAOA,EACZvL,KAAKsO,GAASA,EACdtO,KAAK0d,GAAcpC,EAAkBtb,KAAMuL,EAAM+C,EAAOsP,IACxD5d,KAAK+L,GAAeuM,EAAmBtY,KAAMsO,EAAOuP,GAAevP,EAAOwP,GAC3E,CAED,MAAIrS,GACF,OAAOzL,KAAK0d,GAAYjS,EACzB,CAED,IAAAG,GACE5L,KAAK0d,GAAY9R,OACjB5L,KAAK+L,GAAaH,MACnB,CAED,CAAA/K,GACE,GAAIb,KAAK2d,UAAY3d,KAAKsO,GAAOS,GAAQ4O,QACvC,IACE3d,KAAK0d,GAAY7R,QAClB,CAAS,QACR7L,KAAK2d,QAAU3d,KAAKsO,GAAOS,GAAQ4O,OACpC,CAEJ,CAED,EAAAzJ,CAAiB4D,EAAwB1S,GACvC,OAAOpF,KAAK+L,GAAaD,GAAYgM,EAAY1S,EAClD,EAOG,SAAU2Y,GACdvP,EACAjD,EACA+C,EACAgN,EACAhD,GAEA,OAAO,IAAImF,GACTjP,EACAjD,EACA+C,EACAgN,EACAhD,EAEJ,CC3DA,MAAM0F,GACJjc,GACAqP,GACAsG,GACA5H,GACA,WAAAhQ,CACEiC,EACA8M,EACAiB,GAEA9P,MAAK+B,EAAQA,GAAQgI,EAAW,oBAChC/J,MAAKoR,EAAQ+F,GAAsBnX,MAAK+B,GACxC/B,MAAK0X,EAAgB,IAAIuG,QAAQpP,GACjC7O,MAAK8P,EAAeA,CACrB,CACD,QAAI/N,GACF,OAAO/B,MAAK+B,CACb,CACD,QAAIqP,GACF,OAAOpR,MAAKoR,CACb,CACD,MAAIvC,GACF,OAAO7O,MAAK0X,GAAeC,SAAW5N,EAAW,oBAClD,CACD,MAAI2N,GACF,OAAO1X,MAAK0X,GAAiB3N,EAAW,uBACzC,CACD,EAAA8G,CAAgBhC,GACd7O,MAAK0X,EAAgB,IAAIuG,QAAQpP,EAElC,CACD,EAAAmC,GACEhR,MAAK0X,EAAgB,IACtB,CACD,MAAI5H,GACF,OAAO9P,MAAK8P,CACb,CAEDoO,GACA,MAAIA,GACF,QAAuC,IAA5Ble,MAAKke,EAAoC,CAClD,IAAIC,EAAsCne,KAAK8P,GAC/C,KAAyB,OAAnBqO,GAAyB,CAC7B,GAAmC,OAA/BA,EAAe5P,IAAwB4P,EAAe5P,KAAgBvO,KAAM,CAC9EA,MAAKke,EAAqBC,EAAe5P,GACzC,KACD,CACD4P,EAAiBA,EAAeC,IAAe5P,IAAqB,IACrE,MACsC,IAA5BxO,MAAKke,IAAoCle,MAAKke,EAAqB,KAC/E,CACD,OAAOle,MAAKke,CACb,CAEDrT,GAA6C,CAAA,EAC7C,IAAA+M,CAAKhN,GACH,IAAI2D,EAAcvO,MAAK6K,EAAOD,GAC9B,QAA2B,IAAhB2D,EAA6B,CACtC,IAAIE,EAA0CzO,KAC9C,KAA6B,OAAvByO,GACAA,EAAmB1M,OAAS6I,GAChC6D,EAAqBA,EAAmByP,GAE1C3P,EAAcvO,MAAK6K,EAAOD,GAAQ6D,CACnC,CACD,OAAOF,CACR,CAED,EAAA8P,CAAKC,GACH,IAAI7P,EAA0CzO,KAC9C,KAA6B,OAAvByO,GACJ6P,EAAS7P,GACTA,EAAqBA,EAAmByP,EAE3C,CAED,EAAAvP,GACE,MAAM4P,EAA0B,GAIhC,OAHAve,KAAKqe,IAAM9P,IACTgQ,EAAQC,QAAQjQ,EAAY,IAEvBgQ,CACR,EC1FG,SAAU1d,GAAO8T,GACrB,MAAM8J,EAA4B,GAClC,IAAI,IAAItT,EAAI,EAAGA,EAAIwJ,EAASjO,OAAQyE,IAAK,CACvC,MAAMG,EAAUqJ,EAASxJ,GACrBG,EAAQoS,GAAYtR,GACtBqS,EAA0Bpb,KAAKiI,GAE/BA,EAAQzK,GAEX,CACD,IAAI,IAAIsK,EAAI,EAAGA,EAAIsT,EAA0B/X,OAAQyE,IACnDsT,EAA0BtT,GAAGtK,GAEjC,CCXA,SAAS6d,GACP5O,EACAjG,EACAyE,EACAoO,GAEA,MAAMiC,EN4BiC,CAAC9U,GACjCyS,GAA2BzS,GM7Bf+U,CAA0B/U,IAC3CE,EAAW,qCACP4K,EAAuB,GAC7B,IAAI,IAAIxJ,EAAI,EAAGA,EAAIwT,EAAWjY,OAAQyE,IAAK,CACzC,MAAMmS,EAAYqB,EAAWxT,GACvBI,GChB0BiQ,EDgBCkB,EAASY,EAAU3C,GCf1CkE,QAAO,CAACtT,EAAM/I,IAAU+I,GAAMnK,WAAWoB,IAAU,MAAMgZ,IDgBjEzR,EAAW,mCAAmCuT,EAAU3C,OAC1D,IAAI,IAAI4C,EAAI,EAAGA,EAAID,EAAU1C,GAAUlU,OAAQ6W,IAAK,CAClD,MAAMzC,EAAWwC,EAAU1C,GAAU2C,GAC/BlC,EAAUiC,EAAUzC,GAAc3P,IAAI4P,IAC1C/Q,EAAW,sCAAsC+Q,KAC7CxP,EAAUyS,GACdjO,EACAvE,EACA+C,EACA+M,EAAQC,GACRD,EAAQ/C,IAEV3D,EAAStR,KAAKiI,EACf,CACF,CC/Ba,IAAoBkQ,EDgClC,OAAO7G,CACT,CAoBA,MAAMmK,GACJvQ,GACA6P,GACAhd,WACA2d,SACAzQ,GACAzE,GACA,MAAIA,GACF,OAAO7J,MAAK6J,CACb,CACD,MAAImV,GACF,OAAOhf,KAAKoB,WAAWsF,OAAS,GAAK1G,KAAKoB,WAAW,GAAG8O,aAAelQ,KAAK+e,QAC7E,CACD,MAAIlN,GACF,OAAO7R,KAAKoB,WAAW,IAAM,IAC9B,CACD,MAAI8Q,GACF,OAAOlS,KAAKoB,WAAWpB,KAAKoB,WAAWsF,OAAS,IAAM,IACvD,CACD,EAAAkL,CAAY1B,GACV,MAAM+O,EAAcjf,KAAK2U,GAAS3U,KAAK2U,GAASjO,OAAS,GACnDwL,EAAgBlS,KAAKkS,GAC3B,GAAI+M,EAAY1T,OAAS2G,GACnB+M,EAAYxT,GAAayT,KAAO,EAAG,CACrC,MACMvN,GADmBzQ,MAAMC,KAAK8d,EAAYxT,IAAc0T,IAAI,IAAMpV,EAAW,+CACjD6H,GAAY1B,GAC9C,GAAiB,OAAbyB,EACF,OAAOA,CAEV,CAEH,OAAIzB,IAAegC,GAAehC,WACzB,KAEFgC,CACR,CACDzD,GACA,MAAIA,GACF,QAAwC,IAA7BzO,MAAKyO,EAAqC,CACnD,IAAIqB,EAAmC9P,KACvC,KAAsB,OAAhB8P,GAC4B,OAA5BA,EAAYvB,IAChBuB,EAAcA,EAAYsO,IAAe5P,IAAqB,KAEhExO,MAAKyO,EAAsBqB,GAAavB,IAAe,IACxD,CACD,OAAOvO,MAAKyO,CACb,CACD,WAAA3O,CACEse,EACAvU,EACAyE,EACAC,EACAM,GAEA7O,KAAKoe,GAAgBA,EACrBpe,MAAK6J,EAAMA,EACX7J,KAAK+e,SA/GT,SAAuBlV,GACrB,MAAMiT,EAAWrE,GAAgB5O,IAC/BE,EAAW,uCAAuCF,KACpD,OAAOlH,SAASyc,WAAWtC,EAASJ,SAAS,EAC/C,CA2GoB2C,CAAcxV,GAC9B7J,KAAKoB,WAAaF,MAAMC,KAAKnB,KAAK+e,SAAS3d,YAC3CpB,KAAKsO,GAASA,EACdtO,KAAKuO,GAA6B,OAAdM,WFbtBiC,EACAjC,EACAiB,GAEA,OAAO,IAAIkO,GAAYlN,EAASjC,EAAWiB,EAC7C,CEQ8CwP,CAAkB/Q,EAAaM,EAAW7O,MAAQ,KAC5FA,KAAK2U,GAAW+J,GACd1e,KACA6J,EACAyE,EACAtO,KAAK+e,SAER,CACD,KAAAQ,CAAMrP,GACJ,GAAwC,IAApClQ,KAAK+e,SAAS3d,WAAWsF,OAC3B,IAAI,IAAIyE,EAAI,EAAGA,EAAInL,KAAKoB,WAAWsF,OAAQyE,IACzC+E,EAAWlN,YAAYhD,KAAKoB,WAAW+J,SAGzC+E,EAAWlN,YAAYhD,KAAK+e,SAE/B,CACD,EAAAS,CAAYtP,EAAkBuP,GAC5B,GAAwC,IAApCzf,KAAK+e,SAAS3d,WAAWsF,OAC3B,IAAI,IAAIyE,EAAI,EAAGA,EAAInL,KAAKoB,WAAWsF,OAAQyE,IACzC+E,EAAWwP,aAAa1f,KAAKoB,WAAW+J,GAAIsU,QAG9CvP,EAAWwP,aAAa1f,KAAK+e,SAAUU,EAE1C,CACD,EAAAtP,CAAWD,EAAkByP,GAC3B,MAAMF,EAAaE,GAAWvP,aAAe,KAC7C,GAAwC,IAApCpQ,KAAK+e,SAAS3d,WAAWsF,OAC3B,IAAI,IAAIyE,EAAI,EAAGA,EAAInL,KAAKoB,WAAWsF,OAAQyE,IACzC+E,EAAWwP,aAAa1f,KAAKoB,WAAW+J,GAAIsU,QAG9CvP,EAAWwP,aAAa1f,KAAK+e,SAAUU,EAE1C,CACD,OAAApP,GACE,IAAI,IAAIlF,EAAI,EAAGA,EAAInL,KAAKoB,WAAWsF,OAAQyE,IACzCnL,KAAK+e,SAAS/b,YAAYhD,KAAKoB,WAAW+J,GAE7C,CACDwJ,GAAuB,GACvB,CAAA9T,GACEA,GAAOb,KAAK2U,GACb,CACD,IAAA/I,GACE5L,KAAK2U,GAASnT,SAAQ8J,GAAWA,EAAQM,QAC1C,CACD,EAAAiF,CAAgBhC,GACU,MAApB7O,KAAKuO,IAAqBxE,EAAW,oCACzC/J,KAAKuO,GAAYsC,GAAgBhC,GACjC7O,KAAK4L,MACN,EAGG,SAAUqE,GACdmO,EACAvU,EACAyE,EACAC,EACAM,GAEA,MAAMiB,EAAc,IAAIgP,GACtBV,EACAvU,EACAyE,EACAC,EACAM,GAGF,OADAiB,EAAYlE,OACLkE,CACT,CEjLgB,SAAA8P,GAAoBxO,EAA2BkC,GAC7D,MAAO,GAAGlC,EAAKN,WAAWwC,GAC5B,CAEA,MAAMzI,GAAwC,CAAA,ECD9C,MAAMgV,GACJvR,GACAwR,GACAC,GAAsB,IAAIrU,IAC1B,WAAA5L,CACEwO,EACAwR,GAEA9f,KAAKsO,GAASA,EACdtO,KAAK8f,GAAWA,CACjB,CAED,EAAAE,CACE5O,EACAkC,EACAgL,GAEA,MAAM/b,EAAMqd,GAAoBxO,EAAMkC,GACtC,GAAItT,KAAK+f,GAAOvI,IAAIjV,GAClB,OAEFvC,KAAK+f,GAAO5S,IAAI5K,GAChB+b,EAASte,KAAK8f,GAAU1O,EAAMkC,GAC9B,MAAM2M,EAAQjgB,KAAKsO,GAAO4R,GAAchV,IAAIkG,IAAS,GACrD,IAAI,MAAM+O,KAAQF,EAAO,CACvB,MAAMG,EAA8B,eAAdD,EAAK7M,KAAwBA,EAAO6M,EAAK7M,KAC/DtT,KAAKggB,GAAQG,EAAK/O,KAAMgP,EAAe9B,EACxC,CAEF,CACD,EAAAD,CACEC,GAGAte,KAAKggB,GAAQhgB,KAAK8f,GAAS1O,KAAM,aAAckN,EAChD,EAIa,SAAA+B,GACd/R,EACAwR,GAEA,OAAO,IAAID,GAAiBvR,EAAQwR,EACtC,CC9CA,MAAMQ,GACJvK,UAAoB,EACpBlM,KAA6ByW,GAAUzW,GACvC0W,GAAsC,KACtC,MAAIA,GACF,OAAOvgB,MAAKugB,CACb,CACD/d,MACA,MAAIkM,GACF,MAAMA,EAAU1O,KAAKugB,IAAiB7R,IAAW,GAEjD,OADAA,EAAQrL,KAAKrD,KAAKwC,OACXkM,CACR,CAED,YAAI8R,GACF,OAAQxgB,KAAKugB,IAAiBC,WAAa,GAAK,CACjD,CAED,UAAI9Z,GACF,OAAQ1G,KAAKugB,IAAiB7Z,QAAU,GAAK,CAC9C,CAED,WAAA5G,CACEygB,EACA/d,GAEAxC,MAAKugB,EAAmBA,EACxBvgB,KAAKwC,MAAQA,CACd,CAED,QAAAie,CAAS/Z,GACP,IAAImI,EAA+B7O,KACnC,KAAoB,OAAd6O,GAAoB,CACxB,GAAIA,EAAU2R,SAAW9Z,EAAQ,OAAOmI,EACxCA,EAAYA,EAAU0R,EACvB,CACD,OAAO,IACR,CACD,GAAApT,CAAI/H,GACF,OAAO,IAAIkb,GAAUtgB,KAAMoF,EAC5B,CAED,GAACsb,SACO1gB,KACuB,OAAzBA,KAAKugB,WACAvgB,KAAKugB,GAAgBG,KAG/B,CAED,SAACC,GAC8B,OAAzB3gB,KAAKugB,WACAvgB,KAAKugB,GAAgBI,kBAExB3gB,IAEP,CAED,QAAAoG,GACE,MAAMma,EAAkBvgB,KAAKugB,IAAiBna,WAC9C,OAA4B,OAApBma,EAA4BA,EAAkB,IAAMvgB,KAAKwC,MAAM4D,WAAapG,KAAKwC,MAAM4D,UAChG,CAEDwa,GAAuD,CAAA,EACvD,EAAAzB,CAAGqB,GACD,MAAMpb,EAAQpF,MAAK4gB,EAASJ,GAC5B,QAAchN,IAAVpO,EACF,OAAOA,EAASA,EAAMuS,SAAW,KAAQ,KAE3C,IAAIgJ,EAOAE,EACJ,IAPIL,GAAY,EACdG,EAAW3gB,KAAK2gB,YAEhBH,GAAaA,EAAW,EACxBG,EAAW3gB,KAAK0gB,MAGZF,GAAY,GAChBK,EAAOF,EAASE,OAChBL,IAEF,MAAMM,EAAWD,GAAMzb,OAAS,KAEhC,OADApF,MAAK4gB,EAASJ,GAAYM,EAAW,IAAI7C,QAAQ6C,GAAY,KACtDA,CACR,EAIa,SAAAC,GACdR,EACA/d,GAEA,OAAO,IAAI8d,GAAUC,EAAiB/d,EACxC,CC9FA,SAASwe,GACP1S,EACA8C,EACAvC,EACAyP,GAEA,MAAM2C,EAAepS,GAAWnI,QAAU,EAC1C,GAAI0K,EAAK2F,KAAkBkK,EACzB3C,EAASlN,EAAMvC,OACV,CACL,MAAMiI,EAAa1F,EAAKqF,GAAoBwK,IAAiBlX,EAAW,+BAClEmC,EAAcoC,EAAO6C,GAAkB2F,EAAYjI,GACzD,IAAI,MAAMqS,KAAgBhV,GAAe,GACvC8U,GAAc1S,EAAQ8C,EAAM8P,EAAc5C,EAE7C,CACH,CAEM,SAAU6C,GACd7S,EACA8C,EACAvC,EACAyP,GAEA0C,GAAc1S,EAAQ8C,EAAMvC,EAAWyP,EACzC,CC5BgB,SAAA8C,GACdhQ,EACAvC,GAEA,OAAOuC,EAAKvH,GAAK,KAAOgF,GAAWhF,IAAM,EAC3C,CCSA,MAAMwX,GAAwB,IAAI3V,IAElC,SAAS4V,GACPhT,EACA8C,EACAvC,EACAzJ,GAEA,MAAM+M,EAAW7D,EAAOyD,GAAQX,EAAMvC,IAAc,GACpD,GAAIsD,IAAa/M,EACf,OAEF,MAAMmc,EAAoC,IAAI7V,IACxC8V,EAAoBlT,EAAO6C,GAAkBC,EAAMvC,IAAcwS,GACjEI,EAAuB3W,IAAI4W,QAAQF,GAAmB3S,GAAasD,EAAStD,EAAUrM,SAC5F,IAAI,IAAI2I,EAAI,EAAGA,EAAI/F,EAAMsB,OAAQyE,IAAK,CAGpC,IAAIwW,EAAeF,EAAqBvW,IAAI9F,EAAM+F,KAAKyW,SAAWb,GAAgBlS,EAAW1D,GACzFwW,EAAanf,QAAU2I,IACzBwW,EAAanf,MAAQ2I,EAErBmD,EAAOS,GAAQ8S,GAAoBF,IAGrCJ,EAAkBpU,IAAIwU,EACvB,CAEDrT,EAAOwT,GAAmB1Q,EAAMvC,EAAW0S,GAC3CjT,EAAOiE,GAASnB,EAAMvC,EAAWzJ,EAAMwB,MAAM,GAE/C,CAEM,SAAUmb,GACdC,EACA1T,EACA2T,EACAC,EACArX,GAEA,IAAI,MAAMuG,KAACA,EAAI+Q,GAAEtT,KAAcmT,EAAO,CACpC,GAAI1d,EAAOH,GAAwBmK,EAAO8T,GAAe5K,IAAIpG,GAE3D,SAEF,MAAMiR,EAAkBhC,GAAuB/R,EAAQ,CAAC8C,OAAMvC,OACxDyT,EAAYhe,EAAOJ,GAAgBoK,EAAOiU,GAAY/K,IAAIpG,GAChEiR,EAAgBhE,IAAK,CAACmE,EAAKC,EAASnP,KAClC,GAAIgP,GAAsB,eAAThP,GAAyBkP,EAAIpR,OAASqR,GACjDA,EAAQrM,GAAkBoB,IAAIgL,EAAIpR,MACpC,OAGJ,MAAMsR,EAAqBxhB,MAAMC,KAAKqhB,EAAIpR,KAAKmF,GAAgBoM,aAAaF,EAAQlM,KAC9EqM,GAAkBF,EAAmBvD,IAAI,IAAIpI,IAAiB,GAAK,EACnElI,EAAa+T,GAAkB,EAAMJ,EAAI3T,IAAWsQ,GAAGyD,IAAmB,KAAQ,KACxFzB,GAAW7S,EAAQmU,EAAS5T,GAAW,CAACgU,EAAOC,KAC7C,IAAKxU,EAAOyU,GAAqBF,GAC/B,OAEF,MAAMG,EAAS5B,GAAayB,EAAOC,GACnC,GAAIZ,EAAQ1K,IAAIwL,GACd,OAEF,IAAIC,EAAoBpY,EAAMK,IAAI2X,GAOlC,GANKI,IACHA,EAAoB,IAAIvX,IACxBb,EAAMO,IAAIyX,EAAOI,IAEnBA,EAAkB9V,IAAI2V,GACtBZ,EAAQ/U,IAAI6V,GACR1U,EAAOiU,GAAY/K,IAAIqL,GAAQ,CACjC,MAAM1W,EAAS8V,EAAae,IAAW1U,EAAOuP,GAAcvQ,GAAgBuV,EAAOC,GACnFxB,GAAmBhT,EAAQuU,EAAOC,EAAY3W,EAC/C,IACD,GAEL,CACH,CC1EA,MAAM+W,GACJC,GAAyD,IAAIzX,IAC7D0X,GAAyC,CAAA,EACzC9U,GACAqP,GAA4B,EAE5B,WAAA7d,CAAYwO,GACVtO,KAAKsO,GAASA,CACf,CAED,WAAIqP,GACF,OAAO3d,MAAK2d,CACb,CAED,EAAA3O,CAAWqU,GACTC,eAAeD,EAChB,CAED,EAAAE,CACEnS,EACAvC,EACAzJ,GAEA,MAAM4d,EAAS5B,GAAahQ,EAAMvC,GAClC7O,KAAKmjB,GAAkBhW,IAAI,CAACiE,OAAMvC,OAClC7O,KAAKojB,GAAcJ,GAAU5d,EAC7BpF,KAAKwjB,IACN,CAED,EAAA3B,CAAoBhT,GAClB7O,KAAKmjB,GAAkBhW,IAAI0B,GAC3B7O,KAAKwjB,IACN,CAEDC,IAAiB,EACjB,EAAAD,GACMxjB,MAAKyjB,IACTzjB,MAAKyjB,GAAiB,EACtBC,YAAW,KACT,IACE,MAAMC,GAAEhP,EAAQiP,GAAEC,GAAyB7jB,KAAK8jB,KAEhD,IAAI,MAAMC,KAAuBF,EAC/BE,EAAoBzY,QAAQoS,GAAYzR,GAAe8X,EAAoB7X,GAAa6X,EAAoB5X,QAE1GwI,EAASjO,OAAS,GACpB1G,KAAKa,EAAO8T,EAEf,CAAS,QACR3U,MAAKyjB,GAAiB,CACvB,IACA,GACJ,CAED,EAAAK,GACE,MAAME,EAAwD,GACxDC,EAA0B,GAC1B3V,EAAStO,KAAKsO,GACpB,KAAMtO,KAAKmjB,GAAkBjE,KAAO,GAAG,CACrC,MAAMgF,EAAqBhjB,MAAMC,KAAKnB,KAAKmjB,GAAkBhX,UAC7DnM,KAAKmjB,GAAkBgB,QACvB,MAAMjM,EAAkC,GAClCkM,EAAmC,GACnCC,EAAoC,IAAIvZ,IAC9C,IAAI,IAAIK,EAAI,EAAGA,EAAI+Y,EAAmBxd,OAAQyE,IAAK,CACjD,MAAMmZ,EAAOJ,EAAmB/Y,GAChC,GAAI,UAAWmZ,EAAM,CACnB,MAAM3P,EAAWrG,EAAO4J,GAAoBhN,IAAIoZ,IAAuB,GACvEpM,EAAoB7U,QAAQsR,EAC7B,MAEC,GADAyP,EAAY/gB,KAAKihB,GACbhW,EAAO8T,GAAe5K,IAAI8M,EAAKlT,MAAO,CACxC,MAAM0F,EAAawN,EAAKlT,KAAK0F,IAAc/M,EAAW,gBAChDwW,EAAkB+D,EAAKzV,IAAWsQ,IAAI,IAAM,KAC5CoF,EAAY,CAACnT,KAAM0F,EAAYjI,GAAW0R,GAC1CiE,EAAepD,GAAatK,EAAYyJ,GAC9C,IAAInP,EAAOiT,EAAkCnZ,IAAIsZ,GAC5CpT,IACHA,EAAO,CACLmT,KACArY,GAAa,GACbC,OAAQ,IAEVkY,EAAkCjZ,IAAIoZ,EAAcpT,IAEtD,MAAM4R,EAAS5B,GAAakD,EAAKlT,KAAMkT,EAAKzV,IACtCzJ,EAAQpF,KAAKojB,GAAcJ,IAAW,KAC5C5R,EAAKjF,QAAQ9I,KAAK+B,GAClBgM,EAAKlF,IAAa7I,KAAKihB,EAAKzV,GAC7B,CAEJ,CAED,MAAM4V,EAA8B,IAAI/Y,IAClCgZ,EAAe,IAAI5Z,IACzBiX,GAAoBqC,EAAa9V,EAAQtO,KAAKojB,GAAeqB,EAA6BC,GAG1F,IAAI,MAAOF,EAAcpT,KAASiT,EAAmC,CACnE,MAAMvN,EAAa1F,EAAKmT,IAAWnT,MAAQrH,EAAW,sBAChDwW,EAAkBnP,EAAKmT,IAAW1V,IAAa,KAC/C8F,EAAWrG,EAAOqW,GAAY7N,EAAYyJ,GAChD,IAAI,MAAMjV,KAAWqJ,EAAU,CAC7B,IAAKrJ,EAAQoS,GAAYpR,GACvB,SAEF,MAAMsY,EAAcC,OAAOC,OAAO,CAAE,EAAE1T,EAAM,CAAE9F,YAC9C0Y,EAAwB3gB,KAAKuhB,EAC9B,CACF,CAED,IAAI,MAAQxT,EAAMlF,KAAiBwY,EAAaK,UAC9C,IAAI,MAAMlW,KAAa3C,EAAa,CAClC,MAAMyI,EAAWrG,EAAOqW,GAAYvT,EAAMvC,GAC1CoV,EAAY5gB,QAAQsR,GAAY,GACjC,CAEHsP,EAAY5gB,QAAQ6U,EACrB,CAED,OADAlY,KAAKojB,GAAgB,GACd,CAACzO,GAAUsP,EAAaJ,GAAsBG,EACtD,CAED,CAAAnjB,CAAO8T,GACL3U,MAAK2d,IACL3d,KAAKsO,GAAOuP,GAAcnQ,IAAoB,IACrC7M,GAAO8T,IAEjB,WCxIaqQ,GAAatY,EAAsBpI,EAA0B+F,GACzE,GAAI/F,EAAOb,EACT,GAAuB,OAAnBa,EAAO2gB,ICpBX,SAA4BpjB,GAChC,IAIE,MAAuC,mBAFvBc,SAASC,cAAcf,GAEjBmjB,YACvB,CAAC,MAEA,OAAO,CACR,CACH,CDUqCE,CAAkB5gB,EAAO2gB,IAAU,CAC7CvY,EAAQsY,aAAa,CAAEG,KAAM,SACrCC,mBAAqB,CAAC/a,EAClC,MACCN,EAAW,gFAAgFzF,EAAO2gB,UAE/F,CACL,MAAMI,EAhCZ,SAA6BnV,GAC3B,IAAI3E,EAAoB2E,EACxB,KAAM3E,GAAM,CACV,GAAIA,aAAgB+Z,WAClB,OAAO/Z,EAETA,EAAOA,EAAK2E,UACb,CACH,CAwBmCqV,CAAoB7Y,EAAQwD,aAAevN,SAClE6iB,EAAcH,EAAqBD,mBACpCI,EAAY1Y,SAASzC,KACxBgb,EAAqBD,mBAAqB,IAAII,EAAanb,GAE9D,CAEL,CErCA,MAAMgX,GAAwB,IAAI3V,IAElC,SAAS+Z,GACPnX,EACAoX,EACAtU,EACAvC,EACAzJ,GAEA,MAAM+M,EAAW7D,EAAOyD,GAAQX,EAAMvC,IAAc,GACpD,GAAIsD,IAAa/M,EACf,OAEF,MAAMmc,EAAoC,IAAI7V,IACxC8V,EAAoBlT,EAAO6C,GAAkBC,EAAMvC,IAAcwS,GACjEI,EAAuB3W,IAAI4W,QAAQF,GAAmB3S,GAAasD,EAAStD,EAAUrM,SAC5F,IAAI,IAAI2I,EAAI,EAAGA,EAAI/F,EAAMsB,OAAQyE,IAAK,CAGpC,IAAIwW,EAAeF,EAAqBvW,IAAI9F,EAAM+F,KAAKyW,SAAWb,GAAgBlS,EAAW1D,GACzFwW,EAAanf,QAAU2I,IACzBwW,EAAanf,MAAQ2I,EAErBmD,EAAOS,GAAQ8S,GAAoBF,IAGrCJ,EAAkBpU,IAAIwU,EACvB,CAEDrT,EAAOwT,GAAmB1Q,EAAMvC,EAAW0S,GAC3CjT,EAAOiE,GAASnB,EAAMvC,EAAWzJ,EAAMwB,MAAM,IAG7C,MAAM+e,EAAavU,EAAKN,QAAU,KAClC,IAAI,MAAMM,KAAQsU,EAChB,GAAIC,IAAevU,EAAKuF,GAGxB,IAAI,MAAMuK,KAAgBK,EAAmB,CAC3C,MAAMqE,EAAWtX,EAAOuP,GAAcvQ,GAAgB8D,EAAM8P,GAC5DuE,GACEnX,EACAoX,EACAtU,EACA8P,EACA0E,GAAY,GAEf,CAEL,CAGM,SAAUtE,GACdhT,EACA8C,EACAvC,EACAzJ,GAIA,GAFkBkJ,EAAOiU,IAEpBjU,EAAOiU,GAAY/K,IAAIpG,GAC1B,OAEF,MAAMjF,EAAU/G,GAAS,GACzBqgB,GACEnX,EACAA,EAAOiU,GACPnR,EACAvC,EACA1C,EAEJ,CCnCA,SAAS0Z,GACPC,EACA1U,EACAvC,EACAkX,EACA1X,GAGA,GAAiC,MAA7BA,EAAQ2X,IAA6B3X,EAAQ2X,KAAsB5U,EAAM,CAC3E,MAAM6U,EAAc5X,EAAQ2X,GACxBC,EAAYnP,KAAe1F,GAC7B/C,EAAQC,GAAO4X,GAAiBD,EAAa7U,EAAM,YAEtD,CAGD,IAYIhM,EAZA4d,EAAS,GACb,GAAI3U,EAAQ8X,GAAW,CACrBnD,EAAS5B,GAAahQ,EAAMvC,GAC5B,MAAMzJ,EAAQiJ,EAAQxD,MAAMmY,GAC5B,QAAqB,IAAV5d,EACT,OAAOA,EAET,GAAI4d,KAAU3U,EAAQxD,MACpB,MAEH,CAGD,IAEE,GAAIuG,EAAKN,WAAWgV,EAClB,OAAQ1gB,EAAQ2gB,EAAShY,GAA2BqD,EAAMvC,GAAW,IAC5DO,QAAQlE,IAAI4a,EAAQ1U,EAAKN,QAASiV,KAEtC,CAEL,MAAMjP,EAAa1F,EAAK0F,IAAc/M,EAAW,6CAC3CwW,EAAkBzJ,EAAWC,GAAgB3F,EAAK2F,GAAiBlI,GAAW0R,IAAmB,KAAQ1R,EACzGuX,EAAcC,GAASP,EAAQhP,EAAYyJ,EAAiBwF,EAAU1X,GACtE4H,EAAc7E,EAAK6E,GACzB,GAAoB,MAAhBA,EAAqB,CAEvB,MAAMzT,EAAQqM,GAAWrM,OAASuH,EAAW,yCAC7C,OAAQ3E,EAAQgK,QAAQlE,IAAIkb,EAAa5jB,EAC1C,CAEC,OAAQ4C,EAAQgK,QAAQlE,IAAIkb,EAAanQ,EAE5C,CACF,CAAS,QAEJ5H,EAAQ8X,MAAenD,KAAU3U,EAAQxD,SAC3CwD,EAAQxD,MAAMmY,GAAU5d,EAE3B,CACH,CAMM,SAAUihB,GACdP,EACA1U,EACAvC,EACAkX,EACA1X,GAEA,OAAIA,EAAQC,GAAOgY,GAAe9O,IAAIpG,EAAKN,kBC5FjBM,EAA2B/C,EAAwBiQ,GAC7EjQ,EAAQkY,GAAcljB,KAAK+N,GAC3B/C,EAAQ2X,GAAoB5U,EAC5B,IACE,OAAOkN,GACR,CAAS,QACRjQ,EAAQkY,GAAcC,MACtBnY,EAAQ2X,GAAoB3X,EAAQkY,GAAclY,EAAQkY,GAAc7f,OAAS,IAAM,IACxF,CACH,CDoFW+f,CAAYrV,EAAM/C,GAAS,IACzBwX,GAAUC,EAAQ1U,EAAMvC,EAAWkX,EAAU1X,KAG/CwX,GAAUC,EAAQ1U,EAAMvC,EAAWkX,EAAU1X,EAGxD,CEnGM,SAAUgY,GACdP,EACAY,EACAX,EACA1X,GAEA,MAAO,CAACyC,EAA8BjC,IACpC8X,GAAeb,EAAQhV,EAASjC,EAAWkX,EAAU1X,EACzD,CCXM,SAAUuY,GACdd,EACAY,EACAX,EACA1X,GAEA,OAAQiQ,KCNM,SAAajQ,EAAwBiQ,GACnDjQ,EAAQ8X,IAAY,EACpB9X,EAAQxD,MAAQ,GAChB,IACEyT,GACD,CAAS,QACRjQ,EAAQ8X,IAAY,CACrB,CACH,CDDIU,CAAoBxY,EAASiQ,EAAS,CAE1C,CEPM,SAAUne,GACd2lB,EACAY,EACAX,EACA1X,GAEA,OAAOY,UACL,MAAMqP,EAAWlP,QAAQlE,IAAI4a,EATN,sBAUC,mBAAbxH,SACHA,EAASwI,KAAKhB,EAAQC,EAC7B,CAEL,CCZM,SAAUtlB,GACdqlB,EACAY,EACAX,EACA1X,GAEA,OAAOY,UACL,MAAMqP,EAAWlP,QAAQlE,IAAI4a,EATH,yBAUF,mBAAbxH,SACHA,EAASwI,KAAKhB,EAAQC,EAC7B,CAEL,CCPgB,SAAAgB,GACZjB,EACA1U,EACAvC,EACAzJ,EACA2gB,EACA1X,GAEF,IACE,GAAI+C,EAAKN,WAAWgV,EAClB,OAAI1U,EAAK2F,GAAgB,GACL,OAAdlI,GACF9E,EAAW,6BAENgc,EAAShY,GAA2BqD,EAAMvC,GAAW,IACnDO,QAAQhE,IAAI0a,EAAQ1U,EAAKN,QAAS1L,EAAO2gB,MAG3C3W,QAAQhE,IAAI0a,EAAQ1U,EAAKN,QAAS1L,EAAO2gB,GAE7C,CACL,MAAMjP,EAAa1F,EAAK0F,IAAc/M,EAAW,6CAC3CwW,EAAkBzJ,EAAWC,GAAgB3F,EAAK2F,GAAiBlI,GAAW0R,IAAmB,KAAQ1R,EACzGuX,EAAcC,GAASP,EAAQhP,EAAYyJ,EAAiBwF,EAAU1X,GACtE4H,EAAc7E,EAAK6E,GACzB,GAAoB,MAAhBA,EAAqB,CACvB,MAAMzT,EAAQqM,GAAWrM,OAASuH,EAAW,yCAC7C,OAAOqF,QAAQhE,IAAIgb,EAAa5jB,EAAO4C,EACxC,CACC,OAAOgK,QAAQhE,IAAIgb,EAAanQ,EAAa7Q,EAEhD,CACF,CAAS,QACRiJ,EAAQC,GAAOS,GAAQwU,GAAgCnS,EAAMvC,EAAWzJ,EACzE,CACH,CCnCM,SAAU4hB,GACdlB,EACAY,EACAX,EACA1X,GAEA,MAAO,CAACtM,EAAc2M,EAAmBtJ,KACvC,MAAMgM,EAAO+F,GAAsBpV,GACnC,IAAI8M,EAA+B,KACnC,IAAI,IAAI1D,EAAI,EAAGA,EAAIiG,EAAKqF,GAAoB/P,OAAQyE,IAAK,CACvD,MAAM8b,EAAwB7V,EAAKqF,GAAoBtL,IAAMpB,EAAW,8BAGxE8E,EAFkC3N,MAAMC,KAAKkN,EAAQC,GAAO6C,GAAkB8V,EAAuBpY,IAAc,IACrGH,EAAQvD,IAAMpB,EAAW,mBACLA,EAAW,wBAAwBkd,EAAsBnW,UAC5F,CACD,YAAqB,IAAV1L,EACFihB,GAASP,EAAQ1U,EAAMvC,EAAWkX,EAAU1X,GAE5C0Y,GAASjB,EAAQ1U,EAAMvC,EAAWzJ,EAAO2gB,EAAU1X,EAC3D,CAEL,CCnBM,SAAU6Y,GACdpB,EACAY,EACAX,EACA1X,GAEE,MAAM2Y,EAAUG,GAASrB,EAAQY,EAAMX,EAAU1X,GACjD,MAAO,CAACtM,EAAc2M,KACpB,MAAM0C,EAAO+F,GAAsBpV,GACnC,GAAiC,MAA7BsM,EAAQ2X,IAA6B3X,EAAQ2X,KAAsB5U,EAAM,CAC3E,MAAM6U,EAAc5X,EAAQ2X,GACxBC,EAAYnP,KAAe1F,GAC7B/C,EAAQC,GAAO4X,GAAiBD,EAAa7U,EAAM,YAEtD,CAED,QAAuB,IAAZ1C,EAAyB,CAClC,IAAI,IAAIvD,EAAI,EAAGA,EAAIiG,EAAKkF,GAAc5P,OAAQyE,IAAK,CACjD,MAAMic,EAAkBhW,EAAKkF,GAAcnL,IAAMpB,EAAW,2BACtD8E,EAAYkX,EAAS7X,GAA2BkZ,EAAgBtW,SACtE,GAAIjC,EAAW,CACbH,EAAUG,EAAUH,GACpB,KACD,CACF,MACsB,IAAZA,IACTA,EAAU,GAEb,CACD,MAAM2Y,EAAsB,CAC1B5Q,EACA6Q,EACAzY,EACAH,EACA6Y,EACAC,EACAjJ,KAEA,MAAM0I,EAAwBxQ,EAAoB6Q,IAAoB,KACtE,GAA8B,OAA1BL,EAEF,YADA1I,EAAQlb,KAAKmkB,GAGf,MAAMC,EAAepZ,EAAQC,GAAO6C,GAAkB8V,EAAuBpY,IAAc9E,EAAW,wBAAwBkd,EAAsBnW,WAC9I5E,EAAchL,MAAMC,KAAKsmB,GACzBjlB,EAAQkM,EAAQ6Y,IAAa,KACnC,GAAc,OAAV/kB,EACF,IAAI,IAAI2I,EAAI,EAAGA,EAAIe,EAAYxF,OAAQyE,IAAK,CAC1C,MAAM0D,EAAY3C,EAAYf,GAC9Bkc,EACE5Q,EACA6Q,EAAkB,EAClBzY,EACAH,EACA6Y,EAAW,EACXC,EAAcE,OAAO7Y,EAAUrM,OAC/B+b,EACH,KACI,CACL,MAAM1P,EAAY3C,EAAY1J,IAAUuH,EAAW,wBAAwBkd,EAAsBnW,WAC5FwW,EAAkB,EAAK7Q,EAAoB/P,QAC9C2gB,EACE5Q,EACA6Q,EAAkB,EAClBzY,EACAH,EACA6Y,EAAW,EACXC,EAAcE,OAAO7Y,EAAUrM,OAC/B+b,EAGL,GAEGoJ,EAA4B,GAClCN,EACEjW,EAAKqF,GACL,EACA,KACA/H,EACA,EACA,GACAiZ,GAEF,MAAMC,EAAsB,GAC5B,IAAI,IAAIzc,EAAI,EAAGA,EAAIwc,EAAcjhB,OAAQyE,IACvCyc,EAAavkB,KAAK2jB,EAChB5V,EAAKN,QACL6W,EAAcxc,KAGlB,OAAOyc,CAAY,CAEvB,CC5FF,MAAM9U,GAA8C,CAAA,EAGpD,MAAM+U,GACJ9R,UAAqB,EACrBlM,KAAOge,GAAiBhe,GACxBe,KACAkd,SACA1K,GACArG,GACAgR,GACAC,GACA5W,KACA,WAAAtR,CAAY8K,GACV,MAAMkd,EAAWld,EAAKpD,MAAM,KACtBygB,EAAqBH,EAASlhB,QAC9BwW,EAAQ,GACd,IAAI8K,EAAkB,EAClBC,EAAgB,EAChBC,EAAW,GACXrR,EAAgB,EAChBgR,EAA6B,OAC7BC,EAAqC,GACzC,IAAI,IAAI7c,EAAI,EAAGA,EAAI2c,EAASphB,OAAQyE,IAAK,CACvC,MAAMuB,EAAUob,EAAS3c,GACzB,GAAgB,MAAZuB,EACFub,EAAmB9c,GAAK,IACxB6c,EAAgB3kB,KAAK,MACrB6kB,IACAnR,QACK,CACL,MAAMxN,EAASrE,OAAOwH,GACjBxH,OAAOC,MAAMoE,KAChB0e,EAAmB9c,GAAK,IACxB6c,EAAgB3kB,KAAKkG,GACrB4e,IACApR,IAEH,CACDqR,GAAY1b,EACZ0Q,EAAM/Z,KAAK+kB,GACXA,GAAajd,EAAI2c,EAASphB,OAAS,EAAI,IAAM,EAC9C,CACD,MACM0K,EAAO+F,GADG8Q,EAAmBvgB,KAAK,OAEpCwgB,EAAkB,GAAKC,EAAgB,KAEvCJ,EADEG,IAAoBnR,EACP,UACNoR,IAAkBpR,EACZ,MAEA,WAGnB/W,KAAK4K,KAAOA,EACZ5K,KAAK8nB,SAAWA,EAChB9nB,KAAKod,GAAQA,EACbpd,KAAK+W,GAAgBA,EACrB/W,KAAK+nB,GAAeA,EACpB/nB,KAAKgoB,GAAkBA,EACvBhoB,KAAKoR,KAAOA,CACb,EAGG,SAAUiX,GAAoBzd,GAGlC,OAAOkI,GAAOlI,KAAUkI,GAAOlI,GAAQ,IAAIid,GAAiBjd,GAC9D,UCvEgB0d,GACdlX,EACA2U,EACA1X,GAEA,GAAgC,IAA5B+C,EAAKA,KAAK2F,GACZ,OAAO,KAET,IAAIlI,EAA+B,KACnC,MAAM8H,EAAmBvF,EAAKA,KAAKuF,IACjC5M,EAAW,4BACb,GAA0B,YAAtBqH,EAAK2W,GACPlZ,EAAYkX,EAAS7X,GAA2ByI,IAC9C5M,EAAW,wBAAwBqH,EAAKA,KAAKN,gBAC1C,GAA0B,QAAtBM,EAAK2W,GAAwB,CACtC,IAAIxH,EAAkB,KACtB,IAAI,IAAIpV,EAAI,EAAGA,EAAIiG,EAAKA,KAAK2F,GAAe5L,IAAK,CAC/C,MAAM8b,EAAwB7V,EAAKA,KAAKqF,GAAoBtL,IAAMpB,EAAW,iCAG7EwW,EAFkCrf,MAAMC,KAAKkN,EAAQC,GAAO6C,GAAkB8V,EAAuB1G,IAAoB,IACnGnP,EAAK4W,GAAgB7c,IAAMpB,EAAW,2BACZA,EAAW,wBAAwBkd,EAAsBnW,UAC1G,CACDjC,EAAY0R,CACb,KAAgC,YAAtBnP,EAAK2W,IAEL3W,EAAK2W,GAEhB,OAAOlZ,CACT,CCvBM,SAAU3D,GACd4a,EACAY,EACAX,EACA1X,GAEA,IAAIjJ,EACJ,GAAoB,iBAATshB,EAAmB,CAC5B,GAA2B,KAAvBA,EAAK6B,WAAW,GAAW,CAC7B,GAAoB,IAAhB7B,EAAKhgB,OAAc,CACrB,MAAM8hB,EAAI9B,EAAK6B,WAAW,GAAK,GAC/B,GAAIC,GAAK,GAAKA,GAAK,EAAG,CACpB,MAAMhG,EAAMuD,EAAS9X,MACnBlE,EAAW,0DACb,OAAOyY,EAAI3T,IAAWsQ,GAAGqJ,EAAI,IAAIhmB,OAASuH,EAAW,wBAAwB2c,IAC9E,CACF,CACD,GAAa,aAATA,EACF,OAAOM,GAAQlB,EAAQY,EAAMX,EAAU1X,GAClC,GAAa,YAATqY,EACT,OAAOQ,GAAOpB,EAAQY,EAAMX,EAAU1X,GACjC,GAAa,YAATqY,EACT,OtE8DChnB,CsE5DJ,CACD,MAAM+oB,EAAeJ,GAAoB3B,GACnC7X,EAAYyZ,GAAaG,EAAc1C,EAAU1X,GACvDjJ,EAAQihB,GACNP,EACA2C,EAAarX,KACbvC,EACAkX,EACA1X,EAGH,MAAM,GAAoB,iBAATqY,EAAmB,CACnC,GAAIA,KAAQrY,EAAQqa,GAClB,OAAOra,EAAQqa,GAAYhC,GAAMZ,EAAQY,EAAMX,EAAU1X,GAE3DjJ,EAAQgK,QAAQlE,IACd4a,EACAY,EACAX,EAEH,CACD,OAAO3gB,CACT,CCtDM,SAAUujB,GACd7C,EACAY,EACAX,EACA1X,GAEA,MAAO,CAAC+C,EAA2BvC,EAA8ByP,ICP7D,SACJjQ,EACA+C,EACAvC,EACAyP,GAEAjQ,EAAQua,GAAwBvlB,KAAK+N,GACrC/C,EAAQwa,GAAexlB,KAAKwL,GAC5B,IACE,OAAOyP,GACR,CAAS,QACRjQ,EAAQua,GAAwBpC,MAChCnY,EAAQwa,GAAerC,KACxB,CACH,CDNIsC,CAA0Bza,EAAS+C,EAAMvC,EAAWyP,EACxD,CEVM,SAAUyK,GACdjD,EACAY,EACAX,EACA1X,GAEA,MAAO,CAACE,EAAkC+P,ICDrCrP,eACLZ,EACAE,EACA+P,GAEIjQ,EAAQE,IACVxE,EAAW,2BAEbsE,EAAQE,GAAcA,EACtB,IACMA,QCHDU,eACLZ,EACA+C,EACAvC,EACAyP,GAEAjQ,EAAQua,GAAwBvlB,KAAK+N,GACrC/C,EAAQwa,GAAexlB,KAAKwL,GAC5B,UACQyP,GACP,CAAS,QACRjQ,EAAQua,GAAwBpC,MAChCnY,EAAQwa,GAAerC,KACxB,CACH,CDVYwC,CAAyB3a,EAASE,EAAY6C,KAAM7C,EAAYM,GAAWyP,SAE3EA,GAET,CAAS,QACRjQ,EAAQE,GAAc,IACvB,CACH,CDhBI0a,CAAqB5a,EAASE,EAAa+P,EAC/C,CGTM,SAAU4K,GACd7a,GAEA,GAA+C,IAA3CA,EAAQua,GAAwBliB,OAClC,OAAO,KAET,MAAM0K,EAAO/C,EAAQua,GAAwBva,EAAQua,GAAwBliB,OAAS,GACtF,QAAoB,IAAT0K,EACT,OAAO,KAET,MAAMvC,EAAYR,EAAQwa,GAAexa,EAAQwa,GAAeniB,OAAS,GACzE,YAAyB,IAAdmI,EACF,KAEF,CAACuC,OAAMvC,KAChB,CChBM,SAAUqa,GACdpD,EACAY,EACAX,EACA1X,GAEA,MAAO,IACL8a,GAA8B9a,EAClC,CCPM,SAAU+a,GACdtD,EACAY,EACAX,EACA1X,GAEA,OAAQkJ,GCFM,SACdlJ,EACAkJ,GAEA,MAAM8R,EAAUH,GAAwB7a,GACxC,GAAgB,OAAZgb,EACF,OAAO,KAET,MACM7mB,EADO6mB,EAAQjY,KACFiF,GAAchE,QAAQkF,GACzC,OAAI/U,GAAS,EACJ6mB,EAAQxa,IAAWsQ,GAAG3c,IAAU,KAElC,IACT,CDXI8mB,CAA0Bjb,EAASkJ,EACvC,CEWA,IAAAgS,GAAA,MACEjb,GACA6X,IAAqB,EACrBtb,MAAgC,CAAA,EAChCmb,GAAgD,KAChDO,GAAuC,GACvCqC,GAAiD,GACjDC,GAAwC,GACxCta,GAAmC,KAEnC,WAAAzO,CAAYwO,GACVtO,KAAKsO,GAASA,CACf,CAEDoa,GAA0C,CACxCpb,CAACA,GAAiBkc,GAClB9b,CAACA,GAAqB+b,GACtB9b,CAACA,GAA0BxN,GAC3ByN,CAACA,GAA6BnN,GAC9BoN,CAACA,GAAgBmZ,GACjBlZ,CAACA,GAAeoZ,GAChBnZ,CAACA,GAA4B4a,GAC7B3a,CAACA,GAAuB+a,GACxB9a,CAACA,GAAgCib,GACjChb,CAACA,GAA4Bkb,IAG/B,GAAAle,CACE4a,EACAY,EACAX,GAEA,OAAO2D,GAAQ5D,EAAQY,EAAMX,EAAU/lB,KACxC,CAED,GAAAoL,CACE0a,EACAY,EACAthB,EACA2gB,GAEAhc,EAAW,uBAAuBN,OAAOid,wBAC1C,GAGa,SAAAiD,GACdrb,EACAuG,GAEA,OAAO,IAAI+U,MAAc/U,EAAO,IAAIgV,GAAavb,GACnD,CClEM,SAAUyY,GACdjB,EACAY,EACAX,EACA1X,GAEA,MAAO,CAACyC,EAA8BjC,EAA8BzJ,IAClE0kB,GAAehE,EAAQhV,EAASjC,EAAWzJ,EAAO2gB,EAAU1X,EAChE,CCQA,MAAMwb,GACJvb,GACA6X,IAAqB,EACrBtb,MAAgC,CAAA,EAChCmb,GAAgD,KAChDO,GAAuC,GACvCqC,GAAiD,GACjDC,GAAwC,GACxCta,GAAmC,KAEnC,WAAAzO,CAAYwO,GACVtO,KAAKsO,GAASA,CACf,CAEDoa,GAA0C,CACxCpb,CAACA,GAAiBkc,GAClB/b,CAACA,GAAiBsc,GAClBpc,CAACA,GAA0BxN,GAC3ByN,CAACA,GAA6BnN,GAC9BoN,CAACA,GAAgBmZ,GACjBlZ,CAACA,GAAeoZ,GAChBnZ,CAACA,GAA4B4a,GAC7B3a,CAACA,GAAuB+a,GACxB9a,CAACA,GAAgCib,GAClChb,CAACA,GAA4Bkb,IAG9B,GAAAle,CACE4a,EACAY,EACAX,GAEA,OAAO2D,GAAQ5D,EAAQY,EAAMX,EAAU/lB,KACxC,CAED,GAAAoL,CACE0a,EACAY,EACAthB,EACA2gB,GAEA,OCzDE,SACJD,EACAY,EACAthB,EACA2gB,EACA1X,GAEA,GAAoB,iBAATqY,EAAmB,CAC5B,MAAM+B,EAAeJ,GAAoB3B,GACnC7X,EAAYyZ,GAAaG,EAAc1C,EAAU1X,GACvD,OAAO0Y,GACLjB,EACA2C,EAAarX,KACbvC,EACAzJ,EACA2gB,EACA1X,EAEH,CACC,OAAOe,QAAQhE,IACb0a,EACAY,EACAthB,EACA2gB,EAGN,CD+BWiE,CAAQlE,EAAQY,EAAMthB,EAAO2gB,EAAU/lB,KAC/C,EAGa,SAAAmP,GACdb,EACAuG,GAEA,OAAO,IAAI+U,MAAc/U,EAAO,IAAIgV,GAAavb,GACnD,OE1Ca2b,GACX3W,KAAgC,aAChChP,OACAwY,GACAzS,WACA6f,GACArV,MACAgJ,GACA9O,GACA6O,GACAE,GACAhO,GACAqa,GAAqCvqB,YACrCwqB,GACA9D,GAEA/D,GAAiD,IAAI7W,IACrD0W,GAAiD,IAAI1W,IACrDwM,GAA2D,IAAIzH,QAC/DyP,GAAuE,IAAIpV,IAE3E8J,GAAkE,IAAInE,QAEtE4Z,GAAkDC,QAAQC,gBAE1D,WAAAzqB,CAAYwE,EAA0B8lB,GACpCpqB,KAAKsE,OAASA,EACVtE,KAAKsE,OAAO2gB,KACdjlB,KAAKsT,KAAO,WAEd,MAAMkX,EAAiBJ,EAAMtqB,YAC7BE,KAAK8c,GAAW0N,EAAe1N,GAC/B9c,KAAKqK,WAAamgB,EAAengB,WACjCrK,KAAKkqB,GAAaM,EAAeN,GACjClqB,KAAK6U,MAAQ,IAAI7U,KAAKkqB,GACtBlqB,KAAK6d,GAAgB8L,GAAyB3pB,KAAMA,KAAK6U,OACzD7U,KAAK+O,G9BuFA,IAAImU,G8BvFoBljB,MAC7BA,KAAK4d,GAAe4M,EAAe5M,GACnC5d,KAAK8d,GAAgB0M,EAAe1M,GACpC9d,KAAKoqB,GAAQA,EACbpqB,KAAKsmB,GAAiBkE,EAAelE,GAErC,MAAMmE,EAAsBrZ,IAC1B,MAAM0F,EAAa1F,EAAK0F,GACL,OAAfA,IACJ9W,KAAKkmB,GAAiB9U,EAAM0F,EAAY,cACxC2T,EAAmB3T,GAAW,EAEhC,IAAI,MAAM/U,KAAQyoB,EAAepN,GAAO,CACtC,MAAMhM,EAAO+F,GAAsBpV,GACnC0oB,EAAmBrZ,EACpB,CAED,IAAI,MAAMsZ,KAAYF,EAAenN,GACnCrd,KAAKuiB,GAAYpV,IAAIgK,GAAsBuT,IAC3C1qB,KAAKoiB,GAAejV,IAAIgK,GAAsBuT,EAAW,OAE3D1qB,KAAK8P,GAAcG,GAAkB,KAAMua,EAAe3gB,GAAI7J,KAAM,KAAM,MAC1E,IAAI,MAAMoR,KAAQpR,KAAKuiB,GAAa,CAClC,GAAInR,EAAK2F,GAAgB,EAAG,SAE5BuK,GAAmBthB,KAAMoR,EAAM,KADjBpR,KAAK6d,GAAcvQ,GAAgB8D,EAAM,MAExD,CACF,CAED,uBAAMjR,GACJ,GAAIH,KAAKoqB,GAAMO,QAAQ9V,MACrB,IACE,MAAM+V,EAAO9nB,KAAK+nB,MAAM7qB,KAAKoqB,GAAMO,QAAQ9V,OACrCiW,EAAgB3b,GAAyBnP,KAAMA,KAAK6U,aACpDiW,EAAc9c,GAAsB,MAAMiB,UAC9C,IAAI,MAAO1M,EAAK6C,KAAUyf,OAAOE,QAAQ6F,GAAO,CAC9C,MAAMxZ,EAAO+F,GAAsB5U,GAC/B6O,EAAK2F,GAAgB,GACzB+T,EAAcrd,GAAgB2D,EAAM,KAAMhM,EAC3C,IAGJ,CAAC,MAAMgJ,GACNrE,EAAW,qCACZ,CAEH/J,KAAKoqB,GAAMvV,MAAMJ,MACjBuQ,GAAahlB,KAAKoqB,GAAOpqB,KAAKsE,OAAQtE,KAAKqK,kBACrCrK,KAAK6d,GAAclQ,KACzB3N,KAAK6d,GAAcnQ,IAAoB,KACrC1N,KAAK8P,GAAYjP,GAAQ,IAE3Bb,KAAK8P,GAAYyP,MAAMvf,KAAKoqB,GAAMW,YAAc/qB,KAAKoqB,IACrDpqB,MAAKqqB,EAAmBrD,SACzB,CAED,0BAAMvmB,SACET,KAAK6d,GAAcjQ,IAC1B,CAEDod,GAA6G,CAAA,EAC7GC,GAA4E,CAAA,EAE5E,EAAAC,GACE,MAAO,CACLC,KAAgB,KAChBja,GAAgB,KAChByD,GAAgB,GAEnB,CAED,EAAAyW,CAA8Bha,EAA0BvC,GACtD,GAAkB,OAAdA,EAAoB,CACtB,IAAIwc,EAAWrrB,MAAKirB,EAA4B7Z,EAAKvH,IAKrD,YAJwB,IAAbwhB,IACTA,EAAWrrB,KAAKkrB,KAChBlrB,MAAKirB,EAA4B7Z,EAAKvH,IAAMwhB,GAEvCA,CACR,CAAM,CACL,IAAIC,EAAsBtrB,MAAKgrB,EAAyC5Z,EAAKvH,SAC1C,IAAxByhB,IACTA,EAAsB,IAAI7a,QAC1BzQ,MAAKgrB,EAAyC5Z,EAAKvH,IAAMyhB,GAE3D,IAAID,EAAWC,EAAoBpgB,IAAI2D,GAKvC,YAJwB,IAAbwc,IACTA,EAAWrrB,KAAKkrB,KAChBI,EAAoBlgB,IAAIyD,EAAWwc,IAE9BA,CACR,CACF,CAED,EAAAxT,CACEzG,EACAvC,EACAvD,GAEiBtL,KAAKorB,GAA8Bha,EAAMvC,GACjD8F,GAAStR,KAAKiI,EACxB,CAED,EAAAwW,CACE1Q,EACAvC,EACAiT,GAEiB9hB,KAAKorB,GAA8Bha,EAAMvC,GACjDqC,GAAiB4Q,CAC3B,CAED,EAAAvP,CACEnB,EACAvC,EACAsc,GAEiBnrB,KAAKorB,GAA8Bha,EAAMvC,GACjDsc,KAAOA,CACjB,CAED,EAAAxG,CACEvT,EACAvC,GAGA,OADiB7O,KAAKorB,GAA8Bha,EAAMvC,GAC1C8F,EACjB,CAED,EAAAoO,CAAqB3R,GACnB,YAAyD,IAA9CpR,MAAKirB,EAA4B7Z,EAAKvH,UAGqB,IAA3D7J,MAAKgrB,EAAyC5Z,EAAKvH,GAI/D,CAED,EAAAsH,CAAkBC,EAA0BvC,GAE1C,OADiB7O,KAAKorB,GAA8Bha,EAAMvC,GAC1CqC,EACjB,CAED,EAAAa,CACEX,EACAvC,GAGA,OADiB7O,KAAKorB,GAA8Bha,EAAMvC,GAC1Csc,IACjB,CAED,EAAAjF,CAAiB9U,EAA2BqR,EAA8BnP,GACxE,IAAIiY,EAAavrB,KAAKkgB,GAAchV,IAAIuX,QACd,IAAf8I,IACTA,EAAa,IAAI7f,IACjB1L,KAAKkgB,GAAc9U,IAAIqX,EAAS8I,IAElC,MAAMpL,EpCjNM,SACd/O,EACAkC,GAEA,MAAM/Q,EAAMqd,GAAoBxO,EAAMkC,GACtC,OAAOzI,GAAMtI,KAASsI,GAAMtI,GAAO,CAAE6O,OAAMkC,QAC7C,CoC2MiBkY,CAAqBpa,EAAMkC,GACxCiY,EAAWpe,IAAIgT,EAChB,CAED,gBAAAsL,CAAiBra,EAA2BvC,GAG1C,OADsB8a,GAAyB3pB,KAAMA,KAAK6U,OACrCvH,GAAgB8D,EAAMvC,EAC5C,CACD,EAAA6c,CAAiBta,EAA2BvC,EAA6BzJ,GAEvEpF,KAAK+O,GAAQC,IAAW,KAEAG,GAAyBnP,KAAMA,KAAK6U,OAC5CpH,GAAgB2D,EAAMvC,EAAWzJ,EAAM,GAExD,CAED,EAAAukB,GACE,OAAOA,GAAyB3pB,KAAMA,KAAK6U,MAC5C,CAED,EAAA1F,GACE,OAAOA,GAAyBnP,KAAMA,KAAK6U,MAC5C,EClPH,MAAM8W,GAAkB,oBAClBC,GAA6B,IAAIlgB,IAAI,CAAC,KAAM,MAAO,QAAS,SAAU,SAAU,SCChF,SAAUmgB,GACdhiB,EACAiT,EACAC,EAAmBlT,GAInB,GADAiT,EAAS5M,YAAYuK,aAAa9X,SAASmpB,cAAc,GAAGnc,IAAwB9F,KAAOiT,GAR9E,+BASTA,EAASiP,aAAyB,CAEpC,MAAMC,EAAcrpB,SAASC,cAAc,YAC3C,IAAI,IAAIqpB,KAAa/qB,MAAMC,KAAK2b,EAAS1b,YACvC4qB,EAAYtP,QAAQ1Z,YAAYipB,GAElC,MAAMnR,EAAWgC,EAASvb,aAAakO,GACvCuc,EAAYnpB,aAAa4M,EAAqBqL,GAAY,IAC1DgC,EAAWkP,CACZ,CAKD,OAJAlP,EAASJ,QAAQwP,iBAAiB,YAAY1qB,SAAQsb,IACpD+O,GAA8B/hB,IAAcgT,EAAUC,EAAO,IAE/DF,GAAiBhT,EAAIiT,EAAUC,GACxBlT,CACT,CC3BgB,SAAAsiB,GAAatiB,EAAYuiB,GACvC,MAAMtP,EAAWna,SAASC,cAAc,YACxCka,EAAS6N,QAAQ9gB,GAAKA,EAAGzD,WACzB0W,EAAS1c,UFUL,SAAyCgsB,GAC7C,MAAMC,EAAuB,GAC7B,OAAOD,EAAKE,WAAWX,IAAiB,CAACrpB,EAAOiqB,KAC9CA,EAAOA,EAAK1lB,OACZ,MAAQyM,GAASiZ,EAAK/kB,MAAM,KAC5B,IAAKokB,GAAepU,IAAIlE,GAEtB,MAAO,UAAO5D,IAAqB6c,UAErC,MAAMC,EAASD,EAAK3lB,MAAM0M,EAAK5M,OAAS,GAAGG,OACrC4lB,EAA2B,CAAEnZ,OAAMiZ,KAAMC,MAC/C,GAAa,OAATlZ,GAA0B,QAATA,EAEnB,OADA+Y,EAAMhpB,KAAKopB,GACJ,wBAAwBF,MAC1B,GAAa,UAATjZ,EAAkB,CAC3B,MAAMoZ,EAAU,GAChB,OAAG,CACD,MAAMtb,EAAOib,EAAM7F,OAASzc,EAAW,sDACvC,GAAkB,OAAdqH,EAAKkC,KAAe,CACtBoZ,EAAQrpB,KAAK,eACb,KACD,CAAwB,WAAd+N,EAAKkC,KACdoZ,EAAQrpB,KAAK,eAEb0G,EAAW,qDAEd,CACD,OAAO2iB,EAAQhlB,KAAK,GACrB,CAAM,GAAa,WAAT4L,EAAmB,CAE5B,GAAkB,SADL+Y,EAAM7F,OAASzc,EAAW,uDAC9BuJ,KACP,MAAO,cAEPvJ,EAAW,uDAEd,MAAM,GAAa,WAATuJ,EAAmB,CAC5B,MAAMqZ,EAAWN,EAAMlN,IAAI,IAAMpV,EAAW,uDAC5C,GAAsB,OAAlB4iB,EAASrZ,MAAmC,WAAlBqZ,EAASrZ,KAErC,OADA+Y,EAAMhpB,KAAKopB,GACJ,sCAAsCE,EAASH,mCAAuCA,MAE7FziB,EAAW,sDAEd,MAAM,GAAa,SAATuJ,EAAiB,CAC1B,MAAMqZ,EAAWN,EAAMlN,IAAI,IAAMpV,EAAW,qDAC5C,GAAsB,OAAlB4iB,EAASrZ,KACX,MAAO,sCAAsCqZ,EAASH,WAEtDziB,EAAW,oDAEd,MACCA,EAAW,iDACZ,GAEL,CEhEuB6iB,CAA+BR,GACpDP,GAA8BhiB,EAAIiT,EACpC,CCIA,MAAM+P,GACJve,GACA,WAAAxO,CAAYwO,GACVtO,KAAKsO,GAASA,CACf,CAED,EAAAwe,CAAmBxhB,GACjB,MAAMyhB,EAAWzhB,EAAQoS,GAAY/R,EACrCkZ,OAAOmI,eAAehtB,KAAKsO,GAAOuG,MAAOkY,EAAU,CACjD7hB,IAAK,IACII,EAAQS,GAAaC,GAE9BZ,IAAMhG,IACJ,MAAMkJ,EAAShD,EAAQgD,GACjBC,EAAcjD,EAAQkD,GAAkBC,GAC9CH,EAAOS,GAAQC,IAAWC,UACxB,MAAMC,EAAaZ,EAAOa,WACpBD,EAAWlB,GAAsBO,GAAaU,SAC3C3D,EAAQ4I,GAAiBhF,EAAY9J,IAC5C,GACF,GAGP,CAED,EAAA6nB,CAAqB3hB,GACnB,MAAMyhB,EAAWzhB,EAAQoS,GAAY/R,EACrCkZ,OAAOmI,eAAehtB,KAAKsO,GAAOuG,MAAOkY,EAAU,CAAE3nB,WAAMoO,GAC5D,CAED,EAAA0Z,GAEE,MAAMC,EAASntB,KAAKsO,GAAO8b,GAAMgD,GACjC,GAAe,OAAXD,EACF,OAEF,MAAMxY,EAAWwY,EAAOE,GAAqBrtB,KAAKsO,GAAO8b,IACzD,IAAK,MAAM9e,KAAWqJ,GAAY,GAChC3U,KAAK8sB,GAAmBxhB,EAE3B,CAED,CAAAzK,CAAO+J,EAAcxF,GAEnB,MAAMgM,EAAO+F,GAAsBvM,GACnC5K,KAAKsO,GAAOS,GAAQwU,GAAgCnS,EAAM,KAAMhM,EACjE,CAED,gBAAAqmB,CAAiB7gB,GAEf,MAAMwG,EAAO+F,GAAsBvM,GACnC,OAAO5K,KAAKsO,GAAOmd,iBAAiBra,EAAM,KAC3C,CAED,EAAAsa,CAAiB9gB,EAAcxF,GAE7B,MAAMgM,EAAO+F,GAAsBvM,GACnC5K,KAAKsO,GAAOod,GAAiBta,EAAM,KAAMhM,EAC1C,EAGH,MAAMkoB,GACJ,GAAApiB,CAAI2J,EAAwB6R,EAAmBX,GAC7C,OAAIW,IAASlS,GACJK,EAAMhU,EAAOX,KAAK2U,GAChB6R,IAASjS,GACXI,EAAMqY,GAAoBhtB,KAAK2U,GACb,iBAAT6R,EACT7R,EAAM4W,iBAAiB/E,GAEvBtX,QAAQlE,IAAI2J,EAAO6R,EAAMX,EAEnC,CAED,GAAA3a,CAAIyJ,EAAwB6R,EAAmBthB,EAAY2gB,GACzD,MAAoB,iBAATW,GACT7R,EAAM6W,GAAiBhF,EAAMthB,IACtB,GAEAgK,QAAQhE,IAAIyJ,EAAO6R,EAAMthB,EAAO2gB,EAE1C,EAGI,MC3FDwH,GAAqB,6BACrBC,GAAkB,+DAER,SAAAC,GAAwBrc,EAA2Bsc,GACjE,MAAMC,EAAa,IAAIjiB,IAAI0F,EAAK8E,IAAiByM,aAAa+K,GAC9D,IAAIE,GAAO,EACPC,EAAY,GAChB,IAAI,MAAMC,KAAWH,EAAY,CAC/B,MAAM3X,EAAe8X,EAAQtmB,MAAM,KACP,IAAxBwO,EAAatP,SAGbsP,EAAatP,OAASknB,IACxBA,EAAM5X,EAAatP,OACnBmnB,EAAYC,GAEf,CACD,GAAID,EAAUnnB,OAAS,EAAG,CACxB,IAAK8mB,GAAgBprB,KAAKyrB,GACxB,MAAM,IAAIppB,MAAM,iBAAiBopB,KAEnC,MAAME,EAAY5W,GAAsB0W,GAClCG,EAAW,GACjB,IAAIC,EAAQF,EAAUhX,GACtB,IAAI,IAAI5L,EAAI4iB,EAAU/X,GAAatP,OAAQyE,EAAIiG,EAAK4E,GAAatP,OAAQyE,IAAK,CAC5E,MAAM+iB,EAAU9c,EAAK4E,GAAa7K,GAClC,GAAgB,MAAZ+iB,EACFF,EAAS3qB,KAAK,WAAa4qB,EAAQ,GAAK,KACxCA,QACK,CACL,IAAKV,GAAmBnrB,KAAK8rB,GAC3B,MAAM,IAAIzpB,MAAM,yBAAyBypB,KAE3CF,EAAS3qB,KAAK,IAAM6qB,EACrB,CACF,CACD,MAAMnsB,EAAOisB,EAAStmB,KAAK,IAC3B,MAAO,CACLwD,IAAM,IAAIijB,SAAS,GAAI,gBAAgBN,MAAc9rB,MACrDqJ,IAAM,IAAI+iB,SAAS,QAAS,SAASN,MAAc9rB,cAEtD,CAAM,CACL,MAAMisB,EAAW,GACjB,IAAIC,EAAQ,EACZ,IAAI,MAAMC,KAAW9c,EAAK4E,GACxB,GAAgB,MAAZkY,EACFF,EAAS3qB,KAAK,WAAa4qB,EAAQ,GAAK,KACxCA,QACK,CACL,IAAKV,GAAmBnrB,KAAK8rB,GAC3B,MAAM,IAAIzpB,MAAM,yBAAyBypB,KAE3CF,EAAS3qB,MAAM2qB,EAAStnB,OAAS,EAAI,IAAM,IAAMwnB,EAClD,CAEH,MAAMnsB,EAAOisB,EAAStmB,KAAK,IAC3B,MAAO,CACLwD,IAAM,IAAIijB,SAAS,GAAI,eAAepsB,MACtCqJ,IAAM,IAAI+iB,SAAS,QAAS,QAAQpsB,cAEvC,CAEH,CCvBM,SAAUqsB,GAAqBC,GACnC,MACMC,EC3CF,SAA6BC,GACjC,MAAMjrB,EAAee,IACrB,MAAO,CACLZ,EAAiB8qB,EAAW9qB,GAAmBH,EAAaG,EAC5D+qB,GAAiBD,EAAWtJ,IAAW,KAE3C,CDqC0BwJ,CADRJ,EAAcnE,GAAWwE,IAAW,CAAE,GAEhD7kB,EAAKC,KACL6kB,GAAEvC,EAAIwC,GAAExkB,EAAGykB,GAAE3E,GAAemE,EAC5BzQ,EAAiCiH,OAAOC,OAAO,CAAE,EAAElb,GACnDkU,EAAkC+G,OAAOC,OAAO,CAAE,EAAEnb,GAC1DugB,EAAW4E,IAAe,EAC1B3C,GAAatiB,EAAIuiB,GACjBjiB,EAAYN,EAAIO,GpFhDF,SAAmBP,EAAYqgB,GAC7CjgB,EAAeJ,GAAMqgB,CACvB,CoF+CE6E,CAAmBllB,EAAIqgB,GACvB,MAAMC,EEvDF,SAAuB6E,GAC3B,OAAOA,EAAiBrsB,SAASC,cAAcosB,GAAelvB,YAA2CF,WAC3G,CFqDoBqvB,CAAaX,EAAgBrJ,IACzC+J,EAAgBV,EAAgBrJ,GACtC,OAAO,cAAckF,EACnB7b,GACA4gB,GAEA,WAAApvB,GFmCgC,IAACwO,EElC/BvO,QACAC,MAAKsO,EN6LK,SAAsBhK,EAA0B6qB,GAC9D,OAAO,IAAIlF,GAAgB3lB,EAAQ6qB,EACrC,CM/LqBC,CAAsBd,EAAiBtuB,MACtDA,MAAKkvB,GFgC0B5gB,EEhCatO,MAAKsO,EFiC9C,IAAIsb,MAAuB,IAAIiD,GAAeve,GAAS,IAAIgf,IEhC/D,CAED,iBAAAntB,GACEH,MAAKsO,EAAQnO,mBACd,CAED,oBAAAM,GACET,MAAKsO,EAAQ7N,sBACd,CAED2sB,GACA,MAAIA,GAIF,YAH8C,IAAnCptB,MAAKotB,IACdptB,MAAKotB,EAnDb,SAA6BiC,GAC3B,IAAIC,EAAUD,EAAGnf,WACjB,KAAOof,GAAS,CACd,GAAKA,EAA+Bza,OAAUya,EAA+BC,GAC3E,OAAOD,EAGT,GADAA,EAAUA,EAAQpf,WACdof,aAAmBhK,WAAY,CACjC,GAAIgK,EAAQE,MAASF,EAAQE,KAA4B3a,OAAUya,EAAQE,KAA4BD,GACrG,OAAOD,EAAQE,KAEjBF,EAAUA,EAAQE,IACnB,CACF,CACD,OAAO,IACT,CAoCyCC,CAAoBzvB,OAEhDA,MAAKotB,CACb,CAED,SAAIvY,GACF,OAAO7U,MAAKkvB,CACb,CAED,MAAIK,GACF,OAAOvvB,MAAKsO,EAAQ4b,GAAW4E,KAAgB,CAChD,CAED,EAAAzB,CAAqB8B,GACnB,OAAOnvB,MAAKsO,EAAQsG,GAAoB1J,IAAIikB,IAAoC,IACjF,CAED,aAAOO,CAAO7tB,GACRmtB,EACFW,eAAeD,OAAO7tB,EAAS7B,KAAM,CAAEwuB,GAASQ,IAEhDW,eAAeD,OAAO7tB,EAAS7B,KAElC,CAED,aAAW6J,GACT,OAAOA,CACR,CACDkM,SAAsBqW,EACtB,aAAWA,GACT,OAAOpsB,MAAKosB,CACb,CACD,aAAWA,CAAKhnB,GACdpF,MAAKosB,EAAQhnB,EACb+mB,GAAansB,KAAK6J,GAAIzE,GACtBpF,MAAK8c,EAAY,IAClB,CAED/G,SAAqB3L,EACrB,aAAWA,GACT,OAAOpK,MAAKoK,CACb,CACD,aAAWA,CAAIhF,GACbpF,MAAKoK,EAAOhF,EACZ+E,EAAYnK,KAAK6J,GAAIzE,GACrBpF,MAAKqK,EAAc,IACpB,CACD0L,SAA+C,KAC/C,aAAW+G,GAIT,OAHK9c,MAAK8c,IACR9c,MAAK8c,EAAYrE,GAAgBzY,KAAK6J,KAEjC7J,MAAK8c,CACb,CACD/G,SAA2C,KAC3C,qBAAW1L,GAIT,OAHKrK,MAAKqK,IACRrK,MAAKqK,EnF/HP,SAA4BR,GAChC,OAAOK,EAAeL,IAAOE,EAAW,4CAA4CF,IACtF,CmF6H2B+lB,CAAkB5vB,KAAK6J,KAErC7J,MAAKqK,CACb,CACD0L,SAA6C,KAC7C,aAAWmU,GAIT,OAHKlqB,MAAKkqB,IACRlqB,MAAKkqB,EpFrIP,SAA4BrgB,GAChC,OAAOI,EAAeJ,IAAOE,EAAW,4CAA4CF,IACtF,CoFmI2BgmB,CAAkB7vB,KAAK6J,KAErC7J,MAAKkqB,CACb,CACDnU,SAAyC6H,EACzC,aAAWA,GACT,OAAO5d,MAAK4d,CACb,CACD7H,SAA0C+H,EAC1C,aAAWA,GACT,OAAO9d,MAAK8d,CACb,CACD,aAAWT,GACT,MlD9G6B,CAACxT,GAC3B0S,GAAiB1S,IAAO,GkD6GpBimB,CAAoB9vB,KAAK6J,GACjC,CACD,aAAWuT,GACT,MlD1GyB,CAACvT,GACvB2S,GAAa3S,IAAO,GkDyGhBkmB,CAAgB/vB,KAAK6J,GAC7B,CACDkM,SAAsC,KACtC,aAAW2X,GACT,OAAO1tB,MAAK0tB,GAAY3jB,EAAW,kBACpC,CACDgM,SAA6C,KAC7C,aAAWuQ,GACT,GAA4B,OAAzBtmB,MAAKsmB,EAA0B,CAChCtmB,MAAKsmB,EAAkB,IAAI5a,IAC3B1L,MAAK0tB,EAAW,IAAIhiB,IACpB,IAAIskB,EAAehwB,KAAKkqB,GAAW+F,UACnC,KAAOD,GAAgBA,IAAiBnL,OAAOoL,WAAW,CACxD,MAAM3J,EAAiBzB,OAAOqL,0BAA0BF,GACxD,GAAI1J,EACF,IAAK,MAAO/jB,EAAK4tB,KAAStL,OAAOE,QAAQuB,GAClC6J,EAA4BjlB,MAASilB,EAA4B/kB,KACpEpL,MAAKsmB,EAAgBnZ,IAAI5K,GAE3BvC,MAAK0tB,EAASvgB,IAAI5K,GAGtBytB,EAAenL,OAAOuL,eAAeJ,EACtC,CACD,GAAI1sB,EAAac,EACf,IAAI,MAAMrC,KAAQ/B,KAAKod,GAAO,CAC5B,MAAMhM,EAAO+F,GAAsBpV,GACnC,GAAiC,IAA7BqP,EAAK4E,GAAatP,OACpB,SAEF,GAAI1G,MAAK0tB,EAASlW,IAAIzV,GACpB,SAEF,MAAMsuB,EAAQ5C,GAAwBrc,EAAMpR,MAAK0tB,GACjD7I,OAAOmI,eAAehtB,KAAKkqB,GAAW+F,UAAWluB,EAAM,CACrDmJ,IAAKmlB,EAAMnlB,IACXE,IAAKilB,EAAMjlB,IACXklB,YAAY,EACZC,cAAc,GAEjB,CAEJ,CACD,OAAOvwB,MAAKsmB,CAEb,EAEL,CGlMA,SAASkK,GAAcpE,GACrB,OAAOA,EAAKE,WAAW,4BAA4B,CAAChqB,EAAOiqB,IAClD,KAAKA,OAEhB,CCZOtd,eAAewhB,GAAwB1uB,GAC5C,MAAM2uB,QAAiBC,kBAAkB3J,QAAQjlB,IAEjD,ODWKkN,eAAyCtE,GAC9C,MAAMmS,EAAWna,SAASC,cAAc,YACxCka,EAAS1c,UAdX,SAAqBgsB,GACnB,OAAOA,EAAKE,WAAW,qBAAqB,CAAChqB,EAAOiqB,IAC3C,YAASA,aAEpB,CAUuBqE,CAAYjmB,GAEjC,MAAMyhB,EAAOtP,EAASJ,QAAQmU,cAAc,YAC5CzE,GAAMhf,SAEN,MAAM0jB,EAAShU,EAASJ,QAAQmU,cAAc,uBACxCE,EAAMC,KAAKvnB,OAAOwnB,kBAAiB,IAAIC,aAAcC,OAAOL,EAAOnmB,QACnEymB,EAAeN,QAAeO,OAAO,sCAAwCN,GAAO,GAE1FD,GAAQ1jB,SAER,MAAMkH,EAAQwI,EAASJ,QAAQmU,cAAc,SAC7Cvc,GAAOlH,SAEP,MAAM8c,EAAckH,EAAaE,SAAW,QAE5C,MAAO,CACL3mB,OACAyhB,GAAYoE,GAAcpE,GAAMhsB,WAAa,IAAIyG,OACjDuD,GAAYkK,GAAOpR,aAAe,GAClCgnB,KAEJ,CCnCSqH,OADYb,EAAS/lB,OAE9B,CCRgB,SAAA6mB,GAAuB3vB,EAAiB2oB,GACtDA,EAAekF,OAAO7tB,EACxB,CCKA,MAAM4vB,GAAW,SACXC,GAAiB,eAAeD,cAEhC,MAAOE,WAAoB/xB,YAC/B,WAAAE,GACEC,QACIuE,EAAOb,GACTzD,KAAKglB,aAAa,CAAEG,KAAM,QAE7B,CAED,uBAAMhlB,SACEH,KAAK4xB,KACX5xB,KAAKa,GACN,CAED,QAAI2a,GACF,OAAOxb,KAAK+qB,YAAc/qB,IAC3B,CAED,QAAM4xB,GACJ,GAAIttB,EAAON,EAAY,CACrB,MAAM0sB,QAAiBC,MAAMrsB,EAAON,GACpC,GAAI0sB,EAASmB,GAAI,CACf,MAAMC,QAAmBpB,EAAS/lB,OAC5BonB,EAAepvB,SAASC,cAAc,YAC5CmvB,EAAa3xB,UAAY0xB,EAEzB,MAAMhV,EAAWiV,EAAarV,QAAQmU,cAAc,YAC9Cvc,EAAQyd,EAAarV,QAAQmU,cAAc,SAGjD,GADA7wB,KAAKwb,KAAKxY,YAAY8Z,GAAUJ,SAAW/Z,SAASqvB,0BAChD1d,EAAO,CACT,MAAM+Q,EAAuBrlB,KAAK+qB,YAAcpoB,SAC1C6iB,EAAcH,EAAqBD,mBACpCI,EAAY1Y,SAASwH,KACxB+Q,EAAqBD,mBAAqB,IAAII,EAAalR,GAE9D,CACF,MACCvK,EAAW,8BAA8BzF,EAAON,IAEnD,MACChE,KAAKwb,KAAKpb,UAAYsxB,EAEzB,CAED,CAAA7wB,GAEE,GAAIyD,EAAOX,EAAc,CACvB,MAAMsuB,EAAStvB,SAASC,cAAc0B,EAAOP,GAC7CkuB,EAAOpvB,aAAa,OAAQ4uB,IAC5BzxB,KAAKwb,KAAKxY,YAAYivB,EACvB,CACF,ECpDH,MAAMC,GAAa,WACbC,GAAiB,eAEhBljB,eAAemjB,KACpB,MAAMC,aCVN,MAAMA,EAAwB,CAAA,EAO9B,OANA1vB,SAASupB,iBAAiB,4BAA4B1qB,SAAQsvB,IAC5D,MAAMwB,EAAkBxvB,KAAK+nB,MAAMiG,EAAO1wB,WACtCkyB,EAAgBC,UAClBF,EAAUE,QAAU1N,OAAOC,OAAOuN,EAAUE,SAAW,CAAE,EAAED,EAAgBC,SAC5E,IAEIF,CACT,CDEoBG,GAClB,GAAIH,EAAUE,QACZ,IAAK,MAAOE,EAAOrtB,KAAUyf,OAAOE,QAAQsN,EAAUE,SAAU,CAC9D,IAAI1wB,EACJ,GAAI4wB,EAAMrvB,WAAW8uB,IAAa,CAChC,MAAMnwB,EAAO0wB,EAAM7rB,MAAMsrB,GAEzBrwB,EAAU,SADgBE,EAAKI,QAAQ,YAAa,IACbA,QAAQ,MAAO,KACtDgB,EAAWtB,EAAkB,UAATE,EAAmB,IAAMA,EAC9C,CAGD,GAHM0wB,EAAMrvB,WAAW+uB,MACrBtwB,EAAU4wB,EAAM7rB,MAAMurB,MAEnBtwB,EACH,SAGF,IAAIwsB,EAA4C,KAChDA,QAAsBoC,GAAwBgC,GAE9CjB,GAAuB3vB,EADAusB,GAAqBC,GAE7C,CAGL,CE9BO,MAAM/pB,GAAkBouB,EAE/B,IAAIC,IAAc,EACX1jB,eAAe2jB,GAAiBC,SCAhC5jB,eAA4C4jB,GACjD,IAAI,MAAQhxB,EAASE,KAAU8iB,OAAOE,QAAQ8N,GAAuB,CACnE,IAAIxE,EAA4C,KAChD,GAAI/pB,EAAOX,EAAc,CACvB,MAAMjC,EAAYK,EAAKqB,WAAW,WAAarB,EAAK6E,MAAM,GAAK7E,EAC/DoB,EAAWtB,EAAuB,UAAdH,EAAwB,IAAMA,EACnD,CACD2sB,QAAsBoC,GAAwB1uB,GAE9CyvB,GAAuB3vB,EADAusB,GAAqBC,GAE7C,CACH,CDVQyE,CAA6BD,GAC/BvuB,GAAOT,SACHkvB,IAEV,CAEO9jB,eAAe8jB,KACfJ,WEVA1jB,iBASL,GARI3K,EAAOL,SACHmuB,KAGJ9tB,EAAOX,GACTgsB,eAAeD,OAAOprB,EAAOP,EAAepE,GAG1C2E,EAAOZ,IACTisB,eAAeD,OAAOprB,EAAOR,EAAa6tB,IACtCrtB,EAAOV,GAAuB,CAChC,MAAMovB,EAAcrwB,SAASC,cAAc0B,EAAOR,GAClDnB,SAASswB,KAAKjwB,YAAYgwB,EAC3B,CAEL,CFLUE,GACNP,IAAc,EAElB"}
{"version":3,"file":"structive.min.js","sources":["../src/Router/Router.ts","../src/WebComponents/getGlobalConfig.ts","../src/Filter/errorMessages.ts","../src/Filter/builtinFilters.ts","../src/GlobalId/generateId.ts","../src/utils.ts","../src/StateClass/registerStateClass.ts","../src/StyleSheet/registerStyleSheet.ts","../src/StyleSheet/regsiterCss.ts","../src/BindingBuilder/createFilters.ts","../src/DataBinding/BindingNode/BindingNode.ts","../src/DataBinding/BindingNode/BindingNodeAttribute.ts","../src/DataBinding/BindingNode/BindingNodeCheckbox.ts","../src/DataBinding/BindingNode/BindingNodeClassList.ts","../src/DataBinding/BindingNode/BindingNodeClassName.ts","../src/DataBinding/BindingNode/BindingNodeEvent.ts","../src/constants.ts","../src/DataBinding/BindingNode/BindingNodeBlock.ts","../src/DataBinding/BindingNode/BindingNodeIf.ts","../src/DataBinding/BindingNode/BindingNodeFor.ts","../src/BindingBuilder/getDefaultName.ts","../src/DataBinding/BindingNode/BindingNodeProperty.ts","../src/DataBinding/BindingNode/BindingNodeRadio.ts","../src/DataBinding/BindingNode/BindingNodeStyle.ts","../src/ComponentState/symbols.ts","../src/DataBinding/BindingNode/BindingNodeComponent.ts","../src/BindingBuilder/getBindingNodeCreator.ts","../src/StateClass/symbols.ts","../src/StateProperty/getStructuredPathInfo.ts","../src/DataBinding/BindingState/BindingState.ts","../src/DataBinding/BindingState/BindingStateIndex.ts","../src/BindingBuilder/getBindingStateCreator.ts","../src/BindingBuilder/getDataBindText.ts","../src/BindingBuilder/getNodeType.ts","../src/BindingBuilder/parseBindText.ts","../src/BindingBuilder/removeDataBindAttribute.ts","../src/BindingBuilder/replaceTextNodeFromComment.ts","../src/BindingBuilder/createDataBindAttributes.ts","../src/BindingBuilder/getAbsoluteNodePath.ts","../src/BindingBuilder/getNodesHavingDataBind.ts","../src/BindingBuilder/registerDataBindAttributes.ts","../src/Template/registerTemplate.ts","../src/Template/removeEmptyTextNodes.ts","../src/DataBinding/Binding.ts","../src/LoopContext/createLoopContext.ts","../src/Render/render.ts","../src/DataBinding/BindContent.ts","../src/BindingBuilder/resolveNodeFromPath.ts","../src/ListIndex/createListIndex.ts","../src/StatePropertyRef/getStatePropertyRefId.ts","../src/StateClass/methods/getByRef.ts","../src/StateClass/methods/setTracking.ts","../src/StateClass/apis/getByRef.ts","../src/StateClass/methods/setByRef.ts","../src/StateClass/apis/setByRef.ts","../src/StateClass/apis/setCacheable.ts","../src/StateClass/methods/setCacheable.ts","../src/StateClass/apis/connectedCallback.ts","../src/StateClass/apis/disconnectedCallback.ts","../src/StateClass/apis/resolve.ts","../src/StateClass/apis/getAll.ts","../src/StateProperty/getResolvedPathInfo.ts","../src/StateClass/getListIndex.ts","../src/StateClass/traps/get.ts","../src/StateClass/createStateProxy.ts","../src/StateClass/traps/set.ts","../src/StateClass/buildListIndexTree.ts","../src/Updater/collectAffectedGetters.ts","../src/Updater/updater.ts","../src/ComponentEngine/attachShadow.ts","../src/ComponentEngine/canHaveShadowRoot.ts","../src/ComponentEngine/ComponentEngine.ts","../src/Template/replaceMustacheWithTemplateTag.ts","../src/Template/replaceTemplateTagWithComment.ts","../src/Template/registerHtml.ts","../src/ComponentState/createComponentState.ts","../src/WebComponents/createComponentClass.ts","../src/WebComponents/getComponentConfig.ts","../src/WebComponents/getBaseClass.ts","../src/WebComponents/createSingleFileComponent.ts","../src/WebComponents/loadSingleFileComponent.ts","../src/WebComponents/registerSingleFIleComponents.ts","../src/WebComponents/registerComponentClass.ts","../src/MainWrapper/MainWrapper.ts","../src/exports.ts","../src/bootstrap.ts"],"sourcesContent":["import { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst DEFAULT_ROUTE_PATH = '/'; // Default route path\r\nconst ROUTE_PATH_PREFIX = 'routes:'; // Prefix for route paths\r\n/**\r\n * example:\r\n * ```ts\r\n * entryRoute('my-view', '/my-view/:id');\r\n */\r\nconst routeMap: Record<string,string> = {};\r\n\r\nexport class Router extends HTMLElement {\r\n  _popstateHandler: (event: PopStateEvent) => void;\r\n  constructor() {\r\n    super();\r\n    this._popstateHandler = this.popstateHandler.bind(this);\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.innerHTML = '<slot name=\"content\"></slot>';\r\n    window.addEventListener('popstate', this._popstateHandler);\r\n    window.dispatchEvent(new Event(\"popstate\")); // Dispatch popstate event to trigger the initial render\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('popstate', this._popstateHandler);\r\n  }\r\n\r\n  popstateHandler(event: PopStateEvent) {\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    const routePath = window.location.pathname || DEFAULT_ROUTE_PATH;\r\n    let tagName: string | undefined = undefined;\r\n    let params: Record<string, string> = {};\r\n    // Check if the routePath matches any of the defined routes\r\n    for (const [path, tag] of Object.entries(routeMap)) {\r\n      const regex = new RegExp(path.replace(/:[^\\s/]+/g, '([^/]+)'));\r\n      if (regex.test(routePath)) {\r\n        tagName = tag;\r\n        // Extract the parameters from the routePath\r\n        const matches = routePath.match(regex);\r\n        if (matches) {\r\n          const keys = path.match(/:[^\\s/]+/g) || [];\r\n          keys.forEach((key, index) => {\r\n            params[key.substring(1)] = matches[index + 1]; // +1 to skip the full match\r\n          });\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (tagName) {\r\n      // If a route matches, create the custom element and set its state\r\n      // Create the custom element with the tag name\r\n      // project the custom element into the router slot\r\n      const customElement = document.createElement(tagName) as HTMLElement;\r\n      customElement.setAttribute('state', JSON.stringify(params));\r\n      customElement.setAttribute('slot', 'content');\r\n      this.appendChild(customElement);\r\n    } else {\r\n      // If no route matches, show 404 content\r\n      const messageElement = document.createElement('h1') as HTMLElement;\r\n      messageElement.setAttribute('slot', 'content');\r\n      messageElement.textContent = '404 Not Found';\r\n      this.appendChild(messageElement);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function entryRoute(tagName: string, routePath: string): void {\r\n  if (routePath.startsWith(ROUTE_PATH_PREFIX)) {\r\n    routePath = routePath.substring(ROUTE_PATH_PREFIX.length); // Remove 'routes:' prefix\r\n  } \r\n  routeMap[routePath] = tagName;\r\n}\r\n\r\n\r\n","import { IConfig } from \"./types\";\r\n\r\nconst globalConfig: IConfig = {\r\n  debug                : false,\r\n  locale               : \"en-US\", // The locale of the component, ex. \"en-US\", default is \"en-US\"\r\n  enableShadowDom      : true,\r\n  enableMainWrapper    : true, // Whether to use the main wrapper or not\r\n  enableRouter         : true, // Whether to use the router or not\r\n  autoInsertMainWrapper: false, // Whether to automatically insert the main wrapper or not\r\n  autoInit             : true, // Whether to automatically initialize the component or not\r\n  mainTagName          : \"app-main\", // The tag name of the main wrapper, default is \"app-main\"\r\n  routerTagName        : \"view-router\", // The tag name of the router, default is \"view-router\"\r\n  layoutPath           : \"\", // The path to the layout file, default is \"\"\r\n};\r\n\r\nexport function getGlobalConfig():IConfig {\r\n  return globalConfig;\r\n}\r\n\r\nexport const config = getGlobalConfig();\r\n","\r\nexport function optionsRequired(fnName:string): never {\r\n  throw new Error(`${fnName} requires at least one option`);\r\n}\r\n\r\nexport function optionMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number as option`);\r\n}\r\n\r\nexport function valueMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number value`);\r\n}\r\n\r\nexport function valueMustBeBoolean(fnName:string): never {\r\n  throw new Error(`${fnName} requires a boolean value`);\r\n}\r\n\r\nexport function valueMustBeDate(fnName:string): never {\r\n  throw new Error(`${fnName} requires a date value`);\r\n}","import { getGlobalConfig } from \"../WebComponents/getGlobalConfig\";\r\nimport { optionMustBeNumber, optionsRequired, valueMustBeBoolean, valueMustBeDate, valueMustBeNumber } from \"./errorMessages\";\r\nimport { FilterWithOptions } from \"./types\";\r\n\r\nconst config = getGlobalConfig();\r\n\r\nconst eq = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('eq');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('eq');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('eq');\r\n    return value === optValue;\r\n  }\r\n}\r\n\r\nconst ne = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ne');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ne');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ne');\r\n    return value !== optValue;\r\n  }\r\n}\r\n\r\nconst not = (options?:string[]) => {\r\n  return (value: any) => {\r\n    if (typeof value !== 'boolean') valueMustBeBoolean('not');\r\n    return !value;\r\n  }\r\n}\r\n\r\nconst lt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('lt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('lt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('lt');\r\n    return value < optValue;\r\n  }\r\n}\r\n\r\nconst le = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('le');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('le');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('le');\r\n    return value <= optValue;\r\n  }\r\n}\r\n\r\nconst gt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('gt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('gt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('gt');\r\n    return value > optValue;\r\n  }\r\n}\r\n\r\nconst ge = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ge');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ge');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ge');\r\n    return value >= optValue;\r\n  }\r\n}\r\n\r\nconst inc = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('inc');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('inc');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('inc');\r\n    return value + optValue;\r\n  }\r\n}\r\n\r\nconst dec = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('dec');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('dec');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('dec');\r\n    return value - optValue;\r\n  }\r\n}\r\n\r\nconst mul = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('mul');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('mul');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('mul');\r\n    return value * optValue;\r\n  }\r\n}\r\n\r\nconst div = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('div');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value / optValue;\r\n  }\r\n}\r\n\r\nconst fix = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value.toFixed(optValue);\r\n  }\r\n}\r\n\r\nconst locale = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('locale');\r\n    return value.toLocaleString(opt);\r\n  }\r\n}\r\n\r\nconst uc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toUpperCase();\r\n  }\r\n}\r\n\r\nconst lc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toLowerCase();\r\n  }\r\n}\r\n\r\nconst cap = (options?:string[]) => {\r\n  return (value: any) => {\r\n    const v = value.toString();\r\n    if (v.length === 0) return v;\r\n    if (v.length === 1) return v.toUpperCase();\r\n    return v.charAt(0).toUpperCase() + v.slice(1);\r\n  }\r\n}\r\n\r\nconst trim = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().trim();\r\n  }\r\n}\r\n\r\nconst slice = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('slice');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('slice');\r\n  return (value: any) => {\r\n    return value.toString().slice(optValue);\r\n  }\r\n}\r\n\r\nconst substr = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('substr');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('substr');\r\n  const opt2 = options?.[1] ?? optionsRequired('substr');\r\n  const opt2Value = Number(opt2);\r\n  if (isNaN(opt2Value)) optionMustBeNumber('substr');\r\n  return (value: any) => {\r\n    return value.toString().substr(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst pad = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('pad');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('pad');\r\n  const opt2 = options?.[1] ?? '0';\r\n  const opt2Value = opt2;\r\n  return (value: any) => {\r\n    return value.toString().padStart(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst rep = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('rep');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('rep');\r\n  return (value: any) => {\r\n    return value.toString().repeat(optValue);\r\n  }\r\n}\r\n\r\nconst rev = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().split('').reverse().join('');\r\n  }\r\n}\r\n\r\nconst int = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseInt(value, 10);\r\n  }\r\n}\r\n\r\nconst float = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseFloat(value);\r\n  }\r\n}\r\n\r\nconst round = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('round');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('round');\r\n    return Math.round(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst floor = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('floor');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('floor');\r\n    return Math.floor(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst ceil = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('ceil');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ceil');\r\n    return Math.ceil(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst percent = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('percent');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('percent');\r\n    return value.toFixed(optValue) + '%';\r\n  }\r\n}\r\n\r\nconst date = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date))  valueMustBeDate('date');\r\n    return value.toLocaleDateString(config.locale);\r\n  }\r\n}\r\n\r\nconst time = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('time');\r\n    return value.toLocaleTimeString(config.locale);\r\n  }\r\n}\r\n\r\nconst datetime = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('datetime');\r\n    return value.toLocaleString(config.locale);\r\n  }\r\n}\r\n\r\nconst ymd = (options?:string[]) => {\r\n  const opt = options?.[0] ?? '-';\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('ymd');\r\n    const year = value.getFullYear().toString();\r\n    const month = (value.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = value.getDate().toString().padStart(2, '0');\r\n    return `${year}${opt}${month}${opt}${day}`;\r\n  }\r\n}\r\n\r\nconst falsy = (options?:string[]) => {\r\n  return (value: any) => value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value);\r\n}\r\n\r\nconst truthy = (options?:string[]) => {\r\n  return (value: any) =>value !== false && value !== null && value !== undefined && value !== 0 && value !== '' && !Number.isNaN(value);\r\n}\r\n\r\nconst defaults = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('defaults');\r\n  return (value: any) => {\r\n    if (value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value)) return opt;\r\n    return value;\r\n  }\r\n}\r\n\r\nconst boolean = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Boolean(value);\r\n  }\r\n}\r\n\r\nconst number = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Number(value);\r\n  }\r\n}\r\n\r\nconst string = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return String(value);\r\n  }\r\n}\r\n\r\nconst _null = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return (value === \"\") ? null : value;\r\n  } \r\n}\r\n\r\nconst builtinFilters: FilterWithOptions = {\r\n  eq,\r\n  ne,\r\n  not,\r\n  \r\n  lt,\r\n  le,\r\n  gt,\r\n  ge,\r\n\r\n  inc,\r\n  dec,\r\n  mul,\r\n  div,\r\n\r\n  fix,\r\n  locale,\r\n  uc,\r\n  lc,\r\n  cap,\r\n  trim,\r\n  slice,\r\n  substr,\r\n  pad,\r\n  rep,\r\n  rev,\r\n\r\n  int,\r\n  float,\r\n  round,\r\n  floor,\r\n  ceil,\r\n  percent,\r\n\r\n  date,\r\n  time,\r\n  datetime,\r\n  ymd,\r\n\r\n  falsy,\r\n  truthy,\r\n  defaults,\r\n\r\n  boolean,\r\n  number,\r\n  string,\r\n  \"null\": _null,\r\n};\r\n\r\nexport const outputBuiltinFilters = builtinFilters;\r\nexport const inputBuiltinFilters = builtinFilters;\r\n\r\nexport const builtinFilterFn = (name:string, options: string[]) => (filters: FilterWithOptions) => {\r\n  const filter = filters[name];\r\n  if (!filter) throw new Error(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(options);\r\n}\r\n\r\n","\r\nlet id = 0;\r\n\r\nexport function generateId(): number {\r\n  return ++id;\r\n}","\r\nexport function raiseError(message: string): never {\r\n  throw new Error(message);\r\n}\r\n","import { raiseError } from \"../utils\";\r\nimport { IStructiveState } from \"./types\";\r\n\r\nconst stateClassById: Record<number,IStructiveState> = {};\r\n\r\nexport function registerStateClass(id: number, stateClass: IStructiveState) {\r\n  stateClassById[id] = stateClass;\r\n}\r\n\r\nexport function getStateClassById(id: number): IStructiveState {\r\n  return stateClassById[id] ?? raiseError(`getStateClassById: stateClass not found: ${id}`);\r\n}\r\n","import { raiseError } from \"../utils\";\r\n\r\nconst styleSheetById: Record<number,CSSStyleSheet> = {};\r\n\r\nexport function registerStyleSheet(id: number, css: CSSStyleSheet) {\r\n  styleSheetById[id] = css;\r\n}\r\n\r\nexport function getStyleSheetById(id: number): CSSStyleSheet {\r\n  return styleSheetById[id] ?? raiseError(`getStyleSheetById: stylesheet not found: ${id}`);\r\n}","import { registerStyleSheet } from \"./registerStyleSheet\";\r\n\r\nexport function registerCss(id: number, css: string) {\r\n  const styleSheet = new CSSStyleSheet();\r\n  styleSheet.replaceSync(css);\r\n  registerStyleSheet(id, styleSheet);\r\n}","import { FilterFn, Filters, FilterWithOptions } from \"../Filter/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nfunction textToFilter(filters:FilterWithOptions, text: IFilterText): FilterFn {\r\n  const filter = filters[text.name];\r\n  if (!filter) raiseError(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(text.options);\r\n}\r\n\r\nconst cache : Map<IFilterText[], Filters> = new Map();\r\n\r\nexport function createFilters(filters:FilterWithOptions, texts: IFilterText[]): Filters {\r\n  let result = cache.get(texts);\r\n  if (typeof result === \"undefined\") {\r\n    result = [];\r\n    for(let i = 0; i < texts.length; i++) {\r\n      result.push(textToFilter(filters, texts[i]));\r\n    }\r\n    cache.set(texts, result);\r\n  }\r\n  return result;\r\n}\r\n","import { Filters } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { IBindingNode } from \"./types\";\r\n\r\nexport class BindingNode implements IBindingNode {\r\n  #binding: IBinding;\r\n  #node: Node;\r\n  #name: string;\r\n  #filters: Filters;\r\n  #event: string | null;\r\n  #bindContents: Set<IBindContent> = new Set<IBindContent>();\r\n  get node(): Node {\r\n    return this.#node;\r\n  }\r\n  get name(): string {\r\n    return this.#name;\r\n  }\r\n  get subName(): string {\r\n    return this.#name;\r\n  }\r\n  get binding(): IBinding {\r\n    return this.#binding;\r\n  }\r\n  get event(): string | null {\r\n    return this.#event;\r\n  }\r\n  get filters(): Filters {\r\n    return this.#filters;\r\n  }\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    node  : Node, \r\n    name  : string,\r\n    filters: Filters,\r\n    event : string | null\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#node = node;\r\n    this.#name = name;\r\n    this.#filters = filters;\r\n    this.#event = event;\r\n  }\r\n  init():void {\r\n  }\r\n  update(): void {\r\n    this.assignValue(this.binding.bindingState.filteredValue);\r\n  }\r\n  assignValue(value: any): void {\r\n    raiseError(`BindingNode: assignValue not implemented`);\r\n  }\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    raiseError(`BindingNode: updateElements not implemented`);\r\n  }\r\n  get isSelectElement(): boolean {\r\n    return this.node instanceof HTMLSelectElement;\r\n  }\r\n  get value():any {\r\n    return null;\r\n  }\r\n  get filteredValue():any {\r\n    return null;\r\n  }\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeAttribute extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    node   : Node, \r\n    name   : string,\r\n    filters: Filters,\r\n    event  : string | null\r\n  ) {\r\n    super(binding, node, name, filters, event);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as Element;\r\n    element.setAttribute(this.subName, value.toString());\r\n  }\r\n}\r\n\r\nexport const createBindingNodeAttribute: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeAttribute(binding, node, name, filterFns, event);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeCheckbox extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeCheckbox.update: value is not array`, );\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.map(_val => _val.toString()).includes(element.value);\r\n  }\r\n}\r\n\r\nexport const createBindingNodeCheckbox: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeCheckbox(binding, node, name, filterFns, event);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeClassList extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeClassList.update: value is not array`);\r\n    }\r\n    const element = this.node as Element;\r\n    element.className = value.join(\" \");\r\n  }\r\n}\r\n\r\nexport const createBindingNodeClassList: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassList(binding, node, name, filterFns, event);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeClassName extends BindingNode {\r\n  #subName: string;\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    node   : Node, \r\n    name   : string,\r\n    filters: Filters,\r\n    event  : string | null\r\n  ) {\r\n    super(binding, node, name, filters, event);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeClassName.update: value is not boolean`);\r\n    }\r\n    const element = this.node as Element;\r\n    if (value) {\r\n      element.classList.add(this.subName);\r\n    } else {\r\n      element.classList.remove(this.subName);\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBindingNodeClassName: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassName(binding, node, name, filterFns, event);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeEvent extends BindingNode {\r\n  #subName    : string;\r\n  constructor(\r\n    binding: IBinding, \r\n    node   : Node, \r\n    name   : string,\r\n    filters: Filters,\r\n    event  : string | null\r\n  ) {\r\n    super(binding, node, name, filters, event);\r\n    this.#subName = this.name.slice(2); // on～\r\n    const element = node as HTMLElement;\r\n    element.addEventListener(this.subName, (e:Event) => this.handler(e));\r\n  }\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  update() {\r\n    // 何もしない\r\n  }\r\n\r\n  handler(e: Event) {\r\n    const bindingState = this.binding.bindingState;\r\n    const engine = this.binding.engine;\r\n    const stateProxy = engine.stateProxy;\r\n    const updater = engine.updater;\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n    const indexes = loopContext?.serialize().map((context) => context.listIndex.index) ?? [];\r\n    const option = this.event;\r\n    if (option === \"preventDefault\") {\r\n      e.preventDefault();\r\n    }\r\n    this.binding.engine.updater.addProcess(async () => {\r\n      const value = bindingState.value;\r\n      const typeOfValue = typeof value;\r\n      updater.addProcess(async () => {\r\n        if (loopContext) {\r\n          await engine.setLoopContext(loopContext, async () => {\r\n            if (typeOfValue === \"function\") {\r\n              await Reflect.apply(value, stateProxy, [e, ...indexes]);\r\n            } else {\r\n              // ToDo:error\r\n            }\r\n          });\r\n        } else {\r\n          if (typeOfValue === \"function\") {\r\n            await Reflect.apply(value, stateProxy, [e, ...indexes]);\r\n          } else {\r\n            // ToDo:error\r\n          }\r\n        }\r\n      });\r\n    });\r\n  } \r\n}\r\n\r\nexport const createBindingNodeEvent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeEvent(binding, node, name, filterFns, event);\r\n  }\r\n","export const DATA_BIND_ATTRIBUTE = \"data-bind\";\r\nexport const COMMENT_EMBED_MARK = \"@@:\"; // 埋め込み変数のマーク\r\nexport const COMMENT_TEMPLATE_MARK = \"@@|\"; // テンプレートのマーク\r\n","import { COMMENT_TEMPLATE_MARK } from \"../../constants\";\r\nimport { Filters } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\n\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\nexport class BindingNodeBlock extends BindingNode {\r\n  #id: number;\r\n  get id(): number {\r\n    return this.#id;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    node   : Node, \r\n    name   : string,\r\n    filters: Filters,\r\n    event  : string | null\r\n  ) {\r\n    super(binding, node, name, filters, event);\r\n    const id = this.node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN) ?? raiseError(\"BindingNodeBlock.id: invalid node\");\r\n    this.#id = Number(id);\r\n  }\r\n    \r\n}","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { createBindContent } from \"../BindContent\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeIf extends BindingNodeBlock {\r\n  #bindContent: IBindContent;\r\n  #trueBindContents: Set<IBindContent>;\r\n  #falseBindContents: Set<IBindContent> = new Set();\r\n  #bindContents: Set<IBindContent>;\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n\r\n  constructor(\r\n    binding: IBinding, \r\n    node   : Node, \r\n    name   : string,\r\n    filters: Filters,\r\n    event  : string | null\r\n  ) {\r\n    super(binding, node, name, filters, event);\r\n    this.#bindContent = createBindContent(\r\n      this.binding, \r\n      this.id, \r\n      this.binding.engine, \r\n      \"\", \r\n      null\r\n    );\r\n    this.#trueBindContents = this.#bindContents = new Set([this.#bindContent]);\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeIf.update: value is not boolean`);\r\n    }\r\n    const parentNode = this.node.parentNode;\r\n    if (parentNode == null) {\r\n      raiseError(`BindingNodeIf.update: parentNode is null`);\r\n    }\r\n    if (value) {\r\n      this.#bindContent.render();\r\n      this.#bindContent.mountBefore(parentNode, this.node.nextSibling);\r\n      this.#bindContents = this.#trueBindContents;\r\n    } else {\r\n      this.#bindContent.unmount();\r\n      this.#bindContents = this.#falseBindContents;\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBindingNodeIf: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeIf(binding, node, name, filterFns, event);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { createBindContent } from \"../BindContent\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeFor extends BindingNodeBlock {\r\n  #bindContentsSet       : Set<IBindContent> = new Set<IBindContent>();\r\n  #bindContentByListIndex: WeakMap<IListIndex, IBindContent> = new WeakMap();\r\n  #bindContentPool       : IBindContent[] = [];\r\n  #bindContentLastIndex  : number = 0;\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContentsSet;\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  createBindContent(listIndex: IListIndex): IBindContent {\r\n    let bindContent: IBindContent;\r\n    if (this.#bindContentLastIndex >= 0) {\r\n      // プールの最後の要素を取得して、プールの長さをあとで縮減する\r\n      // 作るたびにプールを縮減すると、パフォーマンスが悪化するため\r\n      // プールの長さを縮減するのは、全ての要素を作った後に行う\r\n      bindContent = this.#bindContentPool[this.#bindContentLastIndex];\r\n      this.#bindContentLastIndex--;\r\n      bindContent.assignListIndex(listIndex);\r\n    } else {\r\n      bindContent = createBindContent(\r\n        this.binding, \r\n        this.id, \r\n        this.binding.engine, \r\n        this.binding.bindingState.pattern + \".*\", \r\n        listIndex);\r\n    }\r\n    // 登録\r\n    this.#bindContentByListIndex.set(listIndex, bindContent);\r\n    return bindContent;\r\n  }\r\n\r\n  deleteBindContent(bindContent: IBindContent): void {\r\n    bindContent.unmount();\r\n    bindContent.loopContext?.clearListIndex();\r\n  }\r\n\r\n  get bindContentLastIndex():number {\r\n    return this.#bindContentLastIndex;\r\n  }\r\n  set bindContentLastIndex(value:number) {\r\n    this.#bindContentLastIndex = value;\r\n  }\r\n\r\n  get poolLength():number {\r\n    return this.#bindContentPool.length;\r\n  }\r\n  set poolLength(length: number) {\r\n    if (length < 0) {\r\n      raiseError(`BindingNodeFor.setPoolLength: length is negative`);\r\n    }\r\n    this.#bindContentPool.length = length;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeFor.assignValue: value is not array`);\r\n    }\r\n    const listIndexesSet = this.binding.engine.getListIndexesSet(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex\r\n    );\r\n    if (listIndexesSet === null) {\r\n      raiseError(`BindingNodeFor.assignValue: listIndexes is not found`);\r\n    }\r\n    this.bindContentLastIndex = this.poolLength - 1;\r\n    const newBindContensSet = new Set<IBindContent>();\r\n    let lastBindContent = null;\r\n    const parentNode = this.node.parentNode;\r\n    if (parentNode == null) {\r\n      raiseError(`BindingNodeFor.update: parentNode is null`);\r\n    }\r\n    for(const listIndex of listIndexesSet) {\r\n      const lastNode = lastBindContent?.getLastNode(parentNode) ?? this.node;\r\n      let bindContent = this.#bindContentByListIndex.get(listIndex);\r\n      if (typeof bindContent === \"undefined\") {\r\n        bindContent = this.createBindContent(listIndex);\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        if (lastNode.nextSibling !== bindContent.firstChildNode) {\r\n          bindContent.mountAfter(parentNode, lastNode);\r\n        }\r\n      }\r\n      newBindContensSet.add(bindContent);\r\n      lastBindContent = bindContent;\r\n    }\r\n    // プールの長さを更新する\r\n    // プールの長さは、プールの最後の要素のインデックス+1であるため、\r\n    this.poolLength = this.bindContentLastIndex + 1;\r\n    // 削除\r\n    const removeBindContentsSet = this.#bindContentsSet.difference(newBindContensSet);\r\n    for(const bindContent of removeBindContentsSet) {\r\n      this.deleteBindContent(bindContent);\r\n    }\r\n    this.#bindContentPool.push(...removeBindContentsSet);\r\n    this.#bindContentsSet = newBindContensSet;\r\n  }\r\n\r\n  /**\r\n   * SWAP処理を想定\r\n   * \r\n   * @param listIndexes \r\n   * @param values \r\n   * @returns \r\n   */\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    if (typeof values[0] !== \"object\") return;\r\n    const engine = this.binding.engine;\r\n    const oldListValues = \r\n      engine.getList(\r\n        this.binding.bindingState.info, \r\n        this.binding.bindingState.listIndex\r\n      ) ?? raiseError(`BindingNodeFor.updateElements: oldValues is not found`); \r\n    const parentNode = this.node.parentNode ?? raiseError(`BindingNodeFor.update: parentNode is null`);\r\n\r\n    // DOMから削除\r\n    const currentBindContents = Array.from(this.#bindContentsSet);\r\n    const targetBindContents: IBindContent[] = [];\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const bindContent = currentBindContents[listIndex.index];\r\n      bindContent.unmount();\r\n      targetBindContents.push(bindContent);\r\n    }\r\n\r\n    // DOMに追加、listIndexを更新\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const index = listIndex.index;\r\n\r\n      const lastBindContent = currentBindContents[index - 1] ?? null;\r\n      const lastNode = lastBindContent?.lastChildNode ?? this.node;\r\n\r\n      const oldValue = oldListValues[index];\r\n      const targetIndex = values.indexOf(oldValue);\r\n      const prevBindContent = targetBindContents[targetIndex];\r\n\r\n      if (typeof prevBindContent === \"undefined\") {\r\n        // 入れ替えるBindContentがない場合は再描画\r\n        const bindContent = targetBindContents[index];\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        prevBindContent.assignListIndex(listIndex);\r\n        prevBindContent.mountAfter(parentNode, lastNode);\r\n        this.#bindContentByListIndex.set(listIndex, prevBindContent);\r\n        currentBindContents[index] = prevBindContent;\r\n      }\r\n      if (targetIndex >= 0) {\r\n        values[targetIndex] = -1;\r\n      }\r\n    }\r\n    this.#bindContentsSet = new Set<IBindContent>(currentBindContents);\r\n    engine.saveList(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex, \r\n      this.binding.bindingState.value.slice(0)\r\n    );\r\n  }\r\n}\r\n\r\nexport const createBindingNodeFor: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeFor(binding, node, name, filterFns, event);\r\n  }\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DEFAULT_PROPERTY = \"textContent\";\r\n\r\ntype DefaultPropertyByElementType = {\r\n  [key:string]: string;\r\n}\r\n\r\nconst defaultPropertyByElementType:DefaultPropertyByElementType = {\r\n  \"radio\"   : \"checked\",\r\n  \"checkbox\": \"checked\",\r\n  \"button\"  : \"onclick\",\r\n}\r\n\r\n/**\r\n * HTML要素のデフォルトプロパティを取得\r\n */\r\nconst getDefaultPropertyHTMLElement = (node:Node):string => \r\n  node instanceof HTMLSelectElement || node instanceof HTMLTextAreaElement || node instanceof HTMLOptionElement ? \"value\" : \r\n  node instanceof HTMLButtonElement ? \"onclick\" : \r\n  node instanceof HTMLAnchorElement ? \"onclick\" : \r\n  node instanceof HTMLFormElement ? \"onsubmit\" : \r\n  node instanceof HTMLInputElement ? (defaultPropertyByElementType[node.type] ?? \"value\") :\r\n  DEFAULT_PROPERTY;\r\n\r\ntype DefaultPropertyByKey = {\r\n  [key:string]: string | undefined;\r\n}\r\n\r\nconst _cache: DefaultPropertyByKey = {};\r\n\r\nconst textContentProperty = (node:Node):string => DEFAULT_PROPERTY;\r\n\r\ntype GetDefaultPropertyByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>string) | undefined;\r\n}\r\n\r\nconst getDefaultPropertyByNodeType: GetDefaultPropertyByNodeType = {\r\n  HTMLElement: getDefaultPropertyHTMLElement,\r\n  SVGElement : undefined,\r\n  Text       : textContentProperty,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * バインド情報でノードプロパティを省略された場合のデフォルトのプロパティ名を取得\r\n * @param node ノード\r\n * @param nodeType ノードタイプ\r\n * @returns {string | undefined} デフォルトのプロパティ名\r\n */\r\nexport function getDefaultName(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): string | undefined {\r\n  const key = node.constructor.name + \"\\t\" + ((node as HTMLInputElement).type ?? \"\"); // type attribute\r\n  return _cache[key] ?? (_cache[key] = getDefaultPropertyByNodeType[nodeType]?.(node));\r\n}\r\n  ","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { getDefaultName } from \"../../BindingBuilder/getDefaultName\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { SetByRefSymbol } from \"../../StateClass/symbols\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nfunction isTwoWayBindable(element: HTMLElement): boolean {\r\n  return element instanceof HTMLInputElement || \r\n    element instanceof HTMLTextAreaElement || \r\n    element instanceof HTMLSelectElement;\r\n}\r\n\r\nconst defaultEventByName: {[key:string]: string} = {\r\n  \"value\"   : \"input\",\r\n  \"checked\" : \"change\",\r\n  \"selected\": \"change\",\r\n};\r\n\r\nclass BindingNodeProperty extends BindingNode {\r\n  get value(): any {\r\n    // @ts-ignore\r\n    return this.node[this.name];\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.filters.length; i++) {\r\n      value = this.filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    node   : Node, \r\n    name   : string,\r\n    filters: Filters,\r\n    event  : string | null\r\n  ) {\r\n    super(binding, node, name, filters, event);\r\n\r\n    const isElement = this.node instanceof HTMLElement;\r\n    if (!isElement) return;\r\n    if (!isTwoWayBindable(this.node)) return;\r\n    const defaultName = getDefaultName(this.node, \"HTMLElement\");\r\n    if (defaultName !== this.name) return;\r\n    const eventName = this.event ?? defaultEventByName[this.name] ?? \"readonly\";\r\n    if (event === \"readonly\" || event === \"ro\") return;\r\n    this.node.addEventListener(eventName, () => {\r\n      this.binding.updateStateValue(this.filteredValue);\r\n    });\r\n\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    // @ts-ignore\r\n    this.node[this.name] = value;\r\n  }\r\n}\r\n\r\nexport const createBindingNodeProperty: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeProperty(binding, node, name, filterFns, event);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeRadio extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.toString() === element.value.toString();\r\n  }\r\n}\r\n\r\nexport const createBindingNodeRadio: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeRadio(binding, node, name, filterFns, event);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeByNodeFn, CreateBindingNodeFn, IBindingNode } from \"./types\";\r\n\r\nclass BindingNodeStyle extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    node   : Node, \r\n    name   : string,\r\n    filters: Filters,\r\n    event  : string | null\r\n  ) {\r\n    super(binding, node, name, filters, event);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLElement;\r\n    element.style.setProperty(this.subName, value.toString());\r\n  }\r\n}\r\n\r\nexport const createBindingNodeStyle: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeStyle(binding, node, name, filterFns, event);\r\n  }\r\n","\r\nconst symbolName = \"componentState\";\r\n\r\nexport const RenderSymbol : unique symbol = Symbol.for(`${symbolName}.render`);\r\nexport const BindParentComponentSymbol : unique symbol = Symbol.for(`${symbolName}.bindParentComponent`);\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { RenderSymbol } from \"../../ComponentState/symbols\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { StructiveComponent } from \"../../WebComponents/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeComponent extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    node   : Node, \r\n    name   : string,\r\n    filters: Filters,\r\n    event  : string | null\r\n  ) {\r\n    super(binding, node, name, filters, event);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  init(): void {\r\n    const engine = this.binding.engine;\r\n    let bindings = engine.bindingsByComponent.get(this.node as StructiveComponent);\r\n    if (typeof bindings === \"undefined\") {\r\n      bindings = new Set<IBinding>();\r\n      engine.bindingsByComponent.set(this.node as StructiveComponent, bindings);\r\n    }\r\n    bindings.add(this.binding);\r\n  }\r\n\r\n  assignValue(value: any): void {\r\n    const component = this.node as StructiveComponent;\r\n    component.state[RenderSymbol](this.subName, value);\r\n  }\r\n\r\n}\r\n\r\nexport const createBindingNodeComponent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeComponent(binding, node, name, filterFns, event);\r\n  }\r\n","import { createBindingNodeAttribute } from \"../DataBinding/BindingNode/BindingNodeAttribute\";\r\nimport { createBindingNodeCheckbox } from \"../DataBinding/BindingNode/BindingNodeCheckbox\";\r\nimport { createBindingNodeClassList } from \"../DataBinding/BindingNode/BindingNodeClassList\";\r\nimport { createBindingNodeClassName } from \"../DataBinding/BindingNode/BindingNodeClassName\";\r\nimport { createBindingNodeEvent } from \"../DataBinding/BindingNode/BindingNodeEvent\";\r\nimport { createBindingNodeIf } from \"../DataBinding/BindingNode/BindingNodeIf\";\r\nimport { createBindingNodeFor } from \"../DataBinding/BindingNode/BindingNodeFor\";\r\nimport { createBindingNodeProperty } from \"../DataBinding/BindingNode/BindingNodeProperty\";\r\nimport { createBindingNodeRadio } from \"../DataBinding/BindingNode/BindingNodeRadio\";\r\nimport { createBindingNodeStyle } from \"../DataBinding/BindingNode/BindingNodeStyle\";\r\nimport { CreateBindingNodeByNodeFn, CreateBindingNodeFn } from \"../DataBinding/BindingNode/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IFilterText } from \"./types\";\r\nimport { createBindingNodeComponent } from \"../DataBinding/BindingNode/BindingNodeComponent\";\r\n\r\ntype NodePropertyConstructorByName = {[key:string]:CreateBindingNodeFn};\r\ntype NodePropertyConstructorByNameByIsComment = {[key:number]:NodePropertyConstructorByName};\r\n\r\nconst nodePropertyConstructorByNameByIsComment:NodePropertyConstructorByNameByIsComment = {\r\n  0: {\r\n    \"class\"   : createBindingNodeClassList,\r\n    \"checkbox\": createBindingNodeCheckbox,\r\n    \"radio\"   : createBindingNodeRadio,\r\n  },\r\n  1: {\r\n    \"if\" : createBindingNodeIf,\r\n  },\r\n};\r\n\r\ntype NodePropertyConstructorByFirstName = {[key:string]:CreateBindingNodeFn};\r\n\r\nconst nodePropertyConstructorByFirstName:NodePropertyConstructorByFirstName = {\r\n  \"class\": createBindingNodeClassName,\r\n  \"attr\" : createBindingNodeAttribute,\r\n  \"style\": createBindingNodeStyle,\r\n  \"state\": createBindingNodeComponent,\r\n//  \"popover\": PopoverTarget,\r\n//  \"commandfor\": CommandForTarget,\r\n};\r\n\r\nfunction _getBindingNodeCreator(isComment:boolean, isElement: boolean, propertyName: string): CreateBindingNodeFn {\r\n  const bindingNodeCreatorByName = nodePropertyConstructorByNameByIsComment[isComment ? 1 : 0][propertyName];\r\n  if (typeof bindingNodeCreatorByName !== \"undefined\") {\r\n    return bindingNodeCreatorByName;\r\n  }\r\n  if (isComment && propertyName === \"for\") {\r\n    return createBindingNodeFor;\r\n  }\r\n  if (isComment) {\r\n    raiseError(`getBindingNodeCreator: unknown node property ${propertyName}`);\r\n  }\r\n  const nameElements = propertyName.split(\".\");\r\n  const bindingNodeCreatorByFirstName = nodePropertyConstructorByFirstName[nameElements[0]];\r\n  if (typeof bindingNodeCreatorByFirstName !== \"undefined\") {\r\n    return bindingNodeCreatorByFirstName;\r\n  }\r\n  if (isElement) {\r\n    if (propertyName.startsWith(\"on\")) {\r\n      return createBindingNodeEvent;\r\n    } else {\r\n      return createBindingNodeProperty;\r\n    }\r\n  } else {\r\n    return createBindingNodeProperty;\r\n  }\r\n}\r\n\r\nconst _cache: {[key:string]:CreateBindingNodeFn} = {};\r\n\r\n/**\r\n * バインドのノードプロパティの生成関数を取得する\r\n * @param node ノード\r\n * @param propertyName プロパティ名\r\n * @returns {CreateBindingNodeFn} ノードプロパティのコンストラクタ\r\n */\r\nexport function getBindingNodeCreator(\r\n  node        : Node, \r\n  propertyName: string,\r\n  filterTexts: IFilterText[],\r\n  event       : string | null\r\n): CreateBindingNodeByNodeFn {\r\n  const isComment = node instanceof Comment;\r\n  const isElement = node instanceof Element;\r\n  const key = isComment + \"\\t\" + isElement + \"\\t\" + propertyName;\r\n  const fn = _cache[key] ?? (_cache[key] = _getBindingNodeCreator(isComment, isElement, propertyName));\r\n  return fn(propertyName, filterTexts, event);\r\n}\r\n","\r\nconst symbolName = \"state\";\r\n\r\nexport const GetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.GetByRef`);\r\nexport const SetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.SetByRef`);\r\nexport const SetCacheableSymbol        : unique symbol = Symbol.for(`${symbolName}.SetCacheable`);\r\nexport const ConnectedCallbackSymbol   : unique symbol = Symbol.for(`${symbolName}.ConnectedCallback`);\r\nexport const DisconnectedCallbackSymbol: unique symbol = Symbol.for(`${symbolName}.DisconnectedCallback`);\r\nexport const ResolveSymbol             : unique symbol = Symbol.for(`${symbolName}.Resolve`);\r\nexport const GetAllSymbol              : unique symbol = Symbol.for(`${symbolName}.GetAll`);\r\n","import { raiseError } from '../utils';\r\nimport { getResolvedPathInfo } from './getResolvedPathInfo';\r\nimport { IResolvedPathInfo, IStructuredPathInfo } from './types';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IStructuredPathInfo } = {};\r\n//const _cache: Map<string, IStructuredPathInfo> = new Map();\r\n\r\n/**\r\n * パターン情報を取得します\r\n * @param pattern パターン\r\n * @returns {IPatternInfo} パターン情報\r\n */\r\nclass StructuredPathInfo implements IStructuredPathInfo {\r\n  static id = 0;\r\n  id = ++StructuredPathInfo.id;\r\n  pattern;\r\n  pathSegments;\r\n  lastSegment;\r\n  cumulativePaths;\r\n  cumulativeInfos;\r\n  wildcardPaths;\r\n  wildcardInfos;\r\n  wildcardParentPaths;\r\n  wildcardParentInfos;\r\n  lastWildcardPath;\r\n  lastWildcardInfo;\r\n  parentPath;\r\n  parentInfo;\r\n  wildcardCount;\r\n\r\n  constructor(pattern: string) {\r\n    const getPattern = (_pattern: string): IStructuredPathInfo => {\r\n      return (pattern === _pattern) ? this : getStructuredPathInfo(_pattern);\r\n    };\r\n    const pathSegments = pattern.split(\".\");\r\n    const cumulativePaths = [];\r\n    const cumulativeInfos: IStructuredPathInfo[] = [];\r\n    const wildcardPaths = [];\r\n    const wildcardInfos = [];\r\n    const wildcardParentPaths = [];\r\n    const wildcardParentInfos = [];\r\n    let currentPatternPath = \"\", prevPatternPath = \"\";\r\n    let wildcardCount = 0;\r\n    for(let i = 0; i < pathSegments.length; i++) {\r\n      currentPatternPath += pathSegments[i];\r\n      if (pathSegments[i] === \"*\") {\r\n        wildcardPaths.push(currentPatternPath);\r\n        wildcardInfos.push(getPattern(currentPatternPath));\r\n        wildcardParentPaths.push(prevPatternPath);\r\n        wildcardParentInfos.push(getPattern(prevPatternPath));\r\n        wildcardCount++;\r\n      }\r\n      cumulativePaths.push(currentPatternPath);\r\n      cumulativeInfos.push(getPattern(currentPatternPath));\r\n      prevPatternPath = currentPatternPath;\r\n      currentPatternPath += \".\";\r\n    }\r\n    const lastWildcardPath = wildcardPaths.length > 0 ? wildcardPaths[wildcardPaths.length - 1] : null;\r\n    const parentPath = cumulativePaths.length > 1 ? cumulativePaths[cumulativePaths.length - 2] : null;\r\n    this.pattern = pattern;\r\n    this.pathSegments = pathSegments;\r\n    this.lastSegment = pathSegments[pathSegments.length - 1];\r\n    this.cumulativePaths = cumulativePaths;\r\n    this.cumulativeInfos = cumulativeInfos;\r\n    this.wildcardPaths = wildcardPaths;\r\n    this.wildcardInfos = wildcardInfos;\r\n    this.wildcardParentPaths = wildcardParentPaths;\r\n    this.wildcardParentInfos = wildcardParentInfos;\r\n    this.lastWildcardPath = lastWildcardPath;\r\n    this.lastWildcardInfo = lastWildcardPath ? getPattern(lastWildcardPath) : null;\r\n    this.parentPath = parentPath;\r\n    this.parentInfo = parentPath ? getPattern(parentPath) : null;\r\n    this.wildcardCount = wildcardCount;\r\n  }\r\n}\r\n\r\nconst reservedWords = new Set([\r\n  \"constructor\", \"prototype\", \"__proto__\", \"toString\",\r\n  \"valueOf\", \"hasOwnProperty\", \"isPrototypeOf\",\r\n  \"watch\", \"unwatch\", \"eval\", \"arguments\",\r\n  \"let\", \"var\", \"const\", \"class\", \"function\",\r\n  \"null\", \"true\", \"false\", \"new\", \"return\",\r\n]);\r\n\r\nexport function getStructuredPathInfo(structuredPath: string): IStructuredPathInfo {\r\n  let info: IStructuredPathInfo | undefined;\r\n  info = _cache[structuredPath];\r\n  if (typeof info !== \"undefined\") {\r\n    return info;\r\n  }\r\n  if (reservedWords.has(structuredPath)) {\r\n    raiseError(`getStructuredPathInfo: pattern is reserved word: ${structuredPath}`);\r\n  }\r\n  return (_cache[structuredPath] = new StructuredPathInfo(structuredPath));\r\n}\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { GetByRefSymbol, SetByRefSymbol } from \"../../StateClass/symbols\";\r\nimport { IStateProxy } from \"../../StateClass/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\nclass BindingState implements IBindingState {\r\n  #binding     : IBinding;\r\n  #pattern     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return this.#pattern;\r\n  }\r\n  get info() {\r\n    return this.#info;\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#pattern = pattern;\r\n    this.#info = getStructuredPathInfo(pattern);\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.#state[GetByRefSymbol](this.info, this.listIndex);\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    if (this.info.wildcardCount > 0) {\r\n      const lastWildcardPath = this.info.lastWildcardPath ?? \r\n        raiseError(`BindingState.init: wildcardLastParentPath is null`);\r\n      const loopContext = this.binding.parentBindContent.loopContext?.find(lastWildcardPath) ?? \r\n        raiseError(`BindingState.init: loopContext is null`);\r\n      this.#listIndexRef = loopContext.listIndexRef;\r\n    }\r\n    this.binding.engine.saveBinding(this.info, this.listIndex, this.binding);\r\n  }\r\n  assignValue(value:any) {\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n    const engine = this.binding.engine;\r\n    const stateProxy = engine.stateProxy;\r\n    const bindingState = this.binding.bindingState;\r\n    if (loopContext) {\r\n      engine.setLoopContext(loopContext, async () => {\r\n        // @ts-ignore\r\n        stateProxy[SetByRefSymbol](bindingState.info, bindingState.listIndex, value);\r\n      });\r\n    } else {\r\n      // @ts-ignore\r\n      stateProxy[SetByRefSymbol](bindingState.info, bindingState.listIndex, value);\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBindingState: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n    return new BindingState(binding, state, name, filterFns);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStateProxy } from \"../../StateClass/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\nclass BindingStateIndex implements IBindingState {\r\n  #binding     : IBinding;\r\n  #indexNumber : number;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get info() {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    const indexNumber = Number(pattern.slice(1));\r\n    if (isNaN(indexNumber)) {\r\n      raiseError(\"BindingStateIndex: pattern is not a number\");\r\n    }\r\n    this.#indexNumber = indexNumber;\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.listIndex?.index ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext ??\r\n      raiseError(`BindingState.init: loopContext is null`);\r\n    const loopContexts = loopContext.serialize();\r\n    this.#listIndexRef = loopContexts[this.#indexNumber - 1].listIndexRef ??\r\n      raiseError(`BindingState.init: listIndexRef is null`);\r\n    const listIndex = this.listIndex ?? raiseError(\"listIndex is null\");\r\n    const bindings = this.binding.engine.bindingsByListIndex.get(listIndex);\r\n    if (bindings === undefined) {\r\n      this.binding.engine.bindingsByListIndex.set(listIndex, new Set([this.binding]));\r\n    } else {\r\n      bindings.add(this.binding);\r\n    }\r\n  }\r\n  assignValue(value:any): void {\r\n    raiseError(\"BindingStateIndex: assignValue is not implemented\");\r\n  }\r\n}\r\n\r\nexport const createBindingStateIndex: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n\r\n    return new BindingStateIndex(binding, state, name, filterFns);\r\n  }\r\n","import { createBindingState } from \"../DataBinding/BindingState/BindingState\";\r\nimport { createBindingStateIndex } from \"../DataBinding/BindingState/BindingStateIndex\";\r\nimport { CreateBindingStateByStateFn } from \"../DataBinding/BindingState/types\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nconst ereg = new RegExp(/^\\$\\d+$/);\r\n\r\nexport function getBindingStateCreator(\r\n  name       : string, \r\n  filterTexts: IFilterText[]\r\n): CreateBindingStateByStateFn {\r\n  if (ereg.test(name)) {\r\n    return createBindingStateIndex(name, filterTexts);\r\n  } else {\r\n    return createBindingState(name, filterTexts);\r\n  }\r\n}","import { COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants\";\r\nimport { getTemplateById } from \"../Template/registerTemplate\";\r\nimport { raiseError } from \"../utils\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst COMMENT_EMBED_MARK_LEN = COMMENT_EMBED_MARK.length;\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\nconst getTextFromContent   = (node:Node):string        => node.textContent?.slice(COMMENT_EMBED_MARK_LEN).trim() ?? \"\";\r\nconst getTextFromAttribute = (node:HTMLElement):string => node.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\nconst getTextFromTemplate  = (node:Node):string        => {\r\n  const text = node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN).trim(); \r\n  const id = Number(text);\r\n  const template = getTemplateById(id) ?? raiseError(`Template not found: ${text}`);\r\n  return template.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n};\r\nconst getTextFromSVGElement = (node:SVGElement):string => node.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n\r\nconst getTextByNodeType = {\r\n  \"Text\":        getTextFromContent,\r\n  \"HTMLElement\": getTextFromAttribute,\r\n  \"Template\":    getTextFromTemplate,\r\n  \"SVGElement\":  getTextFromSVGElement\r\n};\r\n\r\nexport function getDataBindText(nodeType: NodeType, node: Node): string {\r\n  const bindText = getTextByNodeType[nodeType](node as any) ?? \"\";\r\n  if (nodeType === \"Text\") {\r\n    return \"textContent:\" + bindText;\r\n  } else {\r\n    return bindText;\r\n  }\r\n}\r\n","import { raiseError } from \"../utils\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst createNodeKey = (node:Node):string => node.constructor.name + \"\\t\" + ((node instanceof Comment) ? (node.textContent?.[2] ?? \"\") : \"\");\r\n\r\ntype NodeTypeByNodeKey = {\r\n  [nodeKey:string]:NodeType;\r\n};\r\n\r\nconst nodeTypeByNodeKey:NodeTypeByNodeKey = {};\r\n\r\nconst getNodeTypeByNode = (node:Node):NodeType =>\r\n  (node instanceof Comment && node.textContent?.[2] === \":\") ? \"Text\" : \r\n  (node instanceof HTMLElement) ? \"HTMLElement\" :\r\n  (node instanceof Comment && node.textContent?.[2] === \"|\") ? \"Template\" : \r\n  (node instanceof SVGElement) ? \"SVGElement\" : raiseError(`Unknown NodeType: ${node.nodeType}`);\r\n\r\n/**\r\n * ノードのタイプを取得\r\n * @param node ノード\r\n * @param nodeKey ノードキー\r\n * @returns {NodeType} ノードタイプ\r\n */\r\nexport function getNodeType(\r\n  node   : Node, \r\n  nodeKey: string = createNodeKey(node)\r\n): NodeType {\r\n  return nodeTypeByNodeKey[nodeKey] ?? (nodeTypeByNodeKey[nodeKey] = getNodeTypeByNode(node));\r\n}\r\n","import { IFilterText, IBindText } from \"./types\";\r\n\r\nconst trim = (s:string):string => s.trim();\r\n\r\nconst has = (s:string):boolean => s.length > 0; // check length\r\n\r\nconst re = new RegExp(/^#(.*)#$/);\r\nconst decode = (s:string):string => {\r\n  const m = re.exec(s);\r\n  return m ? decodeURIComponent(m[1]) : s;\r\n};\r\n\r\n/**\r\n * parse filter part\r\n * \"eq,100|falsey\" ---> [Filter(eq, [100]), Filter(falsey)]\r\n */\r\nconst parseFilter = (text:string): IFilterText => {\r\n  const [name, ...options] = text.split(\",\").map(trim);\r\n  return {name, options:options.map(decode)};\r\n};\r\n\r\ntype ReturnParseStateProperty = {property:string,filters:IFilterText[]};\r\n/**\r\n * parse expression\r\n * \"value|eq,100|falsey\" ---> [\"value\", Filter[]]\r\n */\r\nconst parseProperty = (text:string): ReturnParseStateProperty => {\r\n  const [property, ...filterTexts] = text.split(\"|\").map(trim);\r\n  return {property, filters:filterTexts.map(parseFilter)};\r\n};\r\n\r\n/**\r\n * parse expressions\r\n * \"textContent:value|eq,100|falsey\" ---> [\"textContent\", \"value\", Filter[eq, falsey]]\r\n */\r\nconst parseExpression = (expression:string): IBindText => {\r\n  const [ bindExpression, event = null ] = expression.split(\"@\").map(trim);\r\n  const [nodePropertyText, statePropertyText] = bindExpression.split(\":\").map(trim);\r\n  const { property:nodeProperty, filters:inputFilterTexts } = parseProperty(nodePropertyText);\r\n  const { property:stateProperty, filters:outputFilterTexts } = parseProperty(statePropertyText);\r\n  return { nodeProperty, stateProperty, inputFilterTexts, outputFilterTexts, event };\r\n};\r\n\r\n/**\r\n * parse bind text and return BindText[]\r\n */\r\nconst parseExpressions = (text:string): IBindText[] => {\r\n  return text.split(\";\").map(trim).filter(has).map(s => parseExpression(s));\r\n};\r\n\r\nconst cache:{[key:string]: IBindText[]} = {};\r\n\r\n/**\r\n * 取得したバインドテキスト(getBindTextByNodeType)を解析して、バインド情報を取得する\r\n * @param text バインドテキスト\r\n * @param defaultName デフォルト名\r\n * @returns {IBindText[]} バインド情報\r\n */\r\nexport function parseBindText(\r\n  text: string\r\n): IBindText[] {\r\n  if (text.trim() === \"\") {\r\n    return [];\r\n  }\r\n  return cache[text] ?? (cache[text] = parseExpressions(text));\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DATASET_BIND_PROPERTY = 'data-bind';\r\n\r\nconst removeAttributeFromElement = (node:Node):void => {\r\n  const element = node as Element;\r\n  element.removeAttribute(DATASET_BIND_PROPERTY);\r\n}\r\n\r\ntype RemoveAttributeByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>void) | undefined;\r\n}\r\n\r\nconst removeAttributeByNodeType:RemoveAttributeByNodeType = {\r\n  HTMLElement: removeAttributeFromElement,\r\n  SVGElement : removeAttributeFromElement,\r\n  Text       : undefined,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * ノードからdata-bind属性を削除\r\n * @param node ノード\r\n * @param nodeType ノードタイプ\r\n * @returns {Node} ノード\r\n */\r\nexport function removeDataBindAttribute(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n):void {\r\n  return removeAttributeByNodeType[nodeType]?.(node);\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst replaceTextNodeText = (node:Node):Node => {\r\n  const textNode = document.createTextNode(\"\");\r\n  node.parentNode?.replaceChild(textNode, node);\r\n  return textNode;\r\n}\r\n\r\ntype ReplaceTextNodeFn = {\r\n  [key in NodeType]: ((node:Node)=>Node) | undefined;\r\n}\r\n\r\nconst replaceTextNodeFn:ReplaceTextNodeFn = {\r\n  Text       : replaceTextNodeText,\r\n  HTMLElement: undefined,\r\n  Template   : undefined,\r\n  SVGElement : undefined\r\n}\r\n\r\n/**\r\n * コメントノードをテキストノードに置き換える\r\n * @param node ノード\r\n * @param nodeType ノードタイプ\r\n * @returns {Node} ノード\r\n */\r\nexport function replaceTextNodeFromComment(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): Node {\r\n  return replaceTextNodeFn[nodeType]?.(node) ?? node;\r\n}\r\n","import { getAbsoluteNodePath } from \"./getAbsoluteNodePath\";\r\nimport { getBindingNodeCreator } from \"./getBindingNodeCreator\";\r\nimport { getBindingStateCreator } from \"./getBindingStateCreator\";\r\nimport { getDataBindText } from \"./getDataBindText\";\r\nimport { getNodeType } from \"./getNodeType\";\r\nimport { parseBindText } from \"./parseBindText\";\r\nimport { removeDataBindAttribute } from \"./removeDataBindAttribute\";\r\nimport { replaceTextNodeFromComment } from \"./replaceTextNodeFromComment\";\r\nimport { IBindingCreator, IBindText, IDataBindAttributes, NodePath, NodeType } from \"./types\";\r\n\r\nclass DataBindAttributes implements IDataBindAttributes {\r\n  nodeType     : NodeType; // ノードの種別\r\n  nodePath     : NodePath; // ノードのルート\r\n  bindTexts    : IBindText[]; // BINDテキストの解析結果\r\n  creatorByText: Map<IBindText, IBindingCreator> = new Map(); // BINDテキストからバインディングクリエイターを取得\r\n  constructor(node: Node) {\r\n    this.nodeType = getNodeType(node);\r\n    const text = getDataBindText(this.nodeType, node);\r\n    // CommentNodeをTextに置換、template.contentの内容が書き換わることに注意\r\n    node = replaceTextNodeFromComment(node, this.nodeType);\r\n    // data-bind属性を削除する\r\n    removeDataBindAttribute(node, this.nodeType);\r\n\r\n    this.nodePath = getAbsoluteNodePath(node);\r\n    this.bindTexts = parseBindText(text);\r\n    for(let i = 0; i < this.bindTexts.length; i++) {\r\n      const bindText = this.bindTexts[i];\r\n      const creator: IBindingCreator = {\r\n        createBindingNode : getBindingNodeCreator(\r\n          node, \r\n          bindText.nodeProperty, \r\n          bindText.inputFilterTexts,\r\n          bindText.event\r\n        ),\r\n        createBindingState: getBindingStateCreator(\r\n          bindText.stateProperty, \r\n          bindText.outputFilterTexts\r\n        ),\r\n      }\r\n      this.creatorByText.set(bindText, creator);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function createDataBindAttributes(node: Node): IDataBindAttributes {\r\n  return new DataBindAttributes(node);\r\n}","import { NodePath } from \"./types\";\r\n\r\nexport function getAbsoluteNodePath(node: Node): NodePath {\r\n  let routeIndexes: NodePath = [];\r\n  while(node.parentNode !== null) {\r\n    const childNodes = Array.from(node.parentNode.childNodes) as Node[];\r\n    routeIndexes = [ childNodes.indexOf(node), ...routeIndexes ];\r\n    node = node.parentNode;\r\n  }\r\n  return routeIndexes;\r\n}","import { DATA_BIND_ATTRIBUTE, COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK } from \"../constants\";\r\n\r\n/**\r\n * \"@@:\"もしくは\"@@|\"で始まるコメントノードを取得する\r\n */\r\nfunction isCommentNode(node: Node): boolean {\r\n  return node instanceof Comment && (\r\n    (node.textContent?.indexOf(COMMENT_EMBED_MARK) === 0) || (node.textContent?.indexOf(COMMENT_TEMPLATE_MARK) === 0)\r\n  );\r\n} \r\n\r\nexport function getNodesHavingDataBind(root: Node): Node[] {\r\n  const nodes: Node[] = [];\r\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT, {\r\n    acceptNode(node:Node) {\r\n      return (node instanceof Element) ? \r\n        (node.hasAttribute(DATA_BIND_ATTRIBUTE) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP)\r\n        : (isCommentNode(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP);\r\n    }\r\n  });\r\n  while (walker.nextNode()) {\r\n    nodes.push(walker.currentNode);\r\n  }\r\n  return nodes;\r\n}\r\n\r\n","import { createDataBindAttributes } from \"./createDataBindAttributes\";\r\nimport { getNodesHavingDataBind } from \"./getNodesHavingDataBind\";\r\nimport { IDataBindAttributes } from \"./types\";\r\n\r\nconst listDataBindAttributesById: {[key:number]:IDataBindAttributes[]} = {};\r\n\r\nconst listPathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nconst pathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nfunction getDataBindAttributesFromTemplate(content: DocumentFragment): IDataBindAttributes[] {\r\n  const nodes = getNodesHavingDataBind(content);\r\n  return nodes.map(node => createDataBindAttributes(node));\r\n}\r\n\r\nexport function registerDataBindAttributes(\r\n  id     : number, \r\n  content: DocumentFragment,\r\n  rootId : number = id\r\n): IDataBindAttributes[] {\r\n  const dataBindAttributes = getDataBindAttributesFromTemplate(content);\r\n  const paths = pathsSetById[rootId] ?? (pathsSetById[rootId] = new Set<string>());\r\n  const listPaths = listPathsSetById[rootId] ?? (listPathsSetById[rootId] = new Set<string>());\r\n  for(let i = 0; i < dataBindAttributes.length; i++) {\r\n    const attribute = dataBindAttributes[i];\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      paths.add(bindText.stateProperty);\r\n      if (bindText.nodeProperty === \"for\") {\r\n        listPaths.add(bindText.stateProperty);\r\n      }\r\n    }\r\n  }\r\n  return listDataBindAttributesById[id] = dataBindAttributes;\r\n}\r\n\r\nexport const getDataBindAttributesById = (id: number): IDataBindAttributes[] => {\r\n  return listDataBindAttributesById[id];\r\n}\r\n\r\nexport const getListPathsSetById = (id: number): Set<string> => {\r\n  return listPathsSetById[id] ?? [];\r\n};\r\n\r\nexport const getPathsSetById = (id: number): Set<string> => {\r\n  return pathsSetById[id] ?? [];\r\n};","import { registerDataBindAttributes } from \"../BindingBuilder/registerDataBindAttributes\";\r\nimport { raiseError } from \"../utils\";\r\nimport { removeEmptyTextNodes } from \"./removeEmptyTextNodes\";\r\n\r\nconst templateById:Record<number, HTMLTemplateElement> = {};\r\n\r\nexport function registerTemplate(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number\r\n): number {\r\n  removeEmptyTextNodes(template.content);\r\n  registerDataBindAttributes(id, template.content, rootId);  \r\n  templateById[id] = template;\r\n  return id;\r\n}\r\n\r\nexport function getTemplateById(id: number): HTMLTemplateElement {\r\n  return templateById[id] ?? raiseError(`getTemplateById: template not found: ${id}`);\r\n}","\r\nexport function removeEmptyTextNodes(content:DocumentFragment):void {\r\n  Array.from(content.childNodes).forEach(node => {\r\n    if (node.nodeType === Node.TEXT_NODE && !(node.nodeValue ?? \"\").trim()) {\r\n      content.removeChild(node);\r\n    }\r\n  });  \r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { CreateBindingNodeByNodeFn, IBindingNode } from \"./BindingNode/types\";\r\nimport { CreateBindingStateByStateFn, IBindingState } from \"./BindingState/types\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\n\r\nclass Binding implements IBinding {\r\n  parentBindContent: IBindContent;\r\n  node             : Node;\r\n  engine           : IComponentEngine;\r\n  bindingNode      : IBindingNode;\r\n  bindingState     : IBindingState;\r\n  constructor(\r\n    parentBindContent : IBindContent,\r\n    node              : Node,\r\n    engine            : IComponentEngine,\r\n    createBindingNode : CreateBindingNodeByNodeFn, \r\n    createBindingState: CreateBindingStateByStateFn,\r\n  ) {\r\n    this.parentBindContent = parentBindContent\r\n    this.node = node;\r\n    this.engine = engine\r\n    this.bindingNode = createBindingNode(this, node, engine.inputFilters);\r\n    this.bindingState = createBindingState(this, engine.stateProxy, engine.outputFilters);\r\n  }\r\n\r\n  get bindContents() {\r\n    return this.bindingNode.bindContents;\r\n  }\r\n\r\n  init() {\r\n    this.bindingNode.init();\r\n    this.bindingState.init();\r\n  }\r\n\r\n  render() {\r\n    this.bindingNode.update();\r\n  }\r\n\r\n  updateStateValue(value: any) {\r\n    const engine = this.engine;\r\n    const bindingState = this.bindingState;\r\n    engine.updater.addProcess(() => {\r\n      return bindingState.assignValue(value);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createBinding(\r\n  parentBindContent : IBindContent,\r\n  node              : Node, \r\n  engine            : IComponentEngine, \r\n  createBindingNode : CreateBindingNodeByNodeFn, \r\n  createBindingState: CreateBindingStateByStateFn\r\n): IBinding {\r\n  return new Binding(\r\n    parentBindContent, \r\n    node, \r\n    engine, \r\n    createBindingNode, \r\n    createBindingState\r\n  );\r\n}","import { IBindContent } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { ILoopContext } from \"./types\";\r\n\r\nclass LoopContext implements ILoopContext {\r\n  #path     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null;\r\n  #bindContent : IBindContent;\r\n  constructor(\r\n    path    : string | null,\r\n    listIndex  : IListIndex,\r\n    bindContent: IBindContent\r\n  ) {\r\n    this.#path = path ?? raiseError(\"name is required\");\r\n    this.#info = getStructuredPathInfo(this.#path);\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    this.#bindContent = bindContent;\r\n  }\r\n  get path(): string {\r\n    return this.#path;\r\n  }\r\n  get info(): IStructuredPathInfo {\r\n    return this.#info;\r\n  }\r\n  get listIndex(): IListIndex {\r\n    return this.#listIndexRef?.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get listIndexRef(): WeakRef<IListIndex> {\r\n    return this.#listIndexRef ?? raiseError(\"listIndexRef is null\");\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    // 構造は変わらないので、#parentLoopContext、#cacheはクリアする必要はない\r\n  }\r\n  clearListIndex():void {\r\n    this.#listIndexRef = null;\r\n  }\r\n  get bindContent(): IBindContent {\r\n    return this.#bindContent;\r\n  }\r\n\r\n  #parentLoopContext: ILoopContext | null | undefined;\r\n  get parentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#parentLoopContext === \"undefined\") {\r\n      let currentBinding: IBindContent | null = this.bindContent;\r\n      while(currentBinding !== null) {\r\n        if (currentBinding.loopContext !== null && currentBinding.loopContext !== this) {\r\n          this.#parentLoopContext = currentBinding.loopContext;\r\n          break;\r\n        }\r\n        currentBinding = currentBinding.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      if (typeof this.#parentLoopContext === \"undefined\") this.#parentLoopContext = null;\r\n    }\r\n    return this.#parentLoopContext;\r\n  }\r\n\r\n  #cache:Record<string, ILoopContext | null> = {};\r\n  find(name: string): ILoopContext | null {\r\n    let loopContext = this.#cache[name];\r\n    if (typeof loopContext === \"undefined\") {\r\n      let currentLoopContext: ILoopContext | null = this;\r\n      while(currentLoopContext !== null) {\r\n        if (currentLoopContext.path === name) break;\r\n        currentLoopContext = currentLoopContext.parentLoopContext;\r\n      }\r\n      loopContext = this.#cache[name] = currentLoopContext;\r\n    }\r\n    return loopContext;\r\n  }\r\n\r\n  walk(callback: (loopContext: ILoopContext) => void): void {\r\n    let currentLoopContext: ILoopContext | null = this;\r\n    while(currentLoopContext !== null) {\r\n      callback(currentLoopContext);\r\n      currentLoopContext = currentLoopContext.parentLoopContext;\r\n    }\r\n  }\r\n\r\n  serialize(): ILoopContext[] {\r\n    const results: ILoopContext[] = [];\r\n    this.walk((loopContext) => {\r\n      results.unshift(loopContext);\r\n    });\r\n    return results;\r\n  }\r\n\r\n}\r\n\r\n// 生成されたあと、IBindContentのloopContextに登録される\r\n// IBindContentにずっと保持される\r\nexport function createLoopContext(\r\n  pattern: string | null,\r\n  listIndex: IListIndex,\r\n  bindContent: IBindContent\r\n): ILoopContext {\r\n  return new LoopContext(pattern, listIndex, bindContent);\r\n}","import { IBinding } from \"../DataBinding/types\";\r\n\r\nexport function render(bindings: IBinding[]) {\r\n  const bindingsWithSelectElement = [];\r\n  for(let i = 0; i < bindings.length; i++) {\r\n    const binding = bindings[i];\r\n    if (binding.bindingNode.isSelectElement) {\r\n      bindingsWithSelectElement.push(binding);\r\n    } else {\r\n      binding.render();\r\n    }\r\n  }\r\n  for(let i = 0; i < bindingsWithSelectElement.length; i++) {\r\n    bindingsWithSelectElement[i].render();\r\n  }\r\n}\r\n","import { resolveNodeFromPath } from \"../BindingBuilder/resolveNodeFromPath\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { getTemplateById } from \"../Template/registerTemplate\";\r\nimport { raiseError } from \"../utils\";\r\nimport { createBinding } from \"./Binding\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\nimport { createLoopContext } from \"../LoopContext/createLoopContext\";\r\nimport { render } from \"../Render/render\";\r\nimport { getDataBindAttributesById } from \"../BindingBuilder/registerDataBindAttributes\";\r\n\r\nfunction createContent(id: number): DocumentFragment {\r\n  const template = getTemplateById(id) ?? \r\n    raiseError(`BindContent: template is not found: ${id}`);\r\n  return document.importNode(template.content, true);\r\n}\r\n\r\nfunction createBindings(\r\n  bindContent: IBindContent, \r\n  id         : number, \r\n  engine     : IComponentEngine, \r\n  content    : DocumentFragment\r\n): IBinding[] {\r\n  const attributes = getDataBindAttributesById(id) ?? \r\n    raiseError(`BindContent: data-bind is not set`);\r\n  const bindings: IBinding[] = [];\r\n  for(let i = 0; i < attributes.length; i++) {\r\n    const attribute = attributes[i];\r\n    const node = resolveNodeFromPath(content, attribute.nodePath) ?? \r\n      raiseError(`BindContent: node is not found: ${attribute.nodePath}`);\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      const creator = attribute.creatorByText.get(bindText) ?? \r\n        raiseError(`BindContent: creator is not found: ${bindText}`);\r\n      const binding = createBinding(\r\n        bindContent, \r\n        node, \r\n        engine, \r\n        creator.createBindingNode, \r\n        creator.createBindingState\r\n      );\r\n      bindings.push(binding);\r\n    }\r\n  }\r\n  return bindings;\r\n}\r\n\r\nclass BindContent implements IBindContent {\r\n  loopContext  : ILoopContext | null;\r\n  parentBinding: IBinding | null;\r\n  childNodes   : Node[];\r\n  fragment     : DocumentFragment;\r\n  engine       : IComponentEngine | undefined;\r\n  #id;\r\n  get id() {\r\n    return this.#id;\r\n  }\r\n  get isMounted() {\r\n    return this.childNodes.length > 0 && this.childNodes[0].parentNode !== this.fragment;\r\n  }\r\n  get firstChildNode() {\r\n    return this.childNodes[0] ?? null;\r\n  }\r\n  get lastChildNode() {\r\n    return this.childNodes[this.childNodes.length - 1] ?? null;\r\n  }\r\n  getLastNode(parentNode: Node): Node | null {\r\n    const lastBinding = this.bindings[this.bindings.length - 1];\r\n    const lastChildNode = this.lastChildNode;\r\n    if (lastBinding.node === lastChildNode) {\r\n      if (lastBinding.bindContents.size > 0) {\r\n        const childBindContent = Array.from(lastBinding.bindContents).at(-1) ?? raiseError(`BindContent: childBindContent is not found`);\r\n        const lastNode = childBindContent.getLastNode(parentNode);\r\n        if (lastNode !== null) {\r\n          return lastNode;\r\n        }\r\n      }\r\n    }\r\n    if (parentNode !== lastChildNode?.parentNode) {\r\n      return null;\r\n    }\r\n    return lastChildNode;\r\n  }\r\n  #currentLoopContext: ILoopContext | null | undefined;\r\n  get currentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#currentLoopContext === \"undefined\") {\r\n      let bindContent: IBindContent | null = this;\r\n      while(bindContent !== null) {\r\n        if (bindContent.loopContext !== null) break; ;\r\n        bindContent = bindContent.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      this.#currentLoopContext = bindContent?.loopContext ?? null;\r\n    }\r\n    return this.#currentLoopContext;\r\n  }\r\n  constructor(\r\n    parentBinding: IBinding | null,\r\n    id           : number, \r\n    engine       : IComponentEngine, \r\n    loopContext  : string | null,\r\n    listIndex    : IListIndex | null\r\n  ) {\r\n    this.parentBinding = parentBinding;\r\n    this.#id = id;\r\n    this.fragment = createContent(id);\r\n    this.childNodes = Array.from(this.fragment.childNodes);\r\n    this.engine = engine;\r\n    this.loopContext = (listIndex !== null) ? createLoopContext(loopContext, listIndex, this) : null;\r\n    this.bindings = createBindings(\r\n      this, \r\n      id, \r\n      engine, \r\n      this.fragment\r\n    );\r\n  }\r\n  mount(parentNode: Node) {\r\n    parentNode.appendChild(this.fragment);\r\n  }\r\n  mountBefore(parentNode: Node, beforeNode: Node | null) {\r\n    parentNode.insertBefore(this.fragment, beforeNode);\r\n  }\r\n  mountAfter(parentNode: Node, afterNode: Node | null) {\r\n    parentNode.insertBefore(\r\n      this.fragment, \r\n      afterNode?.nextSibling ?? null\r\n    );\r\n  }\r\n  unmount() {\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      this.fragment.appendChild(this.childNodes[i]);\r\n    }\r\n  }\r\n  bindings: IBinding[] = [];\r\n  render() {\r\n    render(this.bindings);\r\n  }\r\n  init() {\r\n    this.bindings.forEach(binding => binding.init());\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    if (this.loopContext == null) raiseError(`BindContent: loopContext is null`);\r\n    this.loopContext.assignListIndex(listIndex);\r\n    this.init();\r\n  }\r\n}\r\n\r\nexport function createBindContent(\r\n  parentBinding: IBinding | null,\r\n  id           : number, \r\n  engine       :IComponentEngine, \r\n  loopContext  : string | null, \r\n  listIndex    :IListIndex | null\r\n):IBindContent {\r\n  const bindContent = new BindContent(\r\n    parentBinding, \r\n    id, \r\n    engine, \r\n    loopContext, \r\n    listIndex\r\n  );\r\n  bindContent.init();\r\n  return bindContent;\r\n}","import { NodePath } from \"./types\";\r\n\r\nexport function resolveNodeFromPath(root: Node, path: NodePath): Node | null {\r\n  return path.reduce((node, index) => node?.childNodes[index] ?? null, root);\r\n}","import { IListIndex } from \"./types\";\r\n\r\nclass ListIndex implements IListIndex {\r\n  static id: number = 0;\r\n  id              : number = ++ListIndex.id;\r\n  #parentListIndex: IListIndex | null = null;\r\n  get parentListIndex(): IListIndex | null {\r\n    return this.#parentListIndex;\r\n  }\r\n  index: number;\r\n  get indexes(): number[] {\r\n    const indexes = this.parentListIndex?.indexes ?? [];\r\n    indexes.push(this.index);\r\n    return indexes;\r\n  }\r\n\r\n  get position(): number {\r\n    return (this.parentListIndex?.position ?? -1) + 1;\r\n  }\r\n\r\n  constructor(\r\n    parentListIndex: IListIndex | null,\r\n    index: number\r\n  ) {\r\n    this.#parentListIndex = parentListIndex;\r\n    this.index = index;\r\n  }\r\n  \r\n  truncate(length: number): IListIndex | null {\r\n    let listIndex: IListIndex | null = this;\r\n    while(listIndex !== null) {\r\n      if (listIndex.position < length) return listIndex;\r\n      listIndex = listIndex.parentListIndex;\r\n    }\r\n    return null;\r\n  }\r\n  add(value: number): IListIndex {\r\n    return new ListIndex(this, value);\r\n  }\r\n\r\n  *reverseIterator(): Generator<IListIndex> {\r\n    yield this;\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.reverseIterator();\r\n    }\r\n    return;\r\n  }\r\n\r\n  *iterator(): Generator<IListIndex> {\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.iterator();\r\n    }\r\n    yield this;\r\n    return;\r\n  }\r\n\r\n  toString(): string {\r\n    const parentListIndex = this.parentListIndex?.toString();\r\n    return (parentListIndex !== null) ? parentListIndex + \",\" + this.index.toString() : this.index.toString();\r\n  }\r\n\r\n  at(position: number): IListIndex | null {\r\n    let iterator;\r\n    if (position >= 0) {\r\n      iterator = this.iterator();\r\n    } else {\r\n      position = - position - 1 \r\n      iterator = this.reverseIterator();\r\n    }\r\n    let next;\r\n    while(position >= 0) {\r\n      next = iterator.next();\r\n      position--;\r\n    }\r\n    return next?.value ?? null;\r\n  }\r\n  \r\n}\r\n\r\nexport function createListIndex(\r\n  parentListIndex: IListIndex | null,\r\n  index          : number\r\n): IListIndex {\r\n  return new ListIndex(parentListIndex, index);\r\n}\r\n\r\nexport function getMaxListIndexId(): number {\r\n  return ListIndex.id;\r\n}\r\n","import { getMaxListIndexId } from \"../ListIndex/createListIndex\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\n\r\n/**\r\n * 参照用のIDを生成する\r\n * ListIndexのIDは最大値を取得してから計算するため、ListIndexの構築が完了していない場合、重複が発生する可能性がある\r\n */\r\n/**\r\n * ToDo:ListIndexの構築が完了していない状態で、IDを取得すると例外を発生させる仕組みが必要\r\n */\r\nexport function getStatePropertyRefId(info: IStructuredPathInfo, listIndex: IListIndex | null): number {\r\n  const listIndexMaxId = getMaxListIndexId();\r\n  return info.id * (listIndexMaxId + 1) + (listIndex?.id ?? 0);\r\n}","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { getStatePropertyRefId } from \"../../StatePropertyRef/getStatePropertyRefId\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setTracking } from \"./setTracking\";\r\n\r\nfunction _getByRef(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  receiver : IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  if (handler.lastTrackingStack != null && handler.lastTrackingStack !== info) {\r\n    const lastPattern = handler.lastTrackingStack;\r\n    if (lastPattern.parentInfo !== info) {\r\n      handler.engine.addDependentProp(lastPattern, info);\r\n    }\r\n  }\r\n\r\n  let refId = 0;\r\n  if (handler.cacheable) {\r\n    refId = getStatePropertyRefId(info, listIndex);\r\n    const value = handler.cache[refId];\r\n    if (typeof value !== \"undefined\") {\r\n      return value;\r\n    }\r\n    if (refId in handler.cache) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  let value;\r\n  try {\r\n    if (info.pattern in target) {\r\n      if (info.wildcardCount > 0) {\r\n        if (listIndex === null) {\r\n          raiseError(`propRef.listIndex is null`);\r\n        }\r\n        return (value = handler.engine.setStatePropertyRef(info, listIndex, () => {\r\n          return Reflect.get(target, info.pattern, receiver);\r\n        }));\r\n      } else {\r\n        return (value = Reflect.get(target, info.pattern, receiver));\r\n      }\r\n    } else {\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRef(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return (value = Reflect.get(parentValue, index));\r\n      } else {\r\n        return (value = Reflect.get(parentValue, lastSegment));\r\n      }\r\n    }\r\n  } finally {\r\n    if (handler.cacheable && !(refId in handler.cache)) {\r\n      handler.cache[refId] = value;\r\n    }\r\n  }\r\n}\r\n\r\nexport function getByRef(\r\n    target   : Object, \r\n    info     : IStructuredPathInfo,\r\n    listIndex: IListIndex | null,\r\n    receiver : IStateProxy,\r\n    handler  : IStateHandler\r\n  ): any {\r\n    if (handler.engine.trackedGetters.has(info.pattern)) {\r\n      return setTracking(info, handler, () => {\r\n        return _getByRef(target, info, listIndex, receiver, handler);\r\n      });\r\n    } else {\r\n      return _getByRef(target, info, listIndex, receiver, handler);\r\n    }\r\n\r\n  }\r\n","import { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function setTracking(info: IStructuredPathInfo, handler: IStateHandler, callback: () => any): any {\r\n  handler.trackingStack.push(info);\r\n  handler.lastTrackingStack = info;\r\n  try {\r\n    return callback();\r\n  } finally {\r\n    handler.trackingStack.pop();\r\n    handler.lastTrackingStack = handler.trackingStack[handler.trackingStack.length - 1] ?? null;\r\n  }\r\n}\r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef as methodGetByRef } from \"../methods/getByRef\";\r\n\r\nexport function getByRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (pattern: IStructuredPathInfo, listIndex: IListIndex | null) => \r\n    methodGetByRef(target, pattern, listIndex, receiver, handler);\r\n} \r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef } from \"./getByRef\";\r\n\r\nexport function setByRef(\r\n    target   : Object, \r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any, \r\n    receiver : IStateProxy,\r\n    handler  : IStateHandler\r\n): any {\r\n  try {\r\n    if (info.pattern in target) {\r\n      if (info.wildcardCount > 0) {\r\n        if (listIndex === null) {\r\n          raiseError(`propRef.listIndex is null`);\r\n        }\r\n        return handler.engine.setStatePropertyRef(info, listIndex, () => {\r\n          return Reflect.set(target, info.pattern, value, receiver);\r\n        });\r\n      } else {\r\n        return Reflect.set(target, info.pattern, value, receiver);\r\n      }\r\n    } else {\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRef(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return Reflect.set(parentValue, index, value);\r\n      } else {\r\n        return Reflect.set(parentValue, lastSegment, value);\r\n      }\r\n    }\r\n  } finally {\r\n    handler.engine.updater.addUpdatedStatePropertyRefValue(info, listIndex, value);\r\n  }\r\n}\r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setByRef as methodSetByRef } from \"../methods/setByRef\";\r\n\r\nexport function setByRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (pattern: IStructuredPathInfo, listIndex: IListIndex | null, value: any) => \r\n    methodSetByRef(target, pattern, listIndex, value, receiver, handler);\r\n}","import { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setCacheable as methodSetChargeable } from \"../methods/setCacheable\";\r\n\r\nexport function setCacheable(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async (callback: () => Promise<void>) => {\r\n    await methodSetChargeable(handler, callback);\r\n  }\r\n}","import { IStateHandler } from \"../types\";\r\n\r\nexport async function setCacheable(handler: IStateHandler, callback: () => Promise<void>): Promise<void> {\r\n  handler.cacheable = true;\r\n  handler.cache = {}\r\n  try {\r\n    await callback();\r\n  } finally {\r\n    handler.cacheable = false;\r\n  }\r\n}\r\n","import { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst CONNECTED_CALLBACK = \"$connectedCallback\";\r\n\r\nexport function connectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, CONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","import { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst DISCONNECTED_CALLBACK = \"$disconnectedCallback\";\r\n\r\nexport function disconnectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, DISCONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef } from \"../methods/getByRef\";\r\nimport { setByRef } from \"../methods/setByRef\";\r\n\r\nexport function resolve(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (path: string, indexes: number[], value?:any): any => {\r\n    const info = getStructuredPathInfo(path);\r\n    let listIndex: IListIndex | null = null;\r\n    for(let i = 0; i < info.wildcardParentInfos.length; i++) {\r\n      const wildcardParentPattern = info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPath is null`);\r\n      const listIndexes: IListIndex[] = Array.from(handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? []);\r\n      const index = indexes[i] ?? raiseError(`index is null`);\r\n      listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    if (typeof value === \"undefined\") {\r\n      return getByRef(target, info, listIndex, receiver, handler);\r\n    } else {\r\n      return setByRef(target, info, listIndex, value, receiver, handler);\r\n    }\r\n  };\r\n} ","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { resolve as _resolve } from \"./resolve\";\r\n\r\nexport function getAll(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n    const resolve = _resolve(target, prop, receiver, handler);\r\n    return (path: string, indexes?: number[]): any[] => {\r\n      const info = getStructuredPathInfo(path);\r\n      if (handler.lastTrackingStack != null && handler.lastTrackingStack !== info) {\r\n        const lastPattern = handler.lastTrackingStack;\r\n        if (lastPattern.parentInfo !== info) {\r\n          handler.engine.addDependentProp(lastPattern, info);\r\n        }\r\n      }\r\n  \r\n      if (typeof indexes === \"undefined\") {\r\n        for(let i = 0; i < info.wildcardInfos.length; i++) {\r\n          const wildcardPattern = info.wildcardInfos[i] ?? raiseError(`wildcardPattern is null`);\r\n          const listIndex = handler.engine.getContextListIndex(wildcardPattern.pattern);\r\n          if (listIndex) {\r\n            indexes = listIndex.indexes;\r\n            break;\r\n          }\r\n        }\r\n        if (typeof indexes === \"undefined\") {\r\n          indexes = [];\r\n        }\r\n      }\r\n      const walkWildcardPattern = (\r\n        wildcardParentInfos: IStructuredPathInfo[],\r\n        wildardIndexPos: number,\r\n        listIndex: IListIndex | null,\r\n        indexes: number[],\r\n        indexPos: number,\r\n        parentIndexes: number[],\r\n        results: number[][]\r\n      ) => {\r\n        const wildcardParentPattern = wildcardParentInfos[wildardIndexPos] ?? null;\r\n        if (wildcardParentPattern === null) {\r\n          results.push(parentIndexes);\r\n          return;\r\n        }\r\n        const listIndexSet = handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n        const listIndexes = Array.from(listIndexSet);\r\n        const index = indexes[indexPos] ?? null;\r\n        if (index === null) {\r\n          for(let i = 0; i < listIndexes.length; i++) {\r\n            const listIndex = listIndexes[i];\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results);\r\n          }\r\n        } else {\r\n          const listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n          if ((wildardIndexPos + 1) < wildcardParentInfos.length) {\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results\r\n            );\r\n          }\r\n        }\r\n      }\r\n      const resultIndexes: number[][] = [];\r\n      walkWildcardPattern(\r\n        info.wildcardParentInfos, \r\n        0, \r\n        null, \r\n        indexes, \r\n        0, \r\n        [], \r\n        resultIndexes\r\n      );\r\n      const resultValues: any[] = [];\r\n      for(let i = 0; i < resultIndexes.length; i++) {\r\n        resultValues.push(resolve(\r\n          info.pattern,\r\n          resultIndexes[i]\r\n        ));\r\n      }\r\n      return resultValues;\r\n    }\r\n  }","\r\nimport { IResolvedPathInfo, WildcardType } from './types';\r\nimport { getStructuredPathInfo } from './getStructuredPathInfo';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IResolvedPathInfo } = {};\r\n//const _cache: Map<string, IResolvedPathInfo> = new Map();\r\n\r\nclass ResolvedPathInfo implements IResolvedPathInfo {\r\n  static id = 0;\r\n  id = ++ResolvedPathInfo.id;\r\n  name;\r\n  elements;\r\n  paths;\r\n  wildcardCount;\r\n  wildcardType;\r\n  wildcardIndexes;\r\n  info;\r\n  constructor(name: string) {\r\n    const elements = name.split(\".\");\r\n    const tmpPatternElements = elements.slice();\r\n    const paths = [];\r\n    let incompleteCount = 0;\r\n    let completeCount = 0;\r\n    let lastPath = \"\";\r\n    let wildcardCount = 0;\r\n    let wildcardType: WildcardType = \"none\";\r\n    let wildcardIndexes: (number | null)[] = [];\r\n    for(let i = 0; i < elements.length; i++) {\r\n      const element = elements[i];\r\n      if (element === \"*\") {\r\n        tmpPatternElements[i] = \"*\";\r\n        wildcardIndexes.push(null);\r\n        incompleteCount++;\r\n        wildcardCount++;\r\n      } else {\r\n        const number = Number(element);\r\n        if (!Number.isNaN(number)) {\r\n          tmpPatternElements[i] = \"*\";\r\n          wildcardIndexes.push(number);\r\n          completeCount++;\r\n          wildcardCount++;\r\n        }\r\n      }\r\n      lastPath += element;\r\n      paths.push(lastPath);\r\n      lastPath += (i < elements.length - 1 ? \".\" : \"\");\r\n    }\r\n    const pattern = tmpPatternElements.join(\".\");\r\n    const info = getStructuredPathInfo(pattern);\r\n    if (incompleteCount > 0 || completeCount > 0) {\r\n      if (incompleteCount === wildcardCount) {\r\n        wildcardType = \"context\";\r\n      } else if (completeCount === wildcardCount) {\r\n        wildcardType = \"all\";\r\n      } else {\r\n        wildcardType = \"partial\";\r\n      }\r\n    }\r\n    this.name = name;\r\n    this.elements = elements;\r\n    this.paths = paths;\r\n    this.wildcardCount = wildcardCount;\r\n    this.wildcardType = wildcardType;\r\n    this.wildcardIndexes = wildcardIndexes;\r\n    this.info = info;\r\n  }\r\n}\r\n\r\nexport function getResolvedPathInfo(name:string):IResolvedPathInfo {\r\n  let nameInfo: IResolvedPathInfo | undefined;\r\n//  return _cache.get(name) ?? (_cache.set(name, nameInfo = new ResolvedPathInfo(name)), nameInfo);\r\n  return _cache[name] ?? (_cache[name] = new ResolvedPathInfo(name));\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IResolvedPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\n\r\nexport function getListIndex(\r\n  info: IResolvedPathInfo, \r\n  engine: IComponentEngine\r\n): IListIndex | null {\r\n  if (info.info.wildcardCount === 0) {\r\n    return null;\r\n  }\r\n  let listIndex: IListIndex | null = null;\r\n  const lastWildcardPath = info.info.lastWildcardPath ?? \r\n    raiseError(`lastWildcardPath is null`);\r\n  if (info.wildcardType === \"context\") {\r\n    listIndex = engine.getContextListIndex(lastWildcardPath) ?? \r\n      raiseError(`ListIndex not found: ${info.info.pattern}`);\r\n  } else if (info.wildcardType === \"all\") {\r\n    let parentListIndex = null;\r\n    for(let i = 0; i < info.info.wildcardCount; i++) {\r\n      const wildcardParentPattern = info.info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPattern is null`);\r\n      const listIndexes: IListIndex[] = Array.from(engine.getListIndexesSet(wildcardParentPattern, parentListIndex) ?? []);\r\n      const wildcardIndex = info.wildcardIndexes[i] ?? raiseError(`wildcardIndex is null`);\r\n      parentListIndex = listIndexes[wildcardIndex] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    listIndex = parentListIndex;\r\n  } else if (info.wildcardType === \"partial\") {\r\n    // ToDo:listIndexを取得する必要がある\r\n  } else if (info.wildcardType === \"none\") {\r\n  }\r\n  return listIndex;\r\n}\r\n","import { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { getAll } from \"../apis/getAll\";\r\nimport { resolve } from \"../apis/resolve\";\r\nimport { getListIndex } from \"../getListIndex\";\r\nimport { getByRef } from \"../methods/getByRef\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst matchIndexPropertyName = new RegExp(/^\\$(\\d+)$/);\r\n\r\nexport function get(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  let value;\r\n  if (typeof prop === \"string\") {\r\n    if (matchIndexPropertyName.test(prop)) {\r\n      const number = prop.slice(1);\r\n      const index = Number(number);\r\n      const ref = handler.engine.getLastStatePropertyRef() ?? \r\n        raiseError(`get: this.engine.getLastStatePropertyRef() is null`);\r\n      return ref.listIndex?.at(index - 1)?.index ?? raiseError(`ListIndex not found: ${prop}`);\r\n    } else if (prop === \"$resolve\") {\r\n      return resolve(target, prop, receiver, handler);\r\n    } else if (prop === \"$getAll\") {\r\n      return getAll(target, prop, receiver, handler);\r\n    } else {\r\n      const resolvedInfo = getResolvedPathInfo(prop);\r\n      const listIndex = getListIndex(resolvedInfo, handler.engine);\r\n      value = getByRef(\r\n        target, \r\n        resolvedInfo.info, \r\n        listIndex, \r\n        receiver,\r\n        handler\r\n      );\r\n    }\r\n  } else if (typeof prop === \"symbol\") {\r\n    if (prop in handler.callableApi) {\r\n      return handler.callableApi[prop](target, prop, receiver, handler);\r\n    }\r\n    value = Reflect.get(\r\n      target, \r\n      prop, \r\n      receiver\r\n    );\r\n  }\r\n  return value;\r\n}\r\n","import { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetAllSymbol, GetByRefSymbol, ResolveSymbol, SetByRefSymbol, SetCacheableSymbol } from \"./symbols\";\r\nimport { IState, IStateHandler, IStateProxy } from \"./types\";\r\nimport { getByRef as apiGetByRef } from \"./apis/getByRef\";\r\nimport { setByRef as apiSetByRef } from \"./apis/setByRef\";\r\nimport { setCacheable as apiSetCacheable } from \"./apis/setCacheable\";\r\nimport { connectedCallback } from \"./apis/connectedCallback\";\r\nimport { disconnectedCallback } from \"./apis/disconnectedCallback\";\r\nimport { resolve } from \"./apis/resolve\";\r\nimport { getAll } from \"./apis/getAll\";\r\nimport { get as trapGet } from \"./traps/get\";\r\nimport { set as trapSet } from \"./traps/set\";\r\n\r\nclass StateHandler implements IStateHandler {\r\n  engine   : IComponentEngine;\r\n  cacheable: boolean = false;\r\n  cache    : {[key:number]:any} = {};\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: IStructuredPathInfo[] = [];\r\n  \r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  callableApi: { [key:symbol]: Function } = {\r\n    [GetByRefSymbol]: apiGetByRef, \r\n    [SetByRefSymbol]: apiSetByRef, \r\n    [SetCacheableSymbol]: apiSetCacheable, \r\n    [ConnectedCallbackSymbol]: connectedCallback, \r\n    [DisconnectedCallbackSymbol]: disconnectedCallback, \r\n    [ResolveSymbol]: resolve, \r\n    [GetAllSymbol]: getAll,\r\n  };\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IStateProxy\r\n  ): boolean {\r\n    return trapSet(target, prop, value, receiver, this);\r\n  }\r\n}\r\n\r\nexport function createStateProxy(\r\n  engine: IComponentEngine, \r\n  state: Object\r\n): IStateProxy {\r\n  return new Proxy<IState>(state, new StateHandler(engine)) as IStateProxy;\r\n}\r\n\r\n","import { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo\";\r\nimport { getListIndex } from \"../getListIndex\";\r\nimport { setByRef } from \"../methods/setByRef\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nexport function set(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  value   : any, \r\n  receiver: IStateProxy,\r\n  handler : IStateHandler\r\n): boolean {\r\n  if (typeof prop === \"string\") {\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, handler.engine);\r\n    return setByRef(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      value, \r\n      receiver,\r\n      handler\r\n    );\r\n  } else {\r\n    return Reflect.set(\r\n      target, \r\n      prop, \r\n      value, \r\n      receiver\r\n    );\r\n  }\r\n}\r\n","import { createListIndex } from \"../ListIndex/createListIndex\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { GetByRefSymbol } from \"./symbols\";\r\n\r\nconst BLANK_LISTINDEXES_SET = new Set<IListIndex>();\r\n\r\nfunction buildListIndexTreeSub(\r\n  engine   : IComponentEngine, \r\n  listInfos: Set<IStructuredPathInfo>,\r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value: any[]\r\n): void {\r\n  const oldValue = engine.getList(info, listIndex) ?? [];\r\n  if (oldValue === value) {\r\n    return;\r\n  }\r\n  const oldListIndexesSet = engine.getListIndexesSet(info, listIndex) ?? BLANK_LISTINDEXES_SET;\r\n  const oldListIndexesByItem = Map.groupBy(oldListIndexesSet, listIndex => oldValue[listIndex.index]);\r\n  const newListIndexesSet:Set<IListIndex> = new Set();\r\n  for(let i = 0; i < value.length; i++) {\r\n    const item = value[i];\r\n    const oldListIndexes = oldListIndexesByItem.get(item);\r\n    let curListIndex = oldListIndexes?.shift();\r\n    if (!curListIndex) {\r\n      curListIndex = createListIndex(listIndex, i);\r\n    } else {\r\n      if (curListIndex.index !== i) {\r\n        curListIndex.index = i;\r\n        engine.updater.addUpdatedListIndex(curListIndex);\r\n      }\r\n    }\r\n    newListIndexesSet.add(curListIndex);\r\n  }\r\n  engine.saveListIndexesSet(info, listIndex, newListIndexesSet);\r\n  engine.saveList(info, listIndex, value.slice(0));\r\n\r\n  const searchPath = info.pattern + \".*\";\r\n  for(const info of listInfos) {\r\n    if (searchPath !== info.lastWildcardPath) {\r\n      continue;\r\n    }\r\n    for(const subListIndex of newListIndexesSet) {\r\n      const subValue = engine.stateProxy[GetByRefSymbol](info, subListIndex);\r\n      buildListIndexTreeSub(\r\n        engine, \r\n        listInfos, \r\n        info, \r\n        subListIndex, \r\n        subValue ?? []\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function buildListIndexTree(\r\n  engine   : IComponentEngine, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value    : any\r\n): void {\r\n  const listInfos = engine.listInfoSet;\r\n  // 配列じゃなければ何もしない\r\n  if (!engine.listInfoSet.has(info)) {\r\n    return;\r\n  }\r\n  const values = (value ?? []) as any[];\r\n  buildListIndexTreeSub(\r\n    engine, \r\n    engine.listInfoSet, \r\n    info, \r\n    listIndex, \r\n    values\r\n  );\r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\n\r\nfunction extractListIndexes(\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  engine: IComponentEngine,\r\n): IListIndex[] {\r\n  const wildcardParentInfos: IStructuredPathInfo[] = info.wildcardParentInfos ?? [];\r\n  const _extractListIndexes = (pos:number, currentListIndex: IListIndex | null, resultListIndexes: IListIndex[]) => {\r\n    const wildcardParentInfo = wildcardParentInfos[pos];\r\n    if (!wildcardParentInfo) {\r\n      if (currentListIndex) {\r\n        resultListIndexes.push(currentListIndex);\r\n      }\r\n      return;\r\n    }\r\n    const subListIndex = listIndex?.at(pos) ?? null;\r\n    if (subListIndex) {\r\n      _extractListIndexes(pos + 1, subListIndex, resultListIndexes);\r\n    } else {\r\n      const listIndexes = engine.getListIndexesSet(wildcardParentInfo, currentListIndex);\r\n      for(const loopListIndex of listIndexes ?? []) {\r\n        _extractListIndexes(pos + 1, loopListIndex, resultListIndexes);\r\n      }\r\n    }\r\n  }\r\n  const resultListIndexes: IListIndex[] = [];\r\n  _extractListIndexes(0, listIndex, resultListIndexes);\r\n  return resultListIndexes;\r\n}\r\n\r\nfunction _collectAffectedGetters(\r\n  refInfo        : IStructuredPathInfo,\r\n  refListIndex   : IListIndex | null,\r\n  engine         : IComponentEngine,\r\n  resultPathInfos: Set<IStructuredPathInfo>,\r\n  resultRefs     : {info:IStructuredPathInfo, listIndex:IListIndex | null}[],\r\n) {\r\n//  if (engine.listInfoSet.has(refInfo)) return;\r\n  if (resultPathInfos.has(refInfo)) return;\r\n  const dependentPathInfos = engine.dependentTree.get(refInfo);\r\n  for(const dependentPathInfo of dependentPathInfos ?? []) {\r\n    if (engine.listInfoSet.has(refInfo) && dependentPathInfo.parentInfo === refInfo && dependentPathInfo.lastSegment === \"*\") {\r\n      continue;\r\n    }\r\n    let dependentListIndex = null;\r\n    let updateList = false;\r\n    for(let i = dependentPathInfo.wildcardParentInfos.length - 1; i >= 0; i--) {\r\n      const wildcardParentInfo = dependentPathInfo.wildcardParentInfos[i];\r\n      if (resultPathInfos.has(wildcardParentInfo)) {\r\n        updateList = true;\r\n        break;\r\n      }\r\n      const pos = refInfo.wildcardParentInfos.indexOf(wildcardParentInfo);\r\n      if (pos < 0) continue;\r\n      dependentListIndex = refListIndex?.at(pos) ?? null;\r\n      if (dependentListIndex !== null) break;\r\n    }\r\n    if (updateList) {\r\n      continue;\r\n    }\r\n    if (dependentPathInfo.wildcardParentInfos.length > 0) {\r\n      const extractlistIndexes = extractListIndexes(dependentPathInfo, dependentListIndex, engine);\r\n      for(const listIndex of extractlistIndexes) {\r\n        resultRefs.push({info: dependentPathInfo, listIndex});\r\n        _collectAffectedGetters(dependentPathInfo, listIndex, engine, resultPathInfos, resultRefs);\r\n      }\r\n    } else {\r\n      resultRefs.push({info: dependentPathInfo, listIndex: null});\r\n      _collectAffectedGetters(dependentPathInfo, null, engine, resultPathInfos, resultRefs);\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nexport function collectAffectedGetters(\r\n  updateRefs: {info:IStructuredPathInfo, listIndex:IListIndex | null}[],\r\n  engine: IComponentEngine,\r\n): {info:IStructuredPathInfo, listIndex:IListIndex | null}[] {\r\n  const resultPathInfos = new Set<IStructuredPathInfo>();\r\n  const resultRefs: {info:IStructuredPathInfo, listIndex:IListIndex | null}[] = [];\r\n  for(const ref of updateRefs) {\r\n    const info = ref.info;\r\n    const listIndex = ref.listIndex;\r\n    if (resultPathInfos.has(info)) continue;\r\n    _collectAffectedGetters(info, listIndex, engine, resultPathInfos, resultRefs);\r\n    resultPathInfos.add(info);\r\n  }\r\n  return resultRefs;\r\n\r\n}\r\n\r\n","import { IBinding } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { render } from \"../Render/render\";\r\nimport { buildListIndexTree } from \"../StateClass/buildListIndexTree\";\r\nimport { SetCacheableSymbol } from \"../StateClass/symbols\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { getStatePropertyRefId } from \"../StatePropertyRef/getStatePropertyRefId\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { getGlobalConfig } from \"../WebComponents/getGlobalConfig\";\r\nimport { IUpdater } from \"./types\";\r\nimport { collectAffectedGetters } from \"./collectAffectedGetters\";\r\n\r\ntype UpdatedArrayElementBinding = {\r\n  parentRef: {info: IStructuredPathInfo, listIndex: IListIndex | null};\r\n  binding: IBinding;\r\n  listIndexes: IListIndex[];\r\n  values: any[];\r\n};\r\n\r\nclass Updater implements IUpdater {\r\n  processList      : (() => Promise<void> | void)[] = [];\r\n  updatedProperties: Set<{info:IStructuredPathInfo, listIndex:IListIndex | null} | IListIndex> = \r\n    new Set<{info:IStructuredPathInfo, listIndex:IListIndex | null} | IListIndex>();\r\n  updatedValues    : {[key:number]: any} = {};\r\n  engine           : IComponentEngine;\r\n\r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  addProcess(process: () => Promise<void> | void): void {\r\n    this.processList.push(process);\r\n    this.waitForQueueEntry.resolve();\r\n  }\r\n\r\n  addUpdatedStatePropertyRefValue(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any\r\n  ): void {\r\n    const refId = getStatePropertyRefId(info, listIndex);\r\n    this.updatedProperties.add({info, listIndex});\r\n    this.updatedValues[refId] = value;\r\n    this.waitForQueueEntry.resolve();\r\n  }\r\n\r\n  addUpdatedListIndex(listIndex: IListIndex): void {\r\n    this.updatedProperties.add(listIndex);\r\n    this.waitForQueueEntry.resolve();\r\n  }\r\n\r\n  terminate(): PromiseWithResolvers<void> {\r\n    const waitForMainLoopTerminate = Promise.withResolvers<void>();\r\n    this.waitForQueueEntry.resolve(waitForMainLoopTerminate);\r\n    return waitForMainLoopTerminate;\r\n  }\r\n\r\n  waitForQueueEntry: PromiseWithResolvers<PromiseWithResolvers<void> | void> = \r\n    Promise.withResolvers<PromiseWithResolvers<void> | void>();\r\n  async main(waitForComponentInit: PromiseWithResolvers<void>) {\r\n    await waitForComponentInit.promise;\r\n    const config = getGlobalConfig();\r\n    while (true) {\r\n      try {\r\n        const waitForMainLoopTerminate: (PromiseWithResolvers<void> | void) = \r\n          await this.waitForQueueEntry.promise;\r\n          config.debug && performance.mark(`start`);\r\n        Updater.updatingCount++;\r\n        try {\r\n          await this.exec();\r\n          if (config.debug) {\r\n            performance.mark(`end`);\r\n            performance.measure(`exec`, `start`, `end`);\r\n            console.log(performance.getEntriesByType(\"measure\"));    \r\n            performance.clearMeasures(`exec`);\r\n            performance.clearMarks(`start`);\r\n            performance.clearMarks(`end`);\r\n          }\r\n        } finally {\r\n          Updater.updatingCount--;\r\n          if (waitForMainLoopTerminate) {\r\n            waitForMainLoopTerminate.resolve();\r\n            break;\r\n          }\r\n        }\r\n      } catch(e) {\r\n        console.error(e);\r\n      } finally {\r\n        this.waitForQueueEntry = Promise.withResolvers<PromiseWithResolvers<void> | void>();\r\n      }\r\n    }\r\n  }\r\n\r\n  async updateState() {\r\n    while(this.processList.length > 0) {\r\n      const processList = this.processList;\r\n      this.processList = [];\r\n      for(let i = 0; i < processList.length; i++) {\r\n        const process = processList[i];\r\n        await process();\r\n      }\r\n    }\r\n  }\r\n\r\n  async rebuild(): Promise<{bindings: IBinding[], arrayElementBindings: UpdatedArrayElementBinding[]}> {\r\n    const retArrayElementBindings: UpdatedArrayElementBinding[] = [];\r\n    const retBindings: IBinding[] = [];\r\n    const engine = this.engine;\r\n    const processedListIndexes = new Set<IListIndex>();\r\n    const processedPropertyRefIdsSet = new Set<number>();\r\n    while(this.updatedProperties.size > 0) {\r\n      const updatedProiperties = Array.from(this.updatedProperties.values());\r\n\r\n      const updatedRefs = []; // 更新されたプロパティ参照のリスト\r\n      const arrayPropertyRefs = [];\r\n      const arrayElementPropertyRefs = [];\r\n      this.updatedProperties.clear();\r\n      for(let i = 0; i < updatedProiperties.length; i++) {\r\n        const item = updatedProiperties[i];\r\n        let bindings;\r\n        if (\"index\" in item) {\r\n          if (processedListIndexes.has(item)) continue;\r\n          const listIndex = item as IListIndex;\r\n          bindings = engine.bindingsByListIndex.get(listIndex);\r\n          processedListIndexes.add(listIndex);\r\n        } else {\r\n          const statePropertyRefId = getStatePropertyRefId(item.info, item.listIndex);\r\n          if (processedPropertyRefIdsSet.has(statePropertyRefId)) continue;\r\n          const statePropertyRef = item as {info:IStructuredPathInfo, listIndex:IListIndex | null};\r\n          if (engine.listInfoSet.has(statePropertyRef.info)) {\r\n            arrayPropertyRefs.push(statePropertyRef);\r\n          }\r\n          if (engine.elementInfoSet.has(statePropertyRef.info)) {\r\n            arrayElementPropertyRefs.push(statePropertyRef);\r\n          }\r\n          bindings = engine.getBindings(item.info, item.listIndex);\r\n          processedPropertyRefIdsSet.add(statePropertyRefId);\r\n          updatedRefs.push(statePropertyRef);\r\n        }\r\n        retBindings.push(...bindings ?? []);\r\n      }\r\n\r\n      // リストインデックスの構築\r\n      const builtStatePropertyRefIds = new Set<number>();\r\n      for(let i = 0; i < arrayPropertyRefs.length; i++) {\r\n        const arrayPropertyRef = arrayPropertyRefs[i];\r\n        const statePropertyRefId = getStatePropertyRefId(arrayPropertyRef.info, arrayPropertyRef.listIndex);\r\n        const value = this.updatedValues[statePropertyRefId] ?? null;\r\n        buildListIndexTree(engine, arrayPropertyRef.info, arrayPropertyRef.listIndex, value);\r\n        builtStatePropertyRefIds.add(statePropertyRefId);\r\n      }\r\n\r\n      const parentRefByRefId: {[parentRefId: number]: {info: IStructuredPathInfo, listIndex: IListIndex | null }} = {};\r\n      const statePropertyRefByStatePropertyRefId = Object.groupBy(arrayElementPropertyRefs, ref => {\r\n        if (ref.info.parentInfo === null) raiseError(`parentInfo is null`);\r\n        const parentInfo = ref.info.parentInfo;\r\n        const parentListIndex = (ref.info.wildcardCount === ref.info.parentInfo.wildcardCount) ?\r\n          ref.listIndex : (ref.listIndex?.parentListIndex ?? null);\r\n        const parentRefId = getStatePropertyRefId(parentInfo, parentListIndex);\r\n        if (!(parentRefId in parentRefByRefId)) {\r\n          parentRefByRefId[parentRefId] = {info: parentInfo, listIndex: parentListIndex};\r\n        }\r\n        return parentRefId;\r\n      });\r\n      for(const [parentRefIdKey, refs] of Object.entries(statePropertyRefByStatePropertyRefId)) {\r\n        const parentRefId = Number(parentRefIdKey);\r\n        if (builtStatePropertyRefIds.has(parentRefId)) continue;\r\n        if (typeof refs === \"undefined\") continue;\r\n        const parentRef = parentRefByRefId[parentRefId];\r\n        if (parentRef === null) continue;\r\n\r\n        const values = [];\r\n        const listIndexes = [];\r\n        for(let j = 0; j < refs.length; j++) {\r\n          const ref = refs[j];\r\n          const statePropertyRefId = getStatePropertyRefId(ref.info, ref.listIndex);\r\n          const value = this.updatedValues[statePropertyRefId] ?? null;\r\n          values.push(value);\r\n          const listIndex = ref.listIndex;\r\n          if (listIndex === null) {\r\n            throw new Error(\"listIndex is null\");\r\n          }\r\n          listIndexes.push(listIndex);\r\n        }\r\n        const bindings = engine.getBindings(parentRef.info, parentRef.listIndex);\r\n        for(const binding of bindings) {\r\n          const arrayElementBinding: UpdatedArrayElementBinding = {\r\n            parentRef,\r\n            binding,\r\n            listIndexes,\r\n            values\r\n          };\r\n          retArrayElementBindings.push(arrayElementBinding);\r\n        }\r\n      }\r\n      \r\n      const updatingRefs = collectAffectedGetters(updatedRefs, engine);\r\n      for(const updatingRef of updatingRefs) {\r\n        const bindings = engine.getBindings(updatingRef.info, updatingRef.listIndex);\r\n        retBindings.push(...bindings ?? []);\r\n      }\r\n      \r\n    }\r\n    this.updatedValues = {};\r\n    return {bindings: retBindings, arrayElementBindings: retArrayElementBindings};\r\n  }\r\n\r\n  async render(bindings: IBinding[]) {\r\n    await this.engine.stateProxy[SetCacheableSymbol](async () => {\r\n      return render(bindings);\r\n    });\r\n  }\r\n\r\n  async exec() {\r\n    while(this.processList.length !== 0 || this.updatedProperties.size !== 0) {\r\n      // update state\r\n      await this.updateState();\r\n      // rebuild\r\n      const { bindings, arrayElementBindings } = await this.rebuild();\r\n      // render\r\n      for(const arrayElementBinding of arrayElementBindings) {\r\n        arrayElementBinding.binding.bindingNode.updateElements(arrayElementBinding.listIndexes, arrayElementBinding.values);\r\n      }\r\n      if (bindings.length > 0) {\r\n        await this.render(bindings);\r\n      }\r\n    }\r\n  }\r\n\r\n  static updatingCount = 0;\r\n}\r\n\r\nexport function createUpdater(engine: IComponentEngine): IUpdater {\r\n  return new Updater(engine);\r\n}\r\n\r\nexport function getUpdatingCount(): number {\r\n  return Updater.updatingCount;\r\n}","import { raiseError } from \"../utils\";\r\nimport { IComponentConfig } from \"../WebComponents/types\";\r\nimport { canHaveShadowRoot } from \"./canHaveShadowRoot\";\r\n\r\nfunction getParentShadowRoot(parentNode: Node | null): ShadowRoot|undefined{\r\n  let node: Node | null = parentNode;\r\n  while(node) {\r\n    if (node instanceof ShadowRoot) {\r\n      return node;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n}\r\n\r\nexport function attachShadow(element: HTMLElement, config: IComponentConfig, styleSheet: CSSStyleSheet): void {\r\n    if (config.enableShadowDom) {\r\n      if (config.extends === null || canHaveShadowRoot(config.extends)) {\r\n        const shadowRoot = element.attachShadow({ mode: 'open' });\r\n        shadowRoot.adoptedStyleSheets = [styleSheet];\r\n      } else {\r\n        raiseError(`ComponentEngine: Shadow DOM not supported for builtin components that extend ${config.extends}`);\r\n      }\r\n    } else {\r\n      const shadowRootOrDocument = getParentShadowRoot(element.parentNode) || document;\r\n      const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n      if (!styleSheets.includes(styleSheet)) {\r\n        shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, styleSheet];\r\n      }\r\n    }\r\n\r\n}","export function canHaveShadowRoot(tagName: string): boolean {\r\n  try {\r\n    // 一時的に要素を作成\r\n    const element = document.createElement(tagName);\r\n    // `attachShadow` メソッドが存在し、実行可能かを確認\r\n    return typeof element.attachShadow === \"function\";\r\n  } catch {\r\n    // 無効なタグ名などが渡された場合は false を返す\r\n    return false;\r\n  }\r\n}","import { createBindContent } from \"../DataBinding/BindContent\";\r\nimport { IBindContent, IBinding } from \"../DataBinding/types\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { IState, IStateProxy, IStructiveState } from \"../StateClass/types\";\r\nimport { createStateProxy } from \"../StateClass/createStateProxy\";\r\nimport { IUpdater } from \"../Updater/types\";\r\nimport { createUpdater } from \"../Updater/updater\";\r\nimport { ComponentType, IComponentConfig, IComponentStatic, StructiveComponent } from \"../WebComponents/types\";\r\nimport { attachShadow } from \"./attachShadow\";\r\nimport { ISaveInfoByResolvedPathInfo, IComponentEngine } from \"./types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { buildListIndexTree } from \"../StateClass/buildListIndexTree\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetByRefSymbol, SetCacheableSymbol } from \"../StateClass/symbols\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { BindParentComponentSymbol } from \"../ComponentState/symbols\";\r\n\r\nexport class ComponentEngine implements IComponentEngine {\r\n  type          : ComponentType = 'autonomous';\r\n  config        : IComponentConfig;\r\n  template      : HTMLTemplateElement;\r\n  styleSheet    : CSSStyleSheet;\r\n  stateClass    : IStructiveState;\r\n  state         : IState;\r\n  stateProxy    : IStateProxy;\r\n  updater       : IUpdater;\r\n  inputFilters  : FilterWithOptions;\r\n  outputFilters : FilterWithOptions;\r\n  bindContent   : IBindContent;\r\n  baseClass     : typeof HTMLElement = HTMLElement;\r\n  owner         : StructiveComponent;\r\n  trackedGetters: Set<string>;\r\n\r\n  listInfoSet       : Set<IStructuredPathInfo> = new Set();\r\n  elementInfoSet: Set<IStructuredPathInfo> = new Set();\r\n  bindingsByListIndex                  : WeakMap<IListIndex, Set<IBinding>> = new WeakMap();\r\n  dependentTree                        : Map<IStructuredPathInfo, Set<IStructuredPathInfo>> = new Map();\r\n\r\n  bindingsByComponent: WeakMap<StructiveComponent, Set<IBinding>> = new WeakMap();\r\n\r\n  #waitForInitialize : PromiseWithResolvers<void> = Promise.withResolvers<void>();\r\n  #loopContext       : ILoopContext | null = null;\r\n  #stackStructuredPathInfo  : IStructuredPathInfo[] = [];\r\n  #stackListIndex    : IListIndex[] = [];\r\n\r\n  constructor(config: IComponentConfig, owner: StructiveComponent) {\r\n    this.config = config;\r\n    if (this.config.extends) {\r\n      this.type = 'builtin';\r\n    }\r\n    const componentClass = owner.constructor as IComponentStatic;\r\n    this.template = componentClass.template;\r\n    this.styleSheet = componentClass.styleSheet;\r\n    this.stateClass = componentClass.stateClass;\r\n    this.state = new this.stateClass();\r\n    this.stateProxy = createStateProxy(this, this.state);\r\n    this.updater = createUpdater(this);\r\n    this.inputFilters = componentClass.inputFilters;\r\n    this.outputFilters = componentClass.outputFilters;\r\n    this.owner = owner;\r\n    this.trackedGetters = componentClass.trackedGetters;\r\n    // 依存関係の木を作成する\r\n    const checkDependentProp = (info: IStructuredPathInfo) => {\r\n      const parentInfo = info.parentInfo;\r\n      if (parentInfo === null) return;\r\n      this.addDependentProp(info, parentInfo);\r\n      checkDependentProp(parentInfo);\r\n    }\r\n    for(const path of componentClass.paths) {\r\n      const info = getStructuredPathInfo(path);\r\n      checkDependentProp(info);\r\n    }\r\n    // 配列のプロパティ、配列要素のプロパティを登録する\r\n    for(const listPath of componentClass.listPaths) {\r\n      this.listInfoSet.add(getStructuredPathInfo(listPath));\r\n      this.elementInfoSet.add(getStructuredPathInfo(listPath + \".*\"));\r\n    }\r\n    this.bindContent = createBindContent(null, componentClass.id, this, null, null); // this.stateArrayPropertyNamePatternsが変更になる可能性がある\r\n    for(const info of this.listInfoSet) {\r\n      if (info.wildcardCount > 0) continue;\r\n      const value = this.stateProxy[GetByRefSymbol](info, null)\r\n      buildListIndexTree(this, info, null, value);\r\n    }\r\n  \r\n    this.updater.main(this.#waitForInitialize);\r\n  }\r\n\r\n  async connectedCallback(): Promise<void> {\r\n    this.owner.state[BindParentComponentSymbol]();\r\n    attachShadow(this.owner, this.config, this.styleSheet);\r\n    await this.stateProxy[ConnectedCallbackSymbol]();\r\n    await this.stateProxy[SetCacheableSymbol](async () => {\r\n      this.bindContent.render();\r\n    });\r\n    this.bindContent.mount(this.owner.shadowRoot ?? this.owner);\r\n    this.#waitForInitialize.resolve();\r\n  }\r\n\r\n  async disconnectedCallback(): Promise<void> {\r\n    await this.stateProxy[DisconnectedCallbackSymbol]();\r\n  }\r\n\r\n  async setLoopContext(loopContext: ILoopContext, callback: ()=>Promise<void>): Promise<void> {\r\n    try {\r\n      if (this.#loopContext !== null) {\r\n        throw new Error(\"loopContext is already set\");\r\n      }\r\n      this.#loopContext = loopContext;\r\n      await this.asyncSetStatePropertyRef(loopContext.info, loopContext.listIndex, async () => {\r\n        await callback();\r\n      });\r\n    } finally {\r\n      this.#loopContext = null;\r\n    }\r\n  }\r\n\r\n  async asyncSetStatePropertyRef(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex, \r\n    callback : ()=>Promise<any>\r\n  ): Promise<any> {\r\n    this.#stackStructuredPathInfo.push(info);\r\n    this.#stackListIndex.push(listIndex);\r\n    try {\r\n      return await callback();\r\n    } finally {\r\n      this.#stackStructuredPathInfo.pop();\r\n      this.#stackListIndex.pop();\r\n    }\r\n  }\r\n\r\n  setStatePropertyRef(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex, \r\n    callback : ()=>any\r\n  ): any {\r\n    this.#stackStructuredPathInfo.push(info);\r\n    this.#stackListIndex.push(listIndex);\r\n    try {\r\n      return callback();\r\n    } finally {\r\n      this.#stackStructuredPathInfo.pop();\r\n      this.#stackListIndex.pop();\r\n    }\r\n  }\r\n\r\n  getLastStatePropertyRef(): {info:IStructuredPathInfo, listIndex:IListIndex} | null {\r\n    if (this.#stackStructuredPathInfo.length === 0) {\r\n      return null;\r\n    }\r\n    const info = this.#stackStructuredPathInfo[this.#stackStructuredPathInfo.length - 1];\r\n    if (typeof info === \"undefined\") {\r\n      return null;\r\n    }\r\n    const listIndex = this.#stackListIndex[this.#stackListIndex.length - 1];\r\n    if (typeof listIndex === \"undefined\") {\r\n      return null;\r\n    }\r\n    return {info, listIndex};\r\n  }\r\n\r\n  getContextListIndex(structuredPath: string): IListIndex | null{\r\n    const lastRef = this.getLastStatePropertyRef();\r\n    if (lastRef === null) {\r\n      return null;\r\n    }\r\n    const info = lastRef.info;\r\n    const index = info.wildcardPaths.indexOf(structuredPath);\r\n    if (index >= 0) {\r\n      return lastRef.listIndex.at(index) ?? null;\r\n    }\r\n    return null;\r\n  }\r\n  getLoopContexts():ILoopContext[] {\r\n    if (this.#loopContext === null) {\r\n      throw new Error(\"loopContext is null\");\r\n    }\r\n    return this.#loopContext.serialize();\r\n  }\r\n\r\n  #saveInfoByListIndexByResolvedPathInfoId: { [id:number]: WeakMap<IListIndex,ISaveInfoByResolvedPathInfo> } = {};\r\n  #saveInfoByStructuredPathId: { [id:number]: ISaveInfoByResolvedPathInfo } = {};\r\n\r\n  createSaveInfo():ISaveInfoByResolvedPathInfo {\r\n    return {\r\n      list          : null,\r\n      listIndexesSet: null,\r\n      bindings      : [],\r\n    }\r\n  }\r\n\r\n  getSaveInfoByStatePropertyRef(info:IStructuredPathInfo, listIndex:IListIndex | null): ISaveInfoByResolvedPathInfo {\r\n    if (listIndex === null) {\r\n      let saveInfo = this.#saveInfoByStructuredPathId[info.id];\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        this.#saveInfoByStructuredPathId[info.id] = saveInfo;\r\n      }\r\n      return saveInfo;\r\n    } else {\r\n      let saveInfoByListIndex = this.#saveInfoByListIndexByResolvedPathInfoId[info.id];\r\n      if (typeof saveInfoByListIndex === \"undefined\") {\r\n        saveInfoByListIndex = new WeakMap<IListIndex, ISaveInfoByResolvedPathInfo>();\r\n        this.#saveInfoByListIndexByResolvedPathInfoId[info.id] = saveInfoByListIndex;\r\n      }\r\n      let saveInfo = saveInfoByListIndex.get(listIndex);\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        saveInfoByListIndex.set(listIndex, saveInfo);\r\n      }\r\n      return saveInfo;\r\n    }\r\n  }\r\n  saveBinding(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    binding  : IBinding\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.bindings.push(binding);\r\n  }\r\n  saveListIndexesSet(\r\n    info              :IStructuredPathInfo, \r\n    listIndex         :IListIndex | null, \r\n    saveListIndexesSet:Set<IListIndex>\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.listIndexesSet = saveListIndexesSet;\r\n  }\r\n  saveList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null, \r\n    list     :any[]\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.list = list;\r\n  }\r\n  getBindings(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): IBinding[] {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.bindings;\r\n  }\r\n  getListIndexesSet(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): Set<IListIndex> | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.listIndexesSet;\r\n  }\r\n  getList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): any[] | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.list;\r\n  }\r\n\r\n  addDependentProp(info: IStructuredPathInfo, refInfo: IStructuredPathInfo) {\r\n    let dependents = this.dependentTree.get(refInfo);\r\n    if (typeof dependents === \"undefined\") {\r\n      dependents = new Set<IStructuredPathInfo>();\r\n      this.dependentTree.set(refInfo, dependents);\r\n    }\r\n    dependents.add(info);\r\n  }\r\n\r\n  getPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex | null): any {\r\n    // プロパティの値を取得する\r\n    return this.stateProxy[GetByRefSymbol](info, listIndex);\r\n  }\r\n  setPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex | null, value: any): void {\r\n    // プロパティの値を設定する\r\n    this.updater.addProcess(() => {\r\n      this.stateProxy[SetByRefSymbol](info, listIndex, value);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createComponentEngine(config: IComponentConfig, component: StructiveComponent): IComponentEngine {\r\n  return new ComponentEngine(config, component);\r\n}","import { COMMENT_EMBED_MARK } from \"../constants\";\r\nimport { raiseError } from \"../utils\";\r\n\r\nconst MUSTACHE_REGEXP = /\\{\\{([^\\}]+)\\}\\}/g;\r\nconst MUSTACHE_TYPES:Set<string> = new Set(['if', 'for', 'endif', 'endfor', 'elseif', 'else']);\r\n\r\ntype MustacheType = 'if' | 'for' | 'endif' | 'endfor' | 'elseif' | 'else';\r\ntype MustacheInfo = {\r\n  type: MustacheType;\r\n  remain: string; // after first ':'\r\n  expr: string;\r\n}\r\n\r\nexport function replaceMustacheWithTemplateTag(html: string): string {\r\n  const stack:MustacheInfo[] = [];\r\n  return html.replaceAll(MUSTACHE_REGEXP, (match, expr) => {\r\n    expr = expr.trim();\r\n    const [ type ] = expr.split(':');\r\n    if (!MUSTACHE_TYPES.has(type)) {\r\n      // embed\r\n      return `<!--${COMMENT_EMBED_MARK}${expr}-->`;\r\n    }\r\n    const remain = expr.slice(type.length + 1).trim();\r\n    const currentInfo:MustacheInfo = { type, expr, remain };\r\n    if (type === 'if' || type === 'for') {\r\n      stack.push(currentInfo);\r\n      return `<template data-bind=\"${expr}\">`;\r\n    } else if (type === 'endif') {\r\n      const endTags = [];\r\n      do {\r\n        const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        if (info.type === 'if') {\r\n          endTags.push('</template>');\r\n          break;\r\n        } else if (info.type === 'elseif') {\r\n          endTags.push('</template>');\r\n        } else {\r\n          raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        }\r\n      } while(true);\r\n      return endTags.join('');\r\n    } else if (type === 'endfor') {\r\n      const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n      if (info.type === 'for') {\r\n        return '</template>';\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: endfor without for');\r\n      }\r\n    } else if (type === 'elseif') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      if (lastInfo.type === 'if' || lastInfo.type === 'elseif') {\r\n        stack.push(currentInfo);\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\"><template data-bind=\"if:${remain}\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      }\r\n    } else if (type === 'else') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      if (lastInfo.type === 'if') {\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      }\r\n    } else {\r\n      raiseError('replaceMustacheToTemplateOrEmbed: unknown type');\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n","import { COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants\";\r\nimport { generateId } from \"../GlobalId/generateId\";\r\nimport { registerTemplate } from \"./registerTemplate\";\r\n\r\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport function replaceTemplateTagWithComment(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number = id\r\n):number {\r\n  // テンプレートの親ノードが存在する場合は、テンプレートをコメントノードに置き換える\r\n  template.parentNode?.replaceChild(document.createComment(`${COMMENT_TEMPLATE_MARK}${id}`), template);\r\n  if (template.namespaceURI === SVG_NS) {\r\n    // SVGタグ内のtemplateタグを想定\r\n    const newTemplate = document.createElement(\"template\");\r\n    for(let childNode of Array.from(template.childNodes)) {\r\n      newTemplate.content.appendChild(childNode);\r\n    }\r\n    const bindText = template.getAttribute(DATA_BIND_ATTRIBUTE);\r\n    newTemplate.setAttribute(DATA_BIND_ATTRIBUTE, bindText ?? \"\");\r\n    template = newTemplate;\r\n  }\r\n  template.content.querySelectorAll(\"template\").forEach(template => {\r\n    replaceTemplateTagWithComment(generateId(), template, rootId);\r\n  });\r\n  registerTemplate(id, template, rootId);\r\n  return id;\r\n}\r\n","import { replaceMustacheWithTemplateTag } from \"./replaceMustacheWithTemplateTag\";\r\nimport { replaceTemplateTagWithComment } from \"./replaceTemplateTagWithComment\";\r\n\r\nexport function registerHtml(id: number, html:string) {\r\n  const template = document.createElement(\"template\");\r\n  template.dataset.id = id.toString();\r\n  template.innerHTML = replaceMustacheWithTemplateTag(html);\r\n  replaceTemplateTagWithComment(id, template);\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { BindParentComponentSymbol, RenderSymbol } from \"./symbols\";\r\nimport { IComponentState, IComponentStateHandler, IComponentStateProxy } from \"./types\";\r\n\r\nclass ComponentState implements IComponentState {\r\n  engine: IComponentEngine;\r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  bindParentProperty(binding: IBinding): void {\r\n    const propName = binding.bindingNode.subName;\r\n    Object.defineProperty(this.engine.state, propName, {\r\n      get: () => {\r\n        return binding.bindingState.filteredValue;\r\n      },\r\n      set: (value: any) => {\r\n        return binding.updateStateValue(value);\r\n      },\r\n    });\r\n  }\r\n\r\n  bindParentComponent(): void {\r\n    // bindParentComponent\r\n    const parent = this.engine.owner.parentStructiveComponent;\r\n    if (parent === null) {\r\n      return;\r\n    }\r\n    const bindings = parent.getBindingsFromChild(this.engine.owner);\r\n    for (const binding of bindings ?? []) {\r\n      this.bindParentProperty(binding);\r\n    }\r\n  }\r\n\r\n  render(name: string, value:any): void {\r\n    // render\r\n    const info = getStructuredPathInfo(name);\r\n    this.engine.updater.addUpdatedStatePropertyRefValue(info, null, value)\r\n  }\r\n\r\n  getPropertyValue(name: string): any {\r\n    // getPropertyValue\r\n    const info = getStructuredPathInfo(name);\r\n    return this.engine.getPropertyValue(info, null);\r\n  }\r\n\r\n  setPropertyValue(name: string, value: any): void {\r\n    // setPropertyValue\r\n    const info = getStructuredPathInfo(name);\r\n    this.engine.setPropertyValue(info, null, value); \r\n  }\r\n}\r\n\r\nclass ComponentStateHandler implements IComponentStateHandler {\r\n  get(state: IComponentState, prop: PropertyKey, receiver: IComponentState): any {\r\n    if (prop === RenderSymbol) {\r\n      return state.render.bind(state);\r\n    } else if (prop === BindParentComponentSymbol) {\r\n      return state.bindParentComponent.bind(state);\r\n    } else if (typeof prop === 'string') {\r\n      return state.getPropertyValue(prop);\r\n    } else {\r\n      return Reflect.get(state, prop, receiver);\r\n    }\r\n  }\r\n\r\n  set(state: IComponentState, prop: PropertyKey, value: any, receiver: IComponentState): boolean {\r\n    if (typeof prop === 'string') {\r\n      state.setPropertyValue(prop, value);\r\n      return true;\r\n    } else {\r\n      return Reflect.set(state, prop, value, receiver);\r\n    }\r\n  }\r\n};\r\n\r\nexport const createComponentState = (engine: IComponentEngine): IComponentStateProxy => {\r\n  return new Proxy<IComponentState>(new ComponentState(engine), new ComponentStateHandler()) as IComponentStateProxy;\r\n}","import { inputBuiltinFilters, outputBuiltinFilters } from \"../Filter/builtinFilters\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { generateId } from \"../GlobalId/generateId\";\r\nimport { getStateClassById, registerStateClass } from \"../StateClass/registerStateClass\";\r\nimport { getStyleSheetById } from \"../StyleSheet/registerStyleSheet\";\r\nimport { registerCss } from \"../StyleSheet/regsiterCss\";\r\nimport { createComponentEngine } from \"../ComponentEngine/ComponentEngine\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { registerHtml } from \"../Template/registerHtml\";\r\nimport { getTemplateById } from \"../Template/registerTemplate\";\r\nimport { getBaseClass } from \"./getBaseClass\";\r\nimport { getComponentConfig } from \"./getComponentConfig\";\r\nimport { IComponent, IUserComponentData, IUserConfig, StructiveComponentClass, StructiveComponent } from \"./types\";\r\nimport { getListPathsSetById, getPathsSetById } from \"../BindingBuilder/registerDataBindAttributes\";\r\nimport { IStructiveState, IStructiveStaticState } from \"../StateClass/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { IComponentState, IComponentStateProxy } from \"../ComponentState/types\";\r\nimport { createComponentState } from \"../ComponentState/createComponentState\";\r\n\r\nfunction findStructiveParent(el:StructiveComponent): IComponent | null {\r\n  let current = el.parentNode;\r\n  while (current) {\r\n    if ((current as StructiveComponent).state && (current as StructiveComponent).isStructive) {\r\n      return current as StructiveComponent;\r\n    }\r\n    current = current.parentNode;\r\n    if (current instanceof ShadowRoot) {\r\n      if (current.host && (current.host as StructiveComponent).state && (current.host as StructiveComponent).isStructive) {\r\n        return current.host as StructiveComponent;\r\n      }\r\n      current = current.host;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function createComponentClass(componentData: IUserComponentData): StructiveComponentClass {\r\n  const config = (componentData.stateClass.$config ?? {})as IUserConfig;\r\n  const componentConfig = getComponentConfig(config);\r\n  const id = generateId();\r\n  const { html, css, stateClass } = componentData;\r\n  const inputFilters:FilterWithOptions = Object.assign({}, inputBuiltinFilters);\r\n  const outputFilters:FilterWithOptions = Object.assign({}, outputBuiltinFilters);\r\n  stateClass.$isStructive = true;\r\n  registerHtml(id, html);\r\n  registerCss(id, css);\r\n  registerStateClass(id, stateClass);\r\n  const baseClass = getBaseClass(componentConfig.extends);\r\n  const extendTagName = componentConfig.extends;\r\n  return class extends baseClass implements IComponent {\r\n    #engine: IComponentEngine;\r\n    #componentState: IComponentStateProxy;\r\n\r\n    constructor() {\r\n      super();\r\n      this.#engine = createComponentEngine(componentConfig, this as StructiveComponent);\r\n      this.#componentState = createComponentState(this.#engine);\r\n    }\r\n\r\n    connectedCallback() {\r\n      this.#engine.connectedCallback();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n      this.#engine.disconnectedCallback();\r\n    }\r\n\r\n    #parentStructiveComponent: IComponent | null | undefined;\r\n    get parentStructiveComponent(): IComponent | null {\r\n      if (typeof this.#parentStructiveComponent === \"undefined\") {\r\n        this.#parentStructiveComponent = findStructiveParent(this as StructiveComponent);\r\n      }\r\n      return this.#parentStructiveComponent;\r\n    }\r\n\r\n    get state(): IComponentStateProxy {\r\n      return this.#componentState;\r\n    }\r\n\r\n    get isStructive(): boolean {\r\n      return (this.state.constructor as IStructiveStaticState).$isStructive ?? false;\r\n    }\r\n\r\n    getBindingsFromChild(component: IComponent): Set<IBinding> | null {\r\n      return this.#engine.bindingsByComponent.get(component as StructiveComponent) ?? null;\r\n    }\r\n\r\n    static define(tagName:string) {\r\n      if (extendTagName) {\r\n        customElements.define(tagName, this, { extends: extendTagName });\r\n      } else {\r\n        customElements.define(tagName, this);\r\n      }\r\n    }\r\n\r\n    static get id():number {\r\n      return id;\r\n    }\r\n    static #html:string = html;\r\n    static get html():string {\r\n      return this.#html;\r\n    }\r\n    static set html(value:string) {\r\n      this.#html = value;\r\n      registerHtml(this.id, value);\r\n      this.#template = null;\r\n    }\r\n\r\n    static #css:string = css;\r\n    static get css() {\r\n      return this.#css;\r\n    }\r\n    static set css(value:string) {\r\n      this.#css = value;\r\n      registerCss(this.id, value);\r\n      this.#styleSheet = null;\r\n    }\r\n    static #template: HTMLTemplateElement | null = null;\r\n    static get template():HTMLTemplateElement {\r\n      if (!this.#template) {\r\n        this.#template = getTemplateById(this.id);\r\n      }\r\n      return this.#template;\r\n    }\r\n    static #styleSheet: CSSStyleSheet | null = null;\r\n    static get styleSheet():CSSStyleSheet {\r\n      if (!this.#styleSheet) {\r\n        this.#styleSheet = getStyleSheetById(this.id);\r\n      }\r\n      return this.#styleSheet;\r\n    }\r\n    static #stateClass: IStructiveState | null = null;\r\n    static get stateClass():IStructiveState {\r\n      if (!this.#stateClass) {\r\n        this.#stateClass = getStateClassById(this.id) as IStructiveState;\r\n      }\r\n      return this.#stateClass;\r\n    }\r\n    static #inputFilters:FilterWithOptions = inputFilters;\r\n    static get inputFilters():FilterWithOptions {\r\n      return this.#inputFilters;\r\n    }\r\n    static #outputFilters:FilterWithOptions = outputFilters;\r\n    static get outputFilters():FilterWithOptions {\r\n      return this.#outputFilters;\r\n    }\r\n    static get listPaths(): Set<string> {\r\n      return getListPathsSetById(this.id);\r\n    }\r\n    static get paths(): Set<string> {\r\n      return getPathsSetById(this.id);\r\n    }\r\n    static #trackedGetters: Set<string> | null = null;\r\n    static get trackedGetters(): Set<string> {\r\n      if(this.#trackedGetters === null) {\r\n        this.#trackedGetters = new Set<string>();\r\n        let currentProto = this.stateClass.prototype;\r\n        while (currentProto && currentProto !== Object.prototype) {\r\n          const trackedGetters = Object.getOwnPropertyDescriptors(currentProto);\r\n          if (trackedGetters) {\r\n            for (const [key, desc] of Object.entries(trackedGetters)) {\r\n              if ((desc as PropertyDescriptor).get) {\r\n                this.#trackedGetters.add(key);\r\n              }\r\n            }\r\n          }\r\n          currentProto = Object.getPrototypeOf(currentProto);\r\n        }\r\n      }\r\n      return this.#trackedGetters;\r\n\r\n    }\r\n  } as StructiveComponentClass;\r\n}\r\n","import { getGlobalConfig } from \"./getGlobalConfig\";\r\nimport { IUserConfig, IComponentConfig } from \"./types\";\r\n\r\nexport function getComponentConfig(userConfig: IUserConfig): IComponentConfig {\r\n  const globalConfig = getGlobalConfig();\r\n  return {\r\n    enableShadowDom: userConfig.enableShadowDom ?? globalConfig.enableShadowDom,\r\n    extends        : userConfig.extends ?? null,\r\n  };\r\n}","import { Constructor } from \"./types\";\r\n\r\nexport function getBaseClass(extendTagName: string | null):Constructor<HTMLElement> {\r\n  return extendTagName ? (document.createElement(extendTagName).constructor as Constructor<HTMLElement>) : HTMLElement;\r\n}","import { IStructiveState } from \"../StateClass/types\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nfunction escapeEmbed(html: string): string {\r\n  return html.replaceAll(/\\{\\{([^\\}]+)\\}\\}/g, (match, expr) => {\r\n    return `<!--{{${expr}}}-->`;\r\n  });\r\n}\r\n\r\nfunction unescapeEmbed(html:string):string {\r\n  return html.replaceAll(/<!--\\{\\{([^\\}]+)\\}\\}-->/g, (match, expr) => {\r\n    return `{{${expr}}}`;\r\n  });\r\n}\r\n\r\nexport async function createSingleFileComponent(text: string): Promise<IUserComponentData> {\r\n  const template = document.createElement(\"template\");\r\n  template.innerHTML = escapeEmbed(text);\r\n\r\n  const html = template.content.querySelector(\"template\");\r\n  html?.remove();\r\n\r\n  const script = template.content.querySelector(\"script\");\r\n  const scriptModule = script ? await import(\"data:text/javascript;charset=utf-8,\" + script.text) : {};\r\n  script?.remove();\r\n\r\n  const style = template.content.querySelector(\"style\");\r\n  style?.remove();\r\n\r\n  const stateClass = (scriptModule.default ?? class {}) as IStructiveState;\r\n  \r\n  return {\r\n    text,\r\n    html      : unescapeEmbed(html?.innerHTML ?? \"\").trim(),\r\n    css       : style?.textContent ?? \"\",\r\n    stateClass,\r\n  }\r\n}","import { createSingleFileComponent } from \"./createSingleFileComponent\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nexport async function loadSingleFileComponent(path: string): Promise<IUserComponentData> {\r\n  const response = await fetch(import.meta.resolve(path));\r\n  const text = await response.text();\r\n  return createSingleFileComponent(text);\r\n}\r\n","import { entryRoute } from \"../Router/Router\";\r\nimport { createComponentClass } from \"./createComponentClass\";\r\nimport { config } from \"./getGlobalConfig\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent\";\r\nimport { registerComponentClass } from \"./registerComponentClass\";\r\nimport { IUserComponentData, SingleFileComponents } from \"./types\";\r\n\r\nexport async function registerSingleFileComponents(singleFileComponents:SingleFileComponents):Promise<void> {\r\n  const promises = Promise.all(Object.entries(singleFileComponents).map(async ([tagName, path]) => {\r\n    let componentData : IUserComponentData | null = null;\r\n    if (config.enableRouter) {\r\n      const routePath = path.startsWith(\"@routes\") ? path.slice(7) : path; // remove the prefix 'routes:'\r\n      entryRoute(tagName, routePath === \"/root\" ? \"/\" : routePath); // routing\r\n      componentData = await loadSingleFileComponent(\"@routes\" + (routePath === \"/\" ? \"/root\" : routePath));\r\n    } else {\r\n      componentData = await loadSingleFileComponent(path);\r\n    }\r\n    const componentClass = createComponentClass(componentData);\r\n    registerComponentClass(tagName, componentClass);\r\n  }));\r\n  await promises;\r\n}","import { StructiveComponentClass } from \"./types\";\r\n\r\nexport function registerComponentClass(tagName: string, componentClass: StructiveComponentClass) {\r\n  componentClass.define(tagName);\r\n}","import { raiseError } from \"../utils\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst SLOT_KEY = \"router\";\r\nconst DEFAULT_LAYOUT = `<slot name=\"${SLOT_KEY}\"></slot>`;\r\n\r\nexport class MainWrapper extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n    if (config.enableShadowDom) {\r\n      this.attachShadow({ mode: 'open' });\r\n    }\r\n  }\r\n\r\n  async connectedCallback() {\r\n    await this.loadLayout();\r\n    this.render();\r\n  }\r\n\r\n  get root(): ShadowRoot | HTMLElement {\r\n    return this.shadowRoot ?? this;\r\n  }\r\n\r\n  async loadLayout() {\r\n    if (config.layoutPath) {\r\n      const response = await fetch(config.layoutPath);\r\n      if (response.ok) {\r\n        const layoutText = await response.text();\r\n        const workTemplate = document.createElement(\"template\");\r\n        workTemplate.innerHTML = layoutText;\r\n      \r\n        const template = workTemplate.content.querySelector(\"template\");\r\n        const style = workTemplate.content.querySelector(\"style\") as CSSStyleSheet | null;\r\n      \r\n        this.root.appendChild(template?.content ?? document.createDocumentFragment());\r\n        if (style) {\r\n          const shadowRootOrDocument = this.shadowRoot ?? document;\r\n          const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n          if (!styleSheets.includes(style)) {\r\n            shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, style];\r\n          }\r\n        }\r\n      } else {\r\n        raiseError(`Failed to load layout from ${config.layoutPath}`);\r\n      }\r\n    } else {\r\n      this.root.innerHTML = DEFAULT_LAYOUT;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // add router\r\n    if (config.enableRouter) {\r\n      const router = document.createElement(config.routerTagName);\r\n      router.setAttribute('slot', SLOT_KEY);\r\n      this.root.appendChild(router);\r\n    }\r\n  }\r\n}\r\n","import { registerSingleFileComponents } from \"./WebComponents/registerSingleFIleComponents\";\r\nimport { bootstrap } from \"./bootstrap\";\r\nimport { config as _config } from \"./WebComponents/getGlobalConfig\";\r\nimport { IConfig } from \"./WebComponents/types\";\r\n\r\nexport const config: IConfig = _config;\r\n\r\nlet initialized = false;\r\nexport async function defineComponents(singleFileComponents: Record<string, string>):Promise<void> {\r\n  await registerSingleFileComponents(singleFileComponents);\r\n  if (config.autoInit) {\r\n    bootstrapStructive();\r\n  }\r\n}\r\n\r\nexport function bootstrapStructive() {\r\n  if (!initialized) {\r\n    bootstrap();\r\n    initialized = true;\r\n  }\r\n}\r\n\r\n","import { MainWrapper } from \"./MainWrapper/MainWrapper\";\r\nimport { Router } from \"./Router/Router\";\r\nimport { config } from \"./WebComponents/getGlobalConfig\";\r\n\r\nexport function bootstrap(): void {\r\n  if (config.enableRouter) {\r\n    customElements.define(config.routerTagName, Router);\r\n  }\r\n\r\n  if (config.enableMainWrapper) {\r\n    customElements.define(config.mainTagName, MainWrapper);\r\n    if (config.autoInsertMainWrapper) {\r\n      const mainWrapper = document.createElement(config.mainTagName);\r\n      document.body.appendChild(mainWrapper);\r\n    }\r\n  }\r\n}"],"names":["ROUTE_PATH_PREFIX","routeMap","Router","HTMLElement","_popstateHandler","constructor","super","this","popstateHandler","bind","connectedCallback","innerHTML","window","addEventListener","dispatchEvent","Event","disconnectedCallback","removeEventListener","event","render","routePath","location","pathname","tagName","params","path","tag","Object","entries","regex","RegExp","replace","test","matches","match","forEach","key","index","substring","customElement","document","createElement","setAttribute","JSON","stringify","appendChild","messageElement","textContent","globalConfig","debug","locale","enableShadowDom","enableMainWrapper","enableRouter","autoInsertMainWrapper","autoInit","mainTagName","routerTagName","layoutPath","getGlobalConfig","config","optionsRequired","fnName","Error","optionMustBeNumber","valueMustBeNumber","valueMustBeDate","builtinFilters","eq","options","opt","optValue","Number","isNaN","value","ne","not","valueMustBeBoolean","lt","le","gt","ge","inc","dec","mul","div","fix","toFixed","toLocaleString","uc","toString","toUpperCase","lc","toLowerCase","cap","v","length","charAt","slice","trim","substr","opt1","opt1Value","opt2","opt2Value","pad","padStart","rep","repeat","rev","split","reverse","join","int","parseInt","float","parseFloat","round","Math","pow","floor","ceil","percent","date","Date","toLocaleDateString","time","toLocaleTimeString","datetime","ymd","year","getFullYear","month","getMonth","day","getDate","falsy","truthy","defaults","boolean","Boolean","number","string","String","null","outputBuiltinFilters","inputBuiltinFilters","id","generateId","raiseError","message","stateClassById","styleSheetById","registerCss","css","styleSheet","CSSStyleSheet","replaceSync","registerStyleSheet","textToFilter","filters","text","filter","name","cache","Map","createFilters","texts","result","get","i","push","set","BindingNode","binding","node","bindContents","Set","subName","init","update","assignValue","bindingState","filteredValue","updateElements","listIndexes","values","isSelectElement","HTMLSelectElement","BindingNodeAttribute","BindingNodeCheckbox","Array","isArray","element","checked","map","_val","includes","BindingNodeClassList","className","BindingNodeClassName","classList","add","remove","BindingNodeEvent","e","handler","engine","stateProxy","updater","loopContext","parentBindContent","currentLoopContext","indexes","serialize","context","listIndex","preventDefault","addProcess","async","typeOfValue","setLoopContext","Reflect","apply","createBindingNodeEvent","filterTexts","filterFns","DATA_BIND_ATTRIBUTE","COMMENT_EMBED_MARK","COMMENT_TEMPLATE_MARK","BindingNodeBlock","BindingNodeIf","bindContent","trueBindContents","falseBindContents","createBindContent","parentNode","mountBefore","nextSibling","unmount","BindingNodeFor","bindContentsSet","bindContentByListIndex","WeakMap","bindContentPool","bindContentLastIndex","assignListIndex","pattern","deleteBindContent","clearListIndex","poolLength","listIndexesSet","getListIndexesSet","info","newBindContensSet","lastBindContent","lastNode","getLastNode","mountAfter","firstChildNode","removeBindContentsSet","difference","oldListValues","getList","currentBindContents","from","targetBindContents","lastChildNode","oldValue","targetIndex","indexOf","prevBindContent","saveList","createBindingNodeFor","DEFAULT_PROPERTY","defaultPropertyByElementType","Bt","$t","button","_cache","getDefaultPropertyByNodeType","HTMLTextAreaElement","HTMLOptionElement","HTMLButtonElement","HTMLAnchorElement","HTMLFormElement","HTMLInputElement","type","SVGElement","undefined","Text","Template","defaultEventByName","selected","BindingNodeProperty","defaultName","nodeType","getDefaultName","eventName","updateStateValue","createBindingNodeProperty","BindingNodeRadio","BindingNodeStyle","style","setProperty","symbolName","RenderSymbol","Symbol","for","BindParentComponentSymbol","BindingNodeComponent","bindings","bindingsByComponent","state","nodePropertyConstructorByNameByIsComment","kt","Vt","nodePropertyConstructorByFirstName","Ft","getBindingNodeCreator","propertyName","isComment","Comment","isElement","Element","fn","bindingNodeCreatorByName","nameElements","bindingNodeCreatorByFirstName","startsWith","_getBindingNodeCreator","GetByRefSymbol","SetByRefSymbol","SetCacheableSymbol","ConnectedCallbackSymbol","DisconnectedCallbackSymbol","ResolveSymbol","GetAllSymbol","StructuredPathInfo","static","pathSegments","lastSegment","cumulativePaths","cumulativeInfos","wildcardPaths","wildcardInfos","wildcardParentPaths","wildcardParentInfos","lastWildcardPath","lastWildcardInfo","parentPath","parentInfo","wildcardCount","getPattern","_pattern","getStructuredPathInfo","currentPatternPath","prevPatternPath","reservedWords","structuredPath","has","BindingState","listIndexRef","deref","find","saveBinding","BindingStateIndex","indexNumber","loopContexts","bindingsByListIndex","ereg","getBindingStateCreator","createBindingStateIndex","createBindingState","getTextByNodeType","getAttribute","Pt","getTemplateById","nodeTypeByNodeKey","getNodeType","nodeKey","createNodeKey","getNodeTypeByNode","s","re","decode","m","exec","decodeURIComponent","parseFilter","parseProperty","property","parseExpressions","expression","bindExpression","nodePropertyText","statePropertyText","nodeProperty","inputFilterTexts","stateProperty","outputFilterTexts","parseExpression","removeAttributeFromElement","removeAttribute","removeAttributeByNodeType","replaceTextNodeFn","textNode","createTextNode","replaceChild","DataBindAttributes","nodePath","bindTexts","creatorByText","bindText","getDataBindText","removeDataBindAttribute","replaceTextNodeFromComment","routeIndexes","childNodes","getAbsoluteNodePath","parseBindText","creator","createBindingNode","getNodesHavingDataBind","root","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","acceptNode","hasAttribute","FILTER_ACCEPT","FILTER_SKIP","isCommentNode","nextNode","currentNode","listDataBindAttributesById","listPathsSetById","pathsSetById","getDataBindAttributesFromTemplate","content","createDataBindAttributes","templateById","registerTemplate","template","rootId","Node","TEXT_NODE","nodeValue","removeChild","dataBindAttributes","paths","listPaths","attribute","j","registerDataBindAttributes","Binding","bindingNode","inputFilters","outputFilters","createBinding","LoopContext","WeakRef","parentLoopContext","currentBinding","parentBinding","walk","callback","results","unshift","bindingsWithSelectElement","createBindings","attributes","getDataBindAttributesById","reduce","BindContent","fragment","isMounted","lastBinding","size","at","importNode","createContent","createLoopContext","mount","beforeNode","insertBefore","afterNode","ListIndex","parentListIndex","position","truncate","reverseIterator","iterator","next","getStatePropertyRefId","listIndexMaxId","_getByRef","target","receiver","lastTrackingStack","lastPattern","addDependentProp","refId","cacheable","setStatePropertyRef","parentValue","getByRef","trackedGetters","trackingStack","pop","setTracking","prop","methodGetByRef","setByRef","addUpdatedStatePropertyRefValue","methodSetByRef","setCacheable","methodSetChargeable","call","resolve","wildcardParentPattern","getAll","_resolve","wildcardPattern","getContextListIndex","walkWildcardPattern","wildardIndexPos","indexPos","parentIndexes","listIndexSet","concat","resultIndexes","resultValues","ResolvedPathInfo","elements","wildcardType","wildcardIndexes","tmpPatternElements","incompleteCount","completeCount","lastPath","getResolvedPathInfo","getListIndex","matchIndexPropertyName","StateHandler","callableApi","apiGetByRef","apiSetByRef","apiSetCacheable","ref","getLastStatePropertyRef","resolvedInfo","trapGet","trapSet","BLANK_LISTINDEXES_SET","buildListIndexTreeSub","listInfos","oldListIndexesSet","oldListIndexesByItem","groupBy","newListIndexesSet","item","oldListIndexes","curListIndex","shift","addUpdatedListIndex","saveListIndexesSet","searchPath","subListIndex","subValue","buildListIndexTree","listInfoSet","extractListIndexes","_extractListIndexes","pos","currentListIndex","resultListIndexes","wildcardParentInfo","loopListIndex","_collectAffectedGetters","refInfo","refListIndex","resultPathInfos","resultRefs","dependentPathInfos","dependentTree","dependentPathInfo","dependentListIndex","updateList","extractlistIndexes","collectAffectedGetters","updateRefs","Updater","processList","updatedProperties","updatedValues","process","waitForQueueEntry","terminate","waitForMainLoopTerminate","Promise","withResolvers","main","waitForComponentInit","promise","performance","mark","updatingCount","measure","console","log","getEntriesByType","clearMeasures","clearMarks","error","updateState","rebuild","retArrayElementBindings","retBindings","processedListIndexes","processedPropertyRefIdsSet","updatedProiperties","updatedRefs","arrayPropertyRefs","arrayElementPropertyRefs","clear","statePropertyRefId","statePropertyRef","elementInfoSet","getBindings","builtStatePropertyRefIds","arrayPropertyRef","parentRefByRefId","statePropertyRefByStatePropertyRefId","parentRefId","parentRefIdKey","refs","parentRef","arrayElementBinding","updatingRefs","updatingRef","arrayElementBindings","be","Ke","attachShadow","extends","canHaveShadowRoot","mode","adoptedStyleSheets","shadowRootOrDocument","ShadowRoot","getParentShadowRoot","styleSheets","ComponentEngine","stateClass","baseClass","owner","waitForInitialize","stackStructuredPathInfo","stackListIndex","componentClass","Proxy","createUpdater","checkDependentProp","listPath","shadowRoot","asyncSetStatePropertyRef","lastRef","getLoopContexts","saveInfoByListIndexByResolvedPathInfoId","saveInfoByStructuredPathId","createSaveInfo","list","getSaveInfoByStatePropertyRef","saveInfo","saveInfoByListIndex","dependents","getPropertyValue","setPropertyValue","MUSTACHE_REGEXP","MUSTACHE_TYPES","replaceTemplateTagWithComment","createComment","namespaceURI","newTemplate","childNode","querySelectorAll","registerHtml","html","dataset","stack","replaceAll","expr","remain","currentInfo","endTags","lastInfo","replaceMustacheWithTemplateTag","ComponentState","bindParentProperty","propName","defineProperty","bindParentComponent","parent","parentStructiveComponent","getBindingsFromChild","ComponentStateHandler","createComponentClass","componentData","componentConfig","userConfig","Xe","getComponentConfig","$config","yn","wn","Ze","assign","$isStructive","registerStateClass","extendTagName","getBaseClass","componentState","component","createComponentEngine","el","current","isStructive","host","findStructiveParent","define","customElements","getStyleSheetById","getStateClassById","getListPathsSetById","getPathsSetById","currentProto","prototype","getOwnPropertyDescriptors","desc","getPrototypeOf","unescapeEmbed","loadSingleFileComponent","response","fetch","escapeEmbed","querySelector","script","scriptModule","import","default","createSingleFileComponent","registerSingleFileComponents","singleFileComponents","promises","all","entryRoute","registerComponentClass","SLOT_KEY","DEFAULT_LAYOUT","MainWrapper","loadLayout","ok","layoutText","workTemplate","createDocumentFragment","router","_config","initialized","defineComponents","bootstrapStructive","mainWrapper","body","bootstrap"],"mappings":"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"}
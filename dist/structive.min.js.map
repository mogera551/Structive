{"version":3,"file":"structive.min.js","sources":["../src/Router/Router.ts","../src/WebComponents/getGlobalConfig.ts","../src/Filter/errorMessages.ts","../src/Filter/builtinFilters.ts","../src/GlobalId/generateId.ts","../src/utils.ts","../src/StateClass/registerStateClass.ts","../src/StyleSheet/registerStyleSheet.ts","../src/StyleSheet/regsiterCss.ts","../src/BindingBuilder/createFilters.ts","../src/DataBinding/BindingNode/BindingNode.ts","../src/DataBinding/BindingNode/BindingNodeAttribute.ts","../src/DataBinding/BindingNode/BindingNodeCheckbox.ts","../src/DataBinding/BindingNode/BindingNodeClassList.ts","../src/DataBinding/BindingNode/BindingNodeClassName.ts","../src/DataBinding/BindingNode/BindingNodeEvent.ts","../src/constants.ts","../src/DataBinding/BindingNode/BindingNodeBlock.ts","../src/DataBinding/BindingNode/BindingNodeIf.ts","../src/DataBinding/BindingNode/BindingNodeFor.ts","../src/BindingBuilder/getDefaultName.ts","../src/StateClass/symbols.ts","../src/DataBinding/BindingNode/BindingNodeProperty.ts","../src/DataBinding/BindingNode/BindingNodeRadio.ts","../src/DataBinding/BindingNode/BindingNodeStyle.ts","../src/BindingBuilder/getBindingNodeCreator.ts","../src/StateProperty/getStructuredPathInfo.ts","../src/DataBinding/BindingState/BindingState.ts","../src/DataBinding/BindingState/BindingStateIndex.ts","../src/BindingBuilder/getBindingStateCreator.ts","../src/BindingBuilder/getDataBindText.ts","../src/BindingBuilder/getNodeType.ts","../src/BindingBuilder/parseBindText.ts","../src/BindingBuilder/removeDataBindAttribute.ts","../src/BindingBuilder/replaceTextNodeFromComment.ts","../src/BindingBuilder/createDataBindAttributes.ts","../src/BindingBuilder/getAbsoluteNodePath.ts","../src/BindingBuilder/getNodesHavingDataBind.ts","../src/BindingBuilder/registerDataBindAttributes.ts","../src/Template/registerTemplate.ts","../src/Template/removeEmptyTextNodes.ts","../src/DataBinding/Binding.ts","../src/LoopContext/createLoopContext.ts","../src/Render/render.ts","../src/DataBinding/BindContent.ts","../src/BindingBuilder/resolveNodeFromPath.ts","../src/ListIndex/createListIndex.ts","../src/StatePropertyRef/getStatePropertyRefId.ts","../src/StateClass/methods/getByRef.ts","../src/StateClass/methods/setTracking.ts","../src/StateClass/apis/getByRef.ts","../src/StateClass/methods/setByRef.ts","../src/StateClass/apis/setByRef.ts","../src/StateClass/apis/setCacheable.ts","../src/StateClass/methods/setCacheable.ts","../src/StateClass/apis/connectedCallback.ts","../src/StateClass/apis/disconnectedCallback.ts","../src/StateClass/apis/resolve.ts","../src/StateClass/apis/getAll.ts","../src/StateProperty/getResolvedPathInfo.ts","../src/StateClass/getListIndex.ts","../src/StateClass/traps/get.ts","../src/StateClass/createStateProxy.ts","../src/StateClass/traps/set.ts","../src/StateClass/buildListIndexTree.ts","../src/Updater/collectAffectedGetters.ts","../src/Updater/updater.ts","../src/ComponentEngine/attachShadow.ts","../src/ComponentEngine/canHaveShadowRoot.ts","../src/ComponentEngine/ComponentEngine.ts","../src/Template/replaceMustacheWithTemplateTag.ts","../src/Template/replaceTemplateTagWithComment.ts","../src/Template/registerHtml.ts","../src/WebComponents/createComponentClass.ts","../src/WebComponents/getComponentConfig.ts","../src/WebComponents/getBaseClass.ts","../src/WebComponents/createSingleFileComponent.ts","../src/WebComponents/loadSingleFileComponent.ts","../src/WebComponents/registerSingleFIleComponents.ts","../src/WebComponents/registerComponentClass.ts","../src/MainWrapper/MainWrapper.ts","../src/exports.ts","../src/bootstrap.ts"],"sourcesContent":["import { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst DEFAULT_ROUTE_PATH = '/'; // Default route path\r\nconst ROUTE_PATH_PREFIX = 'routes:'; // Prefix for route paths\r\n/**\r\n * example:\r\n * ```ts\r\n * entryRoute('my-view', '/my-view/:id');\r\n */\r\nconst routeMap: Record<string,string> = {};\r\n\r\nexport class Router extends HTMLElement {\r\n  _popstateHandler: (event: PopStateEvent) => void;\r\n  constructor() {\r\n    super();\r\n    this.innerHTML = '<slot name=\"content\"></slot>';\r\n    this._popstateHandler = this.popstateHandler.bind(this);\r\n  }\r\n\r\n  connectedCallback() {\r\n    window.addEventListener('popstate', this._popstateHandler);\r\n    window.dispatchEvent(new Event(\"popstate\")); // Dispatch popstate event to trigger the initial render\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('popstate', this._popstateHandler);\r\n  }\r\n\r\n  popstateHandler() {\r\n    this.render();\r\n    window.dispatchEvent(new Event('popstate')); // Dispatch popstate event to notify other components\r\n  }\r\n\r\n  render() {\r\n    const routePath = window.location.pathname || DEFAULT_ROUTE_PATH;\r\n    let tagName: string | undefined = undefined;\r\n    let params: Record<string, string> = {};\r\n    // Check if the routePath matches any of the defined routes\r\n    for (const [path, tag] of Object.entries(routeMap)) {\r\n      const regex = new RegExp(path.replace(/:[^\\s/]+/g, '([^/]+)'));\r\n      if (regex.test(routePath)) {\r\n        tagName = tag;\r\n        // Extract the parameters from the routePath\r\n        const matches = routePath.match(regex);\r\n        if (matches) {\r\n          const keys = path.match(/:[^\\s/]+/g) || [];\r\n          keys.forEach((key, index) => {\r\n            params[key.substring(1)] = matches[index + 1]; // +1 to skip the full match\r\n          });\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (tagName) {\r\n      // If a route matches, create the custom element and set its state\r\n      // Create the custom element with the tag name\r\n      // project the custom element into the router slot\r\n      const customElement = document.createElement(tagName) as HTMLElement;\r\n      customElement.setAttribute('state', JSON.stringify(params));\r\n      customElement.setAttribute('slot', 'content');\r\n      this.appendChild(customElement);\r\n    } else {\r\n      // If no route matches, show 404 content\r\n      const messageElement = document.createElement('h1') as HTMLElement;\r\n      messageElement.setAttribute('slot', 'content');\r\n      messageElement.textContent = '404 Not Found';\r\n      this.appendChild(messageElement);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function entryRoute(tagName: string, routePath: string): void {\r\n  if (routePath.startsWith(ROUTE_PATH_PREFIX)) {\r\n    routePath = routePath.substring(ROUTE_PATH_PREFIX.length); // Remove 'routes:' prefix\r\n  } \r\n  routeMap[routePath] = tagName;\r\n}\r\n","import { IConfig } from \"./types\";\r\n\r\nconst globalConfig: IConfig = {\r\n  debug                : false,\r\n  locale               : \"en-US\", // The locale of the component, ex. \"en-US\", default is \"en-US\"\r\n  enableShadowDom      : true,\r\n  enableMainWrapper    : true, // Whether to use the main wrapper or not\r\n  enableRouter         : true, // Whether to use the router or not\r\n  autoInsertMainWrapper: false, // Whether to automatically insert the main wrapper or not\r\n  autoInit             : true, // Whether to automatically initialize the component or not\r\n  mainTagName          : \"app-main\", // The tag name of the main wrapper, default is \"app-main\"\r\n  routerTagName        : \"view-router\", // The tag name of the router, default is \"view-router\"\r\n  layoutPath           : \"\", // The path to the layout file, default is \"\"\r\n};\r\n\r\nexport function getGlobalConfig():IConfig {\r\n  return globalConfig;\r\n}\r\n\r\nexport const config = getGlobalConfig();\r\n","\r\nexport function optionsRequired(fnName:string): never {\r\n  throw new Error(`${fnName} requires at least one option`);\r\n}\r\n\r\nexport function optionMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number as option`);\r\n}\r\n\r\nexport function valueMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number value`);\r\n}\r\n\r\nexport function valueMustBeBoolean(fnName:string): never {\r\n  throw new Error(`${fnName} requires a boolean value`);\r\n}\r\n\r\nexport function valueMustBeDate(fnName:string): never {\r\n  throw new Error(`${fnName} requires a date value`);\r\n}","import { getGlobalConfig } from \"../WebComponents/getGlobalConfig\";\r\nimport { optionMustBeNumber, optionsRequired, valueMustBeBoolean, valueMustBeDate, valueMustBeNumber } from \"./errorMessages\";\r\nimport { FilterWithOptions } from \"./types\";\r\n\r\nconst config = getGlobalConfig();\r\n\r\nconst eq = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('eq');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('eq');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('eq');\r\n    return value === optValue;\r\n  }\r\n}\r\n\r\nconst ne = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ne');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ne');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ne');\r\n    return value !== optValue;\r\n  }\r\n}\r\n\r\nconst not = (options?:string[]) => {\r\n  return (value: any) => {\r\n    if (typeof value !== 'boolean') valueMustBeBoolean('not');\r\n    return !value;\r\n  }\r\n}\r\n\r\nconst lt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('lt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('lt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('lt');\r\n    return value < optValue;\r\n  }\r\n}\r\n\r\nconst le = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('le');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('le');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('le');\r\n    return value <= optValue;\r\n  }\r\n}\r\n\r\nconst gt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('gt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('gt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('gt');\r\n    return value > optValue;\r\n  }\r\n}\r\n\r\nconst ge = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ge');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ge');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ge');\r\n    return value >= optValue;\r\n  }\r\n}\r\n\r\nconst inc = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('inc');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('inc');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('inc');\r\n    return value + optValue;\r\n  }\r\n}\r\n\r\nconst dec = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('dec');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('dec');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('dec');\r\n    return value - optValue;\r\n  }\r\n}\r\n\r\nconst mul = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('mul');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('mul');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('mul');\r\n    return value * optValue;\r\n  }\r\n}\r\n\r\nconst div = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('div');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value / optValue;\r\n  }\r\n}\r\n\r\nconst fix = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value.toFixed(optValue);\r\n  }\r\n}\r\n\r\nconst locale = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('locale');\r\n    return value.toLocaleString(opt);\r\n  }\r\n}\r\n\r\nconst uc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toUpperCase();\r\n  }\r\n}\r\n\r\nconst lc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toLowerCase();\r\n  }\r\n}\r\n\r\nconst cap = (options?:string[]) => {\r\n  return (value: any) => {\r\n    const v = value.toString();\r\n    if (v.length === 0) return v;\r\n    if (v.length === 1) return v.toUpperCase();\r\n    return v.charAt(0).toUpperCase() + v.slice(1);\r\n  }\r\n}\r\n\r\nconst trim = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().trim();\r\n  }\r\n}\r\n\r\nconst slice = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('slice');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('slice');\r\n  return (value: any) => {\r\n    return value.toString().slice(optValue);\r\n  }\r\n}\r\n\r\nconst substr = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('substr');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('substr');\r\n  const opt2 = options?.[1] ?? optionsRequired('substr');\r\n  const opt2Value = Number(opt2);\r\n  if (isNaN(opt2Value)) optionMustBeNumber('substr');\r\n  return (value: any) => {\r\n    return value.toString().substr(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst pad = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('pad');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('pad');\r\n  const opt2 = options?.[1] ?? '0';\r\n  const opt2Value = opt2;\r\n  return (value: any) => {\r\n    return value.toString().padStart(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst rep = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('rep');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('rep');\r\n  return (value: any) => {\r\n    return value.toString().repeat(optValue);\r\n  }\r\n}\r\n\r\nconst rev = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().split('').reverse().join('');\r\n  }\r\n}\r\n\r\nconst int = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseInt(value, 10);\r\n  }\r\n}\r\n\r\nconst float = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseFloat(value);\r\n  }\r\n}\r\n\r\nconst round = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('round');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('round');\r\n    return Math.round(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst floor = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('floor');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('floor');\r\n    return Math.floor(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst ceil = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('ceil');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ceil');\r\n    return Math.ceil(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst percent = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('percent');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('percent');\r\n    return value.toFixed(optValue) + '%';\r\n  }\r\n}\r\n\r\nconst date = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date))  valueMustBeDate('date');\r\n    return value.toLocaleDateString(config.locale);\r\n  }\r\n}\r\n\r\nconst time = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('time');\r\n    return value.toLocaleTimeString(config.locale);\r\n  }\r\n}\r\n\r\nconst datetime = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('datetime');\r\n    return value.toLocaleString(config.locale);\r\n  }\r\n}\r\n\r\nconst ymd = (options?:string[]) => {\r\n  const opt = options?.[0] ?? '-';\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('ymd');\r\n    const year = value.getFullYear().toString();\r\n    const month = (value.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = value.getDate().toString().padStart(2, '0');\r\n    return `${year}${opt}${month}${opt}${day}`;\r\n  }\r\n}\r\n\r\nconst falsy = (options?:string[]) => {\r\n  return (value: any) => value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value);\r\n}\r\n\r\nconst truthy = (options?:string[]) => {\r\n  return (value: any) =>value !== false && value !== null && value !== undefined && value !== 0 && value !== '' && !Number.isNaN(value);\r\n}\r\n\r\nconst defaults = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('defaults');\r\n  return (value: any) => {\r\n    if (value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value)) return opt;\r\n    return value;\r\n  }\r\n}\r\n\r\nconst boolean = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Boolean(value);\r\n  }\r\n}\r\n\r\nconst number = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Number(value);\r\n  }\r\n}\r\n\r\nconst string = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return String(value);\r\n  }\r\n}\r\n\r\nconst _null = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return (value === \"\") ? null : value;\r\n  } \r\n}\r\n\r\nconst builtinFilters: FilterWithOptions = {\r\n  eq,\r\n  ne,\r\n  not,\r\n  \r\n  lt,\r\n  le,\r\n  gt,\r\n  ge,\r\n\r\n  inc,\r\n  dec,\r\n  mul,\r\n  div,\r\n\r\n  fix,\r\n  locale,\r\n  uc,\r\n  lc,\r\n  cap,\r\n  trim,\r\n  slice,\r\n  substr,\r\n  pad,\r\n  rep,\r\n  rev,\r\n\r\n  int,\r\n  float,\r\n  round,\r\n  floor,\r\n  ceil,\r\n  percent,\r\n\r\n  date,\r\n  time,\r\n  datetime,\r\n  ymd,\r\n\r\n  falsy,\r\n  truthy,\r\n  defaults,\r\n\r\n  boolean,\r\n  number,\r\n  string,\r\n  \"null\": _null,\r\n};\r\n\r\nexport const outputBuiltinFilters = builtinFilters;\r\nexport const inputBuiltinFilters = builtinFilters;\r\n\r\nexport const builtinFilterFn = (name:string, options: string[]) => (filters: FilterWithOptions) => {\r\n  const filter = filters[name];\r\n  if (!filter) throw new Error(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(options);\r\n}\r\n\r\n","\r\nlet id = 0;\r\n\r\nexport function generateId(): number {\r\n  return ++id;\r\n}","\r\nexport function raiseError(message: string): never {\r\n  throw new Error(message);\r\n}\r\n","import { raiseError } from \"../utils\";\r\nimport { IStructiveState } from \"./types\";\r\n\r\nconst stateClassById: Record<number,IStructiveState> = {};\r\n\r\nexport function registerStateClass(id: number, stateClass: IStructiveState) {\r\n  stateClassById[id] = stateClass;\r\n}\r\n\r\nexport function getStateClassById(id: number): IStructiveState {\r\n  return stateClassById[id] ?? raiseError(`getStateClassById: stateClass not found: ${id}`);\r\n}\r\n","import { raiseError } from \"../utils\";\r\n\r\nconst styleSheetById: Record<number,CSSStyleSheet> = {};\r\n\r\nexport function registerStyleSheet(id: number, css: CSSStyleSheet) {\r\n  styleSheetById[id] = css;\r\n}\r\n\r\nexport function getStyleSheetById(id: number): CSSStyleSheet {\r\n  return styleSheetById[id] ?? raiseError(`getStyleSheetById: stylesheet not found: ${id}`);\r\n}","import { registerStyleSheet } from \"./registerStyleSheet\";\r\n\r\nexport function registerCss(id: number, css: string) {\r\n  const styleSheet = new CSSStyleSheet();\r\n  styleSheet.replaceSync(css);\r\n  registerStyleSheet(id, styleSheet);\r\n}","import { FilterFn, Filters, FilterWithOptions } from \"../Filter/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nfunction textToFilter(filters:FilterWithOptions, text: IFilterText): FilterFn {\r\n  const filter = filters[text.name];\r\n  if (!filter) raiseError(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(text.options);\r\n}\r\n\r\nconst cache : Map<IFilterText[], Filters> = new Map();\r\n\r\nexport function createFilters(filters:FilterWithOptions, texts: IFilterText[]): Filters {\r\n  let result = cache.get(texts);\r\n  if (typeof result === \"undefined\") {\r\n    result = [];\r\n    for(let i = 0; i < texts.length; i++) {\r\n      result.push(textToFilter(filters, texts[i]));\r\n    }\r\n    cache.set(texts, result);\r\n  }\r\n  return result;\r\n}\r\n","import { Filters } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { IBindingNode } from \"./types\";\r\n\r\nexport class BindingNode implements IBindingNode {\r\n  #binding: IBinding;\r\n  #node: Node;\r\n  #name: string;\r\n  #filters: Filters;\r\n  #event: string | null;\r\n  #bindContents: Set<IBindContent> = new Set<IBindContent>();\r\n  get node(): Node {\r\n    return this.#node;\r\n  }\r\n  get name(): string {\r\n    return this.#name;\r\n  }\r\n  get binding(): IBinding {\r\n    return this.#binding;\r\n  }\r\n  get event(): string | null {\r\n    return this.#event;\r\n  }\r\n  get filters(): Filters {\r\n    return this.#filters;\r\n  }\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    node  : Node, \r\n    name  : string,\r\n    filters: Filters,\r\n    event : string | null\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#node = node;\r\n    this.#name = name;\r\n    this.#filters = filters;\r\n    this.#event = event;\r\n  }\r\n  init():void {\r\n  }\r\n  update(): void {\r\n    this.assignValue(this.binding.bindingState.filteredValue);\r\n  }\r\n  assignValue(value: any): void {\r\n    raiseError(`BindingNode: assignValue not implemented`);\r\n  }\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    raiseError(`BindingNode: updateElements not implemented`);\r\n  }\r\n  get isSelectElement(): boolean {\r\n    return this.node instanceof HTMLSelectElement;\r\n  }\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeAttribute extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    node   : Node, \r\n    name   : string,\r\n    filters: Filters,\r\n    event  : string | null\r\n  ) {\r\n    super(binding, node, name, filters, event);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as Element;\r\n    element.setAttribute(this.subName, value.toString());\r\n  }\r\n}\r\n\r\nexport const createBindingNodeAttribute: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeAttribute(binding, node, name, filterFns, event);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeCheckbox extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeCheckbox.update: value is not array`, );\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.map(_val => _val.toString()).includes(element.value);\r\n  }\r\n}\r\n\r\nexport const createBindingNodeCheckbox: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeCheckbox(binding, node, name, filterFns, event);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeClassList extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeClassList.update: value is not array`);\r\n    }\r\n    const element = this.node as Element;\r\n    element.className = value.join(\" \");\r\n  }\r\n}\r\n\r\nexport const createBindingNodeClassList: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassList(binding, node, name, filterFns, event);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeClassName extends BindingNode {\r\n  #subName: string;\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    node   : Node, \r\n    name   : string,\r\n    filters: Filters,\r\n    event  : string | null\r\n  ) {\r\n    super(binding, node, name, filters, event);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeClassName.update: value is not boolean`);\r\n    }\r\n    const element = this.node as Element;\r\n    if (value) {\r\n      element.classList.add(this.subName);\r\n    } else {\r\n      element.classList.remove(this.subName);\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBindingNodeClassName: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassName(binding, node, name, filterFns, event);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeEvent extends BindingNode {\r\n  #subName    : string;\r\n  constructor(\r\n    binding: IBinding, \r\n    node   : Node, \r\n    name   : string,\r\n    filters: Filters,\r\n    event  : string | null\r\n  ) {\r\n    super(binding, node, name, filters, event);\r\n    this.#subName = this.name.slice(2); // on～\r\n    const element = node as HTMLElement;\r\n    element.addEventListener(this.subName, (e:Event) => this.handler(e));\r\n  }\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  update() {\r\n    // 何もしない\r\n  }\r\n\r\n  handler(e: Event) {\r\n    const bindingState = this.binding.bindingState;\r\n    const engine = this.binding.engine;\r\n    const stateProxy = engine.stateProxy;\r\n    const updater = engine.updater;\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n    const indexes = loopContext?.serialize().map((context) => context.listIndex.index) ?? [];\r\n    const option = this.event;\r\n    if (option === \"preventDefault\") {\r\n      e.preventDefault();\r\n    }\r\n    this.binding.engine.updater.addProcess(async () => {\r\n      const value = bindingState.value;\r\n      const typeOfValue = typeof value;\r\n      updater.addProcess(async () => {\r\n        if (loopContext) {\r\n          await engine.setLoopContext(loopContext, async () => {\r\n            if (typeOfValue === \"function\") {\r\n              await Reflect.apply(value, stateProxy, [e, ...indexes]);\r\n            } else {\r\n              // ToDo:error\r\n            }\r\n          });\r\n        } else {\r\n          if (typeOfValue === \"function\") {\r\n            await Reflect.apply(value, stateProxy, [e, ...indexes]);\r\n          } else {\r\n            // ToDo:error\r\n          }\r\n        }\r\n      });\r\n    });\r\n  } \r\n}\r\n\r\nexport const createBindingNodeEvent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeEvent(binding, node, name, filterFns, event);\r\n  }\r\n","export const DATA_BIND_ATTRIBUTE = \"data-bind\";\r\nexport const COMMENT_EMBED_MARK = \"@@:\"; // 埋め込み変数のマーク\r\nexport const COMMENT_TEMPLATE_MARK = \"@@|\"; // テンプレートのマーク\r\n","import { COMMENT_TEMPLATE_MARK } from \"../../constants\";\r\nimport { Filters } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\n\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\nexport class BindingNodeBlock extends BindingNode {\r\n  #id: number;\r\n  get id(): number {\r\n    return this.#id;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    node   : Node, \r\n    name   : string,\r\n    filters: Filters,\r\n    event  : string | null\r\n  ) {\r\n    super(binding, node, name, filters, event);\r\n    const id = this.node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN) ?? raiseError(\"BindingNodeBlock.id: invalid node\");\r\n    this.#id = Number(id);\r\n  }\r\n    \r\n}","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { createBindContent } from \"../BindContent\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeIf extends BindingNodeBlock {\r\n  #bindContent: IBindContent;\r\n  #trueBindContents: Set<IBindContent>;\r\n  #falseBindContents: Set<IBindContent> = new Set();\r\n  #bindContents: Set<IBindContent>;\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n\r\n  constructor(\r\n    binding: IBinding, \r\n    node   : Node, \r\n    name   : string,\r\n    filters: Filters,\r\n    event  : string | null\r\n  ) {\r\n    super(binding, node, name, filters, event);\r\n    this.#bindContent = createBindContent(\r\n      this.binding, \r\n      this.id, \r\n      this.binding.engine, \r\n      \"\", \r\n      null\r\n    );\r\n    this.#trueBindContents = this.#bindContents = new Set([this.#bindContent]);\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeIf.update: value is not boolean`);\r\n    }\r\n    const parentNode = this.node.parentNode;\r\n    if (parentNode == null) {\r\n      raiseError(`BindingNodeIf.update: parentNode is null`);\r\n    }\r\n    if (value) {\r\n      this.#bindContent.render();\r\n      this.#bindContent.mountBefore(parentNode, this.node.nextSibling);\r\n      this.#bindContents = this.#trueBindContents;\r\n    } else {\r\n      this.#bindContent.unmount();\r\n      this.#bindContents = this.#falseBindContents;\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBindingNodeIf: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeIf(binding, node, name, filterFns, event);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { createBindContent } from \"../BindContent\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeFor extends BindingNodeBlock {\r\n  #bindContentsSet       : Set<IBindContent> = new Set<IBindContent>();\r\n  #bindContentByListIndex: WeakMap<IListIndex, IBindContent> = new WeakMap();\r\n  #bindContentPool       : IBindContent[] = [];\r\n  #bindContentLastIndex  : number = 0;\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContentsSet;\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  createBindContent(listIndex: IListIndex): IBindContent {\r\n    let bindContent: IBindContent;\r\n    if (this.#bindContentLastIndex >= 0) {\r\n      // プールの最後の要素を取得して、プールの長さをあとで縮減する\r\n      // 作るたびにプールを縮減すると、パフォーマンスが悪化するため\r\n      // プールの長さを縮減するのは、全ての要素を作った後に行う\r\n      bindContent = this.#bindContentPool[this.#bindContentLastIndex];\r\n      this.#bindContentLastIndex--;\r\n      bindContent.assignListIndex(listIndex);\r\n    } else {\r\n      bindContent = createBindContent(\r\n        this.binding, \r\n        this.id, \r\n        this.binding.engine, \r\n        this.binding.bindingState.pattern + \".*\", \r\n        listIndex);\r\n    }\r\n    // 登録\r\n    this.#bindContentByListIndex.set(listIndex, bindContent);\r\n    return bindContent;\r\n  }\r\n\r\n  deleteBindContent(bindContent: IBindContent): void {\r\n    bindContent.unmount();\r\n    bindContent.loopContext?.clearListIndex();\r\n  }\r\n\r\n  get bindContentLastIndex():number {\r\n    return this.#bindContentLastIndex;\r\n  }\r\n  set bindContentLastIndex(value:number) {\r\n    this.#bindContentLastIndex = value;\r\n  }\r\n\r\n  get poolLength():number {\r\n    return this.#bindContentPool.length;\r\n  }\r\n  set poolLength(length: number) {\r\n    if (length < 0) {\r\n      raiseError(`BindingNodeFor.setPoolLength: length is negative`);\r\n    }\r\n    this.#bindContentPool.length = length;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeFor.assignValue: value is not array`);\r\n    }\r\n    const listIndexesSet = this.binding.engine.getListIndexesSet(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex\r\n    );\r\n    if (listIndexesSet === null) {\r\n      raiseError(`BindingNodeFor.assignValue: listIndexes is not found`);\r\n    }\r\n    this.bindContentLastIndex = this.poolLength - 1;\r\n    const newBindContensSet = new Set<IBindContent>();\r\n    let lastBindContent = null;\r\n    const parentNode = this.node.parentNode;\r\n    if (parentNode == null) {\r\n      raiseError(`BindingNodeFor.update: parentNode is null`);\r\n    }\r\n    for(const listIndex of listIndexesSet) {\r\n      const lastNode = lastBindContent?.getLastNode(parentNode) ?? this.node;\r\n      let bindContent = this.#bindContentByListIndex.get(listIndex);\r\n      if (typeof bindContent === \"undefined\") {\r\n        bindContent = this.createBindContent(listIndex);\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        if (lastNode.nextSibling !== bindContent.firstChildNode) {\r\n          bindContent.mountAfter(parentNode, lastNode);\r\n        }\r\n      }\r\n      newBindContensSet.add(bindContent);\r\n      lastBindContent = bindContent;\r\n    }\r\n    // プールの長さを更新する\r\n    // プールの長さは、プールの最後の要素のインデックス+1であるため、\r\n    this.poolLength = this.bindContentLastIndex + 1;\r\n    // 削除\r\n    const removeBindContentsSet = this.#bindContentsSet.difference(newBindContensSet);\r\n    for(const bindContent of removeBindContentsSet) {\r\n      this.deleteBindContent(bindContent);\r\n    }\r\n    this.#bindContentPool.push(...removeBindContentsSet);\r\n    this.#bindContentsSet = newBindContensSet;\r\n  }\r\n\r\n  /**\r\n   * SWAP処理を想定\r\n   * \r\n   * @param listIndexes \r\n   * @param values \r\n   * @returns \r\n   */\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    if (typeof values[0] !== \"object\") return;\r\n    const engine = this.binding.engine;\r\n    const oldListValues = \r\n      engine.getList(\r\n        this.binding.bindingState.info, \r\n        this.binding.bindingState.listIndex\r\n      ) ?? raiseError(`BindingNodeFor.updateElements: oldValues is not found`); \r\n    const parentNode = this.node.parentNode ?? raiseError(`BindingNodeFor.update: parentNode is null`);\r\n\r\n    // DOMから削除\r\n    const currentBindContents = Array.from(this.#bindContentsSet);\r\n    const targetBindContents: IBindContent[] = [];\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const bindContent = currentBindContents[listIndex.index];\r\n      bindContent.unmount();\r\n      targetBindContents.push(bindContent);\r\n    }\r\n\r\n    // DOMに追加、listIndexを更新\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const index = listIndex.index;\r\n\r\n      const lastBindContent = currentBindContents[index - 1] ?? null;\r\n      const lastNode = lastBindContent?.lastChildNode ?? this.node;\r\n\r\n      const oldValue = oldListValues[index];\r\n      const targetIndex = values.indexOf(oldValue);\r\n      const prevBindContent = targetBindContents[targetIndex];\r\n\r\n      if (typeof prevBindContent === \"undefined\") {\r\n        // 入れ替えるBindContentがない場合は再描画\r\n        const bindContent = targetBindContents[index];\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        prevBindContent.assignListIndex(listIndex);\r\n        prevBindContent.mountAfter(parentNode, lastNode);\r\n        this.#bindContentByListIndex.set(listIndex, prevBindContent);\r\n        currentBindContents[index] = prevBindContent;\r\n      }\r\n      if (targetIndex >= 0) {\r\n        values[targetIndex] = -1;\r\n      }\r\n    }\r\n    this.#bindContentsSet = new Set<IBindContent>(currentBindContents);\r\n    engine.saveList(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex, \r\n      this.binding.bindingState.value.slice(0)\r\n    );\r\n  }\r\n}\r\n\r\nexport const createBindingNodeFor: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeFor(binding, node, name, filterFns, event);\r\n  }\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DEFAULT_PROPERTY = \"textContent\";\r\n\r\ntype DefaultPropertyByElementType = {\r\n  [key:string]: string;\r\n}\r\n\r\nconst defaultPropertyByElementType:DefaultPropertyByElementType = {\r\n  \"radio\"   : \"checked\",\r\n  \"checkbox\": \"checked\",\r\n  \"button\"  : \"onclick\",\r\n}\r\n\r\n/**\r\n * HTML要素のデフォルトプロパティを取得\r\n */\r\nconst getDefaultPropertyHTMLElement = (node:Node):string => \r\n  node instanceof HTMLSelectElement || node instanceof HTMLTextAreaElement || node instanceof HTMLOptionElement ? \"value\" : \r\n  node instanceof HTMLButtonElement ? \"onclick\" : \r\n  node instanceof HTMLAnchorElement ? \"onclick\" : \r\n  node instanceof HTMLFormElement ? \"onsubmit\" : \r\n  node instanceof HTMLInputElement ? (defaultPropertyByElementType[node.type] ?? \"value\") :\r\n  DEFAULT_PROPERTY;\r\n\r\ntype DefaultPropertyByKey = {\r\n  [key:string]: string | undefined;\r\n}\r\n\r\nconst _cache: DefaultPropertyByKey = {};\r\n\r\nconst textContentProperty = (node:Node):string => DEFAULT_PROPERTY;\r\n\r\ntype GetDefaultPropertyByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>string) | undefined;\r\n}\r\n\r\nconst getDefaultPropertyByNodeType: GetDefaultPropertyByNodeType = {\r\n  HTMLElement: getDefaultPropertyHTMLElement,\r\n  SVGElement : undefined,\r\n  Text       : textContentProperty,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * バインド情報でノードプロパティを省略された場合のデフォルトのプロパティ名を取得\r\n * @param node ノード\r\n * @param nodeType ノードタイプ\r\n * @returns {string | undefined} デフォルトのプロパティ名\r\n */\r\nexport function getDefaultName(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): string | undefined {\r\n  const key = node.constructor.name + \"\\t\" + ((node as HTMLInputElement).type ?? \"\"); // type attribute\r\n  return _cache[key] ?? (_cache[key] = getDefaultPropertyByNodeType[nodeType]?.(node));\r\n}\r\n  ","\r\nconst symbolName = \"state\";\r\n\r\nexport const GetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.GetByRef`);\r\nexport const SetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.SetByRef`);\r\nexport const SetCacheableSymbol        : unique symbol = Symbol.for(`${symbolName}.SetCacheable`);\r\nexport const ConnectedCallbackSymbol   : unique symbol = Symbol.for(`${symbolName}.ConnectedCallback`);\r\nexport const DisconnectedCallbackSymbol: unique symbol = Symbol.for(`${symbolName}.DisconnectedCallback`);\r\nexport const ResolveSymbol             : unique symbol = Symbol.for(`${symbolName}.Resolve`);\r\nexport const GetAllSymbol              : unique symbol = Symbol.for(`${symbolName}.GetAll`);\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { getDefaultName } from \"../../BindingBuilder/getDefaultName\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { SetByRefSymbol } from \"../../StateClass/symbols\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nfunction isTwoWayBindable(element: HTMLElement): boolean {\r\n  return element instanceof HTMLInputElement || \r\n    element instanceof HTMLTextAreaElement || \r\n    element instanceof HTMLSelectElement;\r\n}\r\n\r\nconst defaultEventByName: {[key:string]: string} = {\r\n  \"value\"   : \"input\",\r\n  \"checked\" : \"change\",\r\n  \"selected\": \"change\",\r\n};\r\n\r\nclass BindingNodeProperty extends BindingNode {\r\n  get value(): any {\r\n    // @ts-ignore\r\n    return this.node[this.name];\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.filters.length; i++) {\r\n      value = this.filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    node   : Node, \r\n    name   : string,\r\n    filters: Filters,\r\n    event  : string | null\r\n  ) {\r\n    super(binding, node, name, filters, event);\r\n\r\n    const isElement = this.node instanceof HTMLElement;\r\n    if (!isElement) return;\r\n    if (!isTwoWayBindable(this.node)) return;\r\n    const defaultName = getDefaultName(this.node, \"HTMLElement\");\r\n    if (defaultName !== this.name) return;\r\n    const eventName = this.event ?? defaultEventByName[this.name] ?? \"readonly\";\r\n    if (event === \"readonly\" || event === \"ro\") return;\r\n    this.node.addEventListener(eventName, () => {\r\n      const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n      const engine = this.binding.engine;\r\n      const stateProxy = engine.stateProxy;\r\n      const bindingState = this.binding.bindingState;\r\n      const value = this.filteredValue;\r\n      engine.updater.addProcess(() => {\r\n        if (loopContext) {\r\n          engine.setLoopContext(loopContext, async () => {\r\n            // @ts-ignore\r\n            stateProxy[SetByRefSymbol](bindingState.info, bindingState.listIndex, value);\r\n          });\r\n        } else {\r\n          // @ts-ignore\r\n          stateProxy[SetByRefSymbol](bindingState.info, bindingState.listIndex, value);\r\n        }\r\n\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    // @ts-ignore\r\n    this.node[this.name] = value;\r\n  }\r\n}\r\n\r\nexport const createBindingNodeProperty: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeProperty(binding, node, name, filterFns, event);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nclass BindingNodeRadio extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.toString() === element.value.toString();\r\n  }\r\n}\r\n\r\nexport const createBindingNodeRadio: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeRadio(binding, node, name, filterFns, event);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode\";\r\nimport { CreateBindingNodeByNodeFn, CreateBindingNodeFn, IBindingNode } from \"./types\";\r\n\r\nclass BindingNodeStyle extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    node   : Node, \r\n    name   : string,\r\n    filters: Filters,\r\n    event  : string | null\r\n  ) {\r\n    super(binding, node, name, filters, event);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLElement;\r\n    element.style.setProperty(this.subName, value.toString());\r\n  }\r\n}\r\n\r\nexport const createBindingNodeStyle: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], event: string | null) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeStyle(binding, node, name, filterFns, event);\r\n  }\r\n","import { createBindingNodeAttribute } from \"../DataBinding/BindingNode/BindingNodeAttribute\";\r\nimport { createBindingNodeCheckbox } from \"../DataBinding/BindingNode/BindingNodeCheckbox\";\r\nimport { createBindingNodeClassList } from \"../DataBinding/BindingNode/BindingNodeClassList\";\r\nimport { createBindingNodeClassName } from \"../DataBinding/BindingNode/BindingNodeClassName\";\r\nimport { createBindingNodeEvent } from \"../DataBinding/BindingNode/BindingNodeEvent\";\r\nimport { createBindingNodeIf } from \"../DataBinding/BindingNode/BindingNodeIf\";\r\nimport { createBindingNodeFor } from \"../DataBinding/BindingNode/BindingNodeFor\";\r\nimport { createBindingNodeProperty } from \"../DataBinding/BindingNode/BindingNodeProperty\";\r\nimport { createBindingNodeRadio } from \"../DataBinding/BindingNode/BindingNodeRadio\";\r\nimport { createBindingNodeStyle } from \"../DataBinding/BindingNode/BindingNodeStyle\";\r\nimport { CreateBindingNodeByNodeFn, CreateBindingNodeFn } from \"../DataBinding/BindingNode/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IFilterText } from \"./types\";\r\n\r\ntype NodePropertyConstructorByName = {[key:string]:CreateBindingNodeFn};\r\ntype NodePropertyConstructorByNameByIsComment = {[key:number]:NodePropertyConstructorByName};\r\n\r\nconst nodePropertyConstructorByNameByIsComment:NodePropertyConstructorByNameByIsComment = {\r\n  0: {\r\n    \"class\"   : createBindingNodeClassList,\r\n    \"checkbox\": createBindingNodeCheckbox,\r\n    \"radio\"   : createBindingNodeRadio,\r\n  },\r\n  1: {\r\n    \"if\" : createBindingNodeIf,\r\n  },\r\n};\r\n\r\ntype NodePropertyConstructorByFirstName = {[key:string]:CreateBindingNodeFn};\r\n\r\nconst nodePropertyConstructorByFirstName:NodePropertyConstructorByFirstName = {\r\n  \"class\": createBindingNodeClassName,\r\n  \"attr\" : createBindingNodeAttribute,\r\n  \"style\": createBindingNodeStyle,\r\n//  \"props\": ComponentProperty,\r\n//  \"popover\": PopoverTarget,\r\n//  \"commandfor\": CommandForTarget,\r\n};\r\n\r\nfunction _getBindingNodeCreator(isComment:boolean, isElement: boolean, propertyName: string): CreateBindingNodeFn {\r\n  const bindingNodeCreatorByName = nodePropertyConstructorByNameByIsComment[isComment ? 1 : 0][propertyName];\r\n  if (typeof bindingNodeCreatorByName !== \"undefined\") {\r\n    return bindingNodeCreatorByName;\r\n  }\r\n  if (isComment && propertyName === \"for\") {\r\n    return createBindingNodeFor;\r\n  }\r\n  if (isComment) {\r\n    raiseError(`getBindingNodeCreator: unknown node property ${propertyName}`);\r\n  }\r\n  const nameElements = propertyName.split(\".\");\r\n  const bindingNodeCreatorByFirstName = nodePropertyConstructorByFirstName[nameElements[0]];\r\n  if (typeof bindingNodeCreatorByFirstName !== \"undefined\") {\r\n    return bindingNodeCreatorByFirstName;\r\n  }\r\n  if (isElement) {\r\n    if (propertyName.startsWith(\"on\")) {\r\n      return createBindingNodeEvent;\r\n    } else {\r\n      return createBindingNodeProperty;\r\n    }\r\n  } else {\r\n    return createBindingNodeProperty;\r\n  }\r\n}\r\n\r\nconst _cache: {[key:string]:CreateBindingNodeFn} = {};\r\n\r\n/**\r\n * バインドのノードプロパティの生成関数を取得する\r\n * @param node ノード\r\n * @param propertyName プロパティ名\r\n * @returns {CreateBindingNodeFn} ノードプロパティのコンストラクタ\r\n */\r\nexport function getBindingNodeCreator(\r\n  node        : Node, \r\n  propertyName: string,\r\n  filterTexts: IFilterText[],\r\n  event       : string | null\r\n): CreateBindingNodeByNodeFn {\r\n  const isComment = node instanceof Comment;\r\n  const isElement = node instanceof Element;\r\n  const key = isComment + \"\\t\" + isElement + \"\\t\" + propertyName;\r\n  const fn = _cache[key] ?? (_cache[key] = _getBindingNodeCreator(isComment, isElement, propertyName));\r\n  return fn(propertyName, filterTexts, event);\r\n}\r\n","import { raiseError } from '../utils';\r\nimport { getResolvedPathInfo } from './getResolvedPathInfo';\r\nimport { IResolvedPathInfo, IStructuredPathInfo } from './types';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IStructuredPathInfo } = {};\r\n//const _cache: Map<string, IStructuredPathInfo> = new Map();\r\n\r\n/**\r\n * パターン情報を取得します\r\n * @param pattern パターン\r\n * @returns {IPatternInfo} パターン情報\r\n */\r\nclass StructuredPathInfo implements IStructuredPathInfo {\r\n  static id = 0;\r\n  id = ++StructuredPathInfo.id;\r\n  pattern;\r\n  pathSegments;\r\n  lastSegment;\r\n  cumulativePaths;\r\n  cumulativeInfos;\r\n  wildcardPaths;\r\n  wildcardInfos;\r\n  wildcardParentPaths;\r\n  wildcardParentInfos;\r\n  lastWildcardPath;\r\n  lastWildcardInfo;\r\n  parentPath;\r\n  parentInfo;\r\n  wildcardCount;\r\n\r\n  constructor(pattern: string) {\r\n    const getPattern = (_pattern: string): IStructuredPathInfo => {\r\n      return (pattern === _pattern) ? this : getStructuredPathInfo(_pattern);\r\n    };\r\n    const pathSegments = pattern.split(\".\");\r\n    const cumulativePaths = [];\r\n    const cumulativeInfos: IStructuredPathInfo[] = [];\r\n    const wildcardPaths = [];\r\n    const wildcardInfos = [];\r\n    const wildcardParentPaths = [];\r\n    const wildcardParentInfos = [];\r\n    let currentPatternPath = \"\", prevPatternPath = \"\";\r\n    let wildcardCount = 0;\r\n    for(let i = 0; i < pathSegments.length; i++) {\r\n      currentPatternPath += pathSegments[i];\r\n      if (pathSegments[i] === \"*\") {\r\n        wildcardPaths.push(currentPatternPath);\r\n        wildcardInfos.push(getPattern(currentPatternPath));\r\n        wildcardParentPaths.push(prevPatternPath);\r\n        wildcardParentInfos.push(getPattern(prevPatternPath));\r\n        wildcardCount++;\r\n      }\r\n      cumulativePaths.push(currentPatternPath);\r\n      cumulativeInfos.push(getPattern(currentPatternPath));\r\n      prevPatternPath = currentPatternPath;\r\n      currentPatternPath += \".\";\r\n    }\r\n    const lastWildcardPath = wildcardPaths.length > 0 ? wildcardPaths[wildcardPaths.length - 1] : null;\r\n    const parentPath = cumulativePaths.length > 1 ? cumulativePaths[cumulativePaths.length - 2] : null;\r\n    this.pattern = pattern;\r\n    this.pathSegments = pathSegments;\r\n    this.lastSegment = pathSegments[pathSegments.length - 1];\r\n    this.cumulativePaths = cumulativePaths;\r\n    this.cumulativeInfos = cumulativeInfos;\r\n    this.wildcardPaths = wildcardPaths;\r\n    this.wildcardInfos = wildcardInfos;\r\n    this.wildcardParentPaths = wildcardParentPaths;\r\n    this.wildcardParentInfos = wildcardParentInfos;\r\n    this.lastWildcardPath = lastWildcardPath;\r\n    this.lastWildcardInfo = lastWildcardPath ? getPattern(lastWildcardPath) : null;\r\n    this.parentPath = parentPath;\r\n    this.parentInfo = parentPath ? getPattern(parentPath) : null;\r\n    this.wildcardCount = wildcardCount;\r\n  }\r\n}\r\n\r\nconst reservedWords = new Set([\r\n  \"constructor\", \"prototype\", \"__proto__\", \"toString\",\r\n  \"valueOf\", \"hasOwnProperty\", \"isPrototypeOf\",\r\n  \"watch\", \"unwatch\", \"eval\", \"arguments\",\r\n  \"let\", \"var\", \"const\", \"class\", \"function\",\r\n  \"null\", \"true\", \"false\", \"new\", \"return\",\r\n]);\r\n\r\nexport function getStructuredPathInfo(structuredPath: string): IStructuredPathInfo {\r\n  let info: IStructuredPathInfo | undefined;\r\n  info = _cache[structuredPath];\r\n  if (typeof info !== \"undefined\") {\r\n    return info;\r\n  }\r\n  if (reservedWords.has(structuredPath)) {\r\n    raiseError(`getStructuredPathInfo: pattern is reserved word: ${structuredPath}`);\r\n  }\r\n  return (_cache[structuredPath] = new StructuredPathInfo(structuredPath));\r\n}\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { GetByRefSymbol } from \"../../StateClass/symbols\";\r\nimport { IStateProxy } from \"../../StateClass/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\nclass BindingState implements IBindingState {\r\n  #binding     : IBinding;\r\n  #pattern     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return this.#pattern;\r\n  }\r\n  get info() {\r\n    return this.#info;\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#pattern = pattern;\r\n    this.#info = getStructuredPathInfo(pattern);\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.#state[GetByRefSymbol](this.info, this.listIndex);\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    if (this.info.wildcardCount > 0) {\r\n      const lastWildcardPath = this.info.lastWildcardPath ?? \r\n        raiseError(`BindingState.init: wildcardLastParentPath is null`);\r\n      const loopContext = this.binding.parentBindContent.loopContext?.find(lastWildcardPath) ?? \r\n        raiseError(`BindingState.init: loopContext is null`);\r\n      this.#listIndexRef = loopContext.listIndexRef;\r\n    }\r\n    this.binding.engine.saveBinding(this.info, this.listIndex, this.binding);\r\n  }\r\n}\r\n\r\nexport const createBindingState: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n    return new BindingState(binding, state, name, filterFns);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStateProxy } from \"../../StateClass/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\nclass BindingStateIndex implements IBindingState {\r\n  #binding     : IBinding;\r\n  #indexNumber : number;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get info() {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    const indexNumber = Number(pattern.slice(1));\r\n    if (isNaN(indexNumber)) {\r\n      raiseError(\"BindingStateIndex: pattern is not a number\");\r\n    }\r\n    this.#indexNumber = indexNumber;\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.listIndex?.index ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext ??\r\n      raiseError(`BindingState.init: loopContext is null`);\r\n    const loopContexts = loopContext.serialize();\r\n    this.#listIndexRef = loopContexts[this.#indexNumber - 1].listIndexRef ??\r\n      raiseError(`BindingState.init: listIndexRef is null`);\r\n    const listIndex = this.listIndex ?? raiseError(\"listIndex is null\");\r\n    const bindings = this.binding.engine.bindingsByListIndex.get(listIndex);\r\n    if (bindings === undefined) {\r\n      this.binding.engine.bindingsByListIndex.set(listIndex, new Set([this.binding]));\r\n    } else {\r\n      bindings.add(this.binding);\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBindingStateIndex: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n\r\n    return new BindingStateIndex(binding, state, name, filterFns);\r\n  }\r\n","import { createBindingState } from \"../DataBinding/BindingState/BindingState\";\r\nimport { createBindingStateIndex } from \"../DataBinding/BindingState/BindingStateIndex\";\r\nimport { CreateBindingStateByStateFn } from \"../DataBinding/BindingState/types\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nconst ereg = new RegExp(/^\\$\\d+$/);\r\n\r\nexport function getBindingStateCreator(\r\n  name       : string, \r\n  filterTexts: IFilterText[]\r\n): CreateBindingStateByStateFn {\r\n  if (ereg.test(name)) {\r\n    return createBindingStateIndex(name, filterTexts);\r\n  } else {\r\n    return createBindingState(name, filterTexts);\r\n  }\r\n}","import { COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants\";\r\nimport { getTemplateById } from \"../Template/registerTemplate\";\r\nimport { raiseError } from \"../utils\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst COMMENT_EMBED_MARK_LEN = COMMENT_EMBED_MARK.length;\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\nconst getTextFromContent   = (node:Node):string        => node.textContent?.slice(COMMENT_EMBED_MARK_LEN).trim() ?? \"\";\r\nconst getTextFromAttribute = (node:HTMLElement):string => node.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\nconst getTextFromTemplate  = (node:Node):string        => {\r\n  const text = node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN).trim(); \r\n  const id = Number(text);\r\n  const template = getTemplateById(id) ?? raiseError(`Template not found: ${text}`);\r\n  return template.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n};\r\nconst getTextFromSVGElement = (node:SVGElement):string => node.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n\r\nconst getTextByNodeType = {\r\n  \"Text\":        getTextFromContent,\r\n  \"HTMLElement\": getTextFromAttribute,\r\n  \"Template\":    getTextFromTemplate,\r\n  \"SVGElement\":  getTextFromSVGElement\r\n};\r\n\r\nexport function getDataBindText(nodeType: NodeType, node: Node): string {\r\n  const bindText = getTextByNodeType[nodeType](node as any) ?? \"\";\r\n  if (nodeType === \"Text\") {\r\n    return \"textContent:\" + bindText;\r\n  } else {\r\n    return bindText;\r\n  }\r\n}\r\n","import { raiseError } from \"../utils\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst createNodeKey = (node:Node):string => node.constructor.name + \"\\t\" + ((node instanceof Comment) ? (node.textContent?.[2] ?? \"\") : \"\");\r\n\r\ntype NodeTypeByNodeKey = {\r\n  [nodeKey:string]:NodeType;\r\n};\r\n\r\nconst nodeTypeByNodeKey:NodeTypeByNodeKey = {};\r\n\r\nconst getNodeTypeByNode = (node:Node):NodeType =>\r\n  (node instanceof Comment && node.textContent?.[2] === \":\") ? \"Text\" : \r\n  (node instanceof HTMLElement) ? \"HTMLElement\" :\r\n  (node instanceof Comment && node.textContent?.[2] === \"|\") ? \"Template\" : \r\n  (node instanceof SVGElement) ? \"SVGElement\" : raiseError(`Unknown NodeType: ${node.nodeType}`);\r\n\r\n/**\r\n * ノードのタイプを取得\r\n * @param node ノード\r\n * @param nodeKey ノードキー\r\n * @returns {NodeType} ノードタイプ\r\n */\r\nexport function getNodeType(\r\n  node   : Node, \r\n  nodeKey: string = createNodeKey(node)\r\n): NodeType {\r\n  return nodeTypeByNodeKey[nodeKey] ?? (nodeTypeByNodeKey[nodeKey] = getNodeTypeByNode(node));\r\n}\r\n","import { IFilterText, IBindText } from \"./types\";\r\n\r\nconst trim = (s:string):string => s.trim();\r\n\r\nconst has = (s:string):boolean => s.length > 0; // check length\r\n\r\nconst re = new RegExp(/^#(.*)#$/);\r\nconst decode = (s:string):string => {\r\n  const m = re.exec(s);\r\n  return m ? decodeURIComponent(m[1]) : s;\r\n};\r\n\r\n/**\r\n * parse filter part\r\n * \"eq,100|falsey\" ---> [Filter(eq, [100]), Filter(falsey)]\r\n */\r\nconst parseFilter = (text:string): IFilterText => {\r\n  const [name, ...options] = text.split(\",\").map(trim);\r\n  return {name, options:options.map(decode)};\r\n};\r\n\r\ntype ReturnParseStateProperty = {property:string,filters:IFilterText[]};\r\n/**\r\n * parse expression\r\n * \"value|eq,100|falsey\" ---> [\"value\", Filter[]]\r\n */\r\nconst parseProperty = (text:string): ReturnParseStateProperty => {\r\n  const [property, ...filterTexts] = text.split(\"|\").map(trim);\r\n  return {property, filters:filterTexts.map(parseFilter)};\r\n};\r\n\r\n/**\r\n * parse expressions\r\n * \"textContent:value|eq,100|falsey\" ---> [\"textContent\", \"value\", Filter[eq, falsey]]\r\n */\r\nconst parseExpression = (expression:string): IBindText => {\r\n  const [ bindExpression, event = null ] = expression.split(\"@\").map(trim);\r\n  const [nodePropertyText, statePropertyText] = bindExpression.split(\":\").map(trim);\r\n  const { property:nodeProperty, filters:inputFilterTexts } = parseProperty(nodePropertyText);\r\n  const { property:stateProperty, filters:outputFilterTexts } = parseProperty(statePropertyText);\r\n  return { nodeProperty, stateProperty, inputFilterTexts, outputFilterTexts, event };\r\n};\r\n\r\n/**\r\n * parse bind text and return BindText[]\r\n */\r\nconst parseExpressions = (text:string): IBindText[] => {\r\n  return text.split(\";\").map(trim).filter(has).map(s => parseExpression(s));\r\n};\r\n\r\nconst cache:{[key:string]: IBindText[]} = {};\r\n\r\n/**\r\n * 取得したバインドテキスト(getBindTextByNodeType)を解析して、バインド情報を取得する\r\n * @param text バインドテキスト\r\n * @param defaultName デフォルト名\r\n * @returns {IBindText[]} バインド情報\r\n */\r\nexport function parseBindText(\r\n  text: string\r\n): IBindText[] {\r\n  if (text.trim() === \"\") {\r\n    return [];\r\n  }\r\n  return cache[text] ?? (cache[text] = parseExpressions(text));\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DATASET_BIND_PROPERTY = 'data-bind';\r\n\r\nconst removeAttributeFromElement = (node:Node):void => {\r\n  const element = node as Element;\r\n  element.removeAttribute(DATASET_BIND_PROPERTY);\r\n}\r\n\r\ntype RemoveAttributeByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>void) | undefined;\r\n}\r\n\r\nconst removeAttributeByNodeType:RemoveAttributeByNodeType = {\r\n  HTMLElement: removeAttributeFromElement,\r\n  SVGElement : removeAttributeFromElement,\r\n  Text       : undefined,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * ノードからdata-bind属性を削除\r\n * @param node ノード\r\n * @param nodeType ノードタイプ\r\n * @returns {Node} ノード\r\n */\r\nexport function removeDataBindAttribute(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n):void {\r\n  return removeAttributeByNodeType[nodeType]?.(node);\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst replaceTextNodeText = (node:Node):Node => {\r\n  const textNode = document.createTextNode(\"\");\r\n  node.parentNode?.replaceChild(textNode, node);\r\n  return textNode;\r\n}\r\n\r\ntype ReplaceTextNodeFn = {\r\n  [key in NodeType]: ((node:Node)=>Node) | undefined;\r\n}\r\n\r\nconst replaceTextNodeFn:ReplaceTextNodeFn = {\r\n  Text       : replaceTextNodeText,\r\n  HTMLElement: undefined,\r\n  Template   : undefined,\r\n  SVGElement : undefined\r\n}\r\n\r\n/**\r\n * コメントノードをテキストノードに置き換える\r\n * @param node ノード\r\n * @param nodeType ノードタイプ\r\n * @returns {Node} ノード\r\n */\r\nexport function replaceTextNodeFromComment(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): Node {\r\n  return replaceTextNodeFn[nodeType]?.(node) ?? node;\r\n}\r\n","import { getAbsoluteNodePath } from \"./getAbsoluteNodePath\";\r\nimport { getBindingNodeCreator } from \"./getBindingNodeCreator\";\r\nimport { getBindingStateCreator } from \"./getBindingStateCreator\";\r\nimport { getDataBindText } from \"./getDataBindText\";\r\nimport { getNodeType } from \"./getNodeType\";\r\nimport { parseBindText } from \"./parseBindText\";\r\nimport { removeDataBindAttribute } from \"./removeDataBindAttribute\";\r\nimport { replaceTextNodeFromComment } from \"./replaceTextNodeFromComment\";\r\nimport { IBindingCreator, IBindText, IDataBindAttributes, NodePath, NodeType } from \"./types\";\r\n\r\nclass DataBindAttributes implements IDataBindAttributes {\r\n  nodeType     : NodeType; // ノードの種別\r\n  nodePath     : NodePath; // ノードのルート\r\n  bindTexts    : IBindText[]; // BINDテキストの解析結果\r\n  creatorByText: Map<IBindText, IBindingCreator> = new Map(); // BINDテキストからバインディングクリエイターを取得\r\n  constructor(node: Node) {\r\n    this.nodeType = getNodeType(node);\r\n    const text = getDataBindText(this.nodeType, node);\r\n    // CommentNodeをTextに置換、template.contentの内容が書き換わることに注意\r\n    node = replaceTextNodeFromComment(node, this.nodeType);\r\n    // data-bind属性を削除する\r\n    removeDataBindAttribute(node, this.nodeType);\r\n\r\n    this.nodePath = getAbsoluteNodePath(node);\r\n    this.bindTexts = parseBindText(text);\r\n    for(let i = 0; i < this.bindTexts.length; i++) {\r\n      const bindText = this.bindTexts[i];\r\n      const creator: IBindingCreator = {\r\n        createBindingNode : getBindingNodeCreator(\r\n          node, \r\n          bindText.nodeProperty, \r\n          bindText.inputFilterTexts,\r\n          bindText.event\r\n        ),\r\n        createBindingState: getBindingStateCreator(\r\n          bindText.stateProperty, \r\n          bindText.outputFilterTexts\r\n        ),\r\n      }\r\n      this.creatorByText.set(bindText, creator);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function createDataBindAttributes(node: Node): IDataBindAttributes {\r\n  return new DataBindAttributes(node);\r\n}","import { NodePath } from \"./types\";\r\n\r\nexport function getAbsoluteNodePath(node: Node): NodePath {\r\n  let routeIndexes: NodePath = [];\r\n  while(node.parentNode !== null) {\r\n    const childNodes = Array.from(node.parentNode.childNodes) as Node[];\r\n    routeIndexes = [ childNodes.indexOf(node), ...routeIndexes ];\r\n    node = node.parentNode;\r\n  }\r\n  return routeIndexes;\r\n}","import { DATA_BIND_ATTRIBUTE, COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK } from \"../constants\";\r\n\r\n/**\r\n * \"@@:\"もしくは\"@@|\"で始まるコメントノードを取得する\r\n */\r\nfunction isCommentNode(node: Node): boolean {\r\n  return node instanceof Comment && (\r\n    (node.textContent?.indexOf(COMMENT_EMBED_MARK) === 0) || (node.textContent?.indexOf(COMMENT_TEMPLATE_MARK) === 0)\r\n  );\r\n} \r\n\r\nexport function getNodesHavingDataBind(root: Node): Node[] {\r\n  const nodes: Node[] = [];\r\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT, {\r\n    acceptNode(node:Node) {\r\n      return (node instanceof Element) ? \r\n        (node.hasAttribute(DATA_BIND_ATTRIBUTE) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP)\r\n        : (isCommentNode(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP);\r\n    }\r\n  });\r\n  while (walker.nextNode()) {\r\n    nodes.push(walker.currentNode);\r\n  }\r\n  return nodes;\r\n}\r\n\r\n","import { createDataBindAttributes } from \"./createDataBindAttributes\";\r\nimport { getNodesHavingDataBind } from \"./getNodesHavingDataBind\";\r\nimport { IDataBindAttributes } from \"./types\";\r\n\r\nconst listDataBindAttributesById: {[key:number]:IDataBindAttributes[]} = {};\r\n\r\nconst listPathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nconst pathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nfunction getDataBindAttributesFromTemplate(content: DocumentFragment): IDataBindAttributes[] {\r\n  const nodes = getNodesHavingDataBind(content);\r\n  return nodes.map(node => createDataBindAttributes(node));\r\n}\r\n\r\nexport function registerDataBindAttributes(\r\n  id     : number, \r\n  content: DocumentFragment,\r\n  rootId : number = id\r\n): IDataBindAttributes[] {\r\n  const dataBindAttributes = getDataBindAttributesFromTemplate(content);\r\n  const paths = pathsSetById[rootId] ?? (pathsSetById[rootId] = new Set<string>());\r\n  const listPaths = listPathsSetById[rootId] ?? (listPathsSetById[rootId] = new Set<string>());\r\n  for(let i = 0; i < dataBindAttributes.length; i++) {\r\n    const attribute = dataBindAttributes[i];\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      paths.add(bindText.stateProperty);\r\n      if (bindText.nodeProperty === \"for\") {\r\n        listPaths.add(bindText.stateProperty);\r\n      }\r\n    }\r\n  }\r\n  return listDataBindAttributesById[id] = dataBindAttributes;\r\n}\r\n\r\nexport const getDataBindAttributesById = (id: number): IDataBindAttributes[] => {\r\n  return listDataBindAttributesById[id];\r\n}\r\n\r\nexport const getListPathsSetById = (id: number): Set<string> => {\r\n  return listPathsSetById[id] ?? [];\r\n};\r\n\r\nexport const getPathsSetById = (id: number): Set<string> => {\r\n  return pathsSetById[id] ?? [];\r\n};","import { registerDataBindAttributes } from \"../BindingBuilder/registerDataBindAttributes\";\r\nimport { raiseError } from \"../utils\";\r\nimport { removeEmptyTextNodes } from \"./removeEmptyTextNodes\";\r\n\r\nconst templateById:Record<number, HTMLTemplateElement> = {};\r\n\r\nexport function registerTemplate(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number\r\n): number {\r\n  removeEmptyTextNodes(template.content);\r\n  registerDataBindAttributes(id, template.content, rootId);  \r\n  templateById[id] = template;\r\n  return id;\r\n}\r\n\r\nexport function getTemplateById(id: number): HTMLTemplateElement {\r\n  return templateById[id] ?? raiseError(`getTemplateById: template not found: ${id}`);\r\n}","\r\nexport function removeEmptyTextNodes(content:DocumentFragment):void {\r\n  Array.from(content.childNodes).forEach(node => {\r\n    if (node.nodeType === Node.TEXT_NODE && !(node.nodeValue ?? \"\").trim()) {\r\n      content.removeChild(node);\r\n    }\r\n  });  \r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { CreateBindingNodeByNodeFn, IBindingNode } from \"./BindingNode/types\";\r\nimport { CreateBindingStateByStateFn, IBindingState } from \"./BindingState/types\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\n\r\nclass Binding implements IBinding {\r\n  parentBindContent: IBindContent;\r\n  node             : Node;\r\n  engine           : IComponentEngine;\r\n  bindingNode      : IBindingNode;\r\n  bindingState     : IBindingState;\r\n  constructor(\r\n    parentBindContent : IBindContent,\r\n    node              : Node,\r\n    engine            : IComponentEngine,\r\n    createBindingNode : CreateBindingNodeByNodeFn, \r\n    createBindingState: CreateBindingStateByStateFn,\r\n  ) {\r\n    this.parentBindContent = parentBindContent\r\n    this.node = node;\r\n    this.engine = engine\r\n    this.bindingNode = createBindingNode(this, node, engine.inputFilters);\r\n    this.bindingState = createBindingState(this, engine.stateProxy, engine.outputFilters);\r\n  }\r\n\r\n  get bindContents() {\r\n    return this.bindingNode.bindContents;\r\n  }\r\n\r\n  init() {\r\n    this.bindingNode.init();\r\n    this.bindingState.init();\r\n  }\r\n\r\n  render() {\r\n    this.bindingNode.update();\r\n  }\r\n}\r\n\r\nexport function createBinding(\r\n  parentBindContent : IBindContent,\r\n  node              : Node, \r\n  engine            : IComponentEngine, \r\n  createBindingNode : CreateBindingNodeByNodeFn, \r\n  createBindingState: CreateBindingStateByStateFn\r\n): IBinding {\r\n  return new Binding(\r\n    parentBindContent, \r\n    node, \r\n    engine, \r\n    createBindingNode, \r\n    createBindingState\r\n  );\r\n}","import { IBindContent } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { ILoopContext } from \"./types\";\r\n\r\nclass LoopContext implements ILoopContext {\r\n  #path     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null;\r\n  #bindContent : IBindContent;\r\n  constructor(\r\n    path    : string | null,\r\n    listIndex  : IListIndex,\r\n    bindContent: IBindContent\r\n  ) {\r\n    this.#path = path ?? raiseError(\"name is required\");\r\n    this.#info = getStructuredPathInfo(this.#path);\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    this.#bindContent = bindContent;\r\n  }\r\n  get path(): string {\r\n    return this.#path;\r\n  }\r\n  get info(): IStructuredPathInfo {\r\n    return this.#info;\r\n  }\r\n  get listIndex(): IListIndex {\r\n    return this.#listIndexRef?.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get listIndexRef(): WeakRef<IListIndex> {\r\n    return this.#listIndexRef ?? raiseError(\"listIndexRef is null\");\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    // 構造は変わらないので、#parentLoopContext、#cacheはクリアする必要はない\r\n  }\r\n  clearListIndex():void {\r\n    this.#listIndexRef = null;\r\n  }\r\n  get bindContent(): IBindContent {\r\n    return this.#bindContent;\r\n  }\r\n\r\n  #parentLoopContext: ILoopContext | null | undefined;\r\n  get parentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#parentLoopContext === \"undefined\") {\r\n      let currentBinding: IBindContent | null = this.bindContent;\r\n      while(currentBinding !== null) {\r\n        if (currentBinding.loopContext !== null && currentBinding.loopContext !== this) {\r\n          this.#parentLoopContext = currentBinding.loopContext;\r\n          break;\r\n        }\r\n        currentBinding = currentBinding.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      if (typeof this.#parentLoopContext === \"undefined\") this.#parentLoopContext = null;\r\n    }\r\n    return this.#parentLoopContext;\r\n  }\r\n\r\n  #cache:Record<string, ILoopContext | null> = {};\r\n  find(name: string): ILoopContext | null {\r\n    let loopContext = this.#cache[name];\r\n    if (typeof loopContext === \"undefined\") {\r\n      let currentLoopContext: ILoopContext | null = this;\r\n      while(currentLoopContext !== null) {\r\n        if (currentLoopContext.path === name) break;\r\n        currentLoopContext = currentLoopContext.parentLoopContext;\r\n      }\r\n      loopContext = this.#cache[name] = currentLoopContext;\r\n    }\r\n    return loopContext;\r\n  }\r\n\r\n  walk(callback: (loopContext: ILoopContext) => void): void {\r\n    let currentLoopContext: ILoopContext | null = this;\r\n    while(currentLoopContext !== null) {\r\n      callback(currentLoopContext);\r\n      currentLoopContext = currentLoopContext.parentLoopContext;\r\n    }\r\n  }\r\n\r\n  serialize(): ILoopContext[] {\r\n    const results: ILoopContext[] = [];\r\n    this.walk((loopContext) => {\r\n      results.unshift(loopContext);\r\n    });\r\n    return results;\r\n  }\r\n\r\n}\r\n\r\n// 生成されたあと、IBindContentのloopContextに登録される\r\n// IBindContentにずっと保持される\r\nexport function createLoopContext(\r\n  pattern: string | null,\r\n  listIndex: IListIndex,\r\n  bindContent: IBindContent\r\n): ILoopContext {\r\n  return new LoopContext(pattern, listIndex, bindContent);\r\n}","import { IBinding } from \"../DataBinding/types\";\r\n\r\nexport function render(bindings: IBinding[]) {\r\n  const bindingsWithSelectElement = [];\r\n  for(let i = 0; i < bindings.length; i++) {\r\n    const binding = bindings[i];\r\n    if (binding.bindingNode.isSelectElement) {\r\n      bindingsWithSelectElement.push(binding);\r\n    } else {\r\n      binding.render();\r\n    }\r\n  }\r\n  for(let i = 0; i < bindingsWithSelectElement.length; i++) {\r\n    bindingsWithSelectElement[i].render();\r\n  }\r\n}\r\n","import { resolveNodeFromPath } from \"../BindingBuilder/resolveNodeFromPath\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { getTemplateById } from \"../Template/registerTemplate\";\r\nimport { raiseError } from \"../utils\";\r\nimport { createBinding } from \"./Binding\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\nimport { createLoopContext } from \"../LoopContext/createLoopContext\";\r\nimport { render } from \"../Render/render\";\r\nimport { getDataBindAttributesById } from \"../BindingBuilder/registerDataBindAttributes\";\r\n\r\nfunction createContent(id: number): DocumentFragment {\r\n  const template = getTemplateById(id) ?? \r\n    raiseError(`BindContent: template is not found: ${id}`);\r\n  return document.importNode(template.content, true);\r\n}\r\n\r\nfunction createBindings(\r\n  bindContent: IBindContent, \r\n  id         : number, \r\n  engine     : IComponentEngine, \r\n  content    : DocumentFragment\r\n): IBinding[] {\r\n  const attributes = getDataBindAttributesById(id) ?? \r\n    raiseError(`BindContent: data-bind is not set`);\r\n  const bindings: IBinding[] = [];\r\n  for(let i = 0; i < attributes.length; i++) {\r\n    const attribute = attributes[i];\r\n    const node = resolveNodeFromPath(content, attribute.nodePath) ?? \r\n      raiseError(`BindContent: node is not found: ${attribute.nodePath}`);\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      const creator = attribute.creatorByText.get(bindText) ?? \r\n        raiseError(`BindContent: creator is not found: ${bindText}`);\r\n      const binding = createBinding(\r\n        bindContent, \r\n        node, \r\n        engine, \r\n        creator.createBindingNode, \r\n        creator.createBindingState\r\n      );\r\n      bindings.push(binding);\r\n    }\r\n  }\r\n  return bindings;\r\n}\r\n\r\nclass BindContent implements IBindContent {\r\n  loopContext  : ILoopContext | null;\r\n  parentBinding: IBinding | null;\r\n  childNodes   : Node[];\r\n  fragment     : DocumentFragment;\r\n  engine       : IComponentEngine | undefined;\r\n  #id;\r\n  get id() {\r\n    return this.#id;\r\n  }\r\n  get isMounted() {\r\n    return this.childNodes.length > 0 && this.childNodes[0].parentNode !== this.fragment;\r\n  }\r\n  get firstChildNode() {\r\n    return this.childNodes[0] ?? null;\r\n  }\r\n  get lastChildNode() {\r\n    return this.childNodes[this.childNodes.length - 1] ?? null;\r\n  }\r\n  getLastNode(parentNode: Node): Node | null {\r\n    const lastBinding = this.bindings[this.bindings.length - 1];\r\n    const lastChildNode = this.lastChildNode;\r\n    if (lastBinding.node === lastChildNode) {\r\n      if (lastBinding.bindContents.size > 0) {\r\n        const childBindContent = Array.from(lastBinding.bindContents).at(-1) ?? raiseError(`BindContent: childBindContent is not found`);\r\n        const lastNode = childBindContent.getLastNode(parentNode);\r\n        if (lastNode !== null) {\r\n          return lastNode;\r\n        }\r\n      }\r\n    }\r\n    if (parentNode !== lastChildNode?.parentNode) {\r\n      return null;\r\n    }\r\n    return lastChildNode;\r\n  }\r\n  #currentLoopContext: ILoopContext | null | undefined;\r\n  get currentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#currentLoopContext === \"undefined\") {\r\n      let bindContent: IBindContent | null = this;\r\n      while(bindContent !== null) {\r\n        if (bindContent.loopContext !== null) break; ;\r\n        bindContent = bindContent.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      this.#currentLoopContext = bindContent?.loopContext ?? null;\r\n    }\r\n    return this.#currentLoopContext;\r\n  }\r\n  constructor(\r\n    parentBinding: IBinding | null,\r\n    id           : number, \r\n    engine       : IComponentEngine, \r\n    loopContext  : string | null,\r\n    listIndex    : IListIndex | null\r\n  ) {\r\n    this.parentBinding = parentBinding;\r\n    this.#id = id;\r\n    this.fragment = createContent(id);\r\n    this.childNodes = Array.from(this.fragment.childNodes);\r\n    this.engine = engine;\r\n    this.loopContext = (listIndex !== null) ? createLoopContext(loopContext, listIndex, this) : null;\r\n    this.bindings = createBindings(\r\n      this, \r\n      id, \r\n      engine, \r\n      this.fragment\r\n    );\r\n  }\r\n  mount(parentNode: Node) {\r\n    parentNode.appendChild(this.fragment);\r\n  }\r\n  mountBefore(parentNode: Node, beforeNode: Node | null) {\r\n    parentNode.insertBefore(this.fragment, beforeNode);\r\n  }\r\n  mountAfter(parentNode: Node, afterNode: Node | null) {\r\n    parentNode.insertBefore(\r\n      this.fragment, \r\n      afterNode?.nextSibling ?? null\r\n    );\r\n  }\r\n  unmount() {\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      this.fragment.appendChild(this.childNodes[i]);\r\n    }\r\n  }\r\n  bindings: IBinding[] = [];\r\n  render() {\r\n    render(this.bindings);\r\n  }\r\n  init() {\r\n    this.bindings.forEach(binding => binding.init());\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    if (this.loopContext == null) raiseError(`BindContent: loopContext is null`);\r\n    this.loopContext.assignListIndex(listIndex);\r\n    this.init();\r\n  }\r\n}\r\n\r\nexport function createBindContent(\r\n  parentBinding: IBinding | null,\r\n  id           : number, \r\n  engine       :IComponentEngine, \r\n  loopContext  : string | null, \r\n  listIndex    :IListIndex | null\r\n):IBindContent {\r\n  const bindContent = new BindContent(\r\n    parentBinding, \r\n    id, \r\n    engine, \r\n    loopContext, \r\n    listIndex\r\n  );\r\n  bindContent.init();\r\n  return bindContent;\r\n}","import { NodePath } from \"./types\";\r\n\r\nexport function resolveNodeFromPath(root: Node, path: NodePath): Node | null {\r\n  return path.reduce((node, index) => node?.childNodes[index] ?? null, root);\r\n}","import { IListIndex } from \"./types\";\r\n\r\nclass ListIndex implements IListIndex {\r\n  static id: number = 0;\r\n  id              : number = ++ListIndex.id;\r\n  #parentListIndex: IListIndex | null = null;\r\n  get parentListIndex(): IListIndex | null {\r\n    return this.#parentListIndex;\r\n  }\r\n  index: number;\r\n  get indexes(): number[] {\r\n    const indexes = this.parentListIndex?.indexes ?? [];\r\n    indexes.push(this.index);\r\n    return indexes;\r\n  }\r\n\r\n  get position(): number {\r\n    return (this.parentListIndex?.position ?? -1) + 1;\r\n  }\r\n\r\n  constructor(\r\n    parentListIndex: IListIndex | null,\r\n    index: number\r\n  ) {\r\n    this.#parentListIndex = parentListIndex;\r\n    this.index = index;\r\n  }\r\n  \r\n  truncate(length: number): IListIndex | null {\r\n    let listIndex: IListIndex | null = this;\r\n    while(listIndex !== null) {\r\n      if (listIndex.position < length) return listIndex;\r\n      listIndex = listIndex.parentListIndex;\r\n    }\r\n    return null;\r\n  }\r\n  add(value: number): IListIndex {\r\n    return new ListIndex(this, value);\r\n  }\r\n\r\n  *reverseIterator(): Generator<IListIndex> {\r\n    yield this;\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.reverseIterator();\r\n    }\r\n    return;\r\n  }\r\n\r\n  *iterator(): Generator<IListIndex> {\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.iterator();\r\n    }\r\n    yield this;\r\n    return;\r\n  }\r\n\r\n  toString(): string {\r\n    const parentListIndex = this.parentListIndex?.toString();\r\n    return (parentListIndex !== null) ? parentListIndex + \",\" + this.index.toString() : this.index.toString();\r\n  }\r\n\r\n  at(position: number): IListIndex | null {\r\n    let iterator;\r\n    if (position >= 0) {\r\n      iterator = this.iterator();\r\n    } else {\r\n      position = - position - 1 \r\n      iterator = this.reverseIterator();\r\n    }\r\n    let next;\r\n    while(position >= 0) {\r\n      next = iterator.next();\r\n      position--;\r\n    }\r\n    return next?.value ?? null;\r\n  }\r\n  \r\n}\r\n\r\nexport function createListIndex(\r\n  parentListIndex: IListIndex | null,\r\n  index          : number\r\n): IListIndex {\r\n  return new ListIndex(parentListIndex, index);\r\n}\r\n\r\nexport function getMaxListIndexId(): number {\r\n  return ListIndex.id;\r\n}\r\n","import { getMaxListIndexId } from \"../ListIndex/createListIndex\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\n\r\n/**\r\n * 参照用のIDを生成する\r\n * ListIndexのIDは最大値を取得してから計算するため、ListIndexの構築が完了していない場合、重複が発生する可能性がある\r\n */\r\n/**\r\n * ToDo:ListIndexの構築が完了していない状態で、IDを取得すると例外を発生させる仕組みが必要\r\n */\r\nexport function getStatePropertyRefId(info: IStructuredPathInfo, listIndex: IListIndex | null): number {\r\n  const listIndexMaxId = getMaxListIndexId();\r\n  return info.id * (listIndexMaxId + 1) + (listIndex?.id ?? 0);\r\n}","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { getStatePropertyRefId } from \"../../StatePropertyRef/getStatePropertyRefId\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setTracking } from \"./setTracking\";\r\n\r\nfunction _getByRef(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  receiver : IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  if (handler.lastTrackingStack != null && handler.lastTrackingStack !== info) {\r\n    const lastPattern = handler.lastTrackingStack;\r\n    if (lastPattern.parentInfo !== info) {\r\n      handler.engine.addDependentProp(lastPattern, info);\r\n    }\r\n  }\r\n\r\n  let refId = 0;\r\n  if (handler.cacheable) {\r\n    refId = getStatePropertyRefId(info, listIndex);\r\n    const value = handler.cache[refId];\r\n    if (typeof value !== \"undefined\") {\r\n      return value;\r\n    }\r\n    if (refId in handler.cache) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  let value;\r\n  try {\r\n    if (info.pattern in target) {\r\n      if (info.wildcardCount > 0) {\r\n        if (listIndex === null) {\r\n          raiseError(`propRef.listIndex is null`);\r\n        }\r\n        return (value = handler.engine.setStatePropertyRef(info, listIndex, () => {\r\n          return Reflect.get(target, info.pattern, receiver);\r\n        }));\r\n      } else {\r\n        return (value = Reflect.get(target, info.pattern, receiver));\r\n      }\r\n    } else {\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRef(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return (value = Reflect.get(parentValue, index));\r\n      } else {\r\n        return (value = Reflect.get(parentValue, lastSegment));\r\n      }\r\n    }\r\n  } finally {\r\n    if (handler.cacheable && !(refId in handler.cache)) {\r\n      handler.cache[refId] = value;\r\n    }\r\n  }\r\n}\r\n\r\nexport function getByRef(\r\n    target   : Object, \r\n    info     : IStructuredPathInfo,\r\n    listIndex: IListIndex | null,\r\n    receiver : IStateProxy,\r\n    handler  : IStateHandler\r\n  ): any {\r\n    if (handler.engine.trackedGetters.has(info.pattern)) {\r\n      return setTracking(info, handler, () => {\r\n        return _getByRef(target, info, listIndex, receiver, handler);\r\n      });\r\n    } else {\r\n      return _getByRef(target, info, listIndex, receiver, handler);\r\n    }\r\n\r\n  }\r\n","import { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function setTracking(info: IStructuredPathInfo, handler: IStateHandler, callback: () => any): any {\r\n  handler.trackingStack.push(info);\r\n  handler.lastTrackingStack = info;\r\n  try {\r\n    return callback();\r\n  } finally {\r\n    handler.trackingStack.pop();\r\n    handler.lastTrackingStack = handler.trackingStack[handler.trackingStack.length - 1] ?? null;\r\n  }\r\n}\r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef as methodGetByRef } from \"../methods/getByRef\";\r\n\r\nexport function getByRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (pattern: IStructuredPathInfo, listIndex: IListIndex | null) => \r\n    methodGetByRef(target, pattern, listIndex, receiver, handler);\r\n} \r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef } from \"./getByRef\";\r\n\r\nexport function setByRef(\r\n    target   : Object, \r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any, \r\n    receiver : IStateProxy,\r\n    handler  : IStateHandler\r\n): any {\r\n  try {\r\n    if (info.pattern in target) {\r\n      if (info.wildcardCount > 0) {\r\n        if (listIndex === null) {\r\n          raiseError(`propRef.listIndex is null`);\r\n        }\r\n        return handler.engine.setStatePropertyRef(info, listIndex, () => {\r\n          return Reflect.set(target, info.pattern, value, receiver);\r\n        });\r\n      } else {\r\n        return Reflect.set(target, info.pattern, value, receiver);\r\n      }\r\n    } else {\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRef(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return Reflect.set(parentValue, index, value);\r\n      } else {\r\n        return Reflect.set(parentValue, lastSegment, value);\r\n      }\r\n    }\r\n  } finally {\r\n    handler.engine.updater.addUpdatedStatePropertyRefValue(info, listIndex, value);\r\n  }\r\n}\r\n","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setByRef as methodSetByRef } from \"../methods/setByRef\";\r\n\r\nexport function setByRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (pattern: IStructuredPathInfo, listIndex: IListIndex | null, value: any) => \r\n    methodSetByRef(target, pattern, listIndex, value, receiver, handler);\r\n}","import { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setCacheable as methodSetChargeable } from \"../methods/setCacheable\";\r\n\r\nexport function setCacheable(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async (callback: () => Promise<void>) => {\r\n    await methodSetChargeable(handler, callback);\r\n  }\r\n}","import { IStateHandler } from \"../types\";\r\n\r\nexport async function setCacheable(handler: IStateHandler, callback: () => Promise<void>): Promise<void> {\r\n  handler.cacheable = true;\r\n  handler.cache = {}\r\n  try {\r\n    await callback();\r\n  } finally {\r\n    handler.cacheable = false;\r\n  }\r\n}\r\n","import { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst CONNECTED_CALLBACK = \"$connectedCallback\";\r\n\r\nexport function connectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, CONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","import { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst DISCONNECTED_CALLBACK = \"$disconnectedCallback\";\r\n\r\nexport function disconnectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, DISCONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef } from \"../methods/getByRef\";\r\nimport { setByRef } from \"../methods/setByRef\";\r\n\r\nexport function resolve(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (path: string, indexes: number[], value?:any): any => {\r\n    const info = getStructuredPathInfo(path);\r\n    let listIndex: IListIndex | null = null;\r\n    for(let i = 0; i < info.wildcardParentInfos.length; i++) {\r\n      const wildcardParentPattern = info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPath is null`);\r\n      const listIndexes: IListIndex[] = Array.from(handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? []);\r\n      const index = indexes[i] ?? raiseError(`index is null`);\r\n      listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    if (typeof value === \"undefined\") {\r\n      return getByRef(target, info, listIndex, receiver, handler);\r\n    } else {\r\n      return setByRef(target, info, listIndex, value, receiver, handler);\r\n    }\r\n  };\r\n} ","import { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { resolve as _resolve } from \"./resolve\";\r\n\r\nexport function getAll(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n    const resolve = _resolve(target, prop, receiver, handler);\r\n    return (path: string, indexes?: number[]): any[] => {\r\n      const info = getStructuredPathInfo(path);\r\n      if (handler.lastTrackingStack != null && handler.lastTrackingStack !== info) {\r\n        const lastPattern = handler.lastTrackingStack;\r\n        if (lastPattern.parentInfo !== info) {\r\n          handler.engine.addDependentProp(lastPattern, info);\r\n        }\r\n      }\r\n  \r\n      if (typeof indexes === \"undefined\") {\r\n        for(let i = 0; i < info.wildcardInfos.length; i++) {\r\n          const wildcardPattern = info.wildcardInfos[i] ?? raiseError(`wildcardPattern is null`);\r\n          const listIndex = handler.engine.getContextListIndex(wildcardPattern.pattern);\r\n          if (listIndex) {\r\n            indexes = listIndex.indexes;\r\n            break;\r\n          }\r\n        }\r\n        if (typeof indexes === \"undefined\") {\r\n          indexes = [];\r\n        }\r\n      }\r\n      const walkWildcardPattern = (\r\n        wildcardParentInfos: IStructuredPathInfo[],\r\n        wildardIndexPos: number,\r\n        listIndex: IListIndex | null,\r\n        indexes: number[],\r\n        indexPos: number,\r\n        parentIndexes: number[],\r\n        results: number[][]\r\n      ) => {\r\n        const wildcardParentPattern = wildcardParentInfos[wildardIndexPos] ?? null;\r\n        if (wildcardParentPattern === null) {\r\n          results.push(parentIndexes);\r\n          return;\r\n        }\r\n        const listIndexSet = handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n        const listIndexes = Array.from(listIndexSet);\r\n        const index = indexes[indexPos] ?? null;\r\n        if (index === null) {\r\n          for(let i = 0; i < listIndexes.length; i++) {\r\n            const listIndex = listIndexes[i];\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results);\r\n          }\r\n        } else {\r\n          const listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n          if ((wildardIndexPos + 1) < wildcardParentInfos.length) {\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results\r\n            );\r\n          }\r\n        }\r\n      }\r\n      const resultIndexes: number[][] = [];\r\n      walkWildcardPattern(\r\n        info.wildcardParentInfos, \r\n        0, \r\n        null, \r\n        indexes, \r\n        0, \r\n        [], \r\n        resultIndexes\r\n      );\r\n      const resultValues: any[] = [];\r\n      for(let i = 0; i < resultIndexes.length; i++) {\r\n        resultValues.push(resolve(\r\n          info.pattern,\r\n          resultIndexes[i]\r\n        ));\r\n      }\r\n      return resultValues;\r\n    }\r\n  }","\r\nimport { IResolvedPathInfo, WildcardType } from './types';\r\nimport { getStructuredPathInfo } from './getStructuredPathInfo';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IResolvedPathInfo } = {};\r\n//const _cache: Map<string, IResolvedPathInfo> = new Map();\r\n\r\nclass ResolvedPathInfo implements IResolvedPathInfo {\r\n  static id = 0;\r\n  id = ++ResolvedPathInfo.id;\r\n  name;\r\n  elements;\r\n  paths;\r\n  wildcardCount;\r\n  wildcardType;\r\n  wildcardIndexes;\r\n  info;\r\n  constructor(name: string) {\r\n    const elements = name.split(\".\");\r\n    const tmpPatternElements = elements.slice();\r\n    const paths = [];\r\n    let incompleteCount = 0;\r\n    let completeCount = 0;\r\n    let lastPath = \"\";\r\n    let wildcardCount = 0;\r\n    let wildcardType: WildcardType = \"none\";\r\n    let wildcardIndexes: (number | null)[] = [];\r\n    for(let i = 0; i < elements.length; i++) {\r\n      const element = elements[i];\r\n      if (element === \"*\") {\r\n        tmpPatternElements[i] = \"*\";\r\n        wildcardIndexes.push(null);\r\n        incompleteCount++;\r\n        wildcardCount++;\r\n      } else {\r\n        const number = Number(element);\r\n        if (!Number.isNaN(number)) {\r\n          tmpPatternElements[i] = \"*\";\r\n          wildcardIndexes.push(number);\r\n          completeCount++;\r\n          wildcardCount++;\r\n        }\r\n      }\r\n      lastPath += element;\r\n      paths.push(lastPath);\r\n      lastPath += (i < elements.length - 1 ? \".\" : \"\");\r\n    }\r\n    const pattern = tmpPatternElements.join(\".\");\r\n    const info = getStructuredPathInfo(pattern);\r\n    if (incompleteCount > 0 || completeCount > 0) {\r\n      if (incompleteCount === wildcardCount) {\r\n        wildcardType = \"context\";\r\n      } else if (completeCount === wildcardCount) {\r\n        wildcardType = \"all\";\r\n      } else {\r\n        wildcardType = \"partial\";\r\n      }\r\n    }\r\n    this.name = name;\r\n    this.elements = elements;\r\n    this.paths = paths;\r\n    this.wildcardCount = wildcardCount;\r\n    this.wildcardType = wildcardType;\r\n    this.wildcardIndexes = wildcardIndexes;\r\n    this.info = info;\r\n  }\r\n}\r\n\r\nexport function getResolvedPathInfo(name:string):IResolvedPathInfo {\r\n  let nameInfo: IResolvedPathInfo | undefined;\r\n//  return _cache.get(name) ?? (_cache.set(name, nameInfo = new ResolvedPathInfo(name)), nameInfo);\r\n  return _cache[name] ?? (_cache[name] = new ResolvedPathInfo(name));\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IResolvedPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\n\r\nexport function getListIndex(\r\n  info: IResolvedPathInfo, \r\n  engine: IComponentEngine\r\n): IListIndex | null {\r\n  if (info.info.wildcardCount === 0) {\r\n    return null;\r\n  }\r\n  let listIndex: IListIndex | null = null;\r\n  const lastWildcardPath = info.info.lastWildcardPath ?? \r\n    raiseError(`lastWildcardPath is null`);\r\n  if (info.wildcardType === \"context\") {\r\n    listIndex = engine.getContextListIndex(lastWildcardPath) ?? \r\n      raiseError(`ListIndex not found: ${info.info.pattern}`);\r\n  } else if (info.wildcardType === \"all\") {\r\n    let parentListIndex = null;\r\n    for(let i = 0; i < info.info.wildcardCount; i++) {\r\n      const wildcardParentPattern = info.info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPattern is null`);\r\n      const listIndexes: IListIndex[] = Array.from(engine.getListIndexesSet(wildcardParentPattern, parentListIndex) ?? []);\r\n      const wildcardIndex = info.wildcardIndexes[i] ?? raiseError(`wildcardIndex is null`);\r\n      parentListIndex = listIndexes[wildcardIndex] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    listIndex = parentListIndex;\r\n  } else if (info.wildcardType === \"partial\") {\r\n    // ToDo:listIndexを取得する必要がある\r\n  } else if (info.wildcardType === \"none\") {\r\n  }\r\n  return listIndex;\r\n}\r\n","import { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { getAll } from \"../apis/getAll\";\r\nimport { resolve } from \"../apis/resolve\";\r\nimport { getListIndex } from \"../getListIndex\";\r\nimport { getByRef } from \"../methods/getByRef\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst matchIndexPropertyName = new RegExp(/^\\$(\\d+)$/);\r\n\r\nexport function get(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  let value;\r\n  if (typeof prop === \"string\") {\r\n    if (matchIndexPropertyName.test(prop)) {\r\n      const number = prop.slice(1);\r\n      const index = Number(number);\r\n      const ref = handler.engine.getLastStatePropertyRef() ?? \r\n        raiseError(`get: this.engine.getLastStatePropertyRef() is null`);\r\n      return ref.listIndex?.at(index - 1)?.index ?? raiseError(`ListIndex not found: ${prop}`);\r\n    } else if (prop === \"$resolve\") {\r\n      return resolve(target, prop, receiver, handler);\r\n    } else if (prop === \"$getAll\") {\r\n      return getAll(target, prop, receiver, handler);\r\n    } else {\r\n      const resolvedInfo = getResolvedPathInfo(prop);\r\n      const listIndex = getListIndex(resolvedInfo, handler.engine);\r\n      value = getByRef(\r\n        target, \r\n        resolvedInfo.info, \r\n        listIndex, \r\n        receiver,\r\n        handler\r\n      );\r\n    }\r\n  } else if (typeof prop === \"symbol\") {\r\n    if (prop in handler.callableApi) {\r\n      return handler.callableApi[prop](target, prop, receiver, handler);\r\n    }\r\n    value = Reflect.get(\r\n      target, \r\n      prop, \r\n      receiver\r\n    );\r\n  }\r\n  return value;\r\n}\r\n","import { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetAllSymbol, GetByRefSymbol, ResolveSymbol, SetByRefSymbol, SetCacheableSymbol } from \"./symbols\";\r\nimport { IState, IStateHandler, IStateProxy } from \"./types\";\r\nimport { getByRef as apiGetByRef } from \"./apis/getByRef\";\r\nimport { setByRef as apiSetByRef } from \"./apis/setByRef\";\r\nimport { setCacheable as apiSetCacheable } from \"./apis/setCacheable\";\r\nimport { connectedCallback } from \"./apis/connectedCallback\";\r\nimport { disconnectedCallback } from \"./apis/disconnectedCallback\";\r\nimport { resolve } from \"./apis/resolve\";\r\nimport { getAll } from \"./apis/getAll\";\r\nimport { get as trapGet } from \"./traps/get\";\r\nimport { set as trapSet } from \"./traps/set\";\r\n\r\nclass StateHandler implements IStateHandler {\r\n  engine   : IComponentEngine;\r\n  cacheable: boolean = false;\r\n  cache    : {[key:number]:any} = {};\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: IStructuredPathInfo[] = [];\r\n  \r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  callableApi: { [key:symbol]: Function } = {\r\n    [GetByRefSymbol]: apiGetByRef, \r\n    [SetByRefSymbol]: apiSetByRef, \r\n    [SetCacheableSymbol]: apiSetCacheable, \r\n    [ConnectedCallbackSymbol]: connectedCallback, \r\n    [DisconnectedCallbackSymbol]: disconnectedCallback, \r\n    [ResolveSymbol]: resolve, \r\n    [GetAllSymbol]: getAll,\r\n  };\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IStateProxy\r\n  ): boolean {\r\n    return trapSet(target, prop, value, receiver, this);\r\n  }\r\n}\r\n\r\nexport function createStateProxy(\r\n  engine: IComponentEngine, \r\n  state: Object\r\n): IStateProxy {\r\n  return new Proxy<IState>(state, new StateHandler(engine)) as IStateProxy;\r\n}\r\n\r\n","import { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo\";\r\nimport { getListIndex } from \"../getListIndex\";\r\nimport { setByRef } from \"../methods/setByRef\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nexport function set(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  value   : any, \r\n  receiver: IStateProxy,\r\n  handler : IStateHandler\r\n): boolean {\r\n  if (typeof prop === \"string\") {\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, handler.engine);\r\n    return setByRef(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      value, \r\n      receiver,\r\n      handler\r\n    );\r\n  } else {\r\n    return Reflect.set(\r\n      target, \r\n      prop, \r\n      value, \r\n      receiver\r\n    );\r\n  }\r\n}\r\n","import { createListIndex } from \"../ListIndex/createListIndex\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { GetByRefSymbol } from \"./symbols\";\r\n\r\nconst BLANK_LISTINDEXES_SET = new Set<IListIndex>();\r\n\r\nfunction buildListIndexTreeSub(\r\n  engine   : IComponentEngine, \r\n  listInfos: Set<IStructuredPathInfo>,\r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value: any[]\r\n): void {\r\n  const oldValue = engine.getList(info, listIndex) ?? [];\r\n  if (oldValue === value) {\r\n    return;\r\n  }\r\n  const oldListIndexesSet = engine.getListIndexesSet(info, listIndex) ?? BLANK_LISTINDEXES_SET;\r\n  const oldListIndexesByItem = Map.groupBy(oldListIndexesSet, listIndex => oldValue[listIndex.index]);\r\n  const newListIndexesSet:Set<IListIndex> = new Set();\r\n  for(let i = 0; i < value.length; i++) {\r\n    const item = value[i];\r\n    const oldListIndexes = oldListIndexesByItem.get(item);\r\n    let curListIndex = oldListIndexes?.shift();\r\n    if (!curListIndex) {\r\n      curListIndex = createListIndex(listIndex, i);\r\n    } else {\r\n      if (curListIndex.index !== i) {\r\n        curListIndex.index = i;\r\n        engine.updater.addUpdatedListIndex(curListIndex);\r\n      }\r\n    }\r\n    newListIndexesSet.add(curListIndex);\r\n  }\r\n  engine.saveListIndexesSet(info, listIndex, newListIndexesSet);\r\n  engine.saveList(info, listIndex, value.slice(0));\r\n\r\n  const searchPath = info.pattern + \".*\";\r\n  for(const info of listInfos) {\r\n    if (searchPath !== info.lastWildcardPath) {\r\n      continue;\r\n    }\r\n    for(const subListIndex of newListIndexesSet) {\r\n      const subValue = engine.stateProxy[GetByRefSymbol](info, subListIndex);\r\n      buildListIndexTreeSub(\r\n        engine, \r\n        listInfos, \r\n        info, \r\n        subListIndex, \r\n        subValue ?? []\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function buildListIndexTree(\r\n  engine   : IComponentEngine, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value    : any\r\n): void {\r\n  const listInfos = engine.listInfoSet;\r\n  // 配列じゃなければ何もしない\r\n  if (!engine.listInfoSet.has(info)) {\r\n    return;\r\n  }\r\n  const values = (value ?? []) as any[];\r\n  buildListIndexTreeSub(\r\n    engine, \r\n    engine.listInfoSet, \r\n    info, \r\n    listIndex, \r\n    values\r\n  );\r\n}\r\n","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\n\r\nfunction extractListIndexes(\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  engine: IComponentEngine,\r\n): IListIndex[] {\r\n  const wildcardParentInfos: IStructuredPathInfo[] = info.wildcardParentInfos ?? [];\r\n  const _extractListIndexes = (pos:number, currentListIndex: IListIndex | null, resultListIndexes: IListIndex[]) => {\r\n    const wildcardParentInfo = wildcardParentInfos[pos];\r\n    if (!wildcardParentInfo) {\r\n      if (currentListIndex) {\r\n        resultListIndexes.push(currentListIndex);\r\n      }\r\n      return;\r\n    }\r\n    const subListIndex = listIndex?.at(pos) ?? null;\r\n    if (subListIndex) {\r\n      _extractListIndexes(pos + 1, subListIndex, resultListIndexes);\r\n    } else {\r\n      const listIndexes = engine.getListIndexesSet(wildcardParentInfo, currentListIndex);\r\n      for(const loopListIndex of listIndexes ?? []) {\r\n        _extractListIndexes(pos + 1, loopListIndex, resultListIndexes);\r\n      }\r\n    }\r\n  }\r\n  const resultListIndexes: IListIndex[] = [];\r\n  _extractListIndexes(0, listIndex, resultListIndexes);\r\n  return resultListIndexes;\r\n}\r\n\r\nfunction _collectAffectedGetters(\r\n  refInfo        : IStructuredPathInfo,\r\n  refListIndex   : IListIndex | null,\r\n  engine         : IComponentEngine,\r\n  resultPathInfos: Set<IStructuredPathInfo>,\r\n  resultRefs     : {info:IStructuredPathInfo, listIndex:IListIndex | null}[],\r\n) {\r\n//  if (engine.listInfoSet.has(refInfo)) return;\r\n  if (resultPathInfos.has(refInfo)) return;\r\n  const dependentPathInfos = engine.dependentTree.get(refInfo);\r\n  for(const dependentPathInfo of dependentPathInfos ?? []) {\r\n    if (engine.listInfoSet.has(refInfo) && dependentPathInfo.parentInfo === refInfo && dependentPathInfo.lastSegment === \"*\") {\r\n      continue;\r\n    }\r\n    let dependentListIndex = null;\r\n    let updateList = false;\r\n    for(let i = dependentPathInfo.wildcardParentInfos.length - 1; i >= 0; i--) {\r\n      const wildcardParentInfo = dependentPathInfo.wildcardParentInfos[i];\r\n      if (resultPathInfos.has(wildcardParentInfo)) {\r\n        updateList = true;\r\n        break;\r\n      }\r\n      const pos = refInfo.wildcardParentInfos.indexOf(wildcardParentInfo);\r\n      if (pos < 0) continue;\r\n      dependentListIndex = refListIndex?.at(pos) ?? null;\r\n      if (dependentListIndex !== null) break;\r\n    }\r\n    if (updateList) {\r\n      continue;\r\n    }\r\n    if (dependentPathInfo.wildcardParentInfos.length > 0) {\r\n      const extractlistIndexes = extractListIndexes(dependentPathInfo, dependentListIndex, engine);\r\n      for(const listIndex of extractlistIndexes) {\r\n        resultRefs.push({info: dependentPathInfo, listIndex});\r\n        _collectAffectedGetters(dependentPathInfo, listIndex, engine, resultPathInfos, resultRefs);\r\n      }\r\n    } else {\r\n      resultRefs.push({info: dependentPathInfo, listIndex: null});\r\n      _collectAffectedGetters(dependentPathInfo, null, engine, resultPathInfos, resultRefs);\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nexport function collectAffectedGetters(\r\n  updateRefs: {info:IStructuredPathInfo, listIndex:IListIndex | null}[],\r\n  engine: IComponentEngine,\r\n): {info:IStructuredPathInfo, listIndex:IListIndex | null}[] {\r\n  const resultPathInfos = new Set<IStructuredPathInfo>();\r\n  const resultRefs: {info:IStructuredPathInfo, listIndex:IListIndex | null}[] = [];\r\n  for(const ref of updateRefs) {\r\n    const info = ref.info;\r\n    const listIndex = ref.listIndex;\r\n    if (resultPathInfos.has(info)) continue;\r\n    _collectAffectedGetters(info, listIndex, engine, resultPathInfos, resultRefs);\r\n    resultPathInfos.add(info);\r\n  }\r\n  return resultRefs;\r\n\r\n}\r\n\r\n","import { IBinding } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { render } from \"../Render/render\";\r\nimport { buildListIndexTree } from \"../StateClass/buildListIndexTree\";\r\nimport { SetCacheableSymbol } from \"../StateClass/symbols\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { getStatePropertyRefId } from \"../StatePropertyRef/getStatePropertyRefId\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { getGlobalConfig } from \"../WebComponents/getGlobalConfig\";\r\nimport { IUpdater } from \"./types\";\r\nimport { collectAffectedGetters } from \"./collectAffectedGetters\";\r\n\r\ntype UpdatedArrayElementBinding = {\r\n  parentRef: {info: IStructuredPathInfo, listIndex: IListIndex | null};\r\n  binding: IBinding;\r\n  listIndexes: IListIndex[];\r\n  values: any[];\r\n};\r\n\r\nclass Updater implements IUpdater {\r\n  processList      : (() => Promise<void> | void)[] = [];\r\n  updatedProperties: Set<{info:IStructuredPathInfo, listIndex:IListIndex | null} | IListIndex> = \r\n    new Set<{info:IStructuredPathInfo, listIndex:IListIndex | null} | IListIndex>();\r\n  updatedValues    : {[key:number]: any} = {};\r\n  engine           : IComponentEngine;\r\n\r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  addProcess(process: () => Promise<void> | void): void {\r\n    this.processList.push(process);\r\n    this.waitForQueueEntry.resolve();\r\n  }\r\n\r\n  addUpdatedStatePropertyRefValue(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any\r\n  ): void {\r\n    const refId = getStatePropertyRefId(info, listIndex);\r\n    this.updatedProperties.add({info, listIndex});\r\n    this.updatedValues[refId] = value;\r\n    this.waitForQueueEntry.resolve();\r\n  }\r\n\r\n  addUpdatedListIndex(listIndex: IListIndex): void {\r\n    this.updatedProperties.add(listIndex);\r\n    this.waitForQueueEntry.resolve();\r\n  }\r\n\r\n  terminate(): PromiseWithResolvers<void> {\r\n    const waitForMainLoopTerminate = Promise.withResolvers<void>();\r\n    this.waitForQueueEntry.resolve(waitForMainLoopTerminate);\r\n    return waitForMainLoopTerminate;\r\n  }\r\n\r\n  waitForQueueEntry: PromiseWithResolvers<PromiseWithResolvers<void> | void> = \r\n    Promise.withResolvers<PromiseWithResolvers<void> | void>();\r\n  async main(waitForComponentInit: PromiseWithResolvers<void>) {\r\n    await waitForComponentInit.promise;\r\n    const config = getGlobalConfig();\r\n    while (true) {\r\n      try {\r\n        const waitForMainLoopTerminate: (PromiseWithResolvers<void> | void) = \r\n          await this.waitForQueueEntry.promise;\r\n          config.debug && performance.mark(`start`);\r\n        Updater.updatingCount++;\r\n        try {\r\n          await this.exec();\r\n          if (config.debug) {\r\n            performance.mark(`end`);\r\n            performance.measure(`exec`, `start`, `end`);\r\n            console.log(performance.getEntriesByType(\"measure\"));    \r\n            performance.clearMeasures(`exec`);\r\n            performance.clearMarks(`start`);\r\n            performance.clearMarks(`end`);\r\n          }\r\n        } finally {\r\n          Updater.updatingCount--;\r\n          if (waitForMainLoopTerminate) {\r\n            waitForMainLoopTerminate.resolve();\r\n            break;\r\n          }\r\n        }\r\n      } catch(e) {\r\n        console.error(e);\r\n      } finally {\r\n        this.waitForQueueEntry = Promise.withResolvers<PromiseWithResolvers<void> | void>();\r\n      }\r\n    }\r\n  }\r\n\r\n  async updateState() {\r\n    while(this.processList.length > 0) {\r\n      const processList = this.processList;\r\n      this.processList = [];\r\n      for(let i = 0; i < processList.length; i++) {\r\n        const process = processList[i];\r\n        await process();\r\n      }\r\n    }\r\n  }\r\n\r\n  async rebuild(): Promise<{bindings: IBinding[], arrayElementBindings: UpdatedArrayElementBinding[]}> {\r\n    const retArrayElementBindings: UpdatedArrayElementBinding[] = [];\r\n    const retBindings: IBinding[] = [];\r\n    const engine = this.engine;\r\n    const processedListIndexes = new Set<IListIndex>();\r\n    const processedPropertyRefIdsSet = new Set<number>();\r\n    while(this.updatedProperties.size > 0) {\r\n      const updatedProiperties = Array.from(this.updatedProperties.values());\r\n\r\n      const updatedRefs = []; // 更新されたプロパティ参照のリスト\r\n      const arrayPropertyRefs = [];\r\n      const arrayElementPropertyRefs = [];\r\n      this.updatedProperties.clear();\r\n      for(let i = 0; i < updatedProiperties.length; i++) {\r\n        const item = updatedProiperties[i];\r\n        let bindings;\r\n        if (\"index\" in item) {\r\n          if (processedListIndexes.has(item)) continue;\r\n          const listIndex = item as IListIndex;\r\n          bindings = engine.bindingsByListIndex.get(listIndex);\r\n          processedListIndexes.add(listIndex);\r\n        } else {\r\n          const statePropertyRefId = getStatePropertyRefId(item.info, item.listIndex);\r\n          if (processedPropertyRefIdsSet.has(statePropertyRefId)) continue;\r\n          const statePropertyRef = item as {info:IStructuredPathInfo, listIndex:IListIndex | null};\r\n          if (engine.listInfoSet.has(statePropertyRef.info)) {\r\n            arrayPropertyRefs.push(statePropertyRef);\r\n          }\r\n          if (engine.elementInfoSet.has(statePropertyRef.info)) {\r\n            arrayElementPropertyRefs.push(statePropertyRef);\r\n          }\r\n          bindings = engine.getBindings(item.info, item.listIndex);\r\n          processedPropertyRefIdsSet.add(statePropertyRefId);\r\n          updatedRefs.push(statePropertyRef);\r\n        }\r\n        retBindings.push(...bindings ?? []);\r\n      }\r\n\r\n      // リストインデックスの構築\r\n      const builtStatePropertyRefIds = new Set<number>();\r\n      for(let i = 0; i < arrayPropertyRefs.length; i++) {\r\n        const arrayPropertyRef = arrayPropertyRefs[i];\r\n        const statePropertyRefId = getStatePropertyRefId(arrayPropertyRef.info, arrayPropertyRef.listIndex);\r\n        const value = this.updatedValues[statePropertyRefId] ?? null;\r\n        buildListIndexTree(engine, arrayPropertyRef.info, arrayPropertyRef.listIndex, value);\r\n        builtStatePropertyRefIds.add(statePropertyRefId);\r\n      }\r\n\r\n      const parentRefByRefId: {[parentRefId: number]: {info: IStructuredPathInfo, listIndex: IListIndex | null }} = {};\r\n      const statePropertyRefByStatePropertyRefId = Object.groupBy(arrayElementPropertyRefs, ref => {\r\n        if (ref.info.parentInfo === null) raiseError(`parentInfo is null`);\r\n        const parentInfo = ref.info.parentInfo;\r\n        const parentListIndex = (ref.info.wildcardCount === ref.info.parentInfo.wildcardCount) ?\r\n          ref.listIndex : (ref.listIndex?.parentListIndex ?? null);\r\n        const parentRefId = getStatePropertyRefId(parentInfo, parentListIndex);\r\n        if (!(parentRefId in parentRefByRefId)) {\r\n          parentRefByRefId[parentRefId] = {info: parentInfo, listIndex: parentListIndex};\r\n        }\r\n        return parentRefId;\r\n      });\r\n      for(const [parentRefIdKey, refs] of Object.entries(statePropertyRefByStatePropertyRefId)) {\r\n        const parentRefId = Number(parentRefIdKey);\r\n        if (builtStatePropertyRefIds.has(parentRefId)) continue;\r\n        if (typeof refs === \"undefined\") continue;\r\n        const parentRef = parentRefByRefId[parentRefId];\r\n        if (parentRef === null) continue;\r\n\r\n        const values = [];\r\n        const listIndexes = [];\r\n        for(let j = 0; j < refs.length; j++) {\r\n          const ref = refs[j];\r\n          const statePropertyRefId = getStatePropertyRefId(ref.info, ref.listIndex);\r\n          const value = this.updatedValues[statePropertyRefId] ?? null;\r\n          values.push(value);\r\n          const listIndex = ref.listIndex;\r\n          if (listIndex === null) {\r\n            throw new Error(\"listIndex is null\");\r\n          }\r\n          listIndexes.push(listIndex);\r\n        }\r\n        const bindings = engine.getBindings(parentRef.info, parentRef.listIndex);\r\n        for(const binding of bindings) {\r\n          const arrayElementBinding: UpdatedArrayElementBinding = {\r\n            parentRef,\r\n            binding,\r\n            listIndexes,\r\n            values\r\n          };\r\n          retArrayElementBindings.push(arrayElementBinding);\r\n        }\r\n      }\r\n      \r\n      const updatingRefs = collectAffectedGetters(updatedRefs, engine);\r\n      for(const updatingRef of updatingRefs) {\r\n        const bindings = engine.getBindings(updatingRef.info, updatingRef.listIndex);\r\n        retBindings.push(...bindings ?? []);\r\n      }\r\n      \r\n    }\r\n    this.updatedValues = {};\r\n    return {bindings: retBindings, arrayElementBindings: retArrayElementBindings};\r\n  }\r\n\r\n  async render(bindings: IBinding[]) {\r\n    await this.engine.stateProxy[SetCacheableSymbol](async () => {\r\n      return render(bindings);\r\n    });\r\n  }\r\n\r\n  async exec() {\r\n    while(this.processList.length !== 0 || this.updatedProperties.size !== 0) {\r\n      // update state\r\n      await this.updateState();\r\n      // rebuild\r\n      const { bindings, arrayElementBindings } = await this.rebuild();\r\n      // render\r\n      for(const arrayElementBinding of arrayElementBindings) {\r\n        arrayElementBinding.binding.bindingNode.updateElements(arrayElementBinding.listIndexes, arrayElementBinding.values);\r\n      }\r\n      if (bindings.length > 0) {\r\n        await this.render(bindings);\r\n      }\r\n    }\r\n  }\r\n\r\n  static updatingCount = 0;\r\n}\r\n\r\nexport function createUpdater(engine: IComponentEngine): IUpdater {\r\n  return new Updater(engine);\r\n}\r\n\r\nexport function getUpdatingCount(): number {\r\n  return Updater.updatingCount;\r\n}","import { raiseError } from \"../utils\";\r\nimport { IComponentConfig } from \"../WebComponents/types\";\r\nimport { canHaveShadowRoot } from \"./canHaveShadowRoot\";\r\n\r\nfunction getParentShadowRoot(parentNode: Node | null): ShadowRoot|undefined{\r\n  let node: Node | null = parentNode;\r\n  while(node) {\r\n    if (node instanceof ShadowRoot) {\r\n      return node;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n}\r\n\r\nexport function attachShadow(element: HTMLElement, config: IComponentConfig, styleSheet: CSSStyleSheet): void {\r\n    if (config.enableShadowDom) {\r\n      if (config.extends === null || canHaveShadowRoot(config.extends)) {\r\n        const shadowRoot = element.attachShadow({ mode: 'open' });\r\n        shadowRoot.adoptedStyleSheets = [styleSheet];\r\n      } else {\r\n        raiseError(`ComponentEngine: Shadow DOM not supported for builtin components that extend ${config.extends}`);\r\n      }\r\n    } else {\r\n      const shadowRootOrDocument = getParentShadowRoot(element.parentNode) || document;\r\n      const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n      if (!styleSheets.includes(styleSheet)) {\r\n        shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, styleSheet];\r\n      }\r\n    }\r\n\r\n}","export function canHaveShadowRoot(tagName: string): boolean {\r\n  try {\r\n    // 一時的に要素を作成\r\n    const element = document.createElement(tagName);\r\n    // `attachShadow` メソッドが存在し、実行可能かを確認\r\n    return typeof element.attachShadow === \"function\";\r\n  } catch {\r\n    // 無効なタグ名などが渡された場合は false を返す\r\n    return false;\r\n  }\r\n}","import { createBindContent } from \"../DataBinding/BindContent\";\r\nimport { IBindContent, IBinding } from \"../DataBinding/types\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { IState, IStateProxy, IStructiveState } from \"../StateClass/types\";\r\nimport { createStateProxy } from \"../StateClass/createStateProxy\";\r\nimport { IUpdater } from \"../Updater/types\";\r\nimport { createUpdater } from \"../Updater/updater\";\r\nimport { ComponentType, IComponentConfig, IComponentStatic, StructiveComponent } from \"../WebComponents/types\";\r\nimport { attachShadow } from \"./attachShadow\";\r\nimport { ISaveInfoByResolvedPathInfo, IComponentEngine } from \"./types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { buildListIndexTree } from \"../StateClass/buildListIndexTree\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetCacheableSymbol } from \"../StateClass/symbols\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { raiseError } from \"../utils\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo\";\r\n\r\nexport class ComponentEngine implements IComponentEngine {\r\n  type          : ComponentType = 'autonomous';\r\n  config        : IComponentConfig;\r\n  template      : HTMLTemplateElement;\r\n  styleSheet    : CSSStyleSheet;\r\n  stateClass    : IStructiveState;\r\n  state         : IState;\r\n  stateProxy    : IStateProxy;\r\n  updater       : IUpdater;\r\n  inputFilters  : FilterWithOptions;\r\n  outputFilters : FilterWithOptions;\r\n  bindContent   : IBindContent;\r\n  baseClass     : typeof HTMLElement = HTMLElement;\r\n  owner         : StructiveComponent;\r\n  trackedGetters: Set<string>;\r\n\r\n  listInfoSet       : Set<IStructuredPathInfo> = new Set();\r\n  elementInfoSet: Set<IStructuredPathInfo> = new Set();\r\n  bindingsByListIndex                  : WeakMap<IListIndex, Set<IBinding>> = new WeakMap();\r\n  dependentTree                        : Map<IStructuredPathInfo, Set<IStructuredPathInfo>> = new Map();\r\n\r\n  #waitForInitialize : PromiseWithResolvers<void> = Promise.withResolvers<void>();\r\n  #loopContext       : ILoopContext | null = null;\r\n  #stackStructuredPathInfo  : IStructuredPathInfo[] = [];\r\n  #stackListIndex    : IListIndex[] = [];\r\n\r\n  constructor(config: IComponentConfig, owner: StructiveComponent) {\r\n    this.config = config;\r\n    if (this.config.extends) {\r\n      this.type = 'builtin';\r\n    }\r\n    const componentClass = owner.constructor as IComponentStatic;\r\n    this.template = componentClass.template;\r\n    this.styleSheet = componentClass.styleSheet;\r\n    this.stateClass = componentClass.stateClass;\r\n    this.state = new this.stateClass();\r\n    this.stateProxy = createStateProxy(this, this.state);\r\n    this.updater = createUpdater(this);\r\n    this.inputFilters = componentClass.inputFilters;\r\n    this.outputFilters = componentClass.outputFilters;\r\n    this.owner = owner;\r\n    this.trackedGetters = componentClass.trackedGetters;\r\n    // 依存関係の木を作成する\r\n    const checkDependentProp = (info: IStructuredPathInfo) => {\r\n      const parentInfo = info.parentInfo;\r\n      if (parentInfo === null) return;\r\n      this.addDependentProp(info, parentInfo);\r\n      checkDependentProp(parentInfo);\r\n    }\r\n    for(const path of componentClass.paths) {\r\n      const info = getStructuredPathInfo(path);\r\n      checkDependentProp(info);\r\n    }\r\n    // 配列のプロパティ、配列要素のプロパティを登録する\r\n    for(const listPath of componentClass.listPaths) {\r\n      this.listInfoSet.add(getStructuredPathInfo(listPath));\r\n      this.elementInfoSet.add(getStructuredPathInfo(listPath + \".*\"));\r\n    }\r\n    this.bindContent = createBindContent(null, componentClass.id, this, null, null); // this.stateArrayPropertyNamePatternsが変更になる可能性がある\r\n    for(const info of this.listInfoSet) {\r\n      if (info.wildcardCount > 0) continue;\r\n      const value = this.stateProxy[GetByRefSymbol](info, null)\r\n      buildListIndexTree(this, info, null, value);\r\n    }\r\n  \r\n    this.updater.main(this.#waitForInitialize);\r\n  }\r\n\r\n  async connectedCallback(): Promise<void> {\r\n    attachShadow(this.owner, this.config, this.styleSheet);\r\n    await this.stateProxy[ConnectedCallbackSymbol]();\r\n    await this.stateProxy[SetCacheableSymbol](async () => {\r\n      this.bindContent.render();\r\n    });\r\n    this.bindContent.mount(this.owner.shadowRoot ?? this.owner);\r\n    this.#waitForInitialize.resolve();\r\n  }\r\n\r\n  async disconnectedCallback(): Promise<void> {\r\n    await this.stateProxy[DisconnectedCallbackSymbol]();\r\n  }\r\n\r\n  async setLoopContext(loopContext: ILoopContext, callback: ()=>Promise<void>): Promise<void> {\r\n    try {\r\n      if (this.#loopContext !== null) {\r\n        throw new Error(\"loopContext is already set\");\r\n      }\r\n      this.#loopContext = loopContext;\r\n      await this.asyncSetStatePropertyRef(loopContext.info, loopContext.listIndex, async () => {\r\n        await callback();\r\n      });\r\n    } finally {\r\n      this.#loopContext = null;\r\n    }\r\n  }\r\n\r\n  async asyncSetStatePropertyRef(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex, \r\n    callback : ()=>Promise<any>\r\n  ): Promise<any> {\r\n    this.#stackStructuredPathInfo.push(info);\r\n    this.#stackListIndex.push(listIndex);\r\n    try {\r\n      return await callback();\r\n    } finally {\r\n      this.#stackStructuredPathInfo.pop();\r\n      this.#stackListIndex.pop();\r\n    }\r\n  }\r\n\r\n  setStatePropertyRef(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex, \r\n    callback : ()=>any\r\n  ): any {\r\n    this.#stackStructuredPathInfo.push(info);\r\n    this.#stackListIndex.push(listIndex);\r\n    try {\r\n      return callback();\r\n    } finally {\r\n      this.#stackStructuredPathInfo.pop();\r\n      this.#stackListIndex.pop();\r\n    }\r\n  }\r\n\r\n  getLastStatePropertyRef(): {info:IStructuredPathInfo, listIndex:IListIndex} | null {\r\n    if (this.#stackStructuredPathInfo.length === 0) {\r\n      return null;\r\n    }\r\n    const info = this.#stackStructuredPathInfo[this.#stackStructuredPathInfo.length - 1];\r\n    if (typeof info === \"undefined\") {\r\n      return null;\r\n    }\r\n    const listIndex = this.#stackListIndex[this.#stackListIndex.length - 1];\r\n    if (typeof listIndex === \"undefined\") {\r\n      return null;\r\n    }\r\n    return {info, listIndex};\r\n  }\r\n\r\n  getContextListIndex(structuredPath: string): IListIndex | null{\r\n    const lastRef = this.getLastStatePropertyRef();\r\n    if (lastRef === null) {\r\n      return null;\r\n    }\r\n    const info = lastRef.info;\r\n    const index = info.wildcardPaths.indexOf(structuredPath);\r\n    if (index >= 0) {\r\n      return lastRef.listIndex.at(index) ?? null;\r\n    }\r\n    return null;\r\n  }\r\n  getLoopContexts():ILoopContext[] {\r\n    if (this.#loopContext === null) {\r\n      throw new Error(\"loopContext is null\");\r\n    }\r\n    return this.#loopContext.serialize();\r\n  }\r\n\r\n  #saveInfoByListIndexByResolvedPathInfoId: { [id:number]: WeakMap<IListIndex,ISaveInfoByResolvedPathInfo> } = {};\r\n  #saveInfoByStructuredPathId: { [id:number]: ISaveInfoByResolvedPathInfo } = {};\r\n\r\n  createSaveInfo():ISaveInfoByResolvedPathInfo {\r\n    return {\r\n      list          : null,\r\n      listIndexesSet: null,\r\n      bindings      : [],\r\n    }\r\n  }\r\n\r\n  getSaveInfoByStatePropertyRef(info:IStructuredPathInfo, listIndex:IListIndex | null): ISaveInfoByResolvedPathInfo {\r\n    if (listIndex === null) {\r\n      let saveInfo = this.#saveInfoByStructuredPathId[info.id];\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        this.#saveInfoByStructuredPathId[info.id] = saveInfo;\r\n      }\r\n      return saveInfo;\r\n    } else {\r\n      let saveInfoByListIndex = this.#saveInfoByListIndexByResolvedPathInfoId[info.id];\r\n      if (typeof saveInfoByListIndex === \"undefined\") {\r\n        saveInfoByListIndex = new WeakMap<IListIndex, ISaveInfoByResolvedPathInfo>();\r\n        this.#saveInfoByListIndexByResolvedPathInfoId[info.id] = saveInfoByListIndex;\r\n      }\r\n      let saveInfo = saveInfoByListIndex.get(listIndex);\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        saveInfoByListIndex.set(listIndex, saveInfo);\r\n      }\r\n      return saveInfo;\r\n    }\r\n  }\r\n  saveBinding(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    binding  : IBinding\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.bindings.push(binding);\r\n  }\r\n  saveListIndexesSet(\r\n    info              :IStructuredPathInfo, \r\n    listIndex         :IListIndex | null, \r\n    saveListIndexesSet:Set<IListIndex>\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.listIndexesSet = saveListIndexesSet;\r\n  }\r\n  saveList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null, \r\n    list     :any[]\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.list = list;\r\n  }\r\n  getBindings(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): IBinding[] {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.bindings;\r\n  }\r\n  getListIndexesSet(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): Set<IListIndex> | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.listIndexesSet;\r\n  }\r\n  getList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): any[] | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.list;\r\n  }\r\n\r\n  addDependentProp(info: IStructuredPathInfo, refInfo: IStructuredPathInfo) {\r\n    let dependents = this.dependentTree.get(refInfo);\r\n    if (typeof dependents === \"undefined\") {\r\n      dependents = new Set<IStructuredPathInfo>();\r\n      this.dependentTree.set(refInfo, dependents);\r\n    }\r\n    dependents.add(info);\r\n  }\r\n}\r\n\r\nexport function createComponentEngine(config: IComponentConfig, component: StructiveComponent): IComponentEngine {\r\n  return new ComponentEngine(config, component);\r\n}","import { COMMENT_EMBED_MARK } from \"../constants\";\r\nimport { raiseError } from \"../utils\";\r\n\r\nconst MUSTACHE_REGEXP = /\\{\\{([^\\}]+)\\}\\}/g;\r\nconst MUSTACHE_TYPES:Set<string> = new Set(['if', 'for', 'endif', 'endfor', 'elseif', 'else']);\r\n\r\ntype MustacheType = 'if' | 'for' | 'endif' | 'endfor' | 'elseif' | 'else';\r\ntype MustacheInfo = {\r\n  type: MustacheType;\r\n  remain: string; // after first ':'\r\n  expr: string;\r\n}\r\n\r\nexport function replaceMustacheWithTemplateTag(html: string): string {\r\n  const stack:MustacheInfo[] = [];\r\n  return html.replaceAll(MUSTACHE_REGEXP, (match, expr) => {\r\n    expr = expr.trim();\r\n    const [ type ] = expr.split(':');\r\n    if (!MUSTACHE_TYPES.has(type)) {\r\n      // embed\r\n      return `<!--${COMMENT_EMBED_MARK}${expr}-->`;\r\n    }\r\n    const remain = expr.slice(type.length + 1).trim();\r\n    const currentInfo:MustacheInfo = { type, expr, remain };\r\n    if (type === 'if' || type === 'for') {\r\n      stack.push(currentInfo);\r\n      return `<template data-bind=\"${expr}\">`;\r\n    } else if (type === 'endif') {\r\n      const endTags = [];\r\n      do {\r\n        const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        if (info.type === 'if') {\r\n          endTags.push('</template>');\r\n          break;\r\n        } else if (info.type === 'elseif') {\r\n          endTags.push('</template>');\r\n        } else {\r\n          raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        }\r\n      } while(true);\r\n      return endTags.join('');\r\n    } else if (type === 'endfor') {\r\n      const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n      if (info.type === 'for') {\r\n        return '</template>';\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: endfor without for');\r\n      }\r\n    } else if (type === 'elseif') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      if (lastInfo.type === 'if' || lastInfo.type === 'elseif') {\r\n        stack.push(currentInfo);\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\"><template data-bind=\"if:${remain}\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      }\r\n    } else if (type === 'else') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      if (lastInfo.type === 'if') {\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      }\r\n    } else {\r\n      raiseError('replaceMustacheToTemplateOrEmbed: unknown type');\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n","import { COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants\";\r\nimport { generateId } from \"../GlobalId/generateId\";\r\nimport { registerTemplate } from \"./registerTemplate\";\r\n\r\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport function replaceTemplateTagWithComment(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number = id\r\n):number {\r\n  // テンプレートの親ノードが存在する場合は、テンプレートをコメントノードに置き換える\r\n  template.parentNode?.replaceChild(document.createComment(`${COMMENT_TEMPLATE_MARK}${id}`), template);\r\n  if (template.namespaceURI === SVG_NS) {\r\n    // SVGタグ内のtemplateタグを想定\r\n    const newTemplate = document.createElement(\"template\");\r\n    for(let childNode of Array.from(template.childNodes)) {\r\n      newTemplate.content.appendChild(childNode);\r\n    }\r\n    const bindText = template.getAttribute(DATA_BIND_ATTRIBUTE);\r\n    newTemplate.setAttribute(DATA_BIND_ATTRIBUTE, bindText ?? \"\");\r\n    template = newTemplate;\r\n  }\r\n  template.content.querySelectorAll(\"template\").forEach(template => {\r\n    replaceTemplateTagWithComment(generateId(), template, rootId);\r\n  });\r\n  registerTemplate(id, template, rootId);\r\n  return id;\r\n}\r\n","import { replaceMustacheWithTemplateTag } from \"./replaceMustacheWithTemplateTag\";\r\nimport { replaceTemplateTagWithComment } from \"./replaceTemplateTagWithComment\";\r\n\r\nexport function registerHtml(id: number, html:string) {\r\n  const template = document.createElement(\"template\");\r\n  template.dataset.id = id.toString();\r\n  template.innerHTML = replaceMustacheWithTemplateTag(html);\r\n  replaceTemplateTagWithComment(id, template);\r\n}","import { inputBuiltinFilters, outputBuiltinFilters } from \"../Filter/builtinFilters\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { generateId } from \"../GlobalId/generateId\";\r\nimport { getStateClassById, registerStateClass } from \"../StateClass/registerStateClass\";\r\nimport { getStyleSheetById } from \"../StyleSheet/registerStyleSheet\";\r\nimport { registerCss } from \"../StyleSheet/regsiterCss\";\r\nimport { createComponentEngine } from \"../ComponentEngine/ComponentEngine\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { registerHtml } from \"../Template/registerHtml\";\r\nimport { getTemplateById } from \"../Template/registerTemplate\";\r\nimport { getBaseClass } from \"./getBaseClass\";\r\nimport { getComponentConfig } from \"./getComponentConfig\";\r\nimport { IComponent, IUserComponentData, IUserConfig, StructiveComponentClass, StructiveComponent } from \"./types\";\r\nimport { getListPathsSetById, getPathsSetById } from \"../BindingBuilder/registerDataBindAttributes\";\r\nimport { IStructiveState, IStructiveStaticState } from \"../StateClass/types\";\r\n\r\nfunction findStructiveParent(el:StructiveComponent): IComponent | null {\r\n  let current = el.parentNode;\r\n  while (current) {\r\n    if ((current as StructiveComponent).state && (current as StructiveComponent).isStructive) {\r\n      return current as StructiveComponent;\r\n    }\r\n    current = current.parentNode;\r\n    if (current instanceof ShadowRoot) {\r\n      if (current.host && (current.host as StructiveComponent).state && (current.host as StructiveComponent).isStructive) {\r\n        return current.host as StructiveComponent;\r\n      }\r\n      current = current.host;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function createComponentClass(componentData: IUserComponentData): StructiveComponentClass {\r\n  const config = (componentData.stateClass.$config ?? {})as IUserConfig;\r\n  const componentConfig = getComponentConfig(config);\r\n  const id = generateId();\r\n  const { html, css, stateClass } = componentData;\r\n  const inputFilters:FilterWithOptions = Object.assign({}, inputBuiltinFilters);\r\n  const outputFilters:FilterWithOptions = Object.assign({}, outputBuiltinFilters);\r\n  stateClass.$isStructive = true;\r\n  registerHtml(id, html);\r\n  registerCss(id, css);\r\n  registerStateClass(id, stateClass);\r\n  const baseClass = getBaseClass(componentConfig.extends);\r\n  const extendTagName = componentConfig.extends;\r\n  return class extends baseClass implements IComponent {\r\n    #engine: IComponentEngine;\r\n\r\n    constructor() {\r\n      super();\r\n      this.#engine = createComponentEngine(componentConfig, this as StructiveComponent);\r\n    }\r\n\r\n    connectedCallback() {\r\n      this.#engine.connectedCallback();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n      this.#engine.disconnectedCallback();\r\n    }\r\n\r\n    #parentStructiveComponent: IComponent | null | undefined;\r\n    get parentStructiveComponent(): IComponent | null {\r\n      if (typeof this.#parentStructiveComponent === \"undefined\") {\r\n        this.#parentStructiveComponent = findStructiveParent(this as StructiveComponent);\r\n      }\r\n      return this.#parentStructiveComponent;\r\n    }\r\n\r\n    get state(): IStructiveState {\r\n      return this.#engine.state as IStructiveState;\r\n    }\r\n\r\n    get isStructive(): boolean {\r\n      return (this.state.constructor as IStructiveStaticState).$isStructive ?? false;\r\n    }\r\n\r\n    static define(tagName:string) {\r\n      if (extendTagName) {\r\n        customElements.define(tagName, this, { extends: extendTagName });\r\n      } else {\r\n        customElements.define(tagName, this);\r\n      }\r\n    }\r\n\r\n    static get id():number {\r\n      return id;\r\n    }\r\n    static #html:string = html;\r\n    static get html():string {\r\n      return this.#html;\r\n    }\r\n    static set html(value:string) {\r\n      this.#html = value;\r\n      registerHtml(this.id, value);\r\n      this.#template = null;\r\n    }\r\n\r\n    static #css:string = css;\r\n    static get css() {\r\n      return this.#css;\r\n    }\r\n    static set css(value:string) {\r\n      this.#css = value;\r\n      registerCss(this.id, value);\r\n      this.#styleSheet = null;\r\n    }\r\n    static #template: HTMLTemplateElement | null = null;\r\n    static get template():HTMLTemplateElement {\r\n      if (!this.#template) {\r\n        this.#template = getTemplateById(this.id);\r\n      }\r\n      return this.#template;\r\n    }\r\n    static #styleSheet: CSSStyleSheet | null = null;\r\n    static get styleSheet():CSSStyleSheet {\r\n      if (!this.#styleSheet) {\r\n        this.#styleSheet = getStyleSheetById(this.id);\r\n      }\r\n      return this.#styleSheet;\r\n    }\r\n    static #stateClass: IStructiveState | null = null;\r\n    static get stateClass():IStructiveState {\r\n      if (!this.#stateClass) {\r\n        this.#stateClass = getStateClassById(this.id) as IStructiveState;\r\n      }\r\n      return this.#stateClass;\r\n    }\r\n    static #inputFilters:FilterWithOptions = inputFilters;\r\n    static get inputFilters():FilterWithOptions {\r\n      return this.#inputFilters;\r\n    }\r\n    static #outputFilters:FilterWithOptions = outputFilters;\r\n    static get outputFilters():FilterWithOptions {\r\n      return this.#outputFilters;\r\n    }\r\n    static get listPaths(): Set<string> {\r\n      return getListPathsSetById(this.id);\r\n    }\r\n    static get paths(): Set<string> {\r\n      return getPathsSetById(this.id);\r\n    }\r\n    static #trackedGetters: Set<string> | null = null;\r\n    static get trackedGetters(): Set<string> {\r\n      if(this.#trackedGetters === null) {\r\n        this.#trackedGetters = new Set<string>();\r\n        let currentProto = this.stateClass.prototype;\r\n        while (currentProto && currentProto !== Object.prototype) {\r\n          const trackedGetters = Object.getOwnPropertyDescriptors(currentProto);\r\n          if (trackedGetters) {\r\n            for (const [key, desc] of Object.entries(trackedGetters)) {\r\n              if ((desc as PropertyDescriptor).get) {\r\n                this.#trackedGetters.add(key);\r\n              }\r\n            }\r\n          }\r\n          currentProto = Object.getPrototypeOf(currentProto);\r\n        }\r\n      }\r\n      return this.#trackedGetters;\r\n\r\n    }\r\n  } as StructiveComponentClass;\r\n}\r\n","import { getGlobalConfig } from \"./getGlobalConfig\";\r\nimport { IUserConfig, IComponentConfig } from \"./types\";\r\n\r\nexport function getComponentConfig(userConfig: IUserConfig): IComponentConfig {\r\n  const globalConfig = getGlobalConfig();\r\n  return {\r\n    enableShadowDom: userConfig.enableShadowDom ?? globalConfig.enableShadowDom,\r\n    extends        : userConfig.extends ?? null,\r\n  };\r\n}","import { Constructor } from \"./types\";\r\n\r\nexport function getBaseClass(extendTagName: string | null):Constructor<HTMLElement> {\r\n  return extendTagName ? (document.createElement(extendTagName).constructor as Constructor<HTMLElement>) : HTMLElement;\r\n}","import { IStructiveState } from \"../StateClass/types\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nfunction escapeEmbed(html: string): string {\r\n  return html.replaceAll(/\\{\\{([^\\}]+)\\}\\}/g, (match, expr) => {\r\n    return `<!--{{${expr}}}-->`;\r\n  });\r\n}\r\n\r\nfunction unescapeEmbed(html:string):string {\r\n  return html.replaceAll(/<!--\\{\\{([^\\}]+)\\}\\}-->/g, (match, expr) => {\r\n    return `{{${expr}}}`;\r\n  });\r\n}\r\n\r\nexport async function createSingleFileComponent(text: string): Promise<IUserComponentData> {\r\n  const template = document.createElement(\"template\");\r\n  template.innerHTML = escapeEmbed(text);\r\n\r\n  const html = template.content.querySelector(\"template\");\r\n  html?.remove();\r\n\r\n  const script = template.content.querySelector(\"script\");\r\n  const scriptModule = script ? await import(\"data:text/javascript;charset=utf-8,\" + script.text) : {};\r\n  script?.remove();\r\n\r\n  const style = template.content.querySelector(\"style\");\r\n  style?.remove();\r\n\r\n  const stateClass = (scriptModule.default ?? class {}) as IStructiveState;\r\n  \r\n  return {\r\n    text,\r\n    html      : unescapeEmbed(html?.innerHTML ?? \"\").trim(),\r\n    css       : style?.textContent ?? \"\",\r\n    stateClass,\r\n  }\r\n}","import { createSingleFileComponent } from \"./createSingleFileComponent\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nexport async function loadSingleFileComponent(path: string): Promise<IUserComponentData> {\r\n  const response = await fetch(import.meta.resolve(path));\r\n  const text = await response.text();\r\n  return createSingleFileComponent(text);\r\n}\r\n","import { entryRoute } from \"../Router/Router\";\r\nimport { createComponentClass } from \"./createComponentClass\";\r\nimport { config } from \"./getGlobalConfig\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent\";\r\nimport { registerComponentClass } from \"./registerComponentClass\";\r\nimport { SingleFileComponents } from \"./types\";\r\n\r\nexport async function registerSingleFileComponents(singleFileComponents:SingleFileComponents):Promise<void> {\r\n  const promises = Promise.all(Object.entries(singleFileComponents).map(async ([tagName, path]) => {\r\n    if (config.enableRouter) {\r\n      entryRoute(tagName, path); // routing\r\n    }\r\n    const componentData = await loadSingleFileComponent(path);\r\n    const componentClass = createComponentClass(componentData);\r\n    registerComponentClass(tagName, componentClass);\r\n  }));\r\n  await promises;\r\n}","import { StructiveComponentClass } from \"./types\";\r\n\r\nexport function registerComponentClass(tagName: string, componentClass: StructiveComponentClass) {\r\n  componentClass.define(tagName);\r\n}","import { raiseError } from \"../utils\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst SLOT_KEY = \"router\";\r\nconst DEFAULT_LAYOUT = `<slot name=\"${SLOT_KEY}\"></slot>`;\r\n\r\nexport class MainWrapper extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n    if (config.enableShadowDom) {\r\n      this.attachShadow({ mode: 'open' });\r\n    }\r\n  }\r\n\r\n  async connetctedCallback() {\r\n    await this.loadLayout();\r\n    this.render();\r\n  }\r\n\r\n  get root(): ShadowRoot | HTMLElement {\r\n    return this.shadowRoot ?? this;\r\n  }\r\n\r\n  async loadLayout() {\r\n    if (config.layoutPath) {\r\n      const response = await fetch(config.layoutPath);\r\n      if (response.ok) {\r\n        const layoutText = await response.text();\r\n        const workTemplate = document.createElement(\"template\");\r\n        workTemplate.innerHTML = layoutText;\r\n      \r\n        const template = workTemplate.content.querySelector(\"template\");\r\n        const style = workTemplate.content.querySelector(\"style\") as CSSStyleSheet | null;\r\n      \r\n        this.root.appendChild(template?.content ?? document.createDocumentFragment());\r\n        if (style) {\r\n          const shadowRootOrDocument = this.shadowRoot ?? document;\r\n          const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n          if (!styleSheets.includes(style)) {\r\n            shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, style];\r\n          }\r\n        }\r\n      } else {\r\n        raiseError(`Failed to load layout from ${config.layoutPath}`);\r\n      }\r\n    } else {\r\n      this.root.innerHTML = DEFAULT_LAYOUT;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // add router\r\n    if (config.enableRouter) {\r\n      const router = document.createElement(config.routerTagName);\r\n      router.setAttribute('slot', SLOT_KEY);\r\n      this.root.appendChild(router);\r\n    }\r\n  }\r\n}\r\n","import { registerSingleFileComponents } from \"./WebComponents/registerSingleFIleComponents\";\r\nimport { bootstrap } from \"./bootstrap\";\r\nimport { config as _config } from \"./WebComponents/getGlobalConfig\";\r\nimport { IConfig } from \"./WebComponents/types\";\r\n\r\nexport const config: IConfig = _config;\r\n\r\nlet initialized = false;\r\nexport async function defineComponents(singleFileComponents: Record<string, string>):Promise<void> {\r\n  await registerSingleFileComponents(singleFileComponents);\r\n  if (config.autoInit) {\r\n    bootstrapStructive();\r\n  }\r\n}\r\n\r\nexport function bootstrapStructive() {\r\n  if (!initialized) {\r\n    bootstrap();\r\n    initialized = true;\r\n  }\r\n}\r\n\r\n","import { MainWrapper } from \"./MainWrapper/MainWrapper\";\r\nimport { Router } from \"./Router/Router\";\r\nimport { config } from \"./WebComponents/getGlobalConfig\";\r\n\r\nexport function bootstrap(): void {\r\n  if (config.enableRouter) {\r\n    customElements.define(config.routerTagName, Router);\r\n  }\r\n\r\n  if (config.enableMainWrapper) {\r\n    customElements.define(config.mainTagName, MainWrapper);\r\n    if (config.autoInsertMainWrapper) {\r\n      const mainWrapper = document.createElement(config.mainTagName);\r\n      document.body.appendChild(mainWrapper);\r\n    }\r\n  }\r\n}"],"names":["ROUTE_PATH_PREFIX","routeMap","Router","HTMLElement","_popstateHandler","constructor","super","this","innerHTML","popstateHandler","bind","connectedCallback","window","addEventListener","dispatchEvent","Event","disconnectedCallback","removeEventListener","render","routePath","location","pathname","tagName","params","path","tag","Object","entries","regex","RegExp","replace","test","matches","match","forEach","key","index","substring","customElement","document","createElement","setAttribute","JSON","stringify","appendChild","messageElement","textContent","globalConfig","debug","locale","enableShadowDom","enableMainWrapper","enableRouter","autoInsertMainWrapper","autoInit","mainTagName","routerTagName","layoutPath","getGlobalConfig","config","optionsRequired","fnName","Error","optionMustBeNumber","valueMustBeNumber","valueMustBeDate","builtinFilters","eq","options","opt","optValue","Number","isNaN","value","ne","not","valueMustBeBoolean","lt","le","gt","ge","inc","dec","mul","div","fix","toFixed","toLocaleString","uc","toString","toUpperCase","lc","toLowerCase","cap","v","length","charAt","slice","trim","substr","opt1","opt1Value","opt2","opt2Value","pad","padStart","rep","repeat","rev","split","reverse","join","int","parseInt","float","parseFloat","round","Math","pow","floor","ceil","percent","date","Date","toLocaleDateString","time","toLocaleTimeString","datetime","ymd","year","getFullYear","month","getMonth","day","getDate","falsy","truthy","defaults","boolean","Boolean","number","string","String","null","outputBuiltinFilters","inputBuiltinFilters","id","generateId","raiseError","message","stateClassById","styleSheetById","registerCss","css","styleSheet","CSSStyleSheet","replaceSync","registerStyleSheet","textToFilter","filters","text","filter","name","cache","Map","createFilters","texts","result","get","i","push","set","BindingNode","binding","node","event","bindContents","Set","init","update","assignValue","bindingState","filteredValue","updateElements","listIndexes","values","isSelectElement","HTMLSelectElement","BindingNodeAttribute","subName","BindingNodeCheckbox","Array","isArray","element","checked","map","_val","includes","BindingNodeClassList","className","BindingNodeClassName","classList","add","remove","BindingNodeEvent","e","handler","engine","stateProxy","updater","loopContext","parentBindContent","currentLoopContext","indexes","serialize","context","listIndex","preventDefault","addProcess","async","typeOfValue","setLoopContext","Reflect","apply","createBindingNodeEvent","filterTexts","filterFns","DATA_BIND_ATTRIBUTE","COMMENT_EMBED_MARK","COMMENT_TEMPLATE_MARK","BindingNodeBlock","BindingNodeIf","bindContent","trueBindContents","falseBindContents","createBindContent","parentNode","mountBefore","nextSibling","unmount","BindingNodeFor","bindContentsSet","bindContentByListIndex","WeakMap","bindContentPool","bindContentLastIndex","assignListIndex","pattern","deleteBindContent","clearListIndex","poolLength","listIndexesSet","getListIndexesSet","info","newBindContensSet","lastBindContent","lastNode","getLastNode","mountAfter","firstChildNode","removeBindContentsSet","difference","oldListValues","getList","currentBindContents","from","targetBindContents","lastChildNode","oldValue","targetIndex","indexOf","prevBindContent","saveList","createBindingNodeFor","DEFAULT_PROPERTY","defaultPropertyByElementType","Bt","$t","button","_cache","getDefaultPropertyByNodeType","HTMLTextAreaElement","HTMLOptionElement","HTMLButtonElement","HTMLAnchorElement","HTMLFormElement","HTMLInputElement","type","SVGElement","undefined","Text","Template","symbolName","GetByRefSymbol","Symbol","for","SetByRefSymbol","SetCacheableSymbol","ConnectedCallbackSymbol","DisconnectedCallbackSymbol","ResolveSymbol","GetAllSymbol","defaultEventByName","selected","BindingNodeProperty","defaultName","nodeType","getDefaultName","eventName","createBindingNodeProperty","BindingNodeRadio","BindingNodeStyle","style","setProperty","nodePropertyConstructorByNameByIsComment","Rt","Pt","nodePropertyConstructorByFirstName","kt","getBindingNodeCreator","propertyName","isComment","Comment","isElement","Element","fn","bindingNodeCreatorByName","nameElements","bindingNodeCreatorByFirstName","startsWith","_getBindingNodeCreator","StructuredPathInfo","static","pathSegments","lastSegment","cumulativePaths","cumulativeInfos","wildcardPaths","wildcardInfos","wildcardParentPaths","wildcardParentInfos","lastWildcardPath","lastWildcardInfo","parentPath","parentInfo","wildcardCount","getPattern","_pattern","getStructuredPathInfo","currentPatternPath","prevPatternPath","reservedWords","structuredPath","has","BindingState","listIndexRef","state","deref","find","saveBinding","BindingStateIndex","indexNumber","loopContexts","bindings","bindingsByListIndex","ereg","getBindingStateCreator","createBindingStateIndex","createBindingState","getTextByNodeType","getAttribute","Mt","getTemplateById","nodeTypeByNodeKey","getNodeType","nodeKey","createNodeKey","getNodeTypeByNode","s","re","decode","m","exec","decodeURIComponent","parseFilter","parseProperty","property","parseExpressions","expression","bindExpression","nodePropertyText","statePropertyText","nodeProperty","inputFilterTexts","stateProperty","outputFilterTexts","parseExpression","removeAttributeFromElement","removeAttribute","removeAttributeByNodeType","replaceTextNodeFn","textNode","createTextNode","replaceChild","DataBindAttributes","nodePath","bindTexts","creatorByText","bindText","getDataBindText","removeDataBindAttribute","replaceTextNodeFromComment","routeIndexes","childNodes","getAbsoluteNodePath","parseBindText","creator","createBindingNode","getNodesHavingDataBind","root","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","acceptNode","hasAttribute","FILTER_ACCEPT","FILTER_SKIP","isCommentNode","nextNode","currentNode","listDataBindAttributesById","listPathsSetById","pathsSetById","getDataBindAttributesFromTemplate","content","createDataBindAttributes","templateById","registerTemplate","template","rootId","Node","TEXT_NODE","nodeValue","removeChild","dataBindAttributes","paths","listPaths","attribute","j","registerDataBindAttributes","Binding","bindingNode","inputFilters","outputFilters","createBinding","LoopContext","WeakRef","parentLoopContext","currentBinding","parentBinding","walk","callback","results","unshift","bindingsWithSelectElement","createBindings","attributes","getDataBindAttributesById","reduce","BindContent","fragment","isMounted","lastBinding","size","at","importNode","createContent","createLoopContext","mount","beforeNode","insertBefore","afterNode","ListIndex","parentListIndex","position","truncate","reverseIterator","iterator","next","getStatePropertyRefId","listIndexMaxId","_getByRef","target","receiver","lastTrackingStack","lastPattern","addDependentProp","refId","cacheable","setStatePropertyRef","parentValue","getByRef","trackedGetters","trackingStack","pop","setTracking","prop","methodGetByRef","setByRef","addUpdatedStatePropertyRefValue","methodSetByRef","setCacheable","methodSetChargeable","call","resolve","wildcardParentPattern","getAll","_resolve","wildcardPattern","getContextListIndex","walkWildcardPattern","wildardIndexPos","indexPos","parentIndexes","listIndexSet","concat","resultIndexes","resultValues","ResolvedPathInfo","elements","wildcardType","wildcardIndexes","tmpPatternElements","incompleteCount","completeCount","lastPath","getResolvedPathInfo","getListIndex","matchIndexPropertyName","StateHandler","callableApi","apiGetByRef","apiSetByRef","apiSetCacheable","ref","getLastStatePropertyRef","resolvedInfo","trapGet","trapSet","BLANK_LISTINDEXES_SET","buildListIndexTreeSub","listInfos","oldListIndexesSet","oldListIndexesByItem","groupBy","newListIndexesSet","item","oldListIndexes","curListIndex","shift","addUpdatedListIndex","saveListIndexesSet","searchPath","subListIndex","subValue","buildListIndexTree","listInfoSet","extractListIndexes","_extractListIndexes","pos","currentListIndex","resultListIndexes","wildcardParentInfo","loopListIndex","_collectAffectedGetters","refInfo","refListIndex","resultPathInfos","resultRefs","dependentPathInfos","dependentTree","dependentPathInfo","dependentListIndex","updateList","extractlistIndexes","collectAffectedGetters","updateRefs","Updater","processList","updatedProperties","updatedValues","process","waitForQueueEntry","terminate","waitForMainLoopTerminate","Promise","withResolvers","main","waitForComponentInit","promise","performance","mark","updatingCount","measure","console","log","getEntriesByType","clearMeasures","clearMarks","error","updateState","rebuild","retArrayElementBindings","retBindings","processedListIndexes","processedPropertyRefIdsSet","updatedProiperties","updatedRefs","arrayPropertyRefs","arrayElementPropertyRefs","clear","statePropertyRefId","statePropertyRef","elementInfoSet","getBindings","builtStatePropertyRefIds","arrayPropertyRef","parentRefByRefId","statePropertyRefByStatePropertyRefId","parentRefId","parentRefIdKey","refs","parentRef","arrayElementBinding","updatingRefs","updatingRef","arrayElementBindings","me","Je","attachShadow","extends","canHaveShadowRoot","mode","adoptedStyleSheets","shadowRootOrDocument","ShadowRoot","getParentShadowRoot","styleSheets","ComponentEngine","stateClass","baseClass","owner","waitForInitialize","stackStructuredPathInfo","stackListIndex","componentClass","Proxy","createUpdater","checkDependentProp","listPath","shadowRoot","asyncSetStatePropertyRef","lastRef","getLoopContexts","saveInfoByListIndexByResolvedPathInfoId","saveInfoByStructuredPathId","createSaveInfo","list","getSaveInfoByStatePropertyRef","saveInfo","saveInfoByListIndex","dependents","MUSTACHE_REGEXP","MUSTACHE_TYPES","replaceTemplateTagWithComment","createComment","namespaceURI","newTemplate","childNode","querySelectorAll","registerHtml","html","dataset","stack","replaceAll","expr","remain","currentInfo","endTags","lastInfo","replaceMustacheWithTemplateTag","createComponentClass","componentData","componentConfig","userConfig","Qe","getComponentConfig","$config","hn","dn","Xe","assign","$isStructive","registerStateClass","extendTagName","getBaseClass","component","createComponentEngine","parentStructiveComponent","el","current","isStructive","host","findStructiveParent","define","customElements","getStyleSheetById","getStateClassById","getListPathsSetById","getPathsSetById","currentProto","prototype","getOwnPropertyDescriptors","desc","getPrototypeOf","unescapeEmbed","loadSingleFileComponent","response","fetch","escapeEmbed","querySelector","script","scriptModule","import","default","createSingleFileComponent","registerSingleFileComponents","singleFileComponents","promises","all","entryRoute","registerComponentClass","SLOT_KEY","DEFAULT_LAYOUT","MainWrapper","connetctedCallback","loadLayout","ok","layoutText","workTemplate","createDocumentFragment","router","_config","initialized","defineComponents","bootstrapStructive","mainWrapper","body","bootstrap"],"mappings":"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"}
{"version":3,"file":"structive.js","sources":["../src/Router/Router.ts","../src/WebComponents/getGlobalConfig.ts","../src/Filter/errorMessages.ts","../src/Filter/builtinFilters.ts","../src/GlobalId/generateId.ts","../src/utils.ts","../src/StateClass/registerStateClass.ts","../src/StyleSheet/registerStyleSheet.ts","../src/StyleSheet/regsiterCss.ts","../src/BindingBuilder/resolveNodeFromPath.ts","../src/BindingBuilder/getAbsoluteNodePath.ts","../src/BindingBuilder/createFilters.ts","../src/DataBinding/BindingNode/BindingNode.ts","../src/DataBinding/BindingNode/BindingNodeAttribute.ts","../src/DataBinding/BindingNode/BindingNodeCheckbox.ts","../src/DataBinding/BindingNode/BindingNodeClassList.ts","../src/DataBinding/BindingNode/BindingNodeClassName.ts","../src/StateClass/symbols.ts","../src/DataBinding/BindingNode/BindingNodeEvent.ts","../src/constants.ts","../src/DataBinding/BindingNode/BindingNodeBlock.ts","../src/DataBinding/BindingNode/BindingNodeIf.ts","../src/DataBinding/BindingNode/BindingNodeFor.ts","../src/BindingBuilder/getDefaultName.ts","../src/DataBinding/BindingNode/BindingNodeProperty.ts","../src/DataBinding/BindingNode/BindingNodeRadio.ts","../src/DataBinding/BindingNode/BindingNodeStyle.ts","../src/ComponentState/symbols.ts","../src/DataBinding/BindingNode/BindingNodeComponent.ts","../src/BindingBuilder/getBindingNodeCreator.ts","../src/StateProperty/getStructuredPathInfo.ts","../src/DataBinding/BindingState/BindingState.ts","../src/DataBinding/BindingState/BindingStateIndex.ts","../src/BindingBuilder/getBindingStateCreator.ts","../src/BindingBuilder/getDataBindText.ts","../src/BindingBuilder/getNodeType.ts","../src/BindingBuilder/parseBindText.ts","../src/BindingBuilder/removeDataBindAttribute.ts","../src/BindingBuilder/replaceTextNodeFromComment.ts","../src/BindingBuilder/createDataBindAttributes.ts","../src/BindingBuilder/getNodesHavingDataBind.ts","../src/BindingBuilder/registerDataBindAttributes.ts","../src/Template/removeEmptyTextNodes.ts","../src/Template/registerTemplate.ts","../src/DataBinding/Binding.ts","../src/LoopContext/createLoopContext.ts","../src/Updater/render.ts","../src/DataBinding/BindContent.ts","../src/DependencyWalker/createDependencyEdge.ts","../src/DependencyWalker/createDependencyWalker.ts","../src/ListIndex/createListIndex.ts","../src/ListWalker/listWalker.ts","../src/StatePropertyRef/getStatePropertyRef.ts","../src/Updater/restructListIndex.ts","../src/Updater/updater.ts","../src/ComponentEngine/canHaveShadowRoot.ts","../src/ComponentEngine/attachShadow.ts","../src/StateClass/buildListIndexTree.ts","../src/StateClass/methods/setTracking.ts","../src/StateClass/methods/getByRef.ts","../src/StateClass/apis/getByRef.ts","../src/StateClass/methods/setCacheable.ts","../src/StateClass/apis/setCacheable.ts","../src/StateClass/apis/connectedCallback.ts","../src/StateClass/apis/disconnectedCallback.ts","../src/StateClass/methods/setByRef.ts","../src/StateClass/apis/resolve.ts","../src/StateClass/apis/getAll.ts","../src/StateProperty/getResolvedPathInfo.ts","../src/StateClass/getListIndex.ts","../src/StateClass/traps/get.ts","../src/StateClass/methods/setStatePropertyRef.ts","../src/StateClass/apis/setStatePropertyRef.ts","../src/StateClass/methods/asyncSetStatePropertyRef.ts","../src/StateClass/methods/setLoopContext.ts","../src/StateClass/apis/setLoopContext.ts","../src/StateClass/methods/getLastStatePropertyRef.ts","../src/StateClass/apis/getLastStatePropertyRef.ts","../src/StateClass/methods/getContextListIndex.ts","../src/StateClass/apis/getContextListIndex.ts","../src/StateClass/createReadonlyStateProxy.ts","../src/StateClass/apis/setByRef.ts","../src/StateClass/traps/set.ts","../src/StateClass/createWritableStateProxy.ts","../src/ComponentEngine/ComponentEngine.ts","../src/Template/replaceMustacheWithTemplateTag.ts","../src/Template/replaceTemplateTagWithComment.ts","../src/Template/registerHtml.ts","../src/WebComponents/getBaseClass.ts","../src/WebComponents/getComponentConfig.ts","../src/ComponentState/createComponentState.ts","../src/StateProperty/createAccessorFunctions.ts","../src/WebComponents/createComponentClass.ts","../src/WebComponents/createSingleFileComponent.ts","../src/WebComponents/loadSingleFileComponent.ts","../src/WebComponents/registerComponentClass.ts","../src/WebComponents/registerSingleFIleComponents.ts","../src/MainWrapper/MainWrapper.ts","../src/WebComponents/loadImportmap.ts","../src/WebComponents/loadFromImportMap.ts","../src/bootstrap.ts","../src/exports.ts"],"sourcesContent":["/**\r\n * Router.ts\r\n *\r\n * シングルページアプリケーション（SPA）向けのカスタムエレメント Router の実装です。\r\n *\r\n * 主な役割:\r\n * - ルート定義（entryRoute）に基づき、URLパスに応じてカスタム要素を動的に生成・表示\r\n * - pushState/popstateイベントを利用した履歴管理とルーティング制御\r\n * - ルートパラメータの抽出とカスタム要素への受け渡し\r\n * - 404ページ（未定義ルート時）の表示\r\n *\r\n * 設計ポイント:\r\n * - entryRouteでルートパスとカスタム要素タグ名のペアを登録\r\n * - popstateイベントでURL変更時に自動で再描画\r\n * - ルートパスのパラメータ（:id等）も正規表現で抽出し、data-state属性で渡す\r\n * - getRouterでグローバルなRouterインスタンスを取得可能\r\n */\r\nimport { IRouter } from \"./types\";\r\n\r\nconst DEFAULT_ROUTE_PATH = '/'; // Default route path\r\nconst ROUTE_PATH_PREFIX = 'routes:'; // Prefix for route paths\r\n/**\r\n * example:\r\n * ```ts\r\n * entryRoute('my-view', '/my-view/:id');\r\n */\r\nconst routeEntries: Array<[string, string]> = [];\r\n\r\nlet globalRouter : Router | null = null;\r\n\r\nexport class Router extends HTMLElement implements IRouter {\r\n  _popstateHandler: (event: PopStateEvent) => void;\r\n  constructor() {\r\n    super();\r\n    this._popstateHandler = this.popstateHandler.bind(this);\r\n  }\r\n\r\n  connectedCallback() {\r\n    globalRouter = this;\r\n    this.innerHTML = '<slot name=\"content\"></slot>';\r\n    window.addEventListener('popstate', this._popstateHandler);\r\n    window.dispatchEvent(new Event(\"popstate\")); // Dispatch popstate event to trigger the initial render\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('popstate', this._popstateHandler);\r\n    globalRouter = null;\r\n  }\r\n\r\n  popstateHandler(event: PopStateEvent) {\r\n    event.preventDefault();\r\n    this.render();\r\n  }\r\n\r\n  navigate(to: string) {\r\n    history.pushState({}, '', to);\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    // スロットコンテントをクリア\r\n    const slotChildren = Array.from(this.childNodes).filter(\r\n      n => (n as HTMLElement).getAttribute?.('slot') === 'content'\r\n    );\r\n    slotChildren.forEach(n => this.removeChild(n));\r\n\r\n    const routePath = window.location.pathname || DEFAULT_ROUTE_PATH;\r\n    let tagName: string | undefined = undefined;\r\n    let params: Record<string, string> = {};\r\n    // Check if the routePath matches any of the defined routes\r\n    for (const [path, tag] of routeEntries) {\r\n      const regex = new RegExp(path.replace(/:[^\\s/]+/g, '([^/]+)'));\r\n      if (regex.test(routePath)) {\r\n        tagName = tag;\r\n        // Extract the parameters from the routePath\r\n        const matches = routePath.match(regex);\r\n        if (matches) {\r\n          const keys = path.match(/:[^\\s/]+/g) || [];\r\n          keys.forEach((key, index) => {\r\n            params[key.substring(1)] = matches[index + 1]; // +1 to skip the full match\r\n          });\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (tagName) {\r\n      // If a route matches, create the custom element and set its state\r\n      // Create the custom element with the tag name\r\n      // project the custom element into the router slot\r\n      const customElement = document.createElement(tagName) as HTMLElement;\r\n      customElement.setAttribute('data-state', JSON.stringify(params));\r\n      customElement.setAttribute('slot', 'content');\r\n      this.appendChild(customElement);\r\n    } else {\r\n      // If no route matches, show 404 content\r\n      const messageElement = document.createElement('h1') as HTMLElement;\r\n      messageElement.setAttribute('slot', 'content');\r\n      messageElement.textContent = '404 Not Found';\r\n      this.appendChild(messageElement);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function entryRoute(tagName: string, routePath: string): void {\r\n  if (routePath.startsWith(ROUTE_PATH_PREFIX)) {\r\n    routePath = routePath.substring(ROUTE_PATH_PREFIX.length); // Remove 'routes:' prefix\r\n  }\r\n  routeEntries.push([routePath, tagName]);\r\n}\r\n\r\nexport function getRouter(): Router | null {\r\n  return globalRouter;\r\n}\r\n\r\n","/**\r\n * getGlobalConfig.ts\r\n *\r\n * Structive全体で利用するグローバル設定（IConfig）を定義・取得するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - globalConfig: デフォルトのグローバル設定値（debug, locale, enableShadowDom等）を定義\r\n * - getGlobalConfig: グローバル設定オブジェクトを返す関数\r\n * - config: getGlobalConfig()のエイリアスとして即時取得用にエクスポート\r\n *\r\n * 設計ポイント:\r\n * - コンポーネント全体で共通利用する設定値を一元管理\r\n * - デフォルト値を明示し、拡張やカスタマイズにも対応しやすい設計\r\n */\r\nimport { IConfig } from \"./types\";\r\n\r\nconst globalConfig: IConfig = {\r\n  debug                : false,\r\n  locale               : \"en-US\", // The locale of the component, ex. \"en-US\", default is \"en-US\"\r\n  enableShadowDom      : true,\r\n  enableMainWrapper    : true, // Whether to use the main wrapper or not\r\n  enableRouter         : true, // Whether to use the router or not\r\n  autoInsertMainWrapper: false, // Whether to automatically insert the main wrapper or not\r\n  autoInit             : true, // Whether to automatically initialize the component or not\r\n  mainTagName          : \"app-main\", // The tag name of the main wrapper, default is \"app-main\"\r\n  routerTagName        : \"view-router\", // The tag name of the router, default is \"view-router\"\r\n  layoutPath           : \"\", // The path to the layout file, default is \"\"\r\n  autoLoadFromImportMap: false, // Whether to automatically load the component from the import map or not\r\n  optimizeList         : true, // Whether to optimize the list or not\r\n  optimizeListElements : true, // Whether to optimize the list elements or not\r\n  optimizeAccessor     : true, // Whether to optimize the accessors or not\r\n};\r\n\r\n\r\nexport function getGlobalConfig():IConfig {\r\n  return globalConfig;\r\n}\r\n\r\nexport const config = getGlobalConfig();\r\n","/**\r\n * errorMessages.ts\r\n *\r\n * フィルタ関数などで利用するエラーメッセージ生成ユーティリティです。\r\n *\r\n * 主な役割:\r\n * - フィルタのオプションや値の型チェックで条件を満たさない場合に、分かりやすいエラーメッセージを投げる\r\n * - 関数名を引数に取り、どのフィルタでエラーが発生したかを明示\r\n *\r\n * 設計ポイント:\r\n * - optionsRequired: オプションが必須なフィルタで未指定時にエラー\r\n * - optionMustBeNumber: オプション値が数値でない場合にエラー\r\n * - valueMustBeNumber: 値が数値でない場合にエラー\r\n * - valueMustBeBoolean: 値がbooleanでない場合にエラー\r\n * - valueMustBeDate: 値がDateでない場合にエラー\r\n */\r\nexport function optionsRequired(fnName:string): never {\r\n  throw new Error(`${fnName} requires at least one option`);\r\n}\r\n\r\nexport function optionMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number as option`);\r\n}\r\n\r\nexport function valueMustBeNumber(fnName:string): never {\r\n  throw new Error(`${fnName} requires a number value`);\r\n}\r\n\r\nexport function valueMustBeBoolean(fnName:string): never {\r\n  throw new Error(`${fnName} requires a boolean value`);\r\n}\r\n\r\nexport function valueMustBeDate(fnName:string): never {\r\n  throw new Error(`${fnName} requires a date value`);\r\n}","/**\r\n * builtinFilters.ts\r\n *\r\n * Structiveで利用可能な組み込みフィルタ関数群の実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - 数値・文字列・日付・真偽値などの変換・比較・整形・判定用フィルタを提供\r\n * - フィルタ名ごとにオプション付きの関数を定義し、バインディング時に柔軟に利用可能\r\n * - input/output両方のフィルタとして共通利用できる設計\r\n *\r\n * 設計ポイント:\r\n * - eq, ne, lt, gt, inc, fix, locale, uc, lc, cap, trim, slice, pad, int, float, round, date, time, ymd, falsy, truthy, defaults, boolean, number, string, null など多彩なフィルタを網羅\r\n * - オプション値の型チェックやエラーハンドリングも充実\r\n * - FilterWithOptions型でフィルタ関数群を一元管理し、拡張も容易\r\n * - builtinFilterFnでフィルタ名・オプションからフィルタ関数を動的に取得可能\r\n */\r\nimport { getGlobalConfig } from \"../WebComponents/getGlobalConfig.js\";\r\nimport { optionMustBeNumber, optionsRequired, valueMustBeBoolean, valueMustBeDate, valueMustBeNumber } from \"./errorMessages.js\";\r\nimport { FilterWithOptions } from \"./types\";\r\n\r\nconst config = getGlobalConfig();\r\n\r\nconst eq = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('eq');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('eq');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('eq');\r\n    return value === optValue;\r\n  }\r\n}\r\n\r\nconst ne = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ne');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ne');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ne');\r\n    return value !== optValue;\r\n  }\r\n}\r\n\r\nconst not = (options?:string[]) => {\r\n  return (value: any) => {\r\n    if (typeof value !== 'boolean') valueMustBeBoolean('not');\r\n    return !value;\r\n  }\r\n}\r\n\r\nconst lt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('lt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('lt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('lt');\r\n    return value < optValue;\r\n  }\r\n}\r\n\r\nconst le = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('le');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('le');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('le');\r\n    return value <= optValue;\r\n  }\r\n}\r\n\r\nconst gt = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('gt');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('gt');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('gt');\r\n    return value > optValue;\r\n  }\r\n}\r\n\r\nconst ge = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('ge');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('ge');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ge');\r\n    return value >= optValue;\r\n  }\r\n}\r\n\r\nconst inc = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('inc');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('inc');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('inc');\r\n    return value + optValue;\r\n  }\r\n}\r\n\r\nconst dec = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('dec');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('dec');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('dec');\r\n    return value - optValue;\r\n  }\r\n}\r\n\r\nconst mul = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('mul');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('mul');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('mul');\r\n    return value * optValue;\r\n  }\r\n}\r\n\r\nconst div = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('div');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value / optValue;\r\n  }\r\n}\r\n\r\nconst fix = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('div');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('div');\r\n    return value.toFixed(optValue);\r\n  }\r\n}\r\n\r\nconst locale = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('locale');\r\n    return value.toLocaleString(opt);\r\n  }\r\n}\r\n\r\nconst uc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toUpperCase();\r\n  }\r\n}\r\n\r\nconst lc = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().toLowerCase();\r\n  }\r\n}\r\n\r\nconst cap = (options?:string[]) => {\r\n  return (value: any) => {\r\n    const v = value.toString();\r\n    if (v.length === 0) return v;\r\n    if (v.length === 1) return v.toUpperCase();\r\n    return v.charAt(0).toUpperCase() + v.slice(1);\r\n  }\r\n}\r\n\r\nconst trim = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().trim();\r\n  }\r\n}\r\n\r\nconst slice = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('slice');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('slice');\r\n  return (value: any) => {\r\n    return value.toString().slice(optValue);\r\n  }\r\n}\r\n\r\nconst substr = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('substr');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('substr');\r\n  const opt2 = options?.[1] ?? optionsRequired('substr');\r\n  const opt2Value = Number(opt2);\r\n  if (isNaN(opt2Value)) optionMustBeNumber('substr');\r\n  return (value: any) => {\r\n    return value.toString().substr(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst pad = (options?:string[]) => {\r\n  const opt1 = options?.[0] ?? optionsRequired('pad');\r\n  const opt1Value = Number(opt1);\r\n  if (isNaN(opt1Value)) optionMustBeNumber('pad');\r\n  const opt2 = options?.[1] ?? '0';\r\n  const opt2Value = opt2;\r\n  return (value: any) => {\r\n    return value.toString().padStart(opt1Value, opt2Value);\r\n  }\r\n}\r\n\r\nconst rep = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('rep');\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('rep');\r\n  return (value: any) => {\r\n    return value.toString().repeat(optValue);\r\n  }\r\n}\r\n\r\nconst rev = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return value.toString().split('').reverse().join('');\r\n  }\r\n}\r\n\r\nconst int = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseInt(value, 10);\r\n  }\r\n}\r\n\r\nconst float = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return parseFloat(value);\r\n  }\r\n}\r\n\r\nconst round = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('round');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('round');\r\n    return Math.round(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst floor = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('floor');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('floor');\r\n    return Math.floor(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst ceil = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Math.pow(10, Number(opt));\r\n  if (isNaN(optValue)) optionMustBeNumber('ceil');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('ceil');\r\n    return Math.ceil(value * optValue) / optValue;\r\n  }\r\n}\r\n\r\nconst percent = (options?:string[]) => {\r\n  const opt = options?.[0] ?? 0;\r\n  const optValue = Number(opt);\r\n  if (isNaN(optValue)) optionMustBeNumber('percent');\r\n  return (value: any) => {\r\n    if (typeof value !== 'number') valueMustBeNumber('percent');\r\n    return value.toFixed(optValue) + '%';\r\n  }\r\n}\r\n\r\nconst date = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date))  valueMustBeDate('date');\r\n    return value.toLocaleDateString(config.locale);\r\n  }\r\n}\r\n\r\nconst time = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('time');\r\n    return value.toLocaleTimeString(config.locale);\r\n  }\r\n}\r\n\r\nconst datetime = (options?:string[]) => {\r\n  const opt = options?.[0] ?? config.locale;\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('datetime');\r\n    return value.toLocaleString(config.locale);\r\n  }\r\n}\r\n\r\nconst ymd = (options?:string[]) => {\r\n  const opt = options?.[0] ?? '-';\r\n  return (value: any) => {\r\n    if (!(value instanceof Date)) valueMustBeDate('ymd');\r\n    const year = value.getFullYear().toString();\r\n    const month = (value.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = value.getDate().toString().padStart(2, '0');\r\n    return `${year}${opt}${month}${opt}${day}`;\r\n  }\r\n}\r\n\r\nconst falsy = (options?:string[]) => {\r\n  return (value: any) => value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value);\r\n}\r\n\r\nconst truthy = (options?:string[]) => {\r\n  return (value: any) =>value !== false && value !== null && value !== undefined && value !== 0 && value !== '' && !Number.isNaN(value);\r\n}\r\n\r\nconst defaults = (options?:string[]) => {\r\n  const opt = options?.[0] ?? optionsRequired('defaults');\r\n  return (value: any) => {\r\n    if (value === false || value === null || value === undefined || value === 0 || value === '' || Number.isNaN(value)) return opt;\r\n    return value;\r\n  }\r\n}\r\n\r\nconst boolean = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Boolean(value);\r\n  }\r\n}\r\n\r\nconst number = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return Number(value);\r\n  }\r\n}\r\n\r\nconst string = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return String(value);\r\n  }\r\n}\r\n\r\nconst _null = (options?:string[]) => {\r\n  return (value: any) => {\r\n    return (value === \"\") ? null : value;\r\n  } \r\n}\r\n\r\nconst builtinFilters: FilterWithOptions = {\r\n  eq,\r\n  ne,\r\n  not,\r\n  \r\n  lt,\r\n  le,\r\n  gt,\r\n  ge,\r\n\r\n  inc,\r\n  dec,\r\n  mul,\r\n  div,\r\n\r\n  fix,\r\n  locale,\r\n  uc,\r\n  lc,\r\n  cap,\r\n  trim,\r\n  slice,\r\n  substr,\r\n  pad,\r\n  rep,\r\n  rev,\r\n\r\n  int,\r\n  float,\r\n  round,\r\n  floor,\r\n  ceil,\r\n  percent,\r\n\r\n  date,\r\n  time,\r\n  datetime,\r\n  ymd,\r\n\r\n  falsy,\r\n  truthy,\r\n  defaults,\r\n\r\n  boolean,\r\n  number,\r\n  string,\r\n  \"null\": _null,\r\n};\r\n\r\nexport const outputBuiltinFilters = builtinFilters;\r\nexport const inputBuiltinFilters = builtinFilters;\r\n\r\nexport const builtinFilterFn = (name:string, options: string[]) => (filters: FilterWithOptions) => {\r\n  const filter = filters[name];\r\n  if (!filter) throw new Error(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(options);\r\n}\r\n\r\n","\r\nlet id = 0;\r\n\r\nexport function generateId(): number {\r\n  return ++id;\r\n}","\r\nexport function raiseError(message: string): never {\r\n  throw new Error(message);\r\n}\r\n","/**\r\n * registerStateClass.ts\r\n *\r\n * StateClassインスタンスをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - stateClassById: IDをキーにStateClassインスタンスを管理するレコード\r\n * - registerStateClass: 指定IDでStateClassインスタンスを登録\r\n * - getStateClassById: 指定IDのStateClassインスタンスを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - グローバルにStateClassインスタンスを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IStructiveState } from \"./types\";\r\n\r\nconst stateClassById: Record<number,IStructiveState> = {};\r\n\r\nexport function registerStateClass(id: number, stateClass: IStructiveState) {\r\n  stateClassById[id] = stateClass;\r\n}\r\n\r\nexport function getStateClassById(id: number): IStructiveState {\r\n  return stateClassById[id] ?? raiseError(`getStateClassById: stateClass not found: ${id}`);\r\n}\r\n","/**\r\n * registerStyleSheet.ts\r\n *\r\n * CSSStyleSheetインスタンスをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - styleSheetById: IDをキーにCSSStyleSheetインスタンスを管理するレコード\r\n * - registerStyleSheet: 指定IDでCSSStyleSheetインスタンスを登録\r\n * - getStyleSheetById: 指定IDのCSSStyleSheetインスタンスを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - グローバルにCSSStyleSheetインスタンスを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nconst styleSheetById: Record<number,CSSStyleSheet> = {};\r\n\r\nexport function registerStyleSheet(id: number, css: CSSStyleSheet) {\r\n  styleSheetById[id] = css;\r\n}\r\n\r\nexport function getStyleSheetById(id: number): CSSStyleSheet {\r\n  return styleSheetById[id] ?? raiseError(`getStyleSheetById: stylesheet not found: ${id}`);\r\n}","/**\r\n * regsiterCss.ts\r\n *\r\n * CSS文字列をCSSStyleSheetとして生成し、IDで登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - CSS文字列からCSSStyleSheetインスタンスを生成\r\n * - registerStyleSheetを利用して、指定IDでCSSStyleSheetを登録\r\n *\r\n * 設計ポイント:\r\n * - styleSheet.replaceSyncで同期的にCSSを適用\r\n * - グローバルなスタイル管理や動的スタイル適用に利用可能\r\n */\r\nimport { registerStyleSheet } from \"./registerStyleSheet.js\";\r\n\r\nexport function registerCss(id: number, css: string) {\r\n  const styleSheet = new CSSStyleSheet();\r\n  styleSheet.replaceSync(css);\r\n  registerStyleSheet(id, styleSheet);\r\n}","import { NodePath } from \"./types\";\r\n\r\n/**\r\n * ルートノードとノードパス（インデックス配列）から、該当するノードを辿って取得するユーティリティ関数。\r\n *\r\n * - NodePathは各階層でのchildNodesのインデックスを表す配列\r\n * - ルートから順にchildNodes[index]を辿り、該当ノードを返す\r\n * - パスが不正な場合やノードが存在しない場合はnullを返す\r\n *\r\n * @param root  探索の起点となるルートノード\r\n * @param path  各階層のインデックス配列（NodePath）\r\n * @returns     パスで指定されたノード、またはnull\r\n */\r\nexport function resolveNodeFromPath(root: Node, path: NodePath): Node | null {\r\n  return path.reduce((node, index) => node?.childNodes[index] ?? null, root);\r\n}","import { NodePath } from \"./types\";\r\n\r\n/**\r\n * 指定ノードの「親からのインデックス」をルートまで辿り、絶対パス（NodePath）として返すユーティリティ関数。\r\n *\r\n * 例: ルートから見て [0, 2, 1] のような配列を返す。\r\n *     これは「親→子→孫…」とたどったときの各階層でのインデックスを表す。\r\n *\r\n * @param node 対象のDOMノード\r\n * @returns    ルートからこのノードまでのインデックス配列（NodePath）\r\n */\r\nexport function getAbsoluteNodePath(node: Node): NodePath {\r\n  let routeIndexes: NodePath = [];\r\n  while(node.parentNode !== null) {\r\n    const childNodes = Array.from(node.parentNode.childNodes) as Node[];\r\n    routeIndexes = [ childNodes.indexOf(node), ...routeIndexes ];\r\n    node = node.parentNode;\r\n  }\r\n  return routeIndexes;\r\n}","import { FilterFn, Filters, FilterWithOptions } from \"../Filter/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\n\r\n/**\r\n * フィルターテキスト（nameとoptionsを持つ）から、実際のフィルター関数（FilterFn）を生成する。\r\n * \r\n * - textToFilter: フィルターテキストから対応するフィルター関数を取得し、オプションを適用して返す。\r\n * - createFilters: フィルターテキスト配列からフィルター関数配列を生成し、同じ入力にはキャッシュを利用する。\r\n */\r\nfunction textToFilter(filters:FilterWithOptions, text: IFilterText): FilterFn {\r\n  const filter = filters[text.name];\r\n  if (!filter) raiseError(`outputBuiltinFiltersFn: filter not found: ${name}`);\r\n  return filter(text.options);\r\n}\r\n\r\nconst cache : Map<IFilterText[], Filters> = new Map();\r\n\r\n/**\r\n * フィルターテキスト配列（texts）からフィルター関数配列（Filters）を生成する。\r\n * すでに同じtextsがキャッシュされていればそれを返す。\r\n * \r\n * @param filters フィルター名→関数の辞書\r\n * @param texts   フィルターテキスト配列\r\n * @returns       フィルター関数配列\r\n */\r\nexport function createFilters(filters:FilterWithOptions, texts: IFilterText[]): Filters {\r\n  let result = cache.get(texts);\r\n  if (typeof result === \"undefined\") {\r\n    result = [];\r\n    for(let i = 0; i < texts.length; i++) {\r\n      result.push(textToFilter(filters, texts[i]));\r\n    }\r\n    cache.set(texts, result);\r\n  }\r\n  return result;\r\n}\r\n","import { Filters } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { IBindingNode } from \"./types\";\r\n\r\n/**\r\n * BindingNodeクラスは、1つのバインディング対象ノード（ElementやTextなど）に対する\r\n * バインディング処理の基底クラスです。\r\n *\r\n * 主な役割:\r\n * - ノード・プロパティ名・フィルタ・デコレータ・バインディング情報の保持\r\n * - バインディング値の更新（update）、値の割り当て（assignValue）のインターフェース提供\r\n * - 複数バインド内容（bindContents）の管理\r\n * - サブクラスでassignValueやupdateElementsを実装し、各種ノード・プロパティごとのバインディング処理を拡張\r\n *\r\n * 設計ポイント:\r\n * - assignValue, updateElementsは未実装（サブクラスでオーバーライド必須）\r\n * - isSelectElement, value, filteredValue, isForなどはサブクラスで用途に応じて拡張\r\n * - フィルタやデコレータ、バインド内容の管理も柔軟に対応\r\n */\r\nexport class BindingNode implements IBindingNode {\r\n  #binding: IBinding;\r\n  #node: Node;\r\n  #name: string;\r\n  #filters: Filters;\r\n  #decorates: string[];\r\n  #bindContents: Set<IBindContent> = new Set<IBindContent>();\r\n  get node(): Node {\r\n    return this.#node;\r\n  }\r\n  get name(): string {\r\n    return this.#name;\r\n  }\r\n  get subName(): string {\r\n    return this.#name;\r\n  }\r\n  get binding(): IBinding {\r\n    return this.#binding;\r\n  }\r\n  get decorates(): string[] {\r\n    return this.#decorates;\r\n  }\r\n  get filters(): Filters {\r\n    return this.#filters;\r\n  }\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#node = node;\r\n    this.#name = name;\r\n    this.#filters = filters;\r\n    this.#decorates = decorates;\r\n  }\r\n  init():void {\r\n    // サブクラスで初期化処理を実装可能\r\n  }\r\n  update(): void {\r\n    this.assignValue(this.binding.bindingState.filteredValue);\r\n  }\r\n  assignValue(value: any): void {\r\n    raiseError(`BindingNode: assignValue not implemented`);\r\n  }\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    raiseError(`BindingNode: updateElements not implemented`);\r\n  }\r\n  get isSelectElement(): boolean {\r\n    return this.node instanceof HTMLSelectElement;\r\n  }\r\n  get value():any {\r\n    return null;\r\n  }\r\n  get filteredValue():any {\r\n    return null;\r\n  }\r\n  get isFor(): boolean {\r\n    return false;\r\n  }\r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeAttributeクラスは、属性バインディング（例: attr.src, attr.alt など）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - ノード属性名（subName）を抽出し、値を属性としてElementにセット\r\n * - null/undefined/NaNの場合は空文字列に変換してセット\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameから属性名（subName）を抽出（例: \"attr.src\" → \"src\"）\r\n * - assignValueで属性値を常に文字列として設定\r\n * - createBindingNodeAttributeファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeAttribute extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as Element;\r\n    element.setAttribute(this.subName, value.toString());\r\n  }\r\n}\r\n\r\n/**\r\n * 属性バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeAttributeインスタンスを生成\r\n */\r\nexport const createBindingNodeAttribute: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeAttribute(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeCheckboxクラスは、チェックボックス（input[type=\"checkbox\"]）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（配列）に現在のvalueが含まれているかどうかでchecked状態を制御\r\n * - 値が配列でない場合はエラーを投げる\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで配列内にvalueが含まれていればchecked=true\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeCheckbox extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeCheckbox.update: value is not array`, );\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.map(_val => _val.toString()).includes(element.value);\r\n  }\r\n}\r\n\r\n/**\r\n * チェックボックス用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeCheckboxインスタンスを生成\r\n */\r\nexport const createBindingNodeCheckbox: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeCheckbox(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeClassListクラスは、class属性（classList）のバインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（配列）を空白区切りのclass属性値としてElementにセット\r\n * - 値が配列でない場合はエラーを投げる\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで配列を受け取り、join(\" \")でclassNameに反映\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeClassList extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeClassList.update: value is not array`);\r\n    }\r\n    const element = this.node as Element;\r\n    element.className = value.join(\" \");\r\n  }\r\n}\r\n\r\n/**\r\n * classList用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeClassListインスタンスを生成\r\n */\r\nexport const createBindingNodeClassList: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassList(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeClassNameクラスは、class属性の個別クラス名（例: class.active など）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（boolean）に応じて、指定クラス名（subName）をElementに追加・削除\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからクラス名（subName）を抽出（例: \"class.active\" → \"active\"）\r\n * - assignValueでboolean値のみ許容し、型が異なる場合はエラー\r\n * - trueならclassList.add、falseならclassList.removeでクラス操作\r\n * - ファクトリ関数でフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeClassName extends BindingNode {\r\n  #subName: string;\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeClassName.update: value is not boolean`);\r\n    }\r\n    const element = this.node as Element;\r\n    if (value) {\r\n      element.classList.add(this.subName);\r\n    } else {\r\n      element.classList.remove(this.subName);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * class名バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeClassNameインスタンスを生成\r\n */\r\nexport const createBindingNodeClassName: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeClassName(binding, node, name, filterFns, decorates);\r\n  }\r\n","\r\nconst symbolName = \"state\";\r\n\r\nexport const GetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.GetByRef`);\r\nexport const SetByRefSymbol            : unique symbol = Symbol.for(`${symbolName}.SetByRef`);\r\nexport const SetCacheableSymbol        : unique symbol = Symbol.for(`${symbolName}.SetCacheable`);\r\nexport const ConnectedCallbackSymbol   : unique symbol = Symbol.for(`${symbolName}.ConnectedCallback`);\r\nexport const DisconnectedCallbackSymbol: unique symbol = Symbol.for(`${symbolName}.DisconnectedCallback`);\r\nexport const ResolveSymbol             : unique symbol = Symbol.for(`${symbolName}.Resolve`);\r\nexport const GetAllSymbol              : unique symbol = Symbol.for(`${symbolName}.GetAll`);\r\nexport const SetStatePropertyRefSymbol : unique symbol = Symbol.for(`${symbolName}.SetStatePropertyRef`);\r\nexport const SetLoopContextSymbol      : unique symbol = Symbol.for(`${symbolName}.SetLoopContext`);\r\nexport const GetLastStatePropertyRefSymbol: unique symbol = Symbol.for(`${symbolName}.GetLastStatePropertyRef`);\r\nexport const GetContextListIndexSymbol : unique symbol = Symbol.for(`${symbolName}.GetContextListIndex`);\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { SetLoopContextSymbol } from \"../../StateClass/symbols.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeEventクラスは、イベントバインディング（onClick, onInputなど）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - 指定イベント（on～）に対して、バインディングされた関数をイベントリスナーとして登録\r\n * - デコレータ（preventDefault, stopPropagation）によるイベント制御に対応\r\n * - ループコンテキストやリストインデックスも引数としてイベントハンドラに渡す\r\n * - ハンドラ実行時はstateProxyを生成し、Updater経由で非同期的に状態を更新\r\n *\r\n * 設計ポイント:\r\n * - nameからイベント名（subName）を抽出し、addEventListenerで登録\r\n * - バインディング値が関数でない場合はエラー\r\n * - デコレータでpreventDefault/stopPropagationを柔軟に制御\r\n * - ループ内イベントにも対応し、リストインデックスを引数展開\r\n */\r\nclass BindingNodeEvent extends BindingNode {\r\n  #subName    : string;\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#subName = this.name.slice(2); // on～\r\n    const element = node as HTMLElement;\r\n    element.addEventListener(this.subName, (e:Event) => this.handler(e));\r\n  }\r\n  get subName(): string {\r\n    return this.#subName;\r\n  }\r\n  update() {\r\n    // 何もしない（イベントバインディングは初期化時のみ）\r\n  }\r\n\r\n  handler(e: Event) {\r\n    const engine = this.binding.engine;\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n    const indexes = loopContext?.serialize().map((context) => context.listIndex.index) ?? [];\r\n    const options = this.decorates;\r\n    const value = this.binding.bindingState.value;\r\n    const typeOfValue = typeof value;\r\n    if (typeOfValue !== \"function\") {\r\n      raiseError(`BindingNodeEvent: ${this.name} is not a function.`);\r\n    }\r\n    if (options.includes(\"preventDefault\")) {\r\n      e.preventDefault();\r\n    }\r\n    if (options.includes(\"stopPropagation\")) {\r\n      e.stopPropagation();\r\n    }\r\n    this.binding.engine.updater.addProcess(async () => {\r\n      const stateProxy = engine.createWritableStateProxy();\r\n      await stateProxy[SetLoopContextSymbol](loopContext, async () => {\r\n        await Reflect.apply(value, stateProxy, [e, ...indexes]);\r\n      });\r\n    });\r\n  } \r\n}\r\n\r\n/**\r\n * イベントバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeEventインスタンスを生成\r\n */\r\nexport const createBindingNodeEvent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeEvent(binding, node, name, filterFns, decorates);\r\n  }\r\n","export const DATA_BIND_ATTRIBUTE = \"data-bind\";\r\nexport const COMMENT_EMBED_MARK = \"@@:\"; // 埋め込み変数のマーク\r\nexport const COMMENT_TEMPLATE_MARK = \"@@|\"; // テンプレートのマーク\r\n","import { COMMENT_TEMPLATE_MARK } from \"../../constants.js\";\r\nimport { Filters } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\n\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\n/**\r\n * BindingNodeBlockクラスは、テンプレートブロック（コメントノードによるテンプレート挿入部）を\r\n * バインディング対象とするためのバインディングノード実装です。\r\n *\r\n * 主な役割:\r\n * - コメントノード内のテンプレートIDを抽出し、idプロパティとして保持\r\n * - テンプレートブロックのバインディング処理の基盤となる\r\n *\r\n * 設計ポイント:\r\n * - コメントノードのテキストからテンプレートIDを抽出（COMMENT_TEMPLATE_MARK以降を数値変換）\r\n * - IDが取得できない場合はエラーを投げる\r\n * - 他のBindingNode系クラスと同様、フィルタやデコレータにも対応\r\n */\r\nexport class BindingNodeBlock extends BindingNode {\r\n  #id: number;\r\n  get id(): number {\r\n    return this.#id;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const id = this.node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN) ?? raiseError(\"BindingNodeBlock.id: invalid node\");\r\n    this.#id = Number(id);\r\n  }\r\n    \r\n}","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeIfクラスは、ifバインディング（条件付き描画）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値（boolean）に応じて、BindContent（描画内容）のマウント・アンマウントを制御\r\n * - true/false時のBindContent集合を管理し、現在の描画状態をbindContentsで取得可能\r\n *\r\n * 設計ポイント:\r\n * - assignValueでboolean型以外が渡された場合はエラー\r\n * - trueならBindContentをrender・mount、falseならunmount\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeIf extends BindingNodeBlock {\r\n  #bindContent: IBindContent;\r\n  #trueBindContents: Set<IBindContent>;\r\n  #falseBindContents: Set<IBindContent> = new Set();\r\n  #bindContents: Set<IBindContent>;\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContents;\r\n  }\r\n\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    this.#bindContent = createBindContent(\r\n      this.binding, \r\n      this.id, \r\n      this.binding.engine, \r\n      \"\", \r\n      null\r\n    );\r\n    this.#trueBindContents = this.#bindContents = new Set([this.#bindContent]);\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (typeof value !== \"boolean\") {\r\n      raiseError(`BindingNodeIf.update: value is not boolean`);\r\n    }\r\n    const parentNode = this.node.parentNode;\r\n    if (parentNode == null) {\r\n      raiseError(`BindingNodeIf.update: parentNode is null`);\r\n    }\r\n    if (value) {\r\n      this.#bindContent.render();\r\n      this.#bindContent.mountAfter(parentNode, this.node.nextSibling);\r\n      this.#bindContents = this.#trueBindContents;\r\n    } else {\r\n      this.#bindContent.unmount();\r\n      this.#bindContents = this.#falseBindContents;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * ifバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeIfインスタンスを生成\r\n */\r\nexport const createBindingNodeIf: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeIf(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { createBindContent } from \"../BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../types\";\r\nimport { BindingNodeBlock } from \"./BindingNodeBlock.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeForクラスは、forバインディング（配列やリストの繰り返し描画）を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - リストデータの各要素ごとにBindContent（バインディングコンテキスト）を生成・管理\r\n * - 配列の差分検出により、必要なBindContentの生成・再利用・削除・再描画を最適化\r\n * - DOM上での要素の並び替えや再利用、アンマウント・マウント処理を効率的に行う\r\n * - プール機構によりBindContentの再利用を促進し、パフォーマンスを向上\r\n *\r\n * 設計ポイント:\r\n * - assignValueでリストの差分を検出し、BindContentの生成・削除・再利用を管理\r\n * - updateElementsでリストの並び替えやSWAP処理にも対応\r\n * - BindContentのプール・インデックス管理でGCやDOM操作の最小化を図る\r\n * - バインディング状態やリストインデックス情報をエンジンに保存し、再描画や依存解決を容易にする\r\n *\r\n * ファクトリ関数 createBindingNodeFor でフィルタ・デコレータ適用済みインスタンスを生成\r\n */\r\nclass BindingNodeFor extends BindingNodeBlock {\r\n  #bindContentsSet       : Set<IBindContent> = new Set<IBindContent>();\r\n  #bindContentByListIndex: WeakMap<IListIndex, IBindContent> = new WeakMap();\r\n  #bindContentPool       : IBindContent[] = [];\r\n  #bindContentLastIndex  : number = 0;\r\n  #lastListIndexSet      : Set<IListIndex> = new Set<IListIndex>();\r\n\r\n  get bindContents(): Set<IBindContent> {\r\n    return this.#bindContentsSet;\r\n  }\r\n\r\n  get isFor(): boolean {\r\n    return true;\r\n  }\r\n\r\n  init() {\r\n  }\r\n\r\n  createBindContent(listIndex: IListIndex): IBindContent {\r\n    let bindContent: IBindContent;\r\n    if (this.#bindContentLastIndex >= 0) {\r\n      // プールの最後の要素を取得して、プールの長さをあとで縮減する\r\n      // 作るたびにプールを縮減すると、パフォーマンスが悪化するため\r\n      // プールの長さを縮減するのは、全ての要素を作った後に行う\r\n      bindContent = this.#bindContentPool[this.#bindContentLastIndex];\r\n      this.#bindContentLastIndex--;\r\n      bindContent.assignListIndex(listIndex);\r\n    } else {\r\n      bindContent = createBindContent(\r\n        this.binding, \r\n        this.id, \r\n        this.binding.engine, \r\n        this.binding.bindingState.pattern + \".*\", \r\n        listIndex);\r\n    }\r\n    // 登録\r\n    this.#bindContentByListIndex.set(listIndex, bindContent);\r\n    return bindContent;\r\n  }\r\n\r\n  deleteBindContent(bindContent: IBindContent): void {\r\n    bindContent.unmount();\r\n    bindContent.loopContext?.clearListIndex();\r\n  }\r\n\r\n  get bindContentLastIndex():number {\r\n    return this.#bindContentLastIndex;\r\n  }\r\n  set bindContentLastIndex(value:number) {\r\n    this.#bindContentLastIndex = value;\r\n  }\r\n\r\n  get poolLength():number {\r\n    return this.#bindContentPool.length;\r\n  }\r\n  set poolLength(length: number) {\r\n    if (length < 0) {\r\n      raiseError(`BindingNodeFor.setPoolLength: length is negative`);\r\n    }\r\n    this.#bindContentPool.length = length;\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (!Array.isArray(value)) {\r\n      raiseError(`BindingNodeFor.assignValue: value is not array`);\r\n    }\r\n    const listIndexesSet = this.binding.engine.getListIndexesSet(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex\r\n    );\r\n    if (listIndexesSet === null) {\r\n      raiseError(`BindingNodeFor.assignValue: listIndexes is not found`);\r\n    }\r\n    const newBindContensSet = new Set<IBindContent>();\r\n    let lastBindContent = null;\r\n    // 削除を先にする\r\n    const removeBindContentsSet = new Set<IBindContent>();\r\n    const diff = this.#lastListIndexSet.difference(listIndexesSet);\r\n    for(const listIndex of diff) {\r\n      const bindContent = this.#bindContentByListIndex.get(listIndex);\r\n      if (bindContent) {\r\n        this.deleteBindContent(bindContent);\r\n        removeBindContentsSet.add(bindContent);\r\n      }\r\n    }\r\n    this.#bindContentPool.push(...removeBindContentsSet);\r\n\r\n    const parentNode = this.node.parentNode ?? raiseError(`BindingNodeFor.update: parentNode is null`);\r\n    const firstNode = this.node;\r\n\r\n    this.bindContentLastIndex = this.poolLength - 1;\r\n    for(const listIndex of listIndexesSet) {\r\n      const lastNode = lastBindContent?.getLastNode(parentNode) ?? firstNode;\r\n      let bindContent = this.#bindContentByListIndex.get(listIndex);\r\n      if (typeof bindContent === \"undefined\") {\r\n        bindContent = this.createBindContent(listIndex);\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        if (lastNode?.nextSibling !== bindContent.firstChildNode) {\r\n          bindContent.mountAfter(parentNode, lastNode);\r\n        }\r\n      }\r\n      newBindContensSet.add(bindContent);\r\n      lastBindContent = bindContent;\r\n    }\r\n    // プールの長さを更新する\r\n    // プールの長さは、プールの最後の要素のインデックス+1であるため、\r\n    this.poolLength = this.bindContentLastIndex + 1;\r\n    this.#bindContentsSet = newBindContensSet;\r\n    this.#lastListIndexSet = new Set<IListIndex>(listIndexesSet);\r\n  }\r\n\r\n  /**\r\n   * SWAP処理を想定\r\n   * \r\n   * @param listIndexes \r\n   * @param values \r\n   * @returns \r\n   */\r\n  updateElements(listIndexes: IListIndex[], values: any[]) {\r\n    if (typeof values[0] !== \"object\") return;\r\n    const engine = this.binding.engine;\r\n    const oldListValues = \r\n      engine.getList(\r\n        this.binding.bindingState.info, \r\n        this.binding.bindingState.listIndex\r\n      ) ?? raiseError(`BindingNodeFor.updateElements: oldValues is not found`); \r\n    const parentNode = this.node.parentNode ?? raiseError(`BindingNodeFor.update: parentNode is null`);\r\n\r\n    // DOMから削除\r\n    const currentBindContents = Array.from(this.#bindContentsSet);\r\n    const targetBindContents: IBindContent[] = [];\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const bindContent = currentBindContents[listIndex.index];\r\n      bindContent.unmount();\r\n      targetBindContents.push(bindContent);\r\n    }\r\n\r\n    // DOMに追加、listIndexを更新\r\n    for(let i = 0; i < listIndexes.length; i++) {\r\n      const listIndex = listIndexes[i];\r\n      const index = listIndex.index;\r\n\r\n      const lastBindContent = currentBindContents[index - 1] ?? null;\r\n      const lastNode = lastBindContent?.lastChildNode ?? this.node;\r\n\r\n      const oldValue = oldListValues[index];\r\n      const targetIndex = values.indexOf(oldValue);\r\n      const prevBindContent = targetBindContents[targetIndex];\r\n\r\n      if (typeof prevBindContent === \"undefined\") {\r\n        // 入れ替えるBindContentがない場合は再描画\r\n        const bindContent = targetBindContents[index];\r\n        bindContent.render();\r\n        bindContent.mountAfter(parentNode, lastNode);\r\n      } else {\r\n        prevBindContent.assignListIndex(listIndex);\r\n        prevBindContent.mountAfter(parentNode, lastNode);\r\n        this.#bindContentByListIndex.set(listIndex, prevBindContent);\r\n        currentBindContents[index] = prevBindContent;\r\n      }\r\n      if (targetIndex >= 0) {\r\n        values[targetIndex] = -1;\r\n      }\r\n    }\r\n    this.#bindContentsSet = new Set<IBindContent>(currentBindContents);\r\n    engine.saveList(\r\n      this.binding.bindingState.info, \r\n      this.binding.bindingState.listIndex, \r\n      this.binding.bindingState.value.slice(0)\r\n    );\r\n  }\r\n}\r\n\r\nexport const createBindingNodeFor: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeFor(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DEFAULT_PROPERTY = \"textContent\";\r\n\r\ntype DefaultPropertyByElementType = {\r\n  [key:string]: string;\r\n}\r\n\r\nconst defaultPropertyByElementType:DefaultPropertyByElementType = {\r\n  \"radio\"   : \"checked\",\r\n  \"checkbox\": \"checked\",\r\n  \"button\"  : \"onclick\",\r\n}\r\n\r\n/**\r\n * HTML要素のデフォルトプロパティを取得\r\n */\r\nconst getDefaultPropertyHTMLElement = (node:Node):string => \r\n  node instanceof HTMLSelectElement || node instanceof HTMLTextAreaElement || node instanceof HTMLOptionElement ? \"value\" : \r\n  node instanceof HTMLButtonElement ? \"onclick\" : \r\n  node instanceof HTMLAnchorElement ? \"onclick\" : \r\n  node instanceof HTMLFormElement ? \"onsubmit\" : \r\n  node instanceof HTMLInputElement ? (defaultPropertyByElementType[node.type] ?? \"value\") :\r\n  DEFAULT_PROPERTY;\r\n\r\ntype DefaultPropertyByKey = {\r\n  [key:string]: string | undefined;\r\n}\r\n\r\nconst _cache: DefaultPropertyByKey = {};\r\n\r\nconst textContentProperty = (node:Node):string => DEFAULT_PROPERTY;\r\n\r\ntype GetDefaultPropertyByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>string) | undefined;\r\n}\r\n\r\nconst getDefaultPropertyByNodeType: GetDefaultPropertyByNodeType = {\r\n  HTMLElement: getDefaultPropertyHTMLElement,\r\n  SVGElement : undefined,\r\n  Text       : textContentProperty,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * バインド情報でノードプロパティが省略された場合に、ノード種別・要素タイプごとに\r\n * 適切なデフォルトプロパティ名（例: textContent, value, checked, onclick など）を返すユーティリティ関数。\r\n *\r\n * - HTMLInputElementやHTMLSelectElementなど、要素ごとに最適なプロパティを判定\r\n * - input要素はtype属性（radio, checkboxなど）も考慮\r\n * - 一度判定した組み合わせはキャッシュし、パフォーマンス向上\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"HTMLElement\" | \"SVGElement\" | \"Text\" | \"Template\"）\r\n * @returns        デフォルトのプロパティ名（例: \"value\", \"checked\", \"textContent\" など）\r\n */\r\nexport function getDefaultName(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): string | undefined {\r\n  const key = node.constructor.name + \"\\t\" + ((node as HTMLInputElement).type ?? \"\"); // type attribute\r\n  return _cache[key] ?? (_cache[key] = getDefaultPropertyByNodeType[nodeType]?.(node));\r\n}\r\n  ","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { getDefaultName } from \"../../BindingBuilder/getDefaultName.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { SetLoopContextSymbol } from \"../../StateClass/symbols.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\nfunction isTwoWayBindable(element: HTMLElement): boolean {\r\n  return element instanceof HTMLInputElement || \r\n    element instanceof HTMLTextAreaElement || \r\n    element instanceof HTMLSelectElement;\r\n}\r\n\r\nconst defaultEventByName: {[key:string]: string} = {\r\n  \"value\"   : \"input\",\r\n  \"checked\" : \"change\",\r\n  \"selected\": \"change\",\r\n};\r\n\r\n/**\r\n * BindingNodePropertyクラスは、ノードのプロパティ（value, checked, selected など）への\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - ノードプロパティへの値の割り当て・取得\r\n * - 双方向バインディング（input, changeイベント等）に対応\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - デフォルトプロパティ名と一致し、かつ双方向バインディング可能な要素の場合のみイベントリスナーを登録\r\n * - デコレータでイベント名を指定可能（onInput, onChangeなど）\r\n * - イベント発火時はUpdater経由でstateを非同期的に更新\r\n * - assignValueでnull/undefined/NaNは空文字列に変換してセット\r\n */\r\nclass BindingNodeProperty extends BindingNode {\r\n  get value(): any {\r\n    // @ts-ignore\r\n    return this.node[this.name];\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.filters.length; i++) {\r\n      value = this.filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n\r\n    const isElement = this.node instanceof HTMLElement;\r\n    if (!isElement) return;\r\n    if (!isTwoWayBindable(this.node)) return;\r\n    const defaultName = getDefaultName(this.node, \"HTMLElement\");\r\n    if (defaultName !== this.name) return;\r\n    if (decorates.length > 1) raiseError(`BindingNodeProperty: ${this.name} has multiple decorators`);\r\n    const event = (decorates[0]?.startsWith(\"on\") ? decorates[0]?.slice(2) : decorates[0]) ?? null;\r\n    const eventName = event ?? defaultEventByName[this.name] ?? \"readonly\";\r\n    if (eventName === \"readonly\" || eventName === \"ro\") return;\r\n\r\n    // 双方向バインディング: イベント発火時にstateを更新\r\n    const engine = this.binding.engine;\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext;\r\n      const value = this.filteredValue;\r\n      this.node.addEventListener(eventName, async () => {\r\n      engine.updater.addProcess(async () => {\r\n        const stateProxy = engine.createWritableStateProxy();\r\n        await stateProxy[SetLoopContextSymbol](loopContext, async () => {\r\n          binding.updateStateValue(stateProxy, value);\r\n        });\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  init() {\r\n    // サブクラスで初期化処理を実装可能\r\n  }\r\n\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    // @ts-ignore\r\n    this.node[this.name] = value;\r\n  }\r\n}\r\n\r\n/**\r\n * プロパティバインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodePropertyインスタンスを生成\r\n */\r\nexport const createBindingNodeProperty: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeProperty(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeRadioクラスは、ラジオボタン（input[type=\"radio\"]）の\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値とinput要素のvalueが一致していればchecked=trueにする\r\n * - null/undefined/NaNの場合は空文字列に変換して比較\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - assignValueで値を文字列化し、input要素のvalueと比較してcheckedを制御\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeRadio extends BindingNode {\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLInputElement;\r\n    element.checked = value.toString() === element.value.toString();\r\n  }\r\n}\r\n\r\n/**\r\n * ラジオボタン用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeRadioインスタンスを生成\r\n */\r\nexport const createBindingNodeRadio: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeRadio(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeStyleクラスは、style属性（インラインスタイル）のバインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング値を指定のCSSプロパティ（subName）としてHTMLElementにセット\r\n * - null/undefined/NaNの場合は空文字列に変換してセット\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからCSSプロパティ名（subName）を抽出（例: \"style.color\" → \"color\"）\r\n * - assignValueで値を文字列化し、style.setPropertyで反映\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeStyle extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n  assignValue(value:any) {\r\n    if (value === null || value === undefined || Number.isNaN(value)) {\r\n      value = \"\";\r\n    }\r\n    const element = this.node as HTMLElement;\r\n    element.style.setProperty(this.subName, value.toString());\r\n  }\r\n}\r\n\r\n/**\r\n * style属性バインディングノード生成用ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeStyleインスタンスを生成\r\n */\r\nexport const createBindingNodeStyle: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeStyle(binding, node, name, filterFns, decorates);\r\n  }\r\n","\r\nconst symbolName = \"componentState\";\r\n\r\nexport const RenderSymbol : unique symbol = Symbol.for(`${symbolName}.render`);\r\nexport const BindParentComponentSymbol : unique symbol = Symbol.for(`${symbolName}.bindParentComponent`);\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { RenderSymbol } from \"../../ComponentState/symbols.js\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { StructiveComponent } from \"../../WebComponents/types\";\r\nimport { IBinding } from \"../types\";\r\nimport { BindingNode } from \"./BindingNode.js\";\r\nimport { CreateBindingNodeFn } from \"./types\";\r\n\r\n/**\r\n * BindingNodeComponentクラスは、StructiveComponent（カスタムコンポーネント）への\r\n * バインディング処理を担当するバインディングノードの実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング対象のコンポーネントのstateプロパティ（subName）に値を反映\r\n * - バインディング情報をコンポーネント単位で管理（bindingsByComponentに登録）\r\n * - フィルタやデコレータにも対応\r\n *\r\n * 設計ポイント:\r\n * - nameからstateプロパティ名（subName）を抽出（例: \"state.foo\" → \"foo\"）\r\n * - assignValueでコンポーネントのstateに値をセット（RenderSymbol経由で反映）\r\n * - 初期化時にbindingsByComponentへバインディング情報を登録\r\n * - 柔軟なバインディング記法・フィルタ適用に対応\r\n */\r\nclass BindingNodeComponent extends BindingNode {\r\n  #subName: string;\r\n  get subName():string {\r\n    return this.#subName;\r\n  }\r\n  constructor(\r\n    binding   : IBinding, \r\n    node      : Node, \r\n    name      : string,\r\n    filters   : Filters,\r\n    decorates : string[]\r\n  ) {\r\n    super(binding, node, name, filters, decorates);\r\n    const [, subName] = this.name.split(\".\");\r\n    this.#subName = subName;\r\n  }\r\n\r\n  init(): void {\r\n    const engine = this.binding.engine;\r\n    let bindings = engine.bindingsByComponent.get(this.node as StructiveComponent);\r\n    if (typeof bindings === \"undefined\") {\r\n      bindings = new Set<IBinding>();\r\n      engine.bindingsByComponent.set(this.node as StructiveComponent, bindings);\r\n    }\r\n    bindings.add(this.binding);\r\n  }\r\n\r\n  assignValue(value: any): void {\r\n    const component = this.node as StructiveComponent;\r\n    component.state[RenderSymbol](this.subName, value);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * コンポーネント用バインディングノード生成ファクトリ関数\r\n * - name, フィルタ、デコレータ情報からBindingNodeComponentインスタンスを生成\r\n */\r\nexport const createBindingNodeComponent: CreateBindingNodeFn = \r\n(name: string, filterTexts: IFilterText[], decorates: string[]) => \r\n  (binding:IBinding, node: Node, filters: FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts);\r\n    return new BindingNodeComponent(binding, node, name, filterFns, decorates);\r\n  }\r\n","import { createBindingNodeAttribute } from \"../DataBinding/BindingNode/BindingNodeAttribute.js\";\r\nimport { createBindingNodeCheckbox } from \"../DataBinding/BindingNode/BindingNodeCheckbox.js\";\r\nimport { createBindingNodeClassList } from \"../DataBinding/BindingNode/BindingNodeClassList.js\";\r\nimport { createBindingNodeClassName } from \"../DataBinding/BindingNode/BindingNodeClassName.js\";\r\nimport { createBindingNodeEvent } from \"../DataBinding/BindingNode/BindingNodeEvent.js\";\r\nimport { createBindingNodeIf } from \"../DataBinding/BindingNode/BindingNodeIf.js\";\r\nimport { createBindingNodeFor } from \"../DataBinding/BindingNode/BindingNodeFor.js\";\r\nimport { createBindingNodeProperty } from \"../DataBinding/BindingNode/BindingNodeProperty.js\";\r\nimport { createBindingNodeRadio } from \"../DataBinding/BindingNode/BindingNodeRadio.js\";\r\nimport { createBindingNodeStyle } from \"../DataBinding/BindingNode/BindingNodeStyle.js\";\r\nimport { CreateBindingNodeByNodeFn, CreateBindingNodeFn } from \"../DataBinding/BindingNode/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IFilterText } from \"./types\";\r\nimport { createBindingNodeComponent } from \"../DataBinding/BindingNode/BindingNodeComponent.js\";\r\n\r\ntype NodePropertyConstructorByName = {[key:string]:CreateBindingNodeFn};\r\ntype NodePropertyConstructorByNameByIsComment = {[key:number]:NodePropertyConstructorByName};\r\n\r\nconst nodePropertyConstructorByNameByIsComment:NodePropertyConstructorByNameByIsComment = {\r\n  0: {\r\n    \"class\"   : createBindingNodeClassList,\r\n    \"checkbox\": createBindingNodeCheckbox,\r\n    \"radio\"   : createBindingNodeRadio,\r\n  },\r\n  1: {\r\n    \"if\" : createBindingNodeIf,\r\n  },\r\n};\r\n\r\ntype NodePropertyConstructorByFirstName = {[key:string]:CreateBindingNodeFn};\r\n\r\nconst nodePropertyConstructorByFirstName:NodePropertyConstructorByFirstName = {\r\n  \"class\": createBindingNodeClassName,\r\n  \"attr\" : createBindingNodeAttribute,\r\n  \"style\": createBindingNodeStyle,\r\n  \"state\": createBindingNodeComponent,\r\n//  \"popover\": PopoverTarget,\r\n//  \"commandfor\": CommandForTarget,\r\n};\r\n\r\n/**\r\n * バインディング対象ノードのプロパティ名やノード種別（Element/Comment）に応じて、\r\n * 適切なバインディングノード生成関数（CreateBindingNodeFn）を返すユーティリティ。\r\n *\r\n * - ノード種別やプロパティ名ごとに専用の生成関数をマッピング\r\n * - コメントノードや特殊プロパティ（for/if等）にも対応\r\n * - プロパティ名の先頭や\"on\"でイベントバインディングも判別\r\n * - 一度判定した組み合わせはキャッシュし、パフォーマンス向上\r\n *\r\n * これにより、テンプレートのdata-bindやコメントバインディングの各種ケースに柔軟に対応できる。\r\n */\r\nfunction _getBindingNodeCreator(isComment:boolean, isElement: boolean, propertyName: string): CreateBindingNodeFn {\r\n  // コメント/エレメント種別とプロパティ名で専用の生成関数を優先的に取得\r\n  const bindingNodeCreatorByName = nodePropertyConstructorByNameByIsComment[isComment ? 1 : 0][propertyName];\r\n  if (typeof bindingNodeCreatorByName !== \"undefined\") {\r\n    return bindingNodeCreatorByName;\r\n  }\r\n  // コメントノードでforの場合は専用関数\r\n  if (isComment && propertyName === \"for\") {\r\n    return createBindingNodeFor;\r\n  }\r\n  // コメントノードで未対応プロパティはエラー\r\n  if (isComment) {\r\n    raiseError(`getBindingNodeCreator: unknown node property ${propertyName}`);\r\n  }\r\n  // プロパティ名の先頭で判別（class.attr.style.state等）\r\n  const nameElements = propertyName.split(\".\");\r\n  const bindingNodeCreatorByFirstName = nodePropertyConstructorByFirstName[nameElements[0]];\r\n  if (typeof bindingNodeCreatorByFirstName !== \"undefined\") {\r\n    return bindingNodeCreatorByFirstName;\r\n  }\r\n  // エレメントノードでonから始まる場合はイベントバインディング\r\n  if (isElement) {\r\n    if (propertyName.startsWith(\"on\")) {\r\n      return createBindingNodeEvent;\r\n    } else {\r\n      return createBindingNodeProperty;\r\n    }\r\n  } else {\r\n    // それ以外は汎用プロパティバインディング\r\n    return createBindingNodeProperty;\r\n  }\r\n}\r\n\r\nconst _cache: {[key:string]:CreateBindingNodeFn} = {};\r\n\r\n/**\r\n * ノード・プロパティ名・フィルタ・デコレータ情報から\r\n * 適切なバインディングノード生成関数を取得し、呼び出すファクトリ関数。\r\n * \r\n * @param node         バインディング対象ノード\r\n * @param propertyName バインディングプロパティ名\r\n * @param filterTexts  フィルタ情報\r\n * @param decorates    デコレータ情報\r\n * @returns            バインディングノード生成関数の実行結果\r\n */\r\nexport function getBindingNodeCreator(\r\n  node        : Node, \r\n  propertyName: string,\r\n  filterTexts : IFilterText[],\r\n  decorates   : string[]\r\n): CreateBindingNodeByNodeFn {\r\n  const isComment = node instanceof Comment;\r\n  const isElement = node instanceof Element;\r\n  const key = isComment + \"\\t\" + isElement + \"\\t\" + propertyName;\r\n  // キャッシュを利用して生成関数を取得\r\n  const fn = _cache[key] ?? (_cache[key] = _getBindingNodeCreator(isComment, isElement, propertyName));\r\n  return fn(propertyName, filterTexts, decorates);\r\n}\r\n","/**\r\n * getStructuredPathInfo.ts\r\n *\r\n * Stateプロパティのパス文字列から、詳細な構造化パス情報（IStructuredPathInfo）を生成・キャッシュするユーティリティです。\r\n *\r\n * 主な役割:\r\n * - パス文字列を分割し、各セグメントやワイルドカード（*）の位置・親子関係などを解析\r\n * - cumulativePaths/wildcardPaths/parentPathなど、パス階層やワイルドカード階層の情報を構造化\r\n * - 解析結果をIStructuredPathInfoとしてキャッシュし、再利用性とパフォーマンスを両立\r\n * - reservedWords（予約語）チェックで安全性を担保\r\n *\r\n * 設計ポイント:\r\n * - パスごとにキャッシュし、同じパスへの複数回アクセスでも高速に取得可能\r\n * - ワイルドカードや親子関係、階層構造を厳密に解析し、バインディングや多重ループに最適化\r\n * - childrenプロパティでパス階層のツリー構造も構築\r\n * - 予約語や危険なパスはraiseErrorで例外を発生\r\n */\r\nimport { raiseError } from '../utils.js';\r\nimport { IStructuredPathInfo } from './types';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IStructuredPathInfo } = {};\r\n//const _cache: Map<string, IStructuredPathInfo> = new Map();\r\n\r\n/**\r\n * パターン情報を取得します\r\n * @param pattern パターン\r\n * @returns {IPatternInfo} パターン情報\r\n */\r\nclass StructuredPathInfo implements IStructuredPathInfo {\r\n  static id : number = 0;\r\n  id = ++StructuredPathInfo.id;\r\n  pattern;\r\n  pathSegments;\r\n  lastSegment;\r\n  cumulativePaths;\r\n  cumulativeInfos;\r\n  cumulativeInfoSet;\r\n  wildcardPaths;\r\n  wildcardInfos;\r\n  wildcardInfoSet;\r\n  wildcardParentPaths;\r\n  wildcardParentInfos;\r\n  wildcardParentInfoSet;\r\n  lastWildcardPath;\r\n  lastWildcardInfo;\r\n  parentPath;\r\n  parentInfo;\r\n  wildcardCount;\r\n  children = {};\r\n\r\n  constructor(pattern: string) {\r\n    const getPattern = (_pattern: string): IStructuredPathInfo => {\r\n      return (pattern === _pattern) ? this : getStructuredPathInfo(_pattern);\r\n    };\r\n    const pathSegments = pattern.split(\".\");\r\n    const cumulativePaths = [];\r\n    const cumulativeInfos: IStructuredPathInfo[] = [];\r\n    const wildcardPaths = [];\r\n    const wildcardInfos = [];\r\n    const wildcardParentPaths = [];\r\n    const wildcardParentInfos = [];\r\n    let currentPatternPath = \"\", prevPatternPath = \"\";\r\n    let wildcardCount = 0;\r\n    for(let i = 0; i < pathSegments.length; i++) {\r\n      currentPatternPath += pathSegments[i];\r\n      if (pathSegments[i] === \"*\") {\r\n        wildcardPaths.push(currentPatternPath);\r\n        wildcardInfos.push(getPattern(currentPatternPath));\r\n        wildcardParentPaths.push(prevPatternPath);\r\n        wildcardParentInfos.push(getPattern(prevPatternPath));\r\n        wildcardCount++;\r\n      }\r\n      cumulativePaths.push(currentPatternPath);\r\n      cumulativeInfos.push(getPattern(currentPatternPath));\r\n      prevPatternPath = currentPatternPath;\r\n      currentPatternPath += \".\";\r\n    }\r\n    const lastWildcardPath = wildcardPaths.length > 0 ? wildcardPaths[wildcardPaths.length - 1] : null;\r\n    const parentPath = cumulativePaths.length > 1 ? cumulativePaths[cumulativePaths.length - 2] : null;\r\n    this.pattern = pattern;\r\n    this.pathSegments = pathSegments;\r\n    this.lastSegment = pathSegments[pathSegments.length - 1];\r\n    this.cumulativePaths = cumulativePaths;\r\n    this.cumulativeInfos = cumulativeInfos;\r\n    this.cumulativeInfoSet = new Set(cumulativeInfos);\r\n    this.wildcardPaths = wildcardPaths;\r\n    this.wildcardInfos = wildcardInfos;\r\n    this.wildcardInfoSet = new Set(wildcardInfos);\r\n    this.wildcardParentPaths = wildcardParentPaths;\r\n    this.wildcardParentInfos = wildcardParentInfos;\r\n    this.wildcardParentInfoSet = new Set(wildcardParentInfos);\r\n    this.lastWildcardPath = lastWildcardPath;\r\n    this.lastWildcardInfo = lastWildcardPath ? getPattern(lastWildcardPath) : null;\r\n    this.parentPath = parentPath;\r\n    this.parentInfo = parentPath ? getPattern(parentPath) : null;\r\n    this.wildcardCount = wildcardCount;\r\n    if (this.parentInfo) {\r\n      this.parentInfo.children[this.lastSegment] = this;\r\n    }\r\n  }\r\n}\r\n\r\nconst reservedWords = new Set([\r\n  \"constructor\", \"prototype\", \"__proto__\", \"toString\",\r\n  \"valueOf\", \"hasOwnProperty\", \"isPrototypeOf\",\r\n  \"watch\", \"unwatch\", \"eval\", \"arguments\",\r\n  \"let\", \"var\", \"const\", \"class\", \"function\",\r\n  \"null\", \"true\", \"false\", \"new\", \"return\",\r\n]);\r\n\r\nexport function getStructuredPathInfo(structuredPath: string): IStructuredPathInfo {\r\n  let info: IStructuredPathInfo | undefined;\r\n  info = _cache[structuredPath];\r\n  if (typeof info !== \"undefined\") {\r\n    return info;\r\n  }\r\n  if (reservedWords.has(structuredPath)) {\r\n    raiseError(`getStructuredPathInfo: pattern is reserved word: ${structuredPath}`);\r\n  }\r\n  return (_cache[structuredPath] = new StructuredPathInfo(structuredPath));\r\n}\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { GetByRefSymbol, SetByRefSymbol, SetLoopContextSymbol } from \"../../StateClass/symbols.js\";\r\nimport { IStateProxy } from \"../../StateClass/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\n/**\r\n * BindingStateクラスは、バインディング対象の状態（State）プロパティへのアクセス・更新・フィルタ適用を担当する実装です。\r\n *\r\n * 主な役割:\r\n * - バインディング対象の状態プロパティ（pattern, info）やリストインデックス（listIndex）を管理\r\n * - get valueで現在の値を取得し、get filteredValueでフィルタ適用後の値を取得\r\n * - initでリストバインディング時のループコンテキストやインデックス参照を初期化\r\n * - assignValueで状態プロキシに値を書き込む（双方向バインディング対応）\r\n * - バインディング情報をエンジンに登録し、依存解決や再描画を効率化\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードパス（配列バインディング等）にも対応し、ループごとのインデックス管理が可能\r\n * - フィルタ適用は配列で柔軟に対応\r\n * - createBindingStateファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingState implements IBindingState {\r\n  #binding     : IBinding;\r\n  #pattern     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return this.#pattern;\r\n  }\r\n  get info() {\r\n    return this.#info;\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    this.#pattern = pattern;\r\n    this.#info = getStructuredPathInfo(pattern);\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.#state[GetByRefSymbol](this.info, this.listIndex);\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    if (this.info.wildcardCount > 0) {\r\n      const lastWildcardPath = this.info.lastWildcardPath ?? \r\n        raiseError(`BindingState.init: wildcardLastParentPath is null`);\r\n      const loopContext = this.binding.parentBindContent.loopContext?.find(lastWildcardPath) ?? \r\n        raiseError(`BindingState.init: loopContext is null`);\r\n      this.#listIndexRef = loopContext.listIndexRef;\r\n    }\r\n    this.binding.engine.saveBinding(this.info, this.listIndex, this.binding);\r\n  }\r\n  assignValue(writeState: IStateProxy, value: any) {\r\n    writeState[SetByRefSymbol](this.info, this.listIndex, value);\r\n  }\r\n}\r\n\r\nexport const createBindingState: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n    return new BindingState(binding, state, name, filterFns);\r\n  }\r\n","import { createFilters } from \"../../BindingBuilder/createFilters.js\";\r\nimport { IFilterText } from \"../../BindingBuilder/types\";\r\nimport { Filters, FilterWithOptions } from \"../../Filter/types\";\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStateProxy } from \"../../StateClass/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IBinding } from \"../types\";\r\nimport { CreateBindingStateFn, IBindingState } from \"./types\";\r\n\r\n/**\r\n * BindingStateIndexクラスは、forバインディング等のループ内で利用される\r\n * インデックス値（$1, $2, ...）のバインディング状態を管理する実装です。\r\n *\r\n * 主な役割:\r\n * - ループコンテキストからインデックス値を取得し、value/filteredValueで参照可能にする\r\n * - バインディング時にbindingsByListIndexへ自身を登録し、依存解決や再描画を効率化\r\n * - フィルタ適用にも対応\r\n *\r\n * 設計ポイント:\r\n * - pattern（例: \"$1\"）からインデックス番号を抽出し、ループコンテキストから該当インデックスを取得\r\n * - initでループコンテキストやlistIndexRefを初期化し、バインディング情報をエンジンに登録\r\n * - assignValueは未実装（インデックスは書き換え不可のため）\r\n * - createBindingStateIndexファクトリでフィルタ適用済みインスタンスを生成\r\n */\r\nclass BindingStateIndex implements IBindingState {\r\n  #binding     : IBinding;\r\n  #indexNumber : number;\r\n  #listIndexRef: WeakRef<IListIndex> | null = null;\r\n  #state       : IStateProxy;\r\n  #filters     : Filters;\r\n  get pattern(): string {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get info() {\r\n    return raiseError(\"Not implemented\");\r\n  }\r\n  get listIndex() {\r\n    if (this.#listIndexRef === null) return null;\r\n    return this.#listIndexRef.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n  get filters() {\r\n    return this.#filters;\r\n  }\r\n  get binding() {\r\n    return this.#binding;\r\n  }\r\n  constructor(\r\n    binding: IBinding, \r\n    state  : IStateProxy, \r\n    pattern: string, \r\n    filters: Filters\r\n  ) {\r\n    this.#binding = binding;\r\n    const indexNumber = Number(pattern.slice(1));\r\n    if (isNaN(indexNumber)) {\r\n      raiseError(\"BindingStateIndex: pattern is not a number\");\r\n    }\r\n    this.#indexNumber = indexNumber;\r\n    this.#state = state;\r\n    this.#filters = filters;\r\n  }\r\n  get value(): any {\r\n    return this.listIndex?.index ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get filteredValue(): any {\r\n    let value = this.value;\r\n    for(let i = 0; i < this.#filters.length; i++) {\r\n      value = this.#filters[i](value);\r\n    }\r\n    return value;\r\n  }\r\n  init(): void {\r\n    const loopContext = this.binding.parentBindContent.currentLoopContext ??\r\n      raiseError(`BindingState.init: loopContext is null`);\r\n    const loopContexts = loopContext.serialize();\r\n    this.#listIndexRef = loopContexts[this.#indexNumber - 1].listIndexRef ??\r\n      raiseError(`BindingState.init: listIndexRef is null`);\r\n    const listIndex = this.listIndex ?? raiseError(\"listIndex is null\");\r\n    const bindings = this.binding.engine.bindingsByListIndex.get(listIndex);\r\n    if (bindings === undefined) {\r\n      this.binding.engine.bindingsByListIndex.set(listIndex, new Set([this.binding]));\r\n    } else {\r\n      bindings.add(this.binding);\r\n    }\r\n  }\r\n  assignValue(writeState:IStateProxy, value:any): void {\r\n    raiseError(\"BindingStateIndex: assignValue is not implemented\");\r\n  }\r\n}\r\n\r\nexport const createBindingStateIndex: CreateBindingStateFn = \r\n(name: string, filterTexts: IFilterText[]) => \r\n  (binding:IBinding, state: IStateProxy, filters:FilterWithOptions) => {\r\n    const filterFns = createFilters(filters, filterTexts); // ToDo:ここは、メモ化できる\r\n\r\n    return new BindingStateIndex(binding, state, name, filterFns);\r\n  }\r\n","import { createBindingState } from \"../DataBinding/BindingState/BindingState.js\";\r\nimport { createBindingStateIndex } from \"../DataBinding/BindingState/BindingStateIndex.js\";\r\nimport { CreateBindingStateByStateFn } from \"../DataBinding/BindingState/types\";\r\nimport { IFilterText } from \"./types\";\r\n\r\nconst ereg = new RegExp(/^\\$\\d+$/);\r\n\r\n/**\r\n * バインディング対象の状態プロパティ名とフィルタ情報から、\r\n * 適切なバインディング状態生成関数（CreateBindingStateByStateFn）を返すユーティリティ。\r\n *\r\n * - プロパティ名が \"$数字\"（例: \"$1\"）の場合は createBindingStateIndex を使用（インデックスバインディング用）\r\n * - それ以外は通常の createBindingState を使用\r\n *\r\n * @param name        バインディング対象の状態プロパティ名\r\n * @param filterTexts フィルタ情報\r\n * @returns           バインディング状態生成関数\r\n */\r\nexport function getBindingStateCreator(\r\n  name       : string, \r\n  filterTexts: IFilterText[]\r\n): CreateBindingStateByStateFn {\r\n  if (ereg.test(name)) {\r\n    // \"$数字\"形式の場合はインデックスバインディング用の生成関数を返す\r\n    return createBindingStateIndex(name, filterTexts);\r\n  } else {\r\n    // 通常のプロパティ名の場合は標準の生成関数を返す\r\n    return createBindingState(name, filterTexts);\r\n  }\r\n}","import { COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst COMMENT_EMBED_MARK_LEN = COMMENT_EMBED_MARK.length;\r\nconst COMMENT_TEMPLATE_MARK_LEN = COMMENT_TEMPLATE_MARK.length;\r\n\r\nconst getTextFromContent   = (node:Node):string        => node.textContent?.slice(COMMENT_EMBED_MARK_LEN).trim() ?? \"\";\r\nconst getTextFromAttribute = (node:HTMLElement):string => node.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\nconst getTextFromTemplate  = (node:Node):string        => {\r\n  const text = node.textContent?.slice(COMMENT_TEMPLATE_MARK_LEN).trim(); \r\n  const id = Number(text);\r\n  const template = getTemplateById(id) ?? raiseError(`Template not found: ${text}`);\r\n  return template.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n};\r\nconst getTextFromSVGElement = (node:SVGElement):string => node.getAttribute(DATA_BIND_ATTRIBUTE) ?? \"\";\r\n\r\nconst getTextByNodeType = {\r\n  \"Text\":        getTextFromContent,\r\n  \"HTMLElement\": getTextFromAttribute,\r\n  \"Template\":    getTextFromTemplate,\r\n  \"SVGElement\":  getTextFromSVGElement\r\n};\r\n\r\n/**\r\n * ノード種別ごとにdata-bindテキスト（バインディング定義文字列）を取得するユーティリティ関数。\r\n *\r\n * - Textノード: コメントマーク以降のテキストを取得し、\"textContent:\"を付与\r\n * - HTMLElement: data-bind属性値を取得\r\n * - Templateノード: コメントマーク以降のIDからテンプレートを取得し、そのdata-bind属性値を取得\r\n * - SVGElement: data-bind属性値を取得\r\n *\r\n * @param nodeType ノード種別（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）\r\n * @param node     対象ノード\r\n * @returns        バインディング定義文字列\r\n */\r\nexport function getDataBindText(nodeType: NodeType, node: Node): string {\r\n  const bindText = getTextByNodeType[nodeType](node as any) ?? \"\";\r\n  if (nodeType === \"Text\") {\r\n    // Textノードの場合は\"textContent:\"を付与\r\n    return \"textContent:\" + bindText;\r\n  } else {\r\n    return bindText;\r\n  }\r\n}\r\n","import { raiseError } from \"../utils.js\";\r\nimport { NodeType } from \"./types\";\r\n\r\nconst createNodeKey = (node:Node):string => node.constructor.name + \"\\t\" + ((node instanceof Comment) ? (node.textContent?.[2] ?? \"\") : \"\");\r\n\r\ntype NodeTypeByNodeKey = {\r\n  [nodeKey:string]:NodeType;\r\n};\r\n\r\nconst nodeTypeByNodeKey:NodeTypeByNodeKey = {};\r\n\r\nconst getNodeTypeByNode = (node:Node):NodeType =>\r\n  (node instanceof Comment && node.textContent?.[2] === \":\") ? \"Text\" : \r\n  (node instanceof HTMLElement) ? \"HTMLElement\" :\r\n  (node instanceof Comment && node.textContent?.[2] === \"|\") ? \"Template\" : \r\n  (node instanceof SVGElement) ? \"SVGElement\" : raiseError(`Unknown NodeType: ${node.nodeType}`);\r\n\r\n/**\r\n * ノードのタイプ（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）を判定・キャッシュするユーティリティ関数。\r\n *\r\n * - コメントノードの場合、3文字目が \":\" なら \"Text\"、\"|\" なら \"Template\" と判定\r\n * - HTMLElement, SVGElement もそれぞれ判定\r\n * - 未知のノード型はエラー\r\n * - ノードごとに一意なキー（constructor名＋コメント種別）でキャッシュし、再判定を省略\r\n *\r\n * @param node    判定対象のノード\r\n * @param nodeKey キャッシュ用のノードキー（省略時は自動生成）\r\n * @returns       ノードタイプ（NodeType）\r\n */\r\nexport function getNodeType(\r\n  node   : Node, \r\n  nodeKey: string = createNodeKey(node)\r\n): NodeType {\r\n  return nodeTypeByNodeKey[nodeKey] ?? (nodeTypeByNodeKey[nodeKey] = getNodeTypeByNode(node));\r\n}\r\n","import { IFilterText, IBindText } from \"./types\";\r\n\r\nconst trim = (s:string):string => s.trim();\r\n\r\nconst has = (s:string):boolean => s.length > 0; // check length\r\n\r\nconst re = new RegExp(/^#(.*)#$/);\r\nconst decode = (s:string):string => {\r\n  const m = re.exec(s);\r\n  return m ? decodeURIComponent(m[1]) : s;\r\n};\r\n\r\n/**\r\n * parse filter part\r\n * \"eq,100|falsey\" ---> [Filter(eq, [100]), Filter(falsey)]\r\n */\r\nconst parseFilter = (text:string): IFilterText => {\r\n  const [name, ...options] = text.split(\",\").map(trim);\r\n  return {name, options:options.map(decode)};\r\n};\r\n\r\ntype ReturnParseStateProperty = {property:string,filters:IFilterText[]};\r\n/**\r\n * parse expression\r\n * \"value|eq,100|falsey\" ---> [\"value\", Filter[]]\r\n */\r\nconst parseProperty = (text:string): ReturnParseStateProperty => {\r\n  const [property, ...filterTexts] = text.split(\"|\").map(trim);\r\n  return {property, filters:filterTexts.map(parseFilter)};\r\n};\r\n\r\n/**\r\n * parse expressions\r\n * \"textContent:value|eq,100|falsey\" ---> [\"textContent\", \"value\", Filter[eq, falsey]]\r\n */\r\nconst parseExpression = (expression:string): IBindText => {\r\n  const [ bindExpression, decoratesExpression = null ] = expression.split(\"@\").map(trim);\r\n  const decorates = decoratesExpression ? decoratesExpression.split(\",\").map(trim) : [];\r\n  const [nodePropertyText, statePropertyText] = bindExpression.split(\":\").map(trim);\r\n  const { property:nodeProperty, filters:inputFilterTexts } = parseProperty(nodePropertyText);\r\n  const { property:stateProperty, filters:outputFilterTexts } = parseProperty(statePropertyText);\r\n  return { nodeProperty, stateProperty, inputFilterTexts, outputFilterTexts, decorates };\r\n};\r\n\r\n/**\r\n * parse bind text and return BindText[]\r\n */\r\nconst parseExpressions = (text:string): IBindText[] => {\r\n  return text.split(\";\").map(trim).filter(has).map(s => parseExpression(s));\r\n};\r\n\r\nconst cache:{[key:string]: IBindText[]} = {};\r\n\r\n/**\r\n * バインドテキスト（data-bind属性やコメント等から取得した文字列）を解析し、\r\n * バインディング情報（IBindText[]）に変換するユーティリティ関数群。\r\n *\r\n * - フィルターやデコレータ、プロパティ名などをパースし、構造化データとして返す\r\n * - \"textContent:value|eq,100|falsey@decorate1,decorate2\" のような複雑な記法にも対応\r\n * - セミコロン区切りで複数バインドもサポート\r\n * - パース結果はキャッシュし、同じ入力の再解析を防止\r\n *\r\n * @param text バインドテキスト\r\n * @returns    解析済みバインディング情報（IBindText[]）\r\n */\r\nexport function parseBindText(\r\n  text: string\r\n): IBindText[] {\r\n  if (text.trim() === \"\") {\r\n    return [];\r\n  }\r\n  return cache[text] ?? (cache[text] = parseExpressions(text));\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst DATASET_BIND_PROPERTY = 'data-bind';\r\n\r\nconst removeAttributeFromElement = (node:Node):void => {\r\n  const element = node as Element;\r\n  element.removeAttribute(DATASET_BIND_PROPERTY);\r\n}\r\n\r\ntype RemoveAttributeByNodeType = {\r\n  [key in NodeType]: ((node:Node)=>void) | undefined;\r\n}\r\n\r\nconst removeAttributeByNodeType:RemoveAttributeByNodeType = {\r\n  HTMLElement: removeAttributeFromElement,\r\n  SVGElement : removeAttributeFromElement,\r\n  Text       : undefined,\r\n  Template   : undefined,\r\n}\r\n\r\n/**\r\n * 指定ノードから data-bind 属性を削除するユーティリティ関数。\r\n *\r\n * - ノードタイプ（HTMLElement, SVGElement）の場合のみ data-bind 属性を削除\r\n * - Text, Template ノードは対象外\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"HTMLElement\" | \"SVGElement\" | \"Text\" | \"Template\"）\r\n * @returns        なし\r\n */\r\nexport function removeDataBindAttribute(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n):void {\r\n  return removeAttributeByNodeType[nodeType]?.(node);\r\n}\r\n","import { NodeType } from \"./types\";\r\n\r\nconst replaceTextNodeText = (node:Node):Node => {\r\n  const textNode = document.createTextNode(\"\");\r\n  node.parentNode?.replaceChild(textNode, node);\r\n  return textNode;\r\n}\r\n\r\ntype ReplaceTextNodeFn = {\r\n  [key in NodeType]: ((node:Node)=>Node) | undefined;\r\n}\r\n\r\nconst replaceTextNodeFn:ReplaceTextNodeFn = {\r\n  Text       : replaceTextNodeText,\r\n  HTMLElement: undefined,\r\n  Template   : undefined,\r\n  SVGElement : undefined\r\n}\r\n\r\n/**\r\n * コメントノードをテキストノードに置き換えるユーティリティ関数。\r\n *\r\n * - ノードタイプが \"Text\" の場合のみ、コメントノードを空のテキストノードに置換する\r\n * - それ以外のノードタイプ（HTMLElement, Template, SVGElement）は何もしない\r\n *\r\n * @param node     対象ノード\r\n * @param nodeType ノードタイプ（\"Text\" | \"HTMLElement\" | \"Template\" | \"SVGElement\"）\r\n * @returns        置換後のノード（または元のノード）\r\n */\r\nexport function replaceTextNodeFromComment(\r\n  node    : Node, \r\n  nodeType: NodeType\r\n): Node {\r\n  return replaceTextNodeFn[nodeType]?.(node) ?? node;\r\n}\r\n","import { getAbsoluteNodePath } from \"./getAbsoluteNodePath.js\";\r\nimport { getBindingNodeCreator } from \"./getBindingNodeCreator.js\";\r\nimport { getBindingStateCreator } from \"./getBindingStateCreator.js\";\r\nimport { getDataBindText } from \"./getDataBindText.js\";\r\nimport { getNodeType } from \"./getNodeType.js\";\r\nimport { parseBindText } from \"./parseBindText.js\";\r\nimport { removeDataBindAttribute } from \"./removeDataBindAttribute.js\";\r\nimport { replaceTextNodeFromComment } from \"./replaceTextNodeFromComment.js\";\r\nimport { IBindingCreator, IBindText, IDataBindAttributes, NodePath, NodeType } from \"./types\";\r\n\r\n/**\r\n * DataBindAttributesクラスは、DOMノードからバインディング情報を抽出・解析し、\r\n * バインディング生成に必要な情報（ノード種別・パス・バインドテキスト・クリエイター）を管理します。\r\n *\r\n * - ノード種別やパスを特定\r\n * - data-bind属性やコメントノードからバインドテキストを取得・解析\r\n * - バインドテキストごとにバインディング生成関数（ノード用・状態用）を用意\r\n * - data-bind属性やコメントノードはパース後に削除・置換\r\n *\r\n * これにより、テンプレート内のバインディング定義を一元的に管理し、後続のバインディング構築処理を効率化します。\r\n */\r\nclass DataBindAttributes implements IDataBindAttributes {\r\n  nodeType     : NodeType; // ノードの種別\r\n  nodePath     : NodePath; // ノードのルート\r\n  bindTexts    : IBindText[]; // BINDテキストの解析結果\r\n  creatorByText: Map<IBindText, IBindingCreator> = new Map(); // BINDテキストからバインディングクリエイターを取得\r\n  constructor(node: Node) {\r\n    this.nodeType = getNodeType(node);\r\n    const text = getDataBindText(this.nodeType, node);\r\n\r\n    // コメントノードの場合はTextノードに置換（template.contentが書き換わる点に注意）\r\n    node = replaceTextNodeFromComment(node, this.nodeType);\r\n\r\n    // data-bind属性を削除（パース後は不要なため）\r\n    removeDataBindAttribute(node, this.nodeType);\r\n\r\n    this.nodePath = getAbsoluteNodePath(node);\r\n    this.bindTexts = parseBindText(text);\r\n\r\n    // 各バインドテキストごとにバインディング生成関数を用意\r\n    for(let i = 0; i < this.bindTexts.length; i++) {\r\n      const bindText = this.bindTexts[i];\r\n      const creator: IBindingCreator = {\r\n        createBindingNode : getBindingNodeCreator(\r\n          node, \r\n          bindText.nodeProperty, \r\n          bindText.inputFilterTexts,\r\n          bindText.decorates\r\n        ),\r\n        createBindingState: getBindingStateCreator(\r\n          bindText.stateProperty, \r\n          bindText.outputFilterTexts\r\n        ),\r\n      }\r\n      this.creatorByText.set(bindText, creator);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * 指定ノードからDataBindAttributesインスタンスを生成するファクトリ関数。\r\n */\r\nexport function createDataBindAttributes(node: Node): IDataBindAttributes {\r\n  return new DataBindAttributes(node);\r\n}","import { DATA_BIND_ATTRIBUTE, COMMENT_EMBED_MARK, COMMENT_TEMPLATE_MARK } from \"../constants.js\";\r\n\r\n/**\r\n * \"@@:\"もしくは\"@@|\"で始まるコメントノードを取得する\r\n */\r\nfunction isCommentNode(node: Node): boolean {\r\n  return node instanceof Comment && (\r\n    (node.textContent?.indexOf(COMMENT_EMBED_MARK) === 0) || (node.textContent?.indexOf(COMMENT_TEMPLATE_MARK) === 0)\r\n  );\r\n} \r\n\r\n/**\r\n * 指定ノード以下のツリーから「data-bind属性を持つ要素」または\r\n * 「特定のマーク（@@: または @@|）で始まるコメントノード」をすべて取得するユーティリティ関数。\r\n *\r\n * - Elementノードの場合: data-bind属性があるものだけを抽出\r\n * - Commentノードの場合: COMMENT_EMBED_MARK または COMMENT_TEMPLATE_MARK で始まるものだけを抽出\r\n * - DOMツリー全体をTreeWalkerで効率的に走査\r\n *\r\n * @param root 探索の起点となるノード\r\n * @returns    条件に合致したノードの配列\r\n */\r\nexport function getNodesHavingDataBind(root: Node): Node[] {\r\n  const nodes: Node[] = [];\r\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT, {\r\n    acceptNode(node:Node) {\r\n      return (node instanceof Element) ? \r\n        (node.hasAttribute(DATA_BIND_ATTRIBUTE) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP)\r\n        : (isCommentNode(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP);\r\n    }\r\n  });\r\n  while (walker.nextNode()) {\r\n    nodes.push(walker.currentNode);\r\n  }\r\n  return nodes;\r\n}\r\n\r\n","import { createDataBindAttributes } from \"./createDataBindAttributes.js\";\r\nimport { getNodesHavingDataBind } from \"./getNodesHavingDataBind.js\";\r\nimport { IDataBindAttributes } from \"./types\";\r\n\r\nconst listDataBindAttributesById: {[key:number]:IDataBindAttributes[]} = {};\r\n\r\nconst listPathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nconst pathsSetById: {[key:number]:Set<string>} = {};\r\n\r\nfunction getDataBindAttributesFromTemplate(content: DocumentFragment): IDataBindAttributes[] {\r\n  const nodes = getNodesHavingDataBind(content);\r\n  return nodes.map(node => createDataBindAttributes(node));\r\n}\r\n\r\n/**\r\n * テンプレート（DocumentFragment）内のバインディング情報（data-bind属性やコメント）を解析・登録し、\r\n * 各テンプレートIDごとにバインディング属性情報・状態パス集合を管理するユーティリティ。\r\n *\r\n * - getNodesHavingDataBindで対象ノードを抽出し、createDataBindAttributesで解析\r\n * - 各テンプレートIDごとにバインディング属性リスト・状態パス集合・リストパス集合をキャッシュ\r\n * - forバインディング（ループ）のstatePropertyはlistPathsにも登録\r\n *\r\n * @param id      テンプレートID\r\n * @param content テンプレートのDocumentFragment\r\n * @param rootId  ルートテンプレートID（省略時はidと同じ）\r\n * @returns       解析済みバインディング属性リスト\r\n */\r\nexport function registerDataBindAttributes(\r\n  id     : number, \r\n  content: DocumentFragment,\r\n  rootId : number = id\r\n): IDataBindAttributes[] {\r\n  const dataBindAttributes = getDataBindAttributesFromTemplate(content);\r\n  const paths = pathsSetById[rootId] ?? (pathsSetById[rootId] = new Set<string>());\r\n  const listPaths = listPathsSetById[rootId] ?? (listPathsSetById[rootId] = new Set<string>());\r\n  for(let i = 0; i < dataBindAttributes.length; i++) {\r\n    const attribute = dataBindAttributes[i];\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      paths.add(bindText.stateProperty);\r\n      if (bindText.nodeProperty === \"for\") {\r\n        listPaths.add(bindText.stateProperty);\r\n      }\r\n    }\r\n  }\r\n  return listDataBindAttributesById[id] = dataBindAttributes;\r\n}\r\n\r\n/**\r\n * テンプレートIDからバインディング属性リストを取得\r\n */\r\nexport const getDataBindAttributesById = (id: number): IDataBindAttributes[] => {\r\n  return listDataBindAttributesById[id];\r\n}\r\n\r\n/**\r\n * テンプレートIDからforバインディングのstateProperty集合を取得\r\n */\r\nexport const getListPathsSetById = (id: number): Set<string> => {\r\n  return listPathsSetById[id] ?? [];\r\n};\r\n\r\n/**\r\n * テンプレートIDから全バインディングのstateProperty集合を取得\r\n */\r\nexport const getPathsSetById = (id: number): Set<string> => {\r\n  return pathsSetById[id] ?? [];\r\n};","/**\r\n * removeEmptyTextNodes.ts\r\n *\r\n * DocumentFragment内の空テキストノードを削除するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - content（DocumentFragment）の直下にある空白のみのテキストノードを検出し、削除する\r\n *\r\n * 設計ポイント:\r\n * - childNodesをArray.fromで配列化し、forEachで全ノードを走査\r\n * - nodeTypeがTEXT_NODEかつ、nodeValueが空白のみの場合にremoveChildで削除\r\n * - テンプレート処理やクリーンなDOM生成時に利用\r\n */\r\nexport function removeEmptyTextNodes(content:DocumentFragment):void {\r\n  Array.from(content.childNodes).forEach(node => {\r\n    if (node.nodeType === Node.TEXT_NODE && !(node.nodeValue ?? \"\").trim()) {\r\n      content.removeChild(node);\r\n    }\r\n  });  \r\n}\r\n","/**\r\n * registerTemplate.ts\r\n *\r\n * HTMLTemplateElementをIDで登録・取得するための管理モジュールです。\r\n *\r\n * 主な役割:\r\n * - templateById: IDをキーにHTMLTemplateElementを管理するレコード\r\n * - registerTemplate: 指定IDでテンプレートを登録し、空テキストノード除去やデータバインド属性の登録も実行\r\n * - getTemplateById: 指定IDのテンプレートを取得（未登録時はエラーを投げる）\r\n *\r\n * 設計ポイント:\r\n * - テンプレート登録時にremoveEmptyTextNodesで空テキストノードを除去し、クリーンなDOMを維持\r\n * - registerDataBindAttributesでデータバインド属性を自動付与\r\n * - グローバルにテンプレートを一元管理し、ID経由で高速にアクセス可能\r\n * - 存在しないIDアクセス時はraiseErrorで明確な例外を発生\r\n */\r\nimport { registerDataBindAttributes } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { removeEmptyTextNodes } from \"./removeEmptyTextNodes.js\";\r\n\r\nconst templateById:Record<number, HTMLTemplateElement> = {};\r\n\r\nexport function registerTemplate(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number\r\n): number {\r\n  removeEmptyTextNodes(template.content);\r\n  registerDataBindAttributes(id, template.content, rootId);  \r\n  templateById[id] = template;\r\n  return id;\r\n}\r\n\r\nexport function getTemplateById(id: number): HTMLTemplateElement {\r\n  return templateById[id] ?? raiseError(`getTemplateById: template not found: ${id}`);\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IStateProxy } from \"../StateClass/types\";\r\nimport { CreateBindingNodeByNodeFn, IBindingNode } from \"./BindingNode/types\";\r\nimport { CreateBindingStateByStateFn, IBindingState } from \"./BindingState/types\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\n\r\n/**\r\n * Bindingクラスは、1つのバインディング（ノードと状態の対応）を管理する中核的な実装です。\r\n *\r\n * 主な役割:\r\n * - DOMノードと状態（State）を結びつけるバインディングノード（bindingNode）とバインディング状態（bindingState）の生成・管理\r\n * - バインディングの初期化（init）、再描画（render）、状態値の更新（updateStateValue）などの処理を提供\r\n * - バージョン管理により、不要な再描画を防止\r\n *\r\n * 設計ポイント:\r\n * - createBindingNode, createBindingStateファクトリで柔軟なバインディング構造に対応\r\n * - renderでバージョン差分がある場合のみバインディングノードを更新\r\n * - 双方向バインディング時はupdateStateValueで状態プロキシに値を反映\r\n * - createBinding関数で一貫したバインディング生成を提供\r\n */\r\nclass Binding implements IBinding {\r\n  parentBindContent: IBindContent;\r\n  node             : Node;\r\n  engine           : IComponentEngine;\r\n  bindingNode      : IBindingNode;\r\n  bindingState     : IBindingState;\r\n  version          : number | undefined;\r\n  constructor(\r\n    parentBindContent : IBindContent,\r\n    node              : Node,\r\n    engine            : IComponentEngine,\r\n    createBindingNode : CreateBindingNodeByNodeFn, \r\n    createBindingState: CreateBindingStateByStateFn,\r\n  ) {\r\n    this.parentBindContent = parentBindContent\r\n    this.node = node;\r\n    this.engine = engine\r\n    this.bindingNode = createBindingNode(this, node, engine.inputFilters);\r\n    this.bindingState = createBindingState(this, engine.readonlyState, engine.outputFilters);\r\n  }\r\n\r\n  get bindContents() {\r\n    return this.bindingNode.bindContents;\r\n  }\r\n\r\n  init() {\r\n    this.bindingNode.init();\r\n    this.bindingState.init();\r\n  }\r\n\r\n  render() {\r\n    if (this.version !== this.engine.updater.version) {\r\n      try {\r\n        this.bindingNode.update();\r\n      } finally {\r\n        this.version = this.engine.updater.version;\r\n      }\r\n    }\r\n  }\r\n\r\n  updateStateValue(writeState:IStateProxy, value: any) {\r\n    return this.bindingState.assignValue(writeState, value);\r\n  }\r\n}\r\n\r\n/**\r\n * バインディング生成用ファクトリ関数\r\n * - 各種ファクトリ・エンジン・ノード情報からBindingインスタンスを生成\r\n */\r\nexport function createBinding(\r\n  parentBindContent : IBindContent,\r\n  node              : Node, \r\n  engine            : IComponentEngine, \r\n  createBindingNode : CreateBindingNodeByNodeFn, \r\n  createBindingState: CreateBindingStateByStateFn\r\n): IBinding {\r\n  return new Binding(\r\n    parentBindContent, \r\n    node, \r\n    engine, \r\n    createBindingNode, \r\n    createBindingState\r\n  );\r\n}","/**\r\n * createLoopContext.ts\r\n *\r\n * ループバインディング（for等）で利用するLoopContext（ループコンテキスト）管理クラスとファクトリ関数の実装です。\r\n *\r\n * 主な役割:\r\n * - ループごとのプロパティパス・インデックス・BindContentを紐付けて管理\r\n * - 親ループコンテキストの探索やキャッシュ、インデックスの再割り当て・クリアなどを提供\r\n * - ループ階層をたどるwalk/serializeや、名前でのfind検索も可能\r\n *\r\n * 設計ポイント:\r\n * - WeakRefでlistIndexを保持し、GCフレンドリーな設計\r\n * - parentLoopContextで親ループを遅延探索・キャッシュし、効率的な親子関係管理を実現\r\n * - findで名前からループコンテキストを高速検索（キャッシュ付き）\r\n * - walk/serializeでループ階層をたどる処理を簡潔に記述可能\r\n * - createLoopContextファクトリで一貫した生成・管理が可能\r\n */\r\nimport { IBindContent } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { ILoopContext } from \"./types\";\r\n\r\nclass LoopContext implements ILoopContext {\r\n  #path     : string;\r\n  #info        : IStructuredPathInfo;\r\n  #listIndexRef: WeakRef<IListIndex> | null;\r\n  #bindContent : IBindContent;\r\n  constructor(\r\n    path    : string | null,\r\n    listIndex  : IListIndex,\r\n    bindContent: IBindContent\r\n  ) {\r\n    this.#path = path ?? raiseError(\"name is required\");\r\n    this.#info = getStructuredPathInfo(this.#path);\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    this.#bindContent = bindContent;\r\n  }\r\n  get path(): string {\r\n    return this.#path;\r\n  }\r\n  get info(): IStructuredPathInfo {\r\n    return this.#info;\r\n  }\r\n  get listIndex(): IListIndex {\r\n    return this.#listIndexRef?.deref() ?? raiseError(\"listIndex is null\");\r\n  }\r\n  get listIndexRef(): WeakRef<IListIndex> {\r\n    return this.#listIndexRef ?? raiseError(\"listIndexRef is null\");\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    this.#listIndexRef = new WeakRef(listIndex);\r\n    // 構造は変わらないので、#parentLoopContext、#cacheはクリアする必要はない\r\n  }\r\n  clearListIndex():void {\r\n    this.#listIndexRef = null;\r\n  }\r\n  get bindContent(): IBindContent {\r\n    return this.#bindContent;\r\n  }\r\n\r\n  #parentLoopContext: ILoopContext | null | undefined;\r\n  get parentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#parentLoopContext === \"undefined\") {\r\n      let currentBinding: IBindContent | null = this.bindContent;\r\n      while(currentBinding !== null) {\r\n        if (currentBinding.loopContext !== null && currentBinding.loopContext !== this) {\r\n          this.#parentLoopContext = currentBinding.loopContext;\r\n          break;\r\n        }\r\n        currentBinding = currentBinding.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      if (typeof this.#parentLoopContext === \"undefined\") this.#parentLoopContext = null;\r\n    }\r\n    return this.#parentLoopContext;\r\n  }\r\n\r\n  #cache:Record<string, ILoopContext | null> = {};\r\n  find(name: string): ILoopContext | null {\r\n    let loopContext = this.#cache[name];\r\n    if (typeof loopContext === \"undefined\") {\r\n      let currentLoopContext: ILoopContext | null = this;\r\n      while(currentLoopContext !== null) {\r\n        if (currentLoopContext.path === name) break;\r\n        currentLoopContext = currentLoopContext.parentLoopContext;\r\n      }\r\n      loopContext = this.#cache[name] = currentLoopContext;\r\n    }\r\n    return loopContext;\r\n  }\r\n\r\n  walk(callback: (loopContext: ILoopContext) => void): void {\r\n    let currentLoopContext: ILoopContext | null = this;\r\n    while(currentLoopContext !== null) {\r\n      callback(currentLoopContext);\r\n      currentLoopContext = currentLoopContext.parentLoopContext;\r\n    }\r\n  }\r\n\r\n  serialize(): ILoopContext[] {\r\n    const results: ILoopContext[] = [];\r\n    this.walk((loopContext) => {\r\n      results.unshift(loopContext);\r\n    });\r\n    return results;\r\n  }\r\n\r\n}\r\n\r\n// 生成されたあと、IBindContentのloopContextに登録される\r\n// IBindContentにずっと保持される\r\nexport function createLoopContext(\r\n  pattern: string | null,\r\n  listIndex: IListIndex,\r\n  bindContent: IBindContent\r\n): ILoopContext {\r\n  return new LoopContext(pattern, listIndex, bindContent);\r\n}","/**\r\n * render.ts\r\n *\r\n * DataBindingのバインディング配列を受け取り、各バインディングのrender処理を実行するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - bindings配列を走査し、isSelectElementフラグが立っているものは後回しでレンダリング\r\n * - それ以外のバインディングは即時renderを実行\r\n * - select要素のバインディングは最後にまとめてrenderを実行（依存関係や描画順序の問題を回避）\r\n *\r\n * 設計ポイント:\r\n * - select要素の描画順序を制御することで、option要素のバインディングや値の整合性を担保\r\n * - 通常のバインディングとselect要素のバインディングを分離して処理\r\n */\r\nimport { IBinding } from \"../DataBinding/types\";\r\n\r\nexport function render(bindings: IBinding[]) {\r\n  const bindingsWithSelectElement = [];\r\n  for(let i = 0; i < bindings.length; i++) {\r\n    const binding = bindings[i];\r\n    if (binding.bindingNode.isSelectElement) {\r\n      bindingsWithSelectElement.push(binding);\r\n    } else {\r\n      binding.render();\r\n    }\r\n  }\r\n  for(let i = 0; i < bindingsWithSelectElement.length; i++) {\r\n    bindingsWithSelectElement[i].render();\r\n  }\r\n}\r\n","import { resolveNodeFromPath } from \"../BindingBuilder/resolveNodeFromPath.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { createBinding } from \"./Binding.js\";\r\nimport { IBindContent, IBinding } from \"./types\";\r\nimport { createLoopContext } from \"../LoopContext/createLoopContext.js\";\r\nimport { render } from \"../Updater/render.js\";\r\nimport { getDataBindAttributesById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\n\r\nfunction createContent(id: number): DocumentFragment {\r\n  const template = getTemplateById(id) ?? \r\n    raiseError(`BindContent: template is not found: ${id}`);\r\n  return document.importNode(template.content, true);\r\n}\r\n\r\nfunction createBindings(\r\n  bindContent: IBindContent, \r\n  id         : number, \r\n  engine     : IComponentEngine, \r\n  content    : DocumentFragment\r\n): IBinding[] {\r\n  const attributes = getDataBindAttributesById(id) ?? \r\n    raiseError(`BindContent: data-bind is not set`);\r\n  const bindings: IBinding[] = [];\r\n  for(let i = 0; i < attributes.length; i++) {\r\n    const attribute = attributes[i];\r\n    const node = resolveNodeFromPath(content, attribute.nodePath) ?? \r\n      raiseError(`BindContent: node is not found: ${attribute.nodePath}`);\r\n    for(let j = 0; j < attribute.bindTexts.length; j++) {\r\n      const bindText = attribute.bindTexts[j];\r\n      const creator = attribute.creatorByText.get(bindText) ?? \r\n        raiseError(`BindContent: creator is not found: ${bindText}`);\r\n      const binding = createBinding(\r\n        bindContent, \r\n        node, \r\n        engine, \r\n        creator.createBindingNode, \r\n        creator.createBindingState\r\n      );\r\n      bindings.push(binding);\r\n    }\r\n  }\r\n  return bindings;\r\n}\r\n\r\n/**\r\n * BindContentクラスは、テンプレートから生成されたDOM断片（DocumentFragment）と\r\n * そのバインディング情報（IBinding配列）を管理するための実装です。\r\n *\r\n * 主な役割:\r\n * - テンプレートIDからDOM断片を生成し、バインディング情報を構築\r\n * - mount/mountBefore/mountAfter/unmountでDOMへの挿入・削除を制御\r\n * - renderでバインディングの再描画、initで初期化処理を実行\r\n * - ループバインディング時のLoopContextやリストインデックス管理にも対応\r\n * - getLastNodeで再帰的に最後のノードを取得し、リスト描画や差し替えに利用\r\n * - assignListIndexでループ内のリストインデックスを再割り当てし、再初期化\r\n *\r\n * 設計ポイント:\r\n * - fragmentとchildNodesの両方を管理し、効率的なDOM操作を実現\r\n * - バインディング情報はテンプレートごとに動的に生成され、各ノードに紐付く\r\n * - ループや条件分岐など複雑なバインディング構造にも柔軟に対応\r\n * - createBindContentファクトリ関数で一貫した生成・初期化を提供\r\n */\r\nclass BindContent implements IBindContent {\r\n  loopContext  : ILoopContext | null;\r\n  parentBinding: IBinding | null;\r\n  childNodes   : Node[];\r\n  fragment     : DocumentFragment;\r\n  engine       : IComponentEngine | undefined;\r\n  #id;\r\n  get id() {\r\n    return this.#id;\r\n  }\r\n  get isMounted() {\r\n    return this.childNodes.length > 0 && this.childNodes[0].parentNode !== this.fragment;\r\n  }\r\n  get firstChildNode() {\r\n    return this.childNodes[0] ?? null;\r\n  }\r\n  get lastChildNode() {\r\n    return this.childNodes[this.childNodes.length - 1] ?? null;\r\n  }\r\n  getLastNode(parentNode: Node): Node | null {\r\n    const lastBinding = this.bindings[this.bindings.length - 1];\r\n    const lastChildNode = this.lastChildNode;\r\n    if (lastBinding.node === lastChildNode) {\r\n      if (lastBinding.bindContents.size > 0) {\r\n        const childBindContent = Array.from(lastBinding.bindContents).at(-1) ?? raiseError(`BindContent: childBindContent is not found`);\r\n        const lastNode = childBindContent.getLastNode(parentNode);\r\n        if (lastNode !== null) {\r\n          return lastNode;\r\n        }\r\n      }\r\n    }\r\n    if (parentNode !== lastChildNode?.parentNode) {\r\n      return null;\r\n    }\r\n    return lastChildNode;\r\n  }\r\n  #currentLoopContext: ILoopContext | null | undefined;\r\n  get currentLoopContext(): ILoopContext | null {\r\n    if (typeof this.#currentLoopContext === \"undefined\") {\r\n      let bindContent: IBindContent | null = this;\r\n      while(bindContent !== null) {\r\n        if (bindContent.loopContext !== null) break; ;\r\n        bindContent = bindContent.parentBinding?.parentBindContent ?? null;\r\n      }\r\n      this.#currentLoopContext = bindContent?.loopContext ?? null;\r\n    }\r\n    return this.#currentLoopContext;\r\n  }\r\n  constructor(\r\n    parentBinding: IBinding | null,\r\n    id           : number, \r\n    engine       : IComponentEngine, \r\n    loopContext  : string | null,\r\n    listIndex    : IListIndex | null\r\n  ) {\r\n    this.parentBinding = parentBinding;\r\n    this.#id = id;\r\n    this.fragment = createContent(id);\r\n    this.childNodes = Array.from(this.fragment.childNodes);\r\n    this.engine = engine;\r\n    this.loopContext = (listIndex !== null) ? createLoopContext(loopContext, listIndex, this) : null;\r\n    this.bindings = createBindings(\r\n      this, \r\n      id, \r\n      engine, \r\n      this.fragment\r\n    );\r\n  }\r\n  mount(parentNode: Node) {\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        parentNode.appendChild(this.childNodes[i]);\r\n      }\r\n    } else {\r\n      parentNode.appendChild(this.fragment);\r\n    }\r\n  }\r\n  mountBefore(parentNode: Node, beforeNode: Node | null) {\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n      }\r\n    } else {\r\n      parentNode.insertBefore(this.fragment, beforeNode);\r\n    }\r\n  }\r\n  mountAfter(parentNode: Node, afterNode: Node | null) {\r\n    const beforeNode = afterNode?.nextSibling ?? null;\r\n    if (this.fragment.childNodes.length === 0) {\r\n      for(let i = 0; i < this.childNodes.length; i++) {\r\n        parentNode.insertBefore(this.childNodes[i], beforeNode);\r\n      }\r\n    } else {\r\n      parentNode.insertBefore(this.fragment, beforeNode);\r\n    }\r\n  }\r\n  unmount() {\r\n    for(let i = 0; i < this.childNodes.length; i++) {\r\n      this.fragment.appendChild(this.childNodes[i]);\r\n    }\r\n  }\r\n  bindings: IBinding[] = [];\r\n  render() {\r\n    render(this.bindings);\r\n  }\r\n  init() {\r\n    this.bindings.forEach(binding => binding.init());\r\n  }\r\n  assignListIndex(listIndex: IListIndex): void {\r\n    if (this.loopContext == null) raiseError(`BindContent: loopContext is null`);\r\n    this.loopContext.assignListIndex(listIndex);\r\n    this.init();\r\n  }\r\n}\r\n\r\nexport function createBindContent(\r\n  parentBinding: IBinding | null,\r\n  id           : number, \r\n  engine       :IComponentEngine, \r\n  loopContext  : string | null, \r\n  listIndex    :IListIndex | null\r\n):IBindContent {\r\n  const bindContent = new BindContent(\r\n    parentBinding, \r\n    id, \r\n    engine, \r\n    loopContext, \r\n    listIndex\r\n  );\r\n  bindContent.init();\r\n  return bindContent;\r\n}","/**\r\n * createDependencyEdge.ts\r\n *\r\n * 依存関係グラフのエッジ（IDependencyEdge）を生成・キャッシュするユーティリティです。\r\n *\r\n * 主な役割:\r\n * - IStructuredPathInfo（プロパティパス情報）とDependencyType（依存種別）から一意なキーを生成\r\n * - 同じ依存エッジはキャッシュし、重複生成を防止\r\n * - createDependencyEdgeでIDependencyEdgeインスタンスを取得（キャッシュ利用）\r\n *\r\n * 設計ポイント:\r\n * - createDependencyKeyで「パターン@種別」の一意キーを生成\r\n * - cacheオブジェクトでIDependencyEdgeを再利用し、メモリ効率と比較効率を向上\r\n */\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { DependencyType, IDependencyEdge } from \"./types\";\r\n\r\n/**\r\n * infoとtypeから依存関係エッジの一意キーを生成\r\n */\r\nexport function createDependencyKey(info: IStructuredPathInfo, type: DependencyType): string {\r\n  return `${info.pattern}@${type}`;\r\n}\r\n\r\nconst cache: {[key:string]:IDependencyEdge} = {};;\r\n\r\n/**\r\n * 依存関係エッジ（IDependencyEdge）を生成・キャッシュして返す\r\n */\r\nexport function createDependencyEdge(\r\n  info: IStructuredPathInfo,\r\n  type: DependencyType,\r\n): IDependencyEdge {\r\n  const key = createDependencyKey(info, type);\r\n  return cache[key] ?? (cache[key] = { info, type });\r\n}\r\n","/**\r\n * createDependencyWalker.ts\r\n *\r\n * 依存関係グラフを辿るためのDependencyWalkerクラスと、その生成ファクトリです。\r\n *\r\n * 主な役割:\r\n * - 依存関係グラフ（dependentTree）を深さ優先で再帰的に探索し、各依存ノードに対してコールバックを実行\r\n * - ループ検出のためにtracedセットで訪問済みノードを管理し、無限ループを防止\r\n * - 依存種別（DependencyType）に応じて探索方法を柔軟に切り替え\r\n *\r\n * 設計ポイント:\r\n * - walkSubで再帰的に依存ノードを探索し、structured依存の場合は親のtypeを引き継ぐ\r\n * - tracedセットで一度訪れたノードは再訪しない\r\n * - walkでエントリポイントから探索を開始し、コールバックを全ノードに適用\r\n * - createDependencyWalkerファクトリで一貫した生成・利用が可能\r\n */\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { createDependencyKey } from \"./createDependencyEdge\";\r\nimport { DependencyType } from \"./types\";\r\n\r\nclass dependencyWalker {\r\n  engine: IComponentEngine;\r\n  entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null };\r\n  traced: Set<string> = new Set<string>();\r\n  constructor(\r\n    engine: IComponentEngine,\r\n    entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null },\r\n  ) {\r\n    this.engine = engine;\r\n    this.entryRef = entryRef;\r\n  }\r\n\r\n  walkSub(\r\n    info: IStructuredPathInfo,\r\n    type: DependencyType,\r\n    callback: (ref: IStatePropertyRef, info: IStructuredPathInfo, type: DependencyType) => void\r\n  ) {\r\n    const key = createDependencyKey(info, type);\r\n    if (this.traced.has(key)) {\r\n      return;\r\n    }\r\n    this.traced.add(key);\r\n    callback(this.entryRef, info, type);\r\n    const edges = this.engine.dependentTree.get(info) ?? [];\r\n    for(const edge of edges) {\r\n      const overridedType = edge.type === \"structured\" ? type : edge.type;\r\n      this.walkSub(edge.info, overridedType, callback);\r\n    }\r\n\r\n  }\r\n  walk(\r\n    callback: (ref: IStatePropertyRef, info: IStructuredPathInfo, type: DependencyType) => void\r\n  ) {\r\n    const traced = new Set<IStructuredPathInfo>();\r\n    this.walkSub(this.entryRef.info, \"structured\", callback);\r\n  } \r\n\r\n}\r\n\r\nexport function createDependencyWalker(\r\n  engine: IComponentEngine,\r\n  entryRef: { info: IStructuredPathInfo, listIndex: IListIndex | null },\r\n) {\r\n  return new dependencyWalker(engine, entryRef);\r\n}","/**\r\n * createListIndex.ts\r\n *\r\n * リストバインディングやループ処理で利用する「リストインデックス」管理クラスとファクトリ関数の実装です。\r\n *\r\n * 主な役割:\r\n * - ListIndexクラスで多重ループやネスト構造のインデックス情報をツリー状に管理\r\n * - indexes, position, lengthなどで階層的なインデックス情報を取得可能\r\n * - iterator/reverseIteratorで親子関係を辿るイテレータを提供\r\n * - atメソッドで指定位置のListIndexをキャッシュ付きで取得（WeakRefによるメモリ効率化）\r\n * - truncateで指定長さまでの親ListIndexを取得\r\n * - addで新たな子ListIndexを生成\r\n *\r\n * 設計ポイント:\r\n * - ListIndexは親子関係を持つことで多重ループやforバインディングに柔軟に対応\r\n * - atメソッドはキャッシュとWeakRefを活用し、GCフレンドリーかつ高速なインデックス参照を実現\r\n * - createListIndexファクトリで一貫した生成・管理が可能\r\n * - getMaxListIndexIdで現在の最大IDを取得可能（デバッグや管理用途）\r\n */\r\nimport { IListIndex } from \"./types\";\r\n\r\nclass ListIndex implements IListIndex {\r\n  static id: number = 0;\r\n  id              : number = ++ListIndex.id;\r\n  #parentListIndex: IListIndex | null = null;\r\n  get parentListIndex(): IListIndex | null {\r\n    return this.#parentListIndex;\r\n  }\r\n  index: number;\r\n  get indexes(): number[] {\r\n    const indexes = this.parentListIndex?.indexes ?? [];\r\n    indexes.push(this.index);\r\n    return indexes;\r\n  }\r\n\r\n  get position(): number {\r\n    return (this.parentListIndex?.position ?? -1) + 1;\r\n  }\r\n\r\n  get length(): number {\r\n    return (this.parentListIndex?.length ?? 0) + 1;\r\n  }\r\n  \r\n  constructor(\r\n    parentListIndex: IListIndex | null,\r\n    index: number\r\n  ) {\r\n    this.#parentListIndex = parentListIndex;\r\n    this.index = index;\r\n  }\r\n  \r\n  truncate(length: number): IListIndex | null {\r\n    let listIndex: IListIndex | null = this;\r\n    while(listIndex !== null) {\r\n      if (listIndex.position < length) return listIndex;\r\n      listIndex = listIndex.parentListIndex;\r\n    }\r\n    return null;\r\n  }\r\n  add(value: number): IListIndex {\r\n    return new ListIndex(this, value);\r\n  }\r\n\r\n  *reverseIterator(): Generator<IListIndex> {\r\n    yield this;\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.reverseIterator();\r\n    }\r\n    return;\r\n  }\r\n\r\n  *iterator(): Generator<IListIndex> {\r\n    if (this.parentListIndex !== null) {\r\n      yield* this.parentListIndex.iterator();\r\n    }\r\n    yield this;\r\n    return;\r\n  }\r\n\r\n  toString(): string {\r\n    const parentListIndex = this.parentListIndex?.toString();\r\n    return (parentListIndex !== null) ? parentListIndex + \",\" + this.index.toString() : this.index.toString();\r\n  }\r\n\r\n  #atcache:{[key:number]:(WeakRef<IListIndex> | null)} = {};\r\n  at(position: number): IListIndex | null {\r\n    const value = this.#atcache[position];\r\n    if (value !== undefined) {\r\n      return value ? (value.deref() ?? null) : null;\r\n    }\r\n    let iterator;\r\n    if (position >= 0) {\r\n      iterator = this.iterator();\r\n    } else {\r\n      position = - position - 1 \r\n      iterator = this.reverseIterator();\r\n    }\r\n    let next;\r\n    while(position >= 0) {\r\n      next = iterator.next();\r\n      position--;\r\n    }\r\n    const lisIndex = next?.value ?? null;\r\n    this.#atcache[position] = lisIndex ? new WeakRef(lisIndex) : null;\r\n    return lisIndex;\r\n  }\r\n  \r\n}\r\n\r\nexport function createListIndex(\r\n  parentListIndex: IListIndex | null,\r\n  index          : number\r\n): IListIndex {\r\n  return new ListIndex(parentListIndex, index);\r\n}\r\n\r\nexport function getMaxListIndexId(): number {\r\n  return ListIndex.id;\r\n}\r\n","/**\r\n * listWalker.ts\r\n *\r\n * Stateプロパティのワイルドカード（配列・多重ループ）に対応したリスト探索ユーティリティです。\r\n *\r\n * 主な役割:\r\n * - 指定したプロパティパス（IStructuredPathInfo）とリストインデックス（IListIndex）に対し、\r\n *   再帰的に全てのリスト要素（多重ループ含む）を探索し、コールバックを実行\r\n * - ワイルドカード階層が一致した場合のみコールバックを呼び出し、それ以外は親階層を辿って再帰探索\r\n *\r\n * 設計ポイント:\r\n * - listWalkerSubで再帰的にリストインデックスを探索し、全要素に対してコールバックを適用\r\n * - listWalkerでエントリポイントを提供し、外部から簡単に利用可能\r\n * - 多重ループやネストした配列バインディングにも柔軟に対応\r\n */\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils\";\r\n\r\nfunction listWalkerSub(\r\n  engine: IComponentEngine,\r\n  info: IStructuredPathInfo, \r\n  listIndex: IListIndex | null, \r\n  callback:(info: IStructuredPathInfo, listIndex: IListIndex | null)=> void\r\n) {\r\n  const listIndexLen = listIndex?.length ?? 0;\r\n  if (info.wildcardCount === listIndexLen) {\r\n    callback(info, listIndex);\r\n  } else {\r\n    const parentInfo = info.wildcardParentInfos[listIndexLen] ?? raiseError(\"Invalid state property info\");\r\n    const listIndexes = engine.getListIndexesSet(parentInfo, listIndex);\r\n    for(const subListIndex of listIndexes ?? []) {\r\n      listWalkerSub(engine, info, subListIndex, callback);\r\n    }\r\n  }\r\n}\r\n\r\nexport function listWalker(\r\n  engine: IComponentEngine,\r\n  info:IStructuredPathInfo, \r\n  listIndex: IListIndex | null,\r\n  callback:(info: IStructuredPathInfo, listIndex: IListIndex | null)=> void\r\n) {\r\n  listWalkerSub(engine, info, listIndex, callback);\r\n}\r\n","/**\r\n * getStatePropertyRef.ts\r\n *\r\n * StatePropertyRefのユーティリティとして、構造化パス情報（IStructuredPathInfo）と\r\n * リストインデックス（IListIndex）から一意な参照キー（refKey）を生成する関数です。\r\n *\r\n * 主な役割:\r\n * - info.idとlistIndex.idを組み合わせて、StatePropertyRefを一意に識別するキーを生成\r\n * - listIndexがnullの場合は0を利用し、全ての参照に対して一貫したキーを提供\r\n *\r\n * 設計ポイント:\r\n * - キャッシュや依存解決など、StatePropertyRefの識別・管理に利用\r\n * - シンプルな文字列連結で高速かつ衝突のないキー生成を実現\r\n */\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\n\r\nexport function createRefKey(\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n) {\r\n  return info.id + \":\" + (listIndex?.id ?? 0);\r\n}\r\n\r\n","/**\r\n * restructListIndex.ts\r\n *\r\n * StateClassのリストインデックス構造を再構築するためのユーティリティです。\r\n *\r\n * 主な役割:\r\n * - buildListIndexTree: 指定されたinfo/listIndex/valueに基づき、リストインデックスのツリー構造を再構築・更新\r\n *   - 既存のリストインデックスと新しいリスト要素を比較し、必要に応じてインデックスを再割り当て\r\n *   - インデックス変更時はengine.updater.addUpdatedListIndexで更新情報を登録\r\n *   - 新しいリストインデックス集合をengine.saveListIndexesSetで保存\r\n * - restructListIndexes: 依存関係を辿りながら、必要なリストインデックスの再構築を一括で実行\r\n *   - 依存関係のある全てのinfo/listIndexに対してbuildListIndexTreeを呼び出し\r\n *   - キャッシュやrefKeyを利用して重複処理や不要な再構築を防止\r\n *   - config.optimizeListElementsやoptimizeListによる最適化にも対応\r\n *\r\n * 設計ポイント:\r\n * - 依存関係の再帰的な探索と、リストインデックスの効率的な再利用・再構築を両立\r\n * - スワップや最適化設定時のスキップ処理、キャッシュによる高速化\r\n * - リストバインディングや多重ループ時のインデックス整合性を担保\r\n */\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { createDependencyWalker } from \"../DependencyWalker/createDependencyWalker\";\r\nimport { createListIndex } from \"../ListIndex/createListIndex\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { listWalker } from \"../ListWalker/listWalker\";\r\nimport { GetByRefSymbol } from \"../StateClass/symbols\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { createRefKey } from \"../StatePropertyRef/getStatePropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst BLANK_LISTINDEXES_SET = new Set<IListIndex>();\r\n\r\nfunction buildListIndexTree(\r\n  engine   : IComponentEngine, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value: any[]\r\n): void {\r\n  const oldValue = engine.getList(info, listIndex) ?? [];\r\n  if (oldValue === value) {\r\n    return;\r\n  }\r\n  const newListIndexesSet:Set<IListIndex> = new Set();\r\n  const oldListIndexesSet = engine.getListIndexesSet(info, listIndex) ?? BLANK_LISTINDEXES_SET;\r\n  const oldListIndexesByItem = Map.groupBy(oldListIndexesSet, listIndex => oldValue[listIndex.index]);\r\n  for(let i = 0; i < value.length; i++) {\r\n    // リスト要素から古いリストインデックスを取得して、リストインデックスを更新する\r\n    // もし古いリストインデックスがなければ、新しいリストインデックスを作成する\r\n    let curListIndex = oldListIndexesByItem.get(value[i])?.shift() ?? createListIndex(listIndex, i);\r\n    if (curListIndex.index !== i) {\r\n      curListIndex.index = i;\r\n      // リストインデックスのインデックスを更新したので、リストインデックスを登録する\r\n      engine.updater.addUpdatedListIndex(curListIndex);\r\n    }\r\n    // リストインデックスを新しいリストインデックスセットに追加する\r\n    newListIndexesSet.add(curListIndex);\r\n  }\r\n  // 新しいリストインデックスセットを保存する\r\n  engine.saveListIndexesSet(info, listIndex, newListIndexesSet);\r\n  engine.saveList(info, listIndex, value.slice(0)); // コピーを保存\r\n\r\n}\r\n\r\nexport function restructListIndexes(\r\n  infos: IStatePropertyRef[],\r\n  engine: IComponentEngine,\r\n  updateValues: {[key:string]: any[]},\r\n  refKeys: Set<string>,\r\n  cache: Map<IStructuredPathInfo, Set<IListIndex|null>>,\r\n) {\r\n  for(const {info, listIndex} of infos) {\r\n    if (config.optimizeListElements && engine.elementInfoSet.has(info)) {\r\n      // スワップ処理のためスキップ\r\n      continue;\r\n    }\r\n    const dependentWalker = createDependencyWalker(engine, {info, listIndex});\r\n    const nowOnList = config.optimizeList && engine.listInfoSet.has(info);\r\n    dependentWalker.walk((ref, refInfo, type) => {\r\n      if (nowOnList && type === \"structured\" && ref.info !== refInfo) {\r\n        if (refInfo.cumulativeInfoSet.has(ref.info)) {\r\n          return;\r\n        }\r\n      }\r\n      const wildcardMatchPaths = Array.from(ref.info.wildcardInfoSet.intersection(refInfo.wildcardInfoSet));\r\n      const longestMatchAt = (wildcardMatchPaths.at(-1)?.wildcardCount ?? 0) - 1;\r\n      const listIndex = (longestMatchAt >= 0) ? (ref.listIndex?.at(longestMatchAt) ?? null) : null;\r\n      listWalker(engine, refInfo, listIndex, (_info, _listIndex) => {\r\n        if (!engine.existsBindingsByInfo(_info)) {\r\n          return;\r\n        }\r\n        const refKey = createRefKey(_info, _listIndex);\r\n        if (refKeys.has(refKey)) {\r\n          return;\r\n        }\r\n        let cacheListIndexSet = cache.get(_info);\r\n        if (!cacheListIndexSet) {\r\n          cacheListIndexSet = new Set<IListIndex|null>();\r\n          cache.set(_info, cacheListIndexSet);\r\n        }\r\n        cacheListIndexSet.add(_listIndex);\r\n        refKeys.add(refKey);\r\n        if (engine.listInfoSet.has(_info)) {\r\n          const values = updateValues[refKey] ?? engine.readonlyState[GetByRefSymbol](_info, _listIndex);\r\n          buildListIndexTree(engine, _info, _listIndex, values);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n","/**\r\n * updater.ts\r\n *\r\n * StateClassの更新処理・変更検知・再描画を一元管理するUpdaterクラスの実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - Stateプロパティやリストインデックスの変更を検知し、再描画や依存解決をトリガー\r\n * - addUpdatedStatePropertyRefValue/addUpdatedListIndexで変更情報を登録し、entryRenderで描画処理をエントリーポイント化\r\n * - rebuildで変更の影響範囲を再計算し、必要なバインディングやリストインデックスの再構築を実行\r\n * - renderでバインディング配列をまとめて描画\r\n *\r\n * 設計ポイント:\r\n * - 変更検知・再描画を非同期でバッチ処理し、パフォーマンスを最適化\r\n * - リストバインディングや多重ループ、スワップ・最適化にも対応\r\n * - StateClassエンジンとの連携やキャッシュ機構も考慮した設計\r\n */\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { render } from \"./render.js\";\r\nimport { SetCacheableSymbol } from \"../StateClass/symbols.js\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { IUpdater } from \"./types\";\r\nimport { restructListIndexes } from \"./restructListIndex\";\r\nimport { createRefKey } from \"../StatePropertyRef/getStatePropertyRef\";\r\nimport { IStatePropertyRef } from \"../StatePropertyRef/types\";\r\n\r\ntype UpdatedArrayElementBinding = {\r\n  parentRef: IStatePropertyRef;\r\n  binding: IBinding;\r\n  listIndexes: IListIndex[];\r\n  values: any[];\r\n};\r\n\r\nclass Updater implements IUpdater {\r\n  updatedProperties: Set<IStatePropertyRef | IListIndex> = new Set;\r\n  updatedValues    : {[key:string]: any} = {};\r\n  engine           : IComponentEngine;\r\n  #version         : number = 0;\r\n\r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  get version(): number {\r\n    return this.#version;\r\n  }\r\n\r\n  addProcess(process: () => Promise<void> | void): void {\r\n    queueMicrotask(process);\r\n  }\r\n\r\n  addUpdatedStatePropertyRefValue(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any\r\n  ): void {\r\n    const refKey = createRefKey(info, listIndex);\r\n    this.updatedProperties.add({info, listIndex});\r\n    this.updatedValues[refKey] = value;\r\n    this.entryRender();\r\n  }\r\n\r\n  addUpdatedListIndex(listIndex: IListIndex): void {\r\n    this.updatedProperties.add(listIndex);\r\n    this.entryRender();\r\n  }\r\n\r\n  #isEntryRender = false;\r\n  entryRender() {\r\n    if (this.#isEntryRender) return;\r\n    this.#isEntryRender = true;\r\n    setTimeout(() => {\r\n      try {\r\n        const { bindings, arrayElementBindings } = this.rebuild();\r\n        // render\r\n        for(const arrayElementBinding of arrayElementBindings) {\r\n          arrayElementBinding.binding.bindingNode.updateElements(arrayElementBinding.listIndexes, arrayElementBinding.values);\r\n        }\r\n        if (bindings.length > 0) {\r\n          this.render(bindings);\r\n        }\r\n      } finally {\r\n        this.#isEntryRender = false;\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  rebuild(): {bindings: IBinding[], arrayElementBindings: UpdatedArrayElementBinding[]} {\r\n    const retArrayElementBindings: UpdatedArrayElementBinding[] = [];\r\n    const retBindings: IBinding[] = [];\r\n    const engine = this.engine;\r\n    while(this.updatedProperties.size > 0) {\r\n      const updatedProiperties = Array.from(this.updatedProperties.values());\r\n      this.updatedProperties.clear();\r\n      const bindingsByListIndex: IBinding[] = [];\r\n      const updatedRefs: IStatePropertyRef[] = []; // 更新されたプロパティ参照のリスト\r\n      const arrayElementBindingByParentRefKey = new Map<string, Partial<UpdatedArrayElementBinding>>();\r\n      for(let i = 0; i < updatedProiperties.length; i++) {\r\n        const item = updatedProiperties[i];\r\n        if (\"index\" in item) {\r\n          const bindings = engine.bindingsByListIndex.get(item as IListIndex) ?? [];\r\n          bindingsByListIndex.push(...bindings);\r\n        } else {\r\n          updatedRefs.push(item as IStatePropertyRef);\r\n          if (engine.elementInfoSet.has(item.info)) {\r\n            const parentInfo = item.info.parentInfo ?? raiseError(\"info is null\"); // リストのパス情報\r\n            const parentListIndex = item.listIndex?.at(-2) ?? null; // リストのインデックス\r\n            const parentRef = {info: parentInfo, listIndex: parentListIndex};\r\n            const parentRefKey = createRefKey(parentInfo, parentListIndex);\r\n            let info = arrayElementBindingByParentRefKey.get(parentRefKey);\r\n            if (!info) {\r\n              info = {\r\n                parentRef,\r\n                listIndexes: [],\r\n                values: []\r\n              };\r\n              arrayElementBindingByParentRefKey.set(parentRefKey, info);\r\n            }\r\n            const refKey = createRefKey(item.info, item.listIndex);\r\n            const value = this.updatedValues[refKey] ?? null;\r\n            info.values?.push(value);\r\n            info.listIndexes?.push(item.listIndex as IListIndex);\r\n          }\r\n        }\r\n      }\r\n      // リストインデックスの構築\r\n      const builtStatePropertyRefKeySet = new Set<string>();\r\n      const affectedRefs = new Map<IStructuredPathInfo, Set<IListIndex|null>>();\r\n      restructListIndexes(updatedRefs, engine, this.updatedValues, builtStatePropertyRefKeySet, affectedRefs);\r\n\r\n      // スワップの場合の情報を構築する\r\n      for(const [parentRefKey, info] of arrayElementBindingByParentRefKey) {\r\n        const parentInfo = info.parentRef?.info ?? raiseError(\"parentInfo is null\");\r\n        const parentListIndex = info.parentRef?.listIndex ?? null;\r\n        const bindings = engine.getBindings(parentInfo, parentListIndex);\r\n        for(const binding of bindings) {\r\n          if (!binding.bindingNode.isFor) {\r\n            continue;\r\n          }\r\n          const bindingInfo = Object.assign({}, info, { binding });\r\n          retArrayElementBindings.push(bindingInfo as UpdatedArrayElementBinding);\r\n        }\r\n      }\r\n      // 影響する全てのバインド情報を取得する\r\n      for(const [ info, listIndexes ] of affectedRefs.entries()) {\r\n        for(const listIndex of listIndexes) {\r\n          const bindings = engine.getBindings(info, listIndex);\r\n          retBindings.push(...bindings ?? []);\r\n        }\r\n      }\r\n      retBindings.push(...bindingsByListIndex);\r\n    }\r\n    this.updatedValues = {};\r\n    return {bindings: retBindings, arrayElementBindings: retArrayElementBindings};\r\n  }\r\n\r\n  render(bindings: IBinding[]) {\r\n    this.#version++;\r\n    this.engine.readonlyState[SetCacheableSymbol](() => {\r\n      return render(bindings);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createUpdater(engine: IComponentEngine): IUpdater {\r\n  return new Updater(engine);\r\n}\r\n\r\n","/**\r\n * 指定したタグ名の要素がShadowRootを持てるかどうかを判定するユーティリティ関数。\r\n *\r\n * - 指定タグ名で要素を生成し、attachShadowメソッドが存在するかどうかで判定\r\n * - 無効なタグ名やattachShadow未対応の場合はfalseを返す\r\n *\r\n * @param tagName 判定したい要素のタグ名（例: \"div\", \"span\", \"input\" など）\r\n * @returns       ShadowRootを持てる場合はtrue、持てない場合はfalse\r\n */\r\nexport function canHaveShadowRoot(tagName: string): boolean {\r\n  try {\r\n    // 一時的に要素を作成\r\n    const element = document.createElement(tagName);\r\n    // `attachShadow` メソッドが存在し、実行可能かを確認\r\n    return typeof element.attachShadow === \"function\";\r\n  } catch {\r\n    // 無効なタグ名などが渡された場合は false を返す\r\n    return false;\r\n  }\r\n}\r\n","import { raiseError } from \"../utils.js\";\r\nimport { IComponentConfig } from \"../WebComponents/types\";\r\nimport { canHaveShadowRoot } from \"./canHaveShadowRoot.js\";\r\n\r\nfunction getParentShadowRoot(parentNode: Node | null): ShadowRoot|undefined{\r\n  let node: Node | null = parentNode;\r\n  while(node) {\r\n    if (node instanceof ShadowRoot) {\r\n      return node;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n}\r\n\r\n/**\r\n * 指定したHTMLElementにShadow DOMをアタッチし、スタイルシートを適用するユーティリティ関数。\r\n *\r\n * - config.enableShadowDomがtrueの場合は、ShadowRootを生成し、adoptedStyleSheetsでスタイルを適用\r\n * - extends指定がある場合はcanHaveShadowRootで拡張可能かチェック\r\n * - Shadow DOMを使わない場合は、親のShadowRootまたはdocumentにスタイルシートを追加\r\n * - すでに同じスタイルシートが含まれていれば重複追加しない\r\n *\r\n * @param element    対象のHTMLElement\r\n * @param config     コンポーネント設定\r\n * @param styleSheet 適用するCSSStyleSheet\r\n * @throws           Shadow DOM非対応の組み込み要素を拡張しようとした場合はエラー\r\n */\r\nexport function attachShadow(element: HTMLElement, config: IComponentConfig, styleSheet: CSSStyleSheet): void {\r\n    if (config.enableShadowDom) {\r\n      if (config.extends === null || canHaveShadowRoot(config.extends)) {\r\n        const shadowRoot = element.attachShadow({ mode: 'open' });\r\n        shadowRoot.adoptedStyleSheets = [styleSheet];\r\n      } else {\r\n        raiseError(`ComponentEngine: Shadow DOM not supported for builtin components that extend ${config.extends}`);\r\n      }\r\n    } else {\r\n      const shadowRootOrDocument = getParentShadowRoot(element.parentNode) || document;\r\n      const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n      if (!styleSheets.includes(styleSheet)) {\r\n        shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, styleSheet];\r\n      }\r\n    }\r\n\r\n}","import { createListIndex } from \"../ListIndex/createListIndex.js\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { GetByRefSymbol } from \"./symbols.js\";\r\n\r\nconst BLANK_LISTINDEXES_SET = new Set<IListIndex>();\r\n\r\nfunction buildListIndexTreeSub(\r\n  engine   : IComponentEngine, \r\n  listInfos: Set<IStructuredPathInfo>,\r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value: any[]\r\n): void {\r\n  const oldValue = engine.getList(info, listIndex) ?? [];\r\n  if (oldValue === value) {\r\n    return;\r\n  }\r\n  const newListIndexesSet:Set<IListIndex> = new Set();\r\n  const oldListIndexesSet = engine.getListIndexesSet(info, listIndex) ?? BLANK_LISTINDEXES_SET;\r\n  const oldListIndexesByItem = Map.groupBy(oldListIndexesSet, listIndex => oldValue[listIndex.index]);\r\n  for(let i = 0; i < value.length; i++) {\r\n    // リスト要素から古いリストインデックスを取得して、リストインデックスを更新する\r\n    // もし古いリストインデックスがなければ、新しいリストインデックスを作成する\r\n    let curListIndex = oldListIndexesByItem.get(value[i])?.shift() ?? createListIndex(listIndex, i);\r\n    if (curListIndex.index !== i) {\r\n      curListIndex.index = i;\r\n      // リストインデックスのインデックスを更新したので、リストインデックスを登録する\r\n      engine.updater.addUpdatedListIndex(curListIndex);\r\n    }\r\n    // リストインデックスを新しいリストインデックスセットに追加する\r\n    newListIndexesSet.add(curListIndex);\r\n  }\r\n  // 新しいリストインデックスセットを保存する\r\n  engine.saveListIndexesSet(info, listIndex, newListIndexesSet);\r\n  engine.saveList(info, listIndex, value.slice(0)); // コピーを保存\r\n\r\n  // サブ要素のリストインデックスを構築する\r\n  const searchPath = info.pattern + \".*\";\r\n  for(const info of listInfos) {\r\n    if (searchPath !== info.lastWildcardPath) {\r\n      continue;\r\n    }\r\n    for(const subListIndex of newListIndexesSet) {\r\n      const subValue = engine.readonlyState[GetByRefSymbol](info, subListIndex);\r\n      buildListIndexTreeSub(\r\n        engine, \r\n        listInfos, \r\n        info, \r\n        subListIndex, \r\n        subValue ?? []\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function buildListIndexTree(\r\n  engine   : IComponentEngine, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null, \r\n  value    : any\r\n): void {\r\n  const listInfos = engine.listInfoSet;\r\n  // 配列じゃなければ何もしない\r\n  if (!engine.listInfoSet.has(info)) {\r\n    return;\r\n  }\r\n  const values = (value ?? []) as any[];\r\n  buildListIndexTreeSub(\r\n    engine, \r\n    engine.listInfoSet, \r\n    info, \r\n    listIndex, \r\n    values\r\n  );\r\n}\r\n","/**\r\n * setTracking.ts\r\n *\r\n * StateClassの内部APIとして、依存関係トラッキング用のスコープを一時的に設定し、\r\n * 指定したコールバックをそのスコープ内で実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.trackingStackにinfo（依存対象のパス情報）をpushしてトラッキングスコープを設定\r\n * - 指定したcallbackをそのスコープ内で実行\r\n * - finallyで必ずtrackingStackからpopし、スコープ外への影響を防止\r\n * - lastTrackingStackも適切に更新\r\n *\r\n * 設計ポイント:\r\n * - コールバック実行中のみ依存トラッキングを有効化し、例外発生時も状態復元を保証\r\n * - ネストした依存トラッキングにも対応可能\r\n */\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function setTracking(info: IStructuredPathInfo, handler: IStateHandler, callback: () => any): any {\r\n  handler.trackingStack.push(info);\r\n  handler.lastTrackingStack = info;\r\n  try {\r\n    return callback();\r\n  } finally {\r\n    handler.trackingStack.pop();\r\n    handler.lastTrackingStack = handler.trackingStack[handler.trackingStack.length - 1] ?? null;\r\n  }\r\n}\r\n","/**\r\n * getByRef.ts\r\n *\r\n * StateClassの内部APIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * 状態オブジェクト（target）から値を取得するための関数（getByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定されたパス・インデックスに対応するState値を取得（多重ループやワイルドカードにも対応）\r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyで値をキャッシュ）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * - 存在しない場合は親infoやlistIndexを辿って再帰的に値を取得\r\n *\r\n * 設計ポイント:\r\n * - handler.engine.trackedGettersに含まれる場合はsetTrackingで依存追跡を有効化\r\n * - キャッシュ有効時はrefKeyで値をキャッシュし、取得・再利用を最適化\r\n * - ワイルドカードや多重ループにも柔軟に対応し、再帰的な値取得を実現\r\n * - finallyでキャッシュへの格納を保証\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { createRefKey } from \"../../StatePropertyRef/getStatePropertyRef\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { SetStatePropertyRefSymbol } from \"../symbols\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setTracking } from \"./setTracking.js\";\r\n\r\n/**\r\n * 構造化パス情報(info, listIndex)をもとに、状態オブジェクト(target)から値を取得する。\r\n * \r\n * - 依存関係の自動登録（trackedGetters対応時はsetTrackingでラップ）\r\n * - キャッシュ機構（handler.cacheable時はrefKeyでキャッシュ）\r\n * - ネスト・ワイルドカード対応（親infoやlistIndexを辿って再帰的に値を取得）\r\n * - getter経由で値取得時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * \r\n * @param target    状態オブジェクト\r\n * @param info      構造化パス情報\r\n * @param listIndex リストインデックス（多重ループ対応）\r\n * @param receiver  プロキシ\r\n * @param handler   状態ハンドラ\r\n * @returns         対象プロパティの値\r\n */\r\nfunction _getByRef(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  receiver : IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  // 依存関係の自動登録\r\n  if (handler.lastTrackingStack != null && handler.lastTrackingStack !== info) {\r\n    const lastPattern = handler.lastTrackingStack;\r\n    if (lastPattern.parentInfo !== info) {\r\n      handler.engine.addDependentProp(lastPattern, info, \"reference\");\r\n    }\r\n  }\r\n\r\n  // キャッシュが有効な場合はrefKeyで値をキャッシュ\r\n  let refKey = '';\r\n  if (handler.cacheable) {\r\n    refKey = createRefKey(info, listIndex);\r\n    const value = handler.cache[refKey];\r\n    if (typeof value !== \"undefined\") {\r\n      return value;\r\n    }\r\n    if (refKey in handler.cache) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  let value;\r\n  try {\r\n    // パターンがtargetに存在する場合はgetter経由で取得\r\n    if (info.pattern in target) {\r\n      return (value = receiver[SetStatePropertyRefSymbol](info, listIndex, () => {\r\n        return Reflect.get(target, info.pattern, receiver);\r\n      }));\r\n    } else {\r\n      // 存在しない場合は親infoを辿って再帰的に取得\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRef(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        // ワイルドカードの場合はlistIndexのindexでアクセス\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return (value = Reflect.get(parentValue, index));\r\n      } else {\r\n        // 通常のプロパティアクセス\r\n        return (value = Reflect.get(parentValue, lastSegment));\r\n      }\r\n    }\r\n  } finally {\r\n    // キャッシュが有効な場合は取得値をキャッシュ\r\n    if (handler.cacheable && !(refKey in handler.cache)) {\r\n      handler.cache[refKey] = value;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * trackedGettersに含まれる場合は依存追跡(setTracking)を有効化し、値取得を行う。\r\n * それ以外は通常の_getByRefで取得。\r\n */\r\nexport function getByRef(\r\n  target   : Object, \r\n  info     : IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  receiver : IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  if (handler.engine.trackedGetters.has(info.pattern)) {\r\n    return setTracking(info, handler, () => {\r\n      return _getByRef(target, info, listIndex, receiver, handler);\r\n    });\r\n  } else {\r\n    return _getByRef(target, info, listIndex, receiver, handler);\r\n  }\r\n\r\n}\r\n","/**\r\n * getByRef.ts\r\n *\r\n * StateClassのAPIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * Stateの値を取得するための関数（getByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - getByRefメソッドを通じて、指定されたパス・インデックスに対応するState値を取得\r\n * - 内部的にはmethods/getByRef.jsのロジックを呼び出し、値の解決を委譲\r\n *\r\n * 設計ポイント:\r\n * - target, receiver, handlerなどStateClassのプロキシ情報を引数として受け取り、柔軟な値取得を実現\r\n * - pattern（IStructuredPathInfo）とlistIndexで多重ループやネストしたパスにも対応\r\n * - 関数として返すことで、バインディングやAPI経由での柔軟な利用が可能\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef as methodGetByRef } from \"../methods/getByRef.js\";\r\n\r\nexport function getByRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (pattern: IStructuredPathInfo, listIndex: IListIndex | null) => \r\n    methodGetByRef(target, pattern, listIndex, receiver, handler);\r\n} \r\n","/**\r\n * setCacheable.ts\r\n *\r\n * StateClassの内部APIとして、キャッシュ可能なスコープを一時的に有効化し、\r\n * 指定したコールバック処理をキャッシュ付きで実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.cacheableをtrueに設定し、キャッシュ用オブジェクトを初期化\r\n * - 指定したcallbackをキャッシュ有効状態で実行\r\n * - finallyで必ずcacheableをfalseに戻し、スコープ外ではキャッシュを無効化\r\n *\r\n * 設計ポイント:\r\n * - コールバック実行中のみキャッシュを有効化し、スコープ外への影響を防止\r\n * - finallyで状態復元を保証し、例外発生時も安全\r\n */\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function setCacheable(handler: IStateHandler, callback: () => void): void {\r\n  handler.cacheable = true;\r\n  handler.cache = {}\r\n  try {\r\n    callback();\r\n  } finally {\r\n    handler.cacheable = false;\r\n  }\r\n}\r\n","/**\r\n * setCacheable.ts\r\n *\r\n * StateClassのAPIとして、キャッシュ可能な処理を登録するための関数（setCacheable）の実装です。\r\n *\r\n * 主な役割:\r\n * - StateClassのプロキシAPI経由で、キャッシュ可能なコールバック処理を登録\r\n * - 内部的にはmethods/setCacheable.jsのロジックを呼び出して処理を委譲\r\n *\r\n * 設計ポイント:\r\n * - target, prop, receiver, handlerなどStateClassのプロキシ情報を引数として受け取る\r\n * - コールバック関数を引数に取り、キャッシュ可能な処理として登録\r\n * - バインディングやAPI経由での柔軟な利用が可能\r\n */\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setCacheable as methodSetChargeable } from \"../methods/setCacheable.js\";\r\n\r\nexport function setCacheable(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (callback: () => void) => {\r\n    methodSetChargeable(handler, callback);\r\n  }\r\n}","/**\r\n * connectedCallback.ts\r\n *\r\n * StateClassのライフサイクルフック「$connectedCallback」を呼び出すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - オブジェクト（target）に$connectedCallbackメソッドが定義されていれば呼び出す\r\n * - コールバックはtargetのthisコンテキストで呼び出し、IStateProxy（receiver）を引数として渡す\r\n * - 非同期関数として実行可能（await対応）\r\n *\r\n * 設計ポイント:\r\n * - Reflect.getで$connectedCallbackプロパティを安全に取得\r\n * - 存在しない場合は何もしない\r\n * - ライフサイクル管理やカスタム初期化処理に利用\r\n */\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst CONNECTED_CALLBACK = \"$connectedCallback\";\r\n\r\nexport function connectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, CONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","/**\r\n * disconnectedCallback.ts\r\n *\r\n * StateClassのライフサイクルフック「$disconnectedCallback」を呼び出すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - オブジェクト（target）に$disconnectedCallbackメソッドが定義されていれば呼び出す\r\n * - コールバックはtargetのthisコンテキストで呼び出し、IStateProxy（receiver）を引数として渡す\r\n * - 非同期関数として実行可能（await対応）\r\n *\r\n * 設計ポイント:\r\n * - Reflect.getで$disconnectedCallbackプロパティを安全に取得\r\n * - 存在しない場合は何もしない\r\n * - ライフサイクル管理やクリーンアップ処理に利用\r\n */\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nconst DISCONNECTED_CALLBACK = \"$disconnectedCallback\";\r\n\r\nexport function disconnectedCallback(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return async () => {\r\n    const callback = Reflect.get(target, DISCONNECTED_CALLBACK);\r\n    if (typeof callback === \"function\") {\r\n      await callback.call(target, receiver);\r\n    }\r\n  };\r\n}","/**\r\n * setByRef.ts\r\n *\r\n * StateClassの内部APIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * 状態オブジェクト（target）に値を設定するための関数（setByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定されたパス・インデックスに対応するState値を設定（多重ループやワイルドカードにも対応）\r\n * - getter/setter経由で値設定時はSetStatePropertyRefSymbolでスコープを一時設定\r\n * - 存在しない場合は親infoやlistIndexを辿って再帰的に値を設定\r\n * - 設定後はengine.updater.addUpdatedStatePropertyRefValueで更新情報を登録\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードや多重ループにも柔軟に対応し、再帰的な値設定を実現\r\n * - finallyで必ず更新情報を登録し、再描画や依存解決に利用\r\n * - getter/setter経由のスコープ切り替えも考慮した設計\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { SetStatePropertyRefSymbol } from \"../symbols\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef } from \"./getByRef.js\";\r\n\r\nexport function setByRef(\r\n    target   : Object, \r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    value    : any, \r\n    receiver : IStateProxy,\r\n    handler  : IStateHandler\r\n): any {\r\n  try {\r\n    if (info.pattern in target) {\r\n      if (info.wildcardCount > 0) {\r\n        if (listIndex === null) {\r\n          raiseError(`propRef.listIndex is null`);\r\n        }\r\n        return receiver[SetStatePropertyRefSymbol](info, listIndex, () => {\r\n          return Reflect.set(target, info.pattern, value, receiver);\r\n        });\r\n      } else {\r\n        return Reflect.set(target, info.pattern, value, receiver);\r\n      }\r\n    } else {\r\n      const parentInfo = info.parentInfo ?? raiseError(`propRef.stateProp.parentInfo is undefined`);\r\n      const parentListIndex = parentInfo.wildcardCount < info.wildcardCount ? (listIndex?.parentListIndex ?? null) : listIndex;\r\n      const parentValue = getByRef(target, parentInfo, parentListIndex, receiver, handler);\r\n      const lastSegment = info.lastSegment;\r\n      if (lastSegment === \"*\") {\r\n        const index = listIndex?.index ?? raiseError(`propRef.listIndex?.index is undefined`);\r\n        return Reflect.set(parentValue, index, value);\r\n      } else {\r\n        return Reflect.set(parentValue, lastSegment, value);\r\n      }\r\n    }\r\n  } finally {\r\n    handler.engine.updater.addUpdatedStatePropertyRefValue(info, listIndex, value);\r\n  }\r\n}\r\n","/**\r\n * resolve.ts\r\n *\r\n * StateClassのAPIとして、パス（path）とインデックス（indexes）を指定して\r\n * Stateの値を取得・設定するための関数（resolve）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列パス（path）とインデックス配列（indexes）から、該当するState値の取得・設定を行う\r\n * - ワイルドカードや多重ループを含むパスにも対応\r\n * - value未指定時は取得（getByRef）、指定時は設定（setByRef）を実行\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパスを解析し、ワイルドカード階層ごとにリストインデックスを解決\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n * - getByRef/setByRefで値の取得・設定を一元的に処理\r\n * - 柔軟なバインディングやAPI経由での利用が可能\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getByRef } from \"../methods/getByRef.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\n\r\nexport function resolve(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (path: string, indexes: number[], value?:any): any => {\r\n    const info = getStructuredPathInfo(path);\r\n    let listIndex: IListIndex | null = null;\r\n    for(let i = 0; i < info.wildcardParentInfos.length; i++) {\r\n      const wildcardParentPattern = info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPath is null`);\r\n      const listIndexes: IListIndex[] = Array.from(handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? []);\r\n      const index = indexes[i] ?? raiseError(`index is null`);\r\n      listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    if (typeof value === \"undefined\") {\r\n      return getByRef(target, info, listIndex, receiver, handler);\r\n    } else {\r\n      return setByRef(target, info, listIndex, value, receiver, handler);\r\n    }\r\n  };\r\n} ","/**\r\n * getAll.ts\r\n *\r\n * StateClassのAPIとして、ワイルドカードを含むStateプロパティパスに対応した\r\n * 全要素取得関数（getAll）の実装です。\r\n *\r\n * 主な役割:\r\n * - 指定パス（path）に一致する全てのState要素を配列で取得\r\n * - 多重ループやワイルドカード（*）を含むパスにも対応\r\n * - indexes未指定時は現在のループコンテキストから自動でインデックスを解決\r\n *\r\n * 設計ポイント:\r\n * - getStructuredPathInfoでパス情報を解析し、依存関係も自動で登録\r\n * - walkWildcardPatternでワイルドカード階層を再帰的に探索し、全インデックス組み合わせを列挙\r\n * - resolveで各インデックス組み合わせに対応する値を取得し、配列で返却\r\n * - GetContextListIndexSymbolで現在のループインデックスを取得\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../../StateProperty/getStructuredPathInfo.js\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { GetContextListIndexSymbol } from \"../symbols\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { resolve as _resolve } from \"./resolve.js\";\r\n\r\nexport function getAll(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n    const resolve = _resolve(target, prop, receiver, handler);\r\n    return (path: string, indexes?: number[]): any[] => {\r\n      const info = getStructuredPathInfo(path);\r\n      if (handler.lastTrackingStack != null && handler.lastTrackingStack !== info) {\r\n        const lastPattern = handler.lastTrackingStack;\r\n        if (lastPattern.parentInfo !== info) {\r\n          handler.engine.addDependentProp(lastPattern, info, \"reference\");\r\n        }\r\n      }\r\n  \r\n      if (typeof indexes === \"undefined\") {\r\n        for(let i = 0; i < info.wildcardInfos.length; i++) {\r\n          const wildcardPattern = info.wildcardInfos[i] ?? raiseError(`wildcardPattern is null`);\r\n          const listIndex = receiver[GetContextListIndexSymbol](wildcardPattern.pattern);\r\n          if (listIndex) {\r\n            indexes = listIndex.indexes;\r\n            break;\r\n          }\r\n        }\r\n        if (typeof indexes === \"undefined\") {\r\n          indexes = [];\r\n        }\r\n      }\r\n      const walkWildcardPattern = (\r\n        wildcardParentInfos: IStructuredPathInfo[],\r\n        wildardIndexPos: number,\r\n        listIndex: IListIndex | null,\r\n        indexes: number[],\r\n        indexPos: number,\r\n        parentIndexes: number[],\r\n        results: number[][]\r\n      ) => {\r\n        const wildcardParentPattern = wildcardParentInfos[wildardIndexPos] ?? null;\r\n        if (wildcardParentPattern === null) {\r\n          results.push(parentIndexes);\r\n          return;\r\n        }\r\n        const listIndexSet = handler.engine.getListIndexesSet(wildcardParentPattern, listIndex) ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n        const listIndexes = Array.from(listIndexSet);\r\n        const index = indexes[indexPos] ?? null;\r\n        if (index === null) {\r\n          for(let i = 0; i < listIndexes.length; i++) {\r\n            const listIndex = listIndexes[i];\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results);\r\n          }\r\n        } else {\r\n          const listIndex = listIndexes[index] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n          if ((wildardIndexPos + 1) < wildcardParentInfos.length) {\r\n            walkWildcardPattern(\r\n              wildcardParentInfos, \r\n              wildardIndexPos + 1, \r\n              listIndex, \r\n              indexes, \r\n              indexPos + 1, \r\n              parentIndexes.concat(listIndex.index),\r\n              results\r\n            );\r\n          }\r\n        }\r\n      }\r\n      const resultIndexes: number[][] = [];\r\n      walkWildcardPattern(\r\n        info.wildcardParentInfos, \r\n        0, \r\n        null, \r\n        indexes, \r\n        0, \r\n        [], \r\n        resultIndexes\r\n      );\r\n      const resultValues: any[] = [];\r\n      for(let i = 0; i < resultIndexes.length; i++) {\r\n        resultValues.push(resolve(\r\n          info.pattern,\r\n          resultIndexes[i]\r\n        ));\r\n      }\r\n      return resultValues;\r\n    }\r\n  }","/**\r\n * getResolvedPathInfo.ts\r\n *\r\n * Stateプロパティ名（パス文字列）から、ワイルドカードやインデックス情報を含む\r\n * 詳細なパス情報（IResolvedPathInfo）を解析・生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - プロパティ名を分解し、ワイルドカードやインデックスの有無・種別を判定\r\n * - context/all/partial/none のワイルドカード種別を自動判定\r\n * - パスごとにキャッシュし、再利用性とパフォーマンスを両立\r\n * - getStructuredPathInfoで構造化パス情報も取得\r\n *\r\n * 設計ポイント:\r\n * - \"constructor\"や\"toString\"などの予約語も扱えるよう、Mapではなくオブジェクトでキャッシュ\r\n * - ワイルドカード（*）や数値インデックスを柔軟に判定し、wildcardIndexesに格納\r\n * - context型は未確定インデックス、all型は全て確定インデックス、partial型は混在を示す\r\n * - ResolvedPathInfoクラスでパス解析・情報保持を一元化\r\n */\r\nimport { IResolvedPathInfo, WildcardType } from './types';\r\nimport { getStructuredPathInfo } from './getStructuredPathInfo.js';\r\n\r\n/**\r\n * プロパティ名に\"constructor\"や\"toString\"などの予約語やオブジェクトのプロパティ名を\r\n * 上書きするような名前も指定できるように、Mapを検討したが、そもそもそのような名前を\r\n * 指定することはないと考え、Mapを使わないことにした。\r\n */\r\nconst _cache: { [key:string]: IResolvedPathInfo } = {};\r\n//const _cache: Map<string, IResolvedPathInfo> = new Map();\r\n\r\nclass ResolvedPathInfo implements IResolvedPathInfo {\r\n  static id : number = 0;\r\n  id = ++ResolvedPathInfo.id;\r\n  name;\r\n  elements;\r\n  paths;\r\n  wildcardCount;\r\n  wildcardType;\r\n  wildcardIndexes;\r\n  info;\r\n  constructor(name: string) {\r\n    const elements = name.split(\".\");\r\n    const tmpPatternElements = elements.slice();\r\n    const paths = [];\r\n    let incompleteCount = 0;\r\n    let completeCount = 0;\r\n    let lastPath = \"\";\r\n    let wildcardCount = 0;\r\n    let wildcardType: WildcardType = \"none\";\r\n    let wildcardIndexes: (number | null)[] = [];\r\n    for(let i = 0; i < elements.length; i++) {\r\n      const element = elements[i];\r\n      if (element === \"*\") {\r\n        tmpPatternElements[i] = \"*\";\r\n        wildcardIndexes.push(null);\r\n        incompleteCount++;\r\n        wildcardCount++;\r\n      } else {\r\n        const number = Number(element);\r\n        if (!Number.isNaN(number)) {\r\n          tmpPatternElements[i] = \"*\";\r\n          wildcardIndexes.push(number);\r\n          completeCount++;\r\n          wildcardCount++;\r\n        }\r\n      }\r\n      lastPath += element;\r\n      paths.push(lastPath);\r\n      lastPath += (i < elements.length - 1 ? \".\" : \"\");\r\n    }\r\n    const pattern = tmpPatternElements.join(\".\");\r\n    const info = getStructuredPathInfo(pattern);\r\n    if (incompleteCount > 0 || completeCount > 0) {\r\n      if (incompleteCount === wildcardCount) {\r\n        wildcardType = \"context\";\r\n      } else if (completeCount === wildcardCount) {\r\n        wildcardType = \"all\";\r\n      } else {\r\n        wildcardType = \"partial\";\r\n      }\r\n    }\r\n    this.name = name;\r\n    this.elements = elements;\r\n    this.paths = paths;\r\n    this.wildcardCount = wildcardCount;\r\n    this.wildcardType = wildcardType;\r\n    this.wildcardIndexes = wildcardIndexes;\r\n    this.info = info;\r\n  }\r\n}\r\n\r\nexport function getResolvedPathInfo(name:string):IResolvedPathInfo {\r\n  let nameInfo: IResolvedPathInfo | undefined;\r\n//  return _cache.get(name) ?? (_cache.set(name, nameInfo = new ResolvedPathInfo(name)), nameInfo);\r\n  return _cache[name] ?? (_cache[name] = new ResolvedPathInfo(name));\r\n}","/**\r\n * getListIndex.ts\r\n *\r\n * StateClassの内部APIとして、パス情報（IResolvedPathInfo）から\r\n * 対応するリストインデックス（IListIndex）を取得する関数です。\r\n *\r\n * 主な役割:\r\n * - パスのワイルドカード種別（context/all/partial/none）に応じてリストインデックスを解決\r\n * - context型は現在のループコンテキストからリストインデックスを取得\r\n * - all型は各階層のリストインデックス集合からインデックスを辿って取得\r\n * - partial型やnone型は未実装またはnullを返す\r\n *\r\n * 設計ポイント:\r\n * - ワイルドカードや多重ループ、ネストした配列バインディングに柔軟に対応\r\n * - handler.engine.getListIndexesSetで各階層のリストインデックス集合を取得\r\n * - エラー時はraiseErrorで詳細な例外を投げる\r\n */\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { IResolvedPathInfo } from \"../StateProperty/types\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { GetContextListIndexSymbol } from \"./symbols\";\r\nimport { IStateHandler, IStateProxy } from \"./types\";\r\n\r\nexport function getListIndex(\r\n  info: IResolvedPathInfo, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): IListIndex | null {\r\n  if (info.info.wildcardCount === 0) {\r\n    return null;\r\n  }\r\n  let listIndex: IListIndex | null = null;\r\n  const lastWildcardPath = info.info.lastWildcardPath ?? \r\n    raiseError(`lastWildcardPath is null`);\r\n  if (info.wildcardType === \"context\") {\r\n    listIndex = receiver[GetContextListIndexSymbol](lastWildcardPath) ?? \r\n      raiseError(`ListIndex not found: ${info.info.pattern}`);\r\n  } else if (info.wildcardType === \"all\") {\r\n    let parentListIndex = null;\r\n    for(let i = 0; i < info.info.wildcardCount; i++) {\r\n      const wildcardParentPattern = info.info.wildcardParentInfos[i] ?? raiseError(`wildcardParentPattern is null`);\r\n      const listIndexes: IListIndex[] = Array.from(handler.engine.getListIndexesSet(wildcardParentPattern, parentListIndex) ?? []);\r\n      const wildcardIndex = info.wildcardIndexes[i] ?? raiseError(`wildcardIndex is null`);\r\n      parentListIndex = listIndexes[wildcardIndex] ?? raiseError(`ListIndex not found: ${wildcardParentPattern.pattern}`);\r\n    }\r\n    listIndex = parentListIndex;\r\n  } else if (info.wildcardType === \"partial\") {\r\n    // ToDo:listIndexを取得する必要がある\r\n  } else if (info.wildcardType === \"none\") {\r\n  }\r\n  return listIndex;\r\n}\r\n","/**\r\n * get.ts\r\n *\r\n * StateClassのProxyトラップとして、プロパティアクセス時の値取得処理を担う関数（get）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列プロパティの場合、特殊プロパティ（$1〜$9, $resolve, $getAll, $router）に応じた値やAPIを返却\r\n * - 通常のプロパティはgetResolvedPathInfoでパス情報を解決し、getListIndexでリストインデックスを取得\r\n * - getByRefで構造化パス・リストインデックスに対応した値を取得\r\n * - シンボルプロパティの場合はhandler.callableApi経由でAPIを呼び出し\r\n * - それ以外はReflect.getで通常のプロパティアクセスを実行\r\n *\r\n * 設計ポイント:\r\n * - $1〜$9は直近のStatePropertyRefのリストインデックス値を返す特殊プロパティ\r\n * - $resolve, $getAll, $routerはAPI関数やルーターインスタンスを返す\r\n * - 通常のプロパティアクセスもバインディングや多重ループに対応\r\n * - シンボルAPIやReflect.getで拡張性・互換性も確保\r\n */\r\nimport { getRouter } from \"../../Router/Router.js\";\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { raiseError } from \"../../utils.js\";\r\nimport { getAll } from \"../apis/getAll.js\";\r\nimport { resolve } from \"../apis/resolve.js\";\r\nimport { getListIndex } from \"../getListIndex.js\";\r\nimport { getByRef } from \"../methods/getByRef.js\";\r\nimport { GetLastStatePropertyRefSymbol } from \"../symbols.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nexport function get(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler  : IStateHandler\r\n): any {\r\n  let value;\r\n  if (typeof prop === \"string\") {\r\n    if (prop.charCodeAt(0) === 36) {\r\n      if (prop.length === 2) {\r\n        const d = prop.charCodeAt(1) - 48;\r\n        if (d >= 1 && d <= 9) {\r\n          const ref = receiver[GetLastStatePropertyRefSymbol]() ?? \r\n            raiseError(`get: receiver[GetLastStatePropertyRefSymbol]() is null`);\r\n          return ref.listIndex?.at(d - 1)?.index ?? raiseError(`ListIndex not found: ${prop}`);\r\n        }\r\n      }\r\n      if (prop === \"$resolve\") {\r\n        return resolve(target, prop, receiver, handler);\r\n      } else if (prop === \"$getAll\") {\r\n        return getAll(target, prop, receiver, handler);\r\n      } else if (prop === \"$router\") {\r\n        return getRouter();\r\n      }\r\n    }\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, receiver, handler);\r\n    value = getByRef(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      receiver,\r\n      handler\r\n    );\r\n\r\n  } else if (typeof prop === \"symbol\") {\r\n    if (prop in handler.callableApi) {\r\n      return handler.callableApi[prop](target, prop, receiver, handler);\r\n    }\r\n    value = Reflect.get(\r\n      target, \r\n      prop, \r\n      receiver\r\n    );\r\n  }\r\n  return value;\r\n}\r\n","/**\r\n * setStatePropertyRef.ts\r\n *\r\n * StateClassの内部APIとして、状態プロパティ参照（IStructuredPathInfo, IListIndex）のスコープを\r\n * 一時的に設定し、指定したコールバックをそのスコープ内で実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.structuredPathInfoStackとhandler.listIndexStackにinfoとlistIndexをpushしてスコープを設定\r\n * - 指定したcallbackをそのスコープ内で実行\r\n * - finallyで必ずスタックからpopし、スコープ外への影響を防止\r\n *\r\n * 設計ポイント:\r\n * - コールバック実行中のみスコープを切り替え、例外発生時も状態復元を保証\r\n * - ネストしたスコープにも対応可能\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function setStatePropertyRef(\r\n  handler: IStateHandler,\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  callback: () => void\r\n): void {\r\n  handler.structuredPathInfoStack.push(info);\r\n  handler.listIndexStack.push(listIndex);\r\n  try {\r\n    return callback();\r\n  } finally {\r\n    handler.structuredPathInfoStack.pop();\r\n    handler.listIndexStack.pop();\r\n  }\r\n}\r\n","/**\r\n * setStatePropertyRef.ts\r\n *\r\n * StateClassのAPIとして、Stateプロパティ参照（StatePropertyRef）を設定するための関数（setStatePropertyRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - StateClassのプロキシAPI経由で、指定したパス情報（IStructuredPathInfo）とリストインデックス（IListIndex）に対応する\r\n *   StatePropertyRefを一時的に設定し、コールバックを実行\r\n * - 内部的にはmethods/setStatePropertyRefのロジックを呼び出して処理を委譲\r\n *\r\n * 設計ポイント:\r\n * - target, prop, receiver, handlerなどStateClassのプロキシ情報を引数として受け取る\r\n * - コールバック関数を引数に取り、StatePropertyRefを一時的に切り替えて処理を実行\r\n * - バインディングやAPI経由での柔軟な利用が可能\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setStatePropertyRef as methodSetStatePropertyRef } from \"../methods/setStatePropertyRef\";\r\n\r\nexport function setStatePropertyRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): Function {\r\n  return (info: IStructuredPathInfo, listIndex: IListIndex | null, callback: () => void) => \r\n    methodSetStatePropertyRef(handler, info, listIndex, callback);\r\n}","/**\r\n * asyncSetStatePropertyRef.ts\r\n *\r\n * 状態プロパティ参照のスコープを一時的に設定し、非同期コールバックを実行するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - handlerのstructuredPathInfoStackとlistIndexStackに、infoとlistIndexをpushしてスコープを設定\r\n * - 指定した非同期コールバック（callback）をそのスコープ内で実行\r\n * - callback実行後は必ずpopしてスコープを元に戻す（finallyで保証）\r\n *\r\n * 設計ポイント:\r\n * - 非同期処理中も正しいスコープ情報（パス・リストインデックス）が維持される\r\n * - ネストした非同期処理にも対応可能\r\n * - スコープのpush/popは例外発生時も確実に実行される\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\n/**\r\n * 状態プロパティ参照のスコープを一時的に設定し、非同期コールバックを実行します。\r\n * \r\n * @param handler   スコープ管理用のハンドラ\r\n * @param info      現在の構造化パス情報\r\n * @param listIndex 現在のリストインデックス（ネスト対応用）\r\n * @param callback  スコープ内で実行する非同期処理\r\n * \r\n * スタックに info と listIndex をpushし、callback実行後に必ずpopします。\r\n * これにより、非同期処理中も正しいスコープ情報が維持されます。\r\n */\r\nexport async function asyncSetStatePropertyRef(\r\n  handler: IStateHandler,\r\n  info: IStructuredPathInfo,\r\n  listIndex: IListIndex | null,\r\n  callback: () => Promise<void>\r\n): Promise<void> {\r\n  handler.structuredPathInfoStack.push(info);\r\n  handler.listIndexStack.push(listIndex);\r\n  try {\r\n    await callback();\r\n  } finally {\r\n    handler.structuredPathInfoStack.pop();\r\n    handler.listIndexStack.pop();\r\n  }\r\n}\r\n","/**\r\n * setLoopContext.ts\r\n *\r\n * StateClassの内部APIとして、ループコンテキスト（ILoopContext）を一時的に設定し、\r\n * 指定した非同期コールバックをそのスコープ内で実行するための関数です。\r\n *\r\n * 主な役割:\r\n * - handler.loopContextにループコンテキストを一時的に設定\r\n * - 既にループコンテキストが設定されている場合はエラーを投げる\r\n * - loopContextが存在する場合はasyncSetStatePropertyRefでスコープを設定しコールバックを実行\r\n * - loopContextがnullの場合はそのままコールバックを実行\r\n * - finallyで必ずloopContextをnullに戻し、スコープ外への影響を防止\r\n *\r\n * 設計ポイント:\r\n * - ループバインディングや多重ループ時のスコープ管理を安全に行う\r\n * - finallyで状態復元を保証し、例外発生時も安全\r\n * - 非同期処理にも対応\r\n */\r\nimport { ILoopContext } from \"../../LoopContext/types\";\r\nimport { raiseError } from \"../../utils\";\r\nimport { IStateHandler } from \"../types\";\r\nimport { asyncSetStatePropertyRef } from \"./asyncSetStatePropertyRef\";\r\n\r\nexport async function setLoopContext(\r\n  handler: IStateHandler,\r\n  loopContext: ILoopContext | null,\r\n  callback: () => Promise<void>\r\n): Promise<void> {\r\n  if (handler.loopContext) {\r\n    raiseError('already in loop context');\r\n  }\r\n  handler.loopContext = loopContext;\r\n  try {\r\n    if (loopContext) {\r\n      await asyncSetStatePropertyRef(handler, loopContext.info, loopContext.listIndex, callback);\r\n    } else {\r\n      await callback();\r\n    }\r\n  } finally {\r\n    handler.loopContext = null;\r\n  }\r\n}\r\n","/**\r\n * setLoopContext.ts\r\n *\r\n * StateClassのAPIとして、ループコンテキスト（for等のループ状態）を設定するための関数（setLoopContext）の実装です。\r\n *\r\n * 主な役割:\r\n * - StateClassのプロキシAPI経由で、ループコンテキスト（ILoopContext）を一時的に設定し、コールバックを実行\r\n * - 内部的にはmethods/setLoopContext.jsのロジックを呼び出して処理を委譲\r\n *\r\n * 設計ポイント:\r\n * - target, prop, receiver, handlerなどStateClassのプロキシ情報を引数として受け取る\r\n * - コールバック関数を引数に取り、ループコンテキストを一時的に切り替えて非同期処理を実行\r\n * - バインディングやAPI経由での柔軟な利用が可能\r\n */\r\nimport { ILoopContext } from \"../../LoopContext/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setLoopContext as methodSetLoopContext } from \"../methods/setLoopContext.js\";\r\n\r\nexport function setLoopContext(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): Function {\r\n  return (loopContext: ILoopContext | null, callback: () => Promise<void>) => \r\n    methodSetLoopContext(handler, loopContext, callback);\r\n}","/**\r\n * getLastStatePropertyRef.ts\r\n *\r\n * StateClassの内部APIとして、最後にアクセスされたStateプロパティ参照（IStatePropertyRef）を取得する関数です。\r\n *\r\n * 主な役割:\r\n * - handlerのstructuredPathInfoStackおよびlistIndexStackから、直近のパス情報とリストインデックスを取得\r\n * - それらをIStatePropertyRefとして返却\r\n * - スタックが空、または値が未定義の場合はnullを返す\r\n *\r\n * 設計ポイント:\r\n * - StateClassのプロパティアクセス時に、現在の参照スコープ情報を安全に取得\r\n * - バインディングや依存解決など、直近の参照情報が必要な場面で利用\r\n */\r\nimport { IStatePropertyRef } from \"../../StatePropertyRef/types\";\r\nimport { IStateHandler } from \"../types\";\r\n\r\nexport function getLastStatePropertyRef(\r\n  handler: IStateHandler\r\n): IStatePropertyRef | null {\r\n  if (handler.structuredPathInfoStack.length === 0) {\r\n    return null;\r\n  }\r\n  const info = handler.structuredPathInfoStack[handler.structuredPathInfoStack.length - 1];\r\n  if (typeof info === \"undefined\") {\r\n    return null;\r\n  }\r\n  const listIndex = handler.listIndexStack[handler.listIndexStack.length - 1];\r\n  if (typeof listIndex === \"undefined\") {\r\n    return null;\r\n  }\r\n  return {info, listIndex};\r\n}\r\n","/**\r\n * getLastStatePropertyRef.ts\r\n *\r\n * StateClassのAPIとして、最後にアクセスされたStateプロパティ参照（StatePropertyRef）を取得する関数の実装です。\r\n *\r\n * 主な役割:\r\n * - StateClassのプロキシAPI経由で、最後にアクセスされたStatePropertyRefを取得\r\n * - 内部的にはmethods/getLastStatePropertyRef.jsのロジックを呼び出して値を解決\r\n *\r\n * 設計ポイント:\r\n * - target, prop, receiver, handlerなどStateClassのプロキシ情報を引数として受け取る\r\n * - 関数として返すことで、バインディングやAPI経由での柔軟な利用が可能\r\n */\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getLastStatePropertyRef as methodGetLastStatePropertyRef } from \"../methods/getLastStatePropertyRef.js\";\r\n\r\nexport function getLastStatePropertyRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): Function {\r\n  return () => \r\n    methodGetLastStatePropertyRef(handler);\r\n}","/**\r\n * getContextListIndex.ts\r\n *\r\n * StateClassの内部APIとして、現在のプロパティ参照スコープにおける\r\n * 指定したstructuredPath（ワイルドカード付きプロパティパス）に対応する\r\n * リストインデックス（IListIndex）を取得する関数です。\r\n *\r\n * 主な役割:\r\n * - handlerの最後にアクセスされたStatePropertyRefから、指定パスに対応するリストインデックスを取得\r\n * - ワイルドカード階層に対応し、多重ループやネストした配列バインディングにも利用可能\r\n *\r\n * 設計ポイント:\r\n * - getLastStatePropertyRefで直近のプロパティ参照情報を取得\r\n * - info.wildcardPathsからstructuredPathのインデックスを特定\r\n * - listIndex.at(index)で該当階層のリストインデックスを取得\r\n * - パスが一致しない場合や参照が存在しない場合はnullを返す\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStateHandler } from \"../types\";\r\nimport { getLastStatePropertyRef } from \"./getLastStatePropertyRef\";\r\n\r\nexport function getContextListIndex(\r\n  handler: IStateHandler,\r\n  structuredPath: string\r\n): IListIndex | null {\r\n  const lastRef = getLastStatePropertyRef(handler);\r\n  if (lastRef === null) {\r\n    return null;\r\n  }\r\n  const info = lastRef.info;\r\n  const index = info.wildcardPaths.indexOf(structuredPath);\r\n  if (index >= 0) {\r\n    return lastRef.listIndex?.at(index) ?? null;\r\n  }\r\n  return null;\r\n}\r\n","/**\r\n * getContextListIndex.ts\r\n *\r\n * StateClassのAPIとして、現在のループコンテキストに対応するリストインデックスを取得する関数（getContextListIndex）の実装です。\r\n *\r\n * 主な役割:\r\n * - StateClassのプロキシAPI経由で、指定したstructuredPath（プロパティパス）に対応するリストインデックスを取得\r\n * - 内部的にはmethods/getContextListIndexのロジックを呼び出して値を解決\r\n *\r\n * 設計ポイント:\r\n * - target, prop, receiver, handlerなどStateClassのプロキシ情報を引数として受け取る\r\n * - structuredPathを指定することで、多重ループやネストした配列バインディングにも対応\r\n * - 関数として返すことで、バインディングやAPI経由での柔軟な利用が可能\r\n */\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { getContextListIndex as methodGetContextListIndex } from \"../methods/getContextListIndex\";\r\n\r\nexport function getContextListIndex(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n): Function {\r\n  return (structuredPath: string) => \r\n    methodGetContextListIndex(handler, structuredPath);\r\n}","/**\r\n * createReadonlyStateProxy.ts\r\n *\r\n * StateClassの「読み取り専用」プロキシを生成するための実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - Stateオブジェクトに対して、読み取り専用のProxyを作成\r\n * - StateHandlerクラスで各種APIやトラップ（get/set）を実装\r\n * - getトラップでバインディングやAPI呼び出し、依存解決などに対応\r\n * - setトラップではエラーを投げて書き込みを禁止\r\n *\r\n * 設計ポイント:\r\n * - StateHandlerはIReadonlyStateHandlerを実装し、状態管理やAPI呼び出しの基盤となる\r\n * - callableApiに各種APIシンボルと関数をマッピングし、柔軟なAPI拡張が可能\r\n * - createReadonlyStateProxyで一貫した生成・利用が可能\r\n * - 依存解決やキャッシュ、ループ・プロパティ参照スコープ管理など多機能な設計\r\n */\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetAllSymbol, GetByRefSymbol, GetContextListIndexSymbol, GetLastStatePropertyRefSymbol, ResolveSymbol, SetByRefSymbol, SetCacheableSymbol, SetLoopContextSymbol, SetStatePropertyRefSymbol } from \"./symbols.js\";\r\nimport { IReadonlyStateHandler, IState, IStateHandler, IStateProxy, IWritableStateHandler } from \"./types\";\r\nimport { getByRef as apiGetByRef } from \"./apis/getByRef.js\";\r\nimport { setCacheable as apiSetCacheable } from \"./apis/setCacheable.js\";\r\nimport { connectedCallback } from \"./apis/connectedCallback.js\";\r\nimport { disconnectedCallback } from \"./apis/disconnectedCallback.js\";\r\nimport { resolve } from \"./apis/resolve.js\";\r\nimport { getAll } from \"./apis/getAll.js\";\r\nimport { get as trapGet } from \"./traps/get.js\";\r\nimport { raiseError } from \"../utils\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { setStatePropertyRef } from \"./apis/setStatePropertyRef\";\r\nimport { setLoopContext } from \"./apis/setLoopContext\";\r\nimport { getLastStatePropertyRef } from \"./apis/getLastStatePropertyRef\";\r\nimport { getContextListIndex } from \"./apis/getContextListIndex\";\r\n\r\nclass StateHandler implements IReadonlyStateHandler {\r\n  engine   : IComponentEngine;\r\n  cacheable: boolean = false;\r\n  cache    : {[key:number]:any} = {};\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: IStructuredPathInfo[] = [];\r\n  structuredPathInfoStack: IStructuredPathInfo[] = [];\r\n  listIndexStack: (IListIndex | null)[] = [];\r\n  loopContext: ILoopContext | null = null;\r\n  \r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  callableApi: { [key:symbol]: Function } = {\r\n    [GetByRefSymbol]: apiGetByRef, \r\n    [SetCacheableSymbol]: apiSetCacheable, \r\n    [ConnectedCallbackSymbol]: connectedCallback, \r\n    [DisconnectedCallbackSymbol]: disconnectedCallback, \r\n    [ResolveSymbol]: resolve, \r\n    [GetAllSymbol]: getAll,\r\n    [SetStatePropertyRefSymbol]: setStatePropertyRef,\r\n    [SetLoopContextSymbol]: setLoopContext,\r\n    [GetLastStatePropertyRefSymbol]: getLastStatePropertyRef,\r\n    [GetContextListIndexSymbol]: getContextListIndex\r\n  };\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IStateProxy\r\n  ): boolean {\r\n    raiseError(`Cannot set property ${String(prop)} of readonly state.`);\r\n  }\r\n}\r\n\r\nexport function createReadonlyStateProxy(\r\n  engine: IComponentEngine, \r\n  state: Object\r\n): IStateProxy {\r\n  return new Proxy<IState>(state, new StateHandler(engine)) as IStateProxy;\r\n}\r\n\r\n","/**\r\n * setByRef.ts\r\n *\r\n * StateClassのAPIとして、構造化パス情報（IStructuredPathInfo）とリストインデックス（IListIndex）を指定して\r\n * Stateの値を設定するための関数（setByRef）の実装です。\r\n *\r\n * 主な役割:\r\n * - setByRefメソッドを通じて、指定されたパス・インデックスに対応するState値を設定\r\n * - 内部的にはmethods/setByRef.jsのロジックを呼び出し、値の設定処理を委譲\r\n *\r\n * 設計ポイント:\r\n * - target, receiver, handlerなどStateClassのプロキシ情報を引数として受け取り、柔軟な値設定を実現\r\n * - pattern（IStructuredPathInfo）とlistIndexで多重ループやネストしたパスにも対応\r\n * - 関数として返すことで、バインディングやAPI経由での柔軟な利用が可能\r\n */\r\nimport { IListIndex } from \"../../ListIndex/types\";\r\nimport { IStructuredPathInfo } from \"../../StateProperty/types\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\nimport { setByRef as methodSetByRef } from \"../methods/setByRef.js\";\r\n\r\nexport function setByRef(\r\n  target: Object, \r\n  prop: PropertyKey, \r\n  receiver: IStateProxy,\r\n  handler: IStateHandler\r\n):Function {\r\n  return (pattern: IStructuredPathInfo, listIndex: IListIndex | null, value: any) => \r\n    methodSetByRef(target, pattern, listIndex, value, receiver, handler);\r\n}","/**\r\n * set.ts\r\n *\r\n * StateClassのProxyトラップとして、プロパティ設定時の値セット処理を担う関数（set）の実装です。\r\n *\r\n * 主な役割:\r\n * - 文字列プロパティの場合、getResolvedPathInfoでパス情報を解決し、getListIndexでリストインデックスを取得\r\n * - setByRefで構造化パス・リストインデックスに対応した値設定を実行\r\n * - それ以外（シンボル等）の場合はReflect.setで通常のプロパティ設定を実行\r\n *\r\n * 設計ポイント:\r\n * - バインディングや多重ループ、ワイルドカードを含むパスにも柔軟に対応\r\n * - setByRefを利用することで、依存解決や再描画などの副作用も一元管理\r\n * - Reflect.setで標準的なプロパティ設定の互換性も確保\r\n */\r\nimport { getResolvedPathInfo } from \"../../StateProperty/getResolvedPathInfo.js\";\r\nimport { getListIndex } from \"../getListIndex.js\";\r\nimport { setByRef } from \"../methods/setByRef.js\";\r\nimport { IStateHandler, IStateProxy } from \"../types\";\r\n\r\nexport function set(\r\n  target  : Object, \r\n  prop    : PropertyKey, \r\n  value   : any, \r\n  receiver: IStateProxy,\r\n  handler : IStateHandler\r\n): boolean {\r\n  if (typeof prop === \"string\") {\r\n    const resolvedInfo = getResolvedPathInfo(prop);\r\n    const listIndex = getListIndex(resolvedInfo, receiver, handler);\r\n    return setByRef(\r\n      target, \r\n      resolvedInfo.info, \r\n      listIndex, \r\n      value, \r\n      receiver,\r\n      handler\r\n    );\r\n  } else {\r\n    return Reflect.set(\r\n      target, \r\n      prop, \r\n      value, \r\n      receiver\r\n    );\r\n  }\r\n}\r\n","/**\r\n * createWritableStateProxy.ts\r\n *\r\n * StateClassの「書き込み可能」プロキシを生成するための実装ファイルです。\r\n *\r\n * 主な役割:\r\n * - Stateオブジェクトに対して、書き込み可能なProxyを作成\r\n * - StateHandlerクラスで各種APIやトラップ（get/set）を実装\r\n * - getトラップでバインディングやAPI呼び出し、依存解決などに対応\r\n * - setトラップで値の書き込みや副作用（依存解決・再描画）を一元管理\r\n *\r\n * 設計ポイント:\r\n * - StateHandlerはIWritableStateHandlerを実装し、状態管理やAPI呼び出しの基盤となる\r\n * - callableApiに各種APIシンボルと関数をマッピングし、柔軟なAPI拡張が可能\r\n * - createWritableStateProxyで一貫した生成・利用が可能\r\n * - 依存解決やキャッシュ、ループ・プロパティ参照スコープ管理など多機能な設計\r\n */\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetAllSymbol, GetByRefSymbol, GetContextListIndexSymbol, GetLastStatePropertyRefSymbol, ResolveSymbol, SetByRefSymbol, SetLoopContextSymbol, SetStatePropertyRefSymbol } from \"./symbols.js\";\r\nimport { IState, IStateProxy, IWritableStateHandler } from \"./types\";\r\nimport { getByRef as apiGetByRef } from \"./apis/getByRef.js\";\r\nimport { setByRef as apiSetByRef } from \"./apis/setByRef.js\";\r\nimport { connectedCallback } from \"./apis/connectedCallback.js\";\r\nimport { disconnectedCallback } from \"./apis/disconnectedCallback.js\";\r\nimport { resolve } from \"./apis/resolve.js\";\r\nimport { getAll } from \"./apis/getAll.js\";\r\nimport { get as trapGet } from \"./traps/get.js\";\r\nimport { set as trapSet } from \"./traps/set.js\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { setStatePropertyRef } from \"./apis/setStatePropertyRef\";\r\nimport { setLoopContext } from \"./apis/setLoopContext\";\r\nimport { getLastStatePropertyRef } from \"./apis/getLastStatePropertyRef\";\r\nimport { getContextListIndex } from \"./apis/getContextListIndex\";\r\n\r\nclass StateHandler implements IWritableStateHandler {\r\n  engine   : IComponentEngine;\r\n  cacheable: boolean = false;\r\n  cache    : {[key:number]:any} = {};\r\n  lastTrackingStack: IStructuredPathInfo | null = null;\r\n  trackingStack: IStructuredPathInfo[] = [];\r\n  structuredPathInfoStack: IStructuredPathInfo[] = [];\r\n  listIndexStack: (IListIndex | null)[] = [];\r\n  loopContext: ILoopContext | null = null;\r\n  \r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  callableApi: { [key:symbol]: Function } = {\r\n    [GetByRefSymbol]: apiGetByRef, \r\n    [SetByRefSymbol]: apiSetByRef, \r\n    [ConnectedCallbackSymbol]: connectedCallback, \r\n    [DisconnectedCallbackSymbol]: disconnectedCallback, \r\n    [ResolveSymbol]: resolve, \r\n    [GetAllSymbol]: getAll,\r\n    [SetStatePropertyRefSymbol]: setStatePropertyRef,\r\n    [SetLoopContextSymbol]: setLoopContext,\r\n    [GetLastStatePropertyRefSymbol]: getLastStatePropertyRef,\r\n   [GetContextListIndexSymbol]: getContextListIndex\r\n   };\r\n\r\n  get(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    receiver: IStateProxy\r\n  ): any {\r\n    return trapGet(target, prop, receiver, this);\r\n  }\r\n\r\n  set(\r\n    target  : Object, \r\n    prop    : PropertyKey, \r\n    value   : any, \r\n    receiver: IStateProxy\r\n  ): boolean {\r\n    return trapSet(target, prop, value, receiver, this);\r\n  }\r\n}\r\n\r\nexport function createWritableStateProxy(\r\n  engine: IComponentEngine, \r\n  state: Object\r\n): IStateProxy {\r\n  return new Proxy<IState>(state, new StateHandler(engine)) as IStateProxy;\r\n}\r\n\r\n","import { createBindContent } from \"../DataBinding/BindContent.js\";\r\nimport { IBindContent, IBinding } from \"../DataBinding/types\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { IState, IStateProxy, IStructiveState } from \"../StateClass/types\";\r\nimport { IUpdater } from \"../Updater/types\";\r\nimport { createUpdater } from \"../Updater/updater.js\";\r\nimport { ComponentType, IComponentConfig, IComponentStatic, StructiveComponent } from \"../WebComponents/types\";\r\nimport { attachShadow } from \"./attachShadow.js\";\r\nimport { ISaveInfoByResolvedPathInfo, IComponentEngine } from \"./types\";\r\nimport { IStructuredPathInfo } from \"../StateProperty/types\";\r\nimport { buildListIndexTree } from \"../StateClass/buildListIndexTree.js\";\r\nimport { ConnectedCallbackSymbol, DisconnectedCallbackSymbol, GetByRefSymbol, SetByRefSymbol, SetCacheableSymbol, SetLoopContextSymbol } from \"../StateClass/symbols.js\";\r\nimport { ILoopContext } from \"../LoopContext/types\";\r\nimport { IListIndex } from \"../ListIndex/types\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { BindParentComponentSymbol } from \"../ComponentState/symbols.js\";\r\nimport { raiseError } from \"../utils.js\";\r\nimport { DependencyType, IDependencyEdge } from \"../DependencyWalker/types.js\";\r\nimport { createDependencyEdge } from \"../DependencyWalker/createDependencyEdge.js\";\r\nimport { createReadonlyStateProxy } from \"../StateClass/createReadonlyStateProxy.js\";\r\nimport { createWritableStateProxy } from \"../StateClass/createWritableStateProxy.js\";\r\n\r\n/**\r\n * ComponentEngineクラスは、Structiveコンポーネントの状態管理・依存関係管理・\r\n * バインディング・ライフサイクル・レンダリングなどの中核的な処理を担うエンジンです。\r\n *\r\n * 主な役割:\r\n * - 状態インスタンスやプロキシの生成・管理\r\n * - テンプレート・スタイルシート・フィルター・バインディング情報の管理\r\n * - 依存関係グラフ（dependentTree）の構築と管理\r\n * - バインディング情報やリスト情報の保存・取得\r\n * - ライフサイクル（connectedCallback/disconnectedCallback）処理\r\n * - Shadow DOMやスタイルシートの適用\r\n * - 状態プロパティの取得・設定\r\n * - バインディングの追加・存在判定・リスト管理\r\n *\r\n * 構造・設計上の特徴:\r\n * - 状態や依存関係、バインディング情報を効率的に管理するためのキャッシュやマップを多用\r\n * - テンプレートやリスト構造の多重管理に対応\r\n * - 非同期初期化やUpdaterによるバッチ的な状態更新設計\r\n * - 疎結合な設計で、各種ユーティリティやファクトリ関数と連携\r\n *\r\n * 典型的なWeb Componentsのライフサイクルやリアクティブな状態管理を、Structive独自の構造で実現しています。\r\n */\r\nexport class ComponentEngine implements IComponentEngine {\r\n  type          : ComponentType = 'autonomous';\r\n  config        : IComponentConfig;\r\n  template      : HTMLTemplateElement;\r\n  styleSheet    : CSSStyleSheet;\r\n  stateClass    : IStructiveState;\r\n  state         : IState;\r\n  readonlyState : IStateProxy;\r\n  updater       : IUpdater;\r\n  inputFilters  : FilterWithOptions;\r\n  outputFilters : FilterWithOptions;\r\n  bindContent   : IBindContent;\r\n  baseClass     : typeof HTMLElement = HTMLElement;\r\n  owner         : StructiveComponent;\r\n  trackedGetters: Set<string>;\r\n\r\n  listInfoSet         : Set<IStructuredPathInfo> = new Set();\r\n  elementInfoSet      : Set<IStructuredPathInfo> = new Set();\r\n  bindingsByListIndex : WeakMap<IListIndex, Set<IBinding>> = new WeakMap();\r\n  dependentTree       : Map<IStructuredPathInfo, Set<IDependencyEdge>> = new Map();\r\n\r\n  bindingsByComponent: WeakMap<StructiveComponent, Set<IBinding>> = new WeakMap();\r\n\r\n  #waitForInitialize : PromiseWithResolvers<void> = Promise.withResolvers<void>();\r\n\r\n  constructor(config: IComponentConfig, owner: StructiveComponent) {\r\n    this.config = config;\r\n    if (this.config.extends) {\r\n      this.type = 'builtin';\r\n    }\r\n    const componentClass = owner.constructor as IComponentStatic;\r\n    this.template = componentClass.template;\r\n    this.styleSheet = componentClass.styleSheet;\r\n    this.stateClass = componentClass.stateClass;\r\n    this.state = new this.stateClass();\r\n    this.readonlyState = createReadonlyStateProxy(this, this.state);\r\n    this.updater = createUpdater(this);\r\n    this.inputFilters = componentClass.inputFilters;\r\n    this.outputFilters = componentClass.outputFilters;\r\n    this.owner = owner;\r\n    this.trackedGetters = componentClass.trackedGetters;\r\n    // 依存関係の木を作成する\r\n    const checkDependentProp = (info: IStructuredPathInfo) => {\r\n      const parentInfo = info.parentInfo;\r\n      if (parentInfo === null) return;\r\n      this.addDependentProp(info, parentInfo, \"structured\");\r\n      checkDependentProp(parentInfo);\r\n    }\r\n    for(const path of componentClass.paths) {\r\n      const info = getStructuredPathInfo(path);\r\n      checkDependentProp(info);\r\n    }\r\n    // 配列のプロパティ、配列要素のプロパティを登録する\r\n    for(const listPath of componentClass.listPaths) {\r\n      this.listInfoSet.add(getStructuredPathInfo(listPath));\r\n      this.elementInfoSet.add(getStructuredPathInfo(listPath + \".*\"));\r\n    }\r\n    this.bindContent = createBindContent(null, componentClass.id, this, null, null); // this.stateArrayPropertyNamePatternsが変更になる可能性がある\r\n    for(const info of this.listInfoSet) {\r\n      if (info.wildcardCount > 0) continue;\r\n      const value = this.readonlyState[GetByRefSymbol](info, null)\r\n      buildListIndexTree(this, info, null, value);\r\n    }\r\n  }\r\n\r\n  async connectedCallback(): Promise<void> {\r\n    if (this.owner.dataset.state) {\r\n      try {\r\n        const json = JSON.parse(this.owner.dataset.state);\r\n        const writableState = createWritableStateProxy(this, this.state);\r\n        await writableState[SetLoopContextSymbol](null, async () => {\r\n          for(const [key, value] of Object.entries(json)) {\r\n            const info = getStructuredPathInfo(key);\r\n            if (info.wildcardCount > 0) continue;\r\n            writableState[SetByRefSymbol](info, null, value);\r\n          }\r\n\r\n        });\r\n      } catch(e) {\r\n        raiseError(\"Failed to parse state from dataset\");\r\n      }\r\n    }\r\n    this.owner.state[BindParentComponentSymbol]();\r\n    attachShadow(this.owner, this.config, this.styleSheet);\r\n    await this.readonlyState[ConnectedCallbackSymbol]();\r\n    this.readonlyState[SetCacheableSymbol](() => {\r\n      this.bindContent.render();\r\n    });\r\n    this.bindContent.mount(this.owner.shadowRoot ?? this.owner);\r\n    this.#waitForInitialize.resolve();\r\n  }\r\n\r\n  async disconnectedCallback(): Promise<void> {\r\n    await this.readonlyState[DisconnectedCallbackSymbol]();\r\n  }\r\n\r\n  #saveInfoByListIndexByResolvedPathInfoId: { [id:number]: WeakMap<IListIndex,ISaveInfoByResolvedPathInfo> } = {};\r\n  #saveInfoByStructuredPathId: { [id:number]: ISaveInfoByResolvedPathInfo } = {};\r\n\r\n  createSaveInfo():ISaveInfoByResolvedPathInfo {\r\n    return {\r\n      list          : null,\r\n      listIndexesSet: null,\r\n      bindings      : [],\r\n    }\r\n  }\r\n\r\n  getSaveInfoByStatePropertyRef(info:IStructuredPathInfo, listIndex:IListIndex | null): ISaveInfoByResolvedPathInfo {\r\n    if (listIndex === null) {\r\n      let saveInfo = this.#saveInfoByStructuredPathId[info.id];\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        this.#saveInfoByStructuredPathId[info.id] = saveInfo;\r\n      }\r\n      return saveInfo;\r\n    } else {\r\n      let saveInfoByListIndex = this.#saveInfoByListIndexByResolvedPathInfoId[info.id];\r\n      if (typeof saveInfoByListIndex === \"undefined\") {\r\n        saveInfoByListIndex = new WeakMap<IListIndex, ISaveInfoByResolvedPathInfo>();\r\n        this.#saveInfoByListIndexByResolvedPathInfoId[info.id] = saveInfoByListIndex;\r\n      }\r\n      let saveInfo = saveInfoByListIndex.get(listIndex);\r\n      if (typeof saveInfo === \"undefined\") {\r\n        saveInfo = this.createSaveInfo();\r\n        saveInfoByListIndex.set(listIndex, saveInfo);\r\n      }\r\n      return saveInfo;\r\n    }\r\n  }\r\n  \r\n  saveBinding(\r\n    info     : IStructuredPathInfo, \r\n    listIndex: IListIndex | null, \r\n    binding  : IBinding\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.bindings.push(binding);\r\n  }\r\n\r\n  saveListIndexesSet(\r\n    info              :IStructuredPathInfo, \r\n    listIndex         :IListIndex | null, \r\n    saveListIndexesSet:Set<IListIndex>\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.listIndexesSet = saveListIndexesSet;\r\n  }\r\n\r\n  saveList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null, \r\n    list     :any[]\r\n  ): void {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    saveInfo.list = list;\r\n  }\r\n\r\n  getBindings(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): IBinding[] {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.bindings;\r\n  }\r\n\r\n  existsBindingsByInfo(info: IStructuredPathInfo): boolean {\r\n    if (typeof this.#saveInfoByStructuredPathId[info.id] !== \"undefined\") {\r\n      return true;\r\n    }\r\n    if (typeof this.#saveInfoByListIndexByResolvedPathInfoId[info.id] !== \"undefined\") {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getListIndexesSet(info:IStructuredPathInfo, listIndex:IListIndex | null): Set<IListIndex> | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.listIndexesSet;\r\n  }\r\n    \r\n  getList(\r\n    info     :IStructuredPathInfo, \r\n    listIndex:IListIndex | null\r\n  ): any[] | null {\r\n    const saveInfo = this.getSaveInfoByStatePropertyRef(info, listIndex);\r\n    return saveInfo.list;\r\n  }\r\n\r\n  addDependentProp(info: IStructuredPathInfo, refInfo: IStructuredPathInfo, type: DependencyType) {\r\n    let dependents = this.dependentTree.get(refInfo);\r\n    if (typeof dependents === \"undefined\") {\r\n      dependents = new Set<IDependencyEdge>();\r\n      this.dependentTree.set(refInfo, dependents);\r\n    }\r\n    const edge = createDependencyEdge(info, type);\r\n    dependents.add(edge);\r\n  }\r\n\r\n  getPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex | null): any {\r\n    // プロパティの値を取得する\r\n    const readonlyState = createReadonlyStateProxy(this, this.state);\r\n    return readonlyState[GetByRefSymbol](info, listIndex);\r\n  }\r\n  setPropertyValue(info: IStructuredPathInfo, listIndex:IListIndex | null, value: any): void {\r\n    // プロパティの値を設定する\r\n    this.updater.addProcess(() => {\r\n      // ToDo: ここよく検討すること\r\n      const writableState = createWritableStateProxy(this, this.state);\r\n      writableState[SetByRefSymbol](info, listIndex, value);\r\n    });\r\n  }\r\n  // 読み取り専用の状態プロキシを作成する\r\n  createReadonlyStateProxy(): IStateProxy {\r\n    return createReadonlyStateProxy(this, this.state);\r\n  }\r\n  // 書き込み可能な状態プロキシを作成する\r\n  createWritableStateProxy(): IStateProxy {\r\n    return createWritableStateProxy(this, this.state);\r\n  }\r\n\r\n}\r\n\r\nexport function createComponentEngine(config: IComponentConfig, component: StructiveComponent): IComponentEngine {\r\n  return new ComponentEngine(config, component);\r\n}","/**\r\n * replaceMustacheWithTemplateTag.ts\r\n *\r\n * Mustache構文（{{if:条件}}, {{for:式}}, {{endif}}, {{endfor}}, {{elseif:条件}}, {{else}} など）を\r\n * <template>タグやコメントノードに変換するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - HTML文字列内のMustache構文を正規表現で検出し、<template data-bind=\"...\">やコメントノードに変換\r\n * - if/for/endif/endfor/elseif/elseなどの制御構文をネスト対応で<template>タグに変換\r\n * - 通常の埋め込み式（{{expr}}）はコメントノード（<!--embed:expr-->）に変換\r\n *\r\n * 設計ポイント:\r\n * - stackでネスト構造を管理し、endif/endfor/elseif/elseの対応関係を厳密にチェック\r\n * - 不正なネストや対応しない構文にはraiseErrorで例外を発生\r\n * - elseif/elseはnot条件のtemplateを自動生成し、条件分岐を表現\r\n * - コメントノードへの変換で埋め込み式の安全なDOM挿入を実現\r\n */\r\nimport { COMMENT_EMBED_MARK } from \"../constants.js\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nconst MUSTACHE_REGEXP = /\\{\\{([^\\}]+)\\}\\}/g;\r\nconst MUSTACHE_TYPES:Set<string> = new Set(['if', 'for', 'endif', 'endfor', 'elseif', 'else']);\r\n\r\ntype MustacheType = 'if' | 'for' | 'endif' | 'endfor' | 'elseif' | 'else';\r\ntype MustacheInfo = {\r\n  type: MustacheType;\r\n  remain: string; // after first ':'\r\n  expr: string;\r\n}\r\n\r\nexport function replaceMustacheWithTemplateTag(html: string): string {\r\n  const stack:MustacheInfo[] = [];\r\n  return html.replaceAll(MUSTACHE_REGEXP, (match, expr) => {\r\n    expr = expr.trim();\r\n    const [ type ] = expr.split(':');\r\n    if (!MUSTACHE_TYPES.has(type)) {\r\n      // embed\r\n      return `<!--${COMMENT_EMBED_MARK}${expr}-->`;\r\n    }\r\n    const remain = expr.slice(type.length + 1).trim();\r\n    const currentInfo:MustacheInfo = { type, expr, remain };\r\n    if (type === 'if' || type === 'for') {\r\n      stack.push(currentInfo);\r\n      return `<template data-bind=\"${expr}\">`;\r\n    } else if (type === 'endif') {\r\n      const endTags = [];\r\n      do {\r\n        const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        if (info.type === 'if') {\r\n          endTags.push('</template>');\r\n          break;\r\n        } else if (info.type === 'elseif') {\r\n          endTags.push('</template>');\r\n        } else {\r\n          raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n        }\r\n      } while(true);\r\n      return endTags.join('');\r\n    } else if (type === 'endfor') {\r\n      const info = stack.pop() ?? raiseError('replaceMustacheToTemplateOrEmbed: endif without if');\r\n      if (info.type === 'for') {\r\n        return '</template>';\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: endfor without for');\r\n      }\r\n    } else if (type === 'elseif') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      if (lastInfo.type === 'if' || lastInfo.type === 'elseif') {\r\n        stack.push(currentInfo);\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\"><template data-bind=\"if:${remain}\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: elseif without if');\r\n      }\r\n    } else if (type === 'else') {\r\n      const lastInfo = stack.at(-1) ?? raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      if (lastInfo.type === 'if') {\r\n        return `</template><template data-bind=\"if:${lastInfo.remain}|not\">`;\r\n      } else {\r\n        raiseError('replaceMustacheToTemplateOrEmbed: else without if');\r\n      }\r\n    } else {\r\n      raiseError('replaceMustacheToTemplateOrEmbed: unknown type');\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n","/**\r\n * replaceTemplateTagWithComment.ts\r\n *\r\n * <template>タグをコメントノードに置換し、テンプレートを再帰的に登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 指定したHTMLTemplateElementをコメントノード（<!--template:id-->）に置換\r\n * - SVG内のtemplateタグは通常のtemplate要素に変換し、属性や子ノードを引き継ぐ\r\n * - テンプレート内の入れ子templateも再帰的に置換・登録\r\n * - registerTemplateでテンプレートをID付きで管理\r\n *\r\n * 設計ポイント:\r\n * - テンプレートの階層構造を維持しつつ、DOM上はコメントノードでマーク\r\n * - SVG対応や属性引き継ぎなど、汎用的なテンプレート処理に対応\r\n * - generateIdでユニークIDを割り当て、テンプレート管理を一元化\r\n */\r\nimport { COMMENT_TEMPLATE_MARK, DATA_BIND_ATTRIBUTE } from \"../constants.js\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { registerTemplate } from \"./registerTemplate.js\";\r\n\r\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport function replaceTemplateTagWithComment(\r\n  id      : number, \r\n  template: HTMLTemplateElement,\r\n  rootId  : number = id\r\n):number {\r\n  // テンプレートの親ノードが存在する場合は、テンプレートをコメントノードに置き換える\r\n  template.parentNode?.replaceChild(document.createComment(`${COMMENT_TEMPLATE_MARK}${id}`), template);\r\n  if (template.namespaceURI === SVG_NS) {\r\n    // SVGタグ内のtemplateタグを想定\r\n    const newTemplate = document.createElement(\"template\");\r\n    for(let childNode of Array.from(template.childNodes)) {\r\n      newTemplate.content.appendChild(childNode);\r\n    }\r\n    const bindText = template.getAttribute(DATA_BIND_ATTRIBUTE);\r\n    newTemplate.setAttribute(DATA_BIND_ATTRIBUTE, bindText ?? \"\");\r\n    template = newTemplate;\r\n  }\r\n  template.content.querySelectorAll(\"template\").forEach(template => {\r\n    replaceTemplateTagWithComment(generateId(), template, rootId);\r\n  });\r\n  registerTemplate(id, template, rootId);\r\n  return id;\r\n}\r\n","/**\r\n * registerHtml.ts\r\n *\r\n * HTML文字列をテンプレートとして登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 指定IDでHTMLテンプレートを生成し、data-id属性を付与\r\n * - Mustache構文（{{ }})をテンプレートタグに変換（replaceMustacheWithTemplateTagを利用）\r\n * - テンプレートタグをコメントに置換（replaceTemplateTagWithCommentを利用）\r\n *\r\n * 設計ポイント:\r\n * - テンプレートの動的生成・管理や、構文変換による柔軟なテンプレート処理に対応\r\n * - テンプレートはdocument.createElement(\"template\")で生成し、data-idで識別\r\n */\r\nimport { replaceMustacheWithTemplateTag } from \"./replaceMustacheWithTemplateTag.js\";\r\nimport { replaceTemplateTagWithComment } from \"./replaceTemplateTagWithComment.js\";\r\n\r\nexport function registerHtml(id: number, html:string) {\r\n  const template = document.createElement(\"template\");\r\n  template.dataset.id = id.toString();\r\n  template.innerHTML = replaceMustacheWithTemplateTag(html);\r\n  replaceTemplateTagWithComment(id, template);\r\n}","/**\r\n * getBaseClass.ts\r\n *\r\n * 指定したタグ名（extendTagName）から、その要素のコンストラクタ（基底クラス）を取得するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - extendTagNameが指定されていれば、そのタグのHTMLElementコンストラクタを返す\r\n * - 指定がなければHTMLElementを返す\r\n *\r\n * 設計ポイント:\r\n * - カスタム要素の継承元クラスを動的に取得し、柔軟なWeb Components拡張に対応\r\n */\r\nimport { Constructor } from \"./types\";\r\n\r\nexport function getBaseClass(extendTagName: string | null):Constructor<HTMLElement> {\r\n  return extendTagName ? (document.createElement(extendTagName).constructor as Constructor<HTMLElement>) : HTMLElement;\r\n}","/**\r\n * getComponentConfig.ts\r\n *\r\n * ユーザー設定（IUserConfig）とグローバル設定を統合し、コンポーネントの設定（IComponentConfig）を生成するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - getGlobalConfigでグローバル設定を取得\r\n * - ユーザー設定が優先され、未指定の場合はグローバル設定値を利用\r\n * - enableShadowDomやextendsなどの設定値を一元的に返却\r\n *\r\n * 設計ポイント:\r\n * - ユーザーごとの個別設定と全体のデフォルト設定を柔軟に統合\r\n * - 設定値のデフォルト化や拡張性を考慮した設計\r\n */\r\nimport { getGlobalConfig } from \"./getGlobalConfig.js\";\r\nimport { IUserConfig, IComponentConfig } from \"./types\";\r\n\r\nexport function getComponentConfig(userConfig: IUserConfig): IComponentConfig {\r\n  const globalConfig = getGlobalConfig();\r\n  return {\r\n    enableShadowDom: userConfig.enableShadowDom ?? globalConfig.enableShadowDom,\r\n    extends        : userConfig.extends ?? null,\r\n  };\r\n}","import { IComponentEngine } from \"../ComponentEngine/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { SetLoopContextSymbol } from \"../StateClass/symbols\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { BindParentComponentSymbol, RenderSymbol } from \"./symbols.js\";\r\nimport { IComponentState, IComponentStateHandler, IComponentStateProxy } from \"./types\";\r\n\r\n/**\r\n * createComponentState.ts\r\n * \r\n * Structiveコンポーネントの状態管理を担う「ComponentState」クラスと、そのプロキシ生成関数の実装。\r\n *\r\n * 主な役割:\r\n * - 親コンポーネントとのバインディング（親プロパティのgetter/setterを動的に定義）\r\n * - 親コンポーネントからのバインディング一括登録（bindParentComponent）\r\n * - 状態プロパティの取得・設定・レンダリング（getPropertyValue, setPropertyValue, render）\r\n * - Proxyハンドラで、プロパティアクセスを自動的にget/set/特殊メソッドに振り分け\r\n *\r\n * 構造・設計ポイント:\r\n * - 親子コンポーネント間のデータ連携を柔軟に実現\r\n * - ループコンテキストや非同期更新にも対応\r\n * - Proxyによる柔軟なAPI（state.xxxで直接アクセス可能）\r\n *\r\n * @param engine IComponentEngineインスタンス\r\n * @returns      IComponentStateProxy（Proxyラップされた状態オブジェクト）\r\n */\r\nclass ComponentState implements IComponentState {\r\n  engine: IComponentEngine;\r\n  constructor(engine: IComponentEngine) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  bindParentProperty(binding: IBinding): void {\r\n    const propName = binding.bindingNode.subName;\r\n    Object.defineProperty(this.engine.state, propName, {\r\n      get: () => {\r\n        return binding.bindingState.filteredValue;\r\n      },\r\n      set: (value: any) => {\r\n        const engine = binding.engine;\r\n        const loopContext = binding.parentBindContent.currentLoopContext;\r\n        engine.updater.addProcess(async () => {\r\n          const stateProxy = engine.createWritableStateProxy();\r\n          await stateProxy[SetLoopContextSymbol](loopContext, async () => {\r\n            return binding.updateStateValue(stateProxy, value);\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  unbindParentProperty(binding: IBinding): void {\r\n    const propName = binding.bindingNode.subName;\r\n    Object.defineProperty(this.engine.state, propName, { value:undefined });\r\n  }\r\n  \r\n  bindParentComponent(): void {\r\n    // bindParentComponent\r\n    const parent = this.engine.owner.parentStructiveComponent;\r\n    if (parent === null) {\r\n      return;\r\n    }\r\n    const bindings = parent.getBindingsFromChild(this.engine.owner);\r\n    for (const binding of bindings ?? []) {\r\n      this.bindParentProperty(binding);\r\n    }\r\n  }\r\n\r\n  render(name: string, value:any): void {\r\n    // render\r\n    const info = getStructuredPathInfo(name);\r\n    this.engine.updater.addUpdatedStatePropertyRefValue(info, null, value)\r\n  }\r\n\r\n  getPropertyValue(name: string): any {\r\n    // getPropertyValue\r\n    const info = getStructuredPathInfo(name);\r\n    return this.engine.getPropertyValue(info, null);\r\n  }\r\n\r\n  setPropertyValue(name: string, value: any): void {\r\n    // setPropertyValue\r\n    const info = getStructuredPathInfo(name);\r\n    this.engine.setPropertyValue(info, null, value); \r\n  }\r\n}\r\n\r\nclass ComponentStateHandler implements IComponentStateHandler {\r\n  get(state: IComponentState, prop: PropertyKey, receiver: IComponentState): any {\r\n    if (prop === RenderSymbol) {\r\n      return state.render.bind(state);\r\n    } else if (prop === BindParentComponentSymbol) {\r\n      return state.bindParentComponent.bind(state);\r\n    } else if (typeof prop === 'string') {\r\n      return state.getPropertyValue(prop);\r\n    } else {\r\n      return Reflect.get(state, prop, receiver);\r\n    }\r\n  }\r\n\r\n  set(state: IComponentState, prop: PropertyKey, value: any, receiver: IComponentState): boolean {\r\n    if (typeof prop === 'string') {\r\n      state.setPropertyValue(prop, value);\r\n      return true;\r\n    } else {\r\n      return Reflect.set(state, prop, value, receiver);\r\n    }\r\n  }\r\n};\r\n\r\nexport const createComponentState = (engine: IComponentEngine): IComponentStateProxy => {\r\n  return new Proxy<IComponentState>(new ComponentState(engine), new ComponentStateHandler()) as IComponentStateProxy;\r\n}","/**\r\n * createAccessorFunctions.ts\r\n *\r\n * Stateプロパティのパス情報（IStructuredPathInfo）から、動的なgetter/setter関数を生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - パス情報とgetter集合から、最適なアクセサ関数（get/set）を動的に生成\r\n * - ワイルドカード（*）やネストしたプロパティパスにも対応\r\n * - パスやセグメントのバリデーションも実施\r\n *\r\n * 設計ポイント:\r\n * - matchPathsから最長一致のgetterパスを探索し、そこからの相対パスでアクセサを構築\r\n * - パスが一致しない場合はinfo.pathSegmentsから直接アクセサを生成\r\n * - new Functionで高速なgetter/setterを動的生成\r\n * - パスやセグメント名は正規表現で厳密にチェックし、安全性を担保\r\n */\r\nimport { getStructuredPathInfo } from \"./getStructuredPathInfo\";\r\nimport { IAccessorFunctions, IStructuredPathInfo } from \"./types\";\r\n\r\nconst checkSegmentRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\r\nconst checkPathRegexp = /^[a-zA-Z_$][0-9a-zA-Z_$]*(\\.[a-zA-Z_$][0-9a-zA-Z_$]*|\\.\\*)*$/;\r\n\r\nexport function createAccessorFunctions(info: IStructuredPathInfo, getters: Set<string>): IAccessorFunctions {\r\n  const matchPaths = new Set(info.cumulativePaths).intersection(getters);\r\n  let len = -1;\r\n  let matchPath = '';\r\n  for(const curPath of matchPaths) {\r\n    const pathSegments = curPath.split('.');\r\n    if (pathSegments.length === 1) {\r\n      continue;\r\n    }\r\n    if (pathSegments.length > len) {\r\n      len = pathSegments.length;\r\n      matchPath = curPath;\r\n    }\r\n  }\r\n  if (matchPath.length > 0) {\r\n    if (!checkPathRegexp.test(matchPath)) {\r\n      throw new Error(`Invalid path: ${matchPath}`);\r\n    }\r\n    const matchInfo = getStructuredPathInfo(matchPath);\r\n    const segments = [];\r\n    let count = matchInfo.wildcardCount;\r\n    for(let i = matchInfo.pathSegments.length; i < info.pathSegments.length; i++) {\r\n      const segment = info.pathSegments[i];\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          throw new Error(`Invalid segment name: ${segment}`);\r\n        }\r\n        segments.push(\".\" + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this[\"${matchPath}\"]${path};`) as ()=> any,\r\n      set : new Function('value', `this[\"${matchPath}\"]${path} = value;`) as (value: any) => void,\r\n    }\r\n  } else {\r\n    const segments = [];\r\n    let count = 0;\r\n    for(const segment of info.pathSegments) {\r\n      if (segment === '*') {\r\n        segments.push(\"[this.$\" + (count + 1) + \"]\");\r\n        count++;\r\n      } else {\r\n        if (!checkSegmentRegexp.test(segment)) {\r\n          throw new Error(`Invalid segment name: ${segment}`);\r\n        }\r\n        segments.push((segments.length > 0 ? \".\" : \"\") + segment);\r\n      }\r\n    }\r\n    const path = segments.join('');\r\n    return {\r\n      get : new Function('', `return this.${path};`) as ()=> any,\r\n      set : new Function('value', `this.${path} = value;`) as (value: any) => void,\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * createComponentClass.ts\r\n *\r\n * StructiveのWeb Components用カスタム要素クラスを動的に生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - ユーザー定義のcomponentData（stateClass, html, css等）からWeb Componentsクラスを生成\r\n * - StateClass/テンプレート/CSS/バインディング情報などをIDで一元管理・登録\r\n * - 独自のget/setトラップやバインディング、親子コンポーネント探索、フィルター拡張など多機能な基盤を提供\r\n * - 静的プロパティでテンプレート・スタイル・StateClass・フィルター・getter情報などにアクセス可能\r\n * - defineメソッドでカスタム要素として登録\r\n *\r\n * 設計ポイント:\r\n * - findStructiveParentで親Structiveコンポーネントを探索し、階層的な状態管理を実現\r\n * - getter/setter/バインディング最適化やアクセサ自動生成（optimizeAccessor）に対応\r\n * - テンプレート・CSS・StateClass・バインディング情報をIDで一元管理し、再利用性・拡張性を確保\r\n * - フィルターやバインディング情報も静的プロパティで柔軟に拡張可能\r\n */\r\nimport { inputBuiltinFilters, outputBuiltinFilters } from \"../Filter/builtinFilters.js\";\r\nimport { FilterWithOptions } from \"../Filter/types\";\r\nimport { generateId } from \"../GlobalId/generateId.js\";\r\nimport { getStateClassById, registerStateClass } from \"../StateClass/registerStateClass.js\";\r\nimport { getStyleSheetById } from \"../StyleSheet/registerStyleSheet.js\";\r\nimport { registerCss } from \"../StyleSheet/regsiterCss.js\";\r\nimport { createComponentEngine } from \"../ComponentEngine/ComponentEngine.js\";\r\nimport { IComponentEngine } from \"../ComponentEngine/types.js\";\r\nimport { registerHtml } from \"../Template/registerHtml.js\";\r\nimport { getTemplateById } from \"../Template/registerTemplate.js\";\r\nimport { getBaseClass } from \"./getBaseClass.js\";\r\nimport { getComponentConfig } from \"./getComponentConfig.js\";\r\nimport { IComponent, IUserComponentData, IUserConfig, StructiveComponentClass, StructiveComponent } from \"./types\";\r\nimport { getListPathsSetById, getPathsSetById } from \"../BindingBuilder/registerDataBindAttributes.js\";\r\nimport { IStructiveState } from \"../StateClass/types\";\r\nimport { IBinding } from \"../DataBinding/types\";\r\nimport { IComponentStateProxy } from \"../ComponentState/types\";\r\nimport { createComponentState } from \"../ComponentState/createComponentState.js\";\r\nimport { getStructuredPathInfo } from \"../StateProperty/getStructuredPathInfo.js\";\r\nimport { createAccessorFunctions } from \"../StateProperty/createAccessorFunctions.js\";\r\nimport { config as globalConfig } from \"./getGlobalConfig.js\";\r\nimport { raiseError } from \"../utils.js\";\r\n\r\nfunction findStructiveParent(el:StructiveComponent): IComponent | null {\r\n  let current = el.parentNode;\r\n  while (current) {\r\n    if ((current as StructiveComponent).state && (current as StructiveComponent).isStructive) {\r\n      return current as StructiveComponent;\r\n    }\r\n    current = current.parentNode;\r\n    if (current instanceof ShadowRoot) {\r\n      if (current.host && (current.host as StructiveComponent).state && (current.host as StructiveComponent).isStructive) {\r\n        return current.host as StructiveComponent;\r\n      }\r\n      current = current.host;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function createComponentClass(componentData: IUserComponentData): StructiveComponentClass {\r\n  const config = (componentData.stateClass.$config ?? {})as IUserConfig;\r\n  const componentConfig = getComponentConfig(config);\r\n  const id = generateId();\r\n  const { html, css, stateClass } = componentData;\r\n  const inputFilters:FilterWithOptions = Object.assign({}, inputBuiltinFilters);\r\n  const outputFilters:FilterWithOptions = Object.assign({}, outputBuiltinFilters);\r\n  stateClass.$isStructive = true;\r\n  registerHtml(id, html);\r\n  registerCss(id, css);\r\n  registerStateClass(id, stateClass);\r\n  const baseClass = getBaseClass(componentConfig.extends);\r\n  const extendTagName = componentConfig.extends;\r\n  return class extends baseClass implements IComponent {\r\n    #engine: IComponentEngine;\r\n    #componentState: IComponentStateProxy;\r\n\r\n    constructor() {\r\n      super();\r\n      this.#engine = createComponentEngine(componentConfig, this as StructiveComponent);\r\n      this.#componentState = createComponentState(this.#engine);\r\n    }\r\n\r\n    connectedCallback() {\r\n      this.#engine.connectedCallback();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n      this.#engine.disconnectedCallback();\r\n    }\r\n\r\n    #parentStructiveComponent: IComponent | null | undefined;\r\n    get parentStructiveComponent(): IComponent | null {\r\n      if (typeof this.#parentStructiveComponent === \"undefined\") {\r\n        this.#parentStructiveComponent = findStructiveParent(this as StructiveComponent);\r\n      }\r\n      return this.#parentStructiveComponent;\r\n    }\r\n\r\n    get state(): IComponentStateProxy {\r\n      return this.#componentState;\r\n    }\r\n\r\n    get isStructive(): boolean {\r\n      return this.#engine.stateClass.$isStructive ?? false;\r\n    }\r\n\r\n    getBindingsFromChild(component: IComponent): Set<IBinding> | null {\r\n      return this.#engine.bindingsByComponent.get(component as StructiveComponent) ?? null;\r\n    }\r\n\r\n    static define(tagName:string) {\r\n      if (extendTagName) {\r\n        customElements.define(tagName, this, { extends: extendTagName });\r\n      } else {\r\n        customElements.define(tagName, this);\r\n      }\r\n    }\r\n\r\n    static get id():number {\r\n      return id;\r\n    }\r\n    static #html:string = html;\r\n    static get html():string {\r\n      return this.#html;\r\n    }\r\n    static set html(value:string) {\r\n      this.#html = value;\r\n      registerHtml(this.id, value);\r\n      this.#template = null;\r\n    }\r\n\r\n    static #css:string = css;\r\n    static get css() {\r\n      return this.#css;\r\n    }\r\n    static set css(value:string) {\r\n      this.#css = value;\r\n      registerCss(this.id, value);\r\n      this.#styleSheet = null;\r\n    }\r\n    static #template: HTMLTemplateElement | null = null;\r\n    static get template():HTMLTemplateElement {\r\n      if (!this.#template) {\r\n        this.#template = getTemplateById(this.id);\r\n      }\r\n      return this.#template;\r\n    }\r\n    static #styleSheet: CSSStyleSheet | null = null;\r\n    static get styleSheet():CSSStyleSheet {\r\n      if (!this.#styleSheet) {\r\n        this.#styleSheet = getStyleSheetById(this.id);\r\n      }\r\n      return this.#styleSheet;\r\n    }\r\n    static #stateClass: IStructiveState | null = null;\r\n    static get stateClass():IStructiveState {\r\n      if (!this.#stateClass) {\r\n        this.#stateClass = getStateClassById(this.id) as IStructiveState;\r\n      }\r\n      return this.#stateClass;\r\n    }\r\n    static #inputFilters:FilterWithOptions = inputFilters;\r\n    static get inputFilters():FilterWithOptions {\r\n      return this.#inputFilters;\r\n    }\r\n    static #outputFilters:FilterWithOptions = outputFilters;\r\n    static get outputFilters():FilterWithOptions {\r\n      return this.#outputFilters;\r\n    }\r\n    static get listPaths(): Set<string> {\r\n      return getListPathsSetById(this.id);\r\n    }\r\n    static get paths(): Set<string> {\r\n      return getPathsSetById(this.id);\r\n    }\r\n    static #getters: Set<string> | null = null;\r\n    static get getters(): Set<string> {\r\n      return this.#getters ?? raiseError(\"getters is null\");\r\n    }\r\n    static #trackedGetters: Set<string> | null = null;\r\n    static get trackedGetters(): Set<string> {\r\n      if(this.#trackedGetters === null) {\r\n        this.#trackedGetters = new Set<string>();\r\n        this.#getters = new Set<string>();\r\n        let currentProto = this.stateClass.prototype;\r\n        while (currentProto && currentProto !== Object.prototype) {\r\n          const trackedGetters = Object.getOwnPropertyDescriptors(currentProto);\r\n          if (trackedGetters) {\r\n            for (const [key, desc] of Object.entries(trackedGetters)) {\r\n              if ((desc as PropertyDescriptor).get && !(desc as PropertyDescriptor).set) {\r\n                this.#trackedGetters.add(key);\r\n              }\r\n              this.#getters.add(key);\r\n            }\r\n          }\r\n          currentProto = Object.getPrototypeOf(currentProto);\r\n        }\r\n        if (globalConfig.optimizeAccessor) {\r\n          for(const path of this.paths) {\r\n            const info = getStructuredPathInfo(path);\r\n            if (info.pathSegments.length === 1) {\r\n              continue;\r\n            }\r\n            if (this.#getters.has(path)) {\r\n              continue;\r\n            }\r\n            const funcs = createAccessorFunctions(info, this.#getters);\r\n            Object.defineProperty(this.stateClass.prototype, path, {\r\n              get: funcs.get,\r\n              set: funcs.set,\r\n              enumerable: true,\r\n              configurable: true,\r\n            });\r\n          }\r\n        }\r\n      }\r\n      return this.#trackedGetters;\r\n\r\n    }\r\n  } as StructiveComponentClass;\r\n}\r\n","/**\r\n * createSingleFileComponent.ts\r\n *\r\n * Structive用のシングルファイルコンポーネント（SFC）をパースし、各要素（HTML, CSS, StateClass）を抽出・生成するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - テキストから<template>・<script type=\"module\">・<style>を抽出し、それぞれを分離\r\n * - <script type=\"module\">はBase64エンコードして動的importし、StateClassとして利用\r\n * - {{...}}埋め込み式は一時的にコメントノード化してHTMLパース時の消失を防止し、復元\r\n * - 各要素（html, css, stateClass, text）をIUserComponentDataとして返却\r\n *\r\n * 設計ポイント:\r\n * - escapeEmbed/unescapeEmbedでMustache構文の安全なパースを実現\r\n * - scriptはdata:URL経由で安全に動的import\r\n * - テンプレート・スクリプト・スタイルを柔軟に分離・管理できる設計\r\n */\r\nimport { IStructiveState } from \"../StateClass/types\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nfunction escapeEmbed(html: string): string {\r\n  return html.replaceAll(/\\{\\{([^\\}]+)\\}\\}/g, (match, expr) => {\r\n    return `<!--{{${expr}}}-->`;\r\n  });\r\n}\r\n\r\nfunction unescapeEmbed(html:string):string {\r\n  return html.replaceAll(/<!--\\{\\{([^\\}]+)\\}\\}-->/g, (match, expr) => {\r\n    return `{{${expr}}}`;\r\n  });\r\n}\r\n\r\nexport async function createSingleFileComponent(text: string): Promise<IUserComponentData> {\r\n  const template = document.createElement(\"template\");\r\n  template.innerHTML = escapeEmbed(text);\r\n\r\n  const html = template.content.querySelector(\"template\");\r\n  html?.remove();\r\n\r\n  const script = template.content.querySelector(\"script[type=module]\") as HTMLScriptElement;\r\n  const b64 = btoa(String.fromCodePoint(...new TextEncoder().encode(script.text)));\r\n  const scriptModule = script ? await import(\"data:application/javascript;base64,\" + b64) : {};\r\n//  const scriptModule = script ? await import(\"data:text/javascript;charset=utf-8,\" + script.text) : {};\r\n  script?.remove();\r\n\r\n  const style = template.content.querySelector(\"style\");\r\n  style?.remove();\r\n\r\n  const stateClass = (scriptModule.default ?? class {}) as IStructiveState;\r\n  \r\n  return {\r\n    text,\r\n    html      : unescapeEmbed(html?.innerHTML ?? \"\").trim(),\r\n    css       : style?.textContent ?? \"\",\r\n    stateClass,\r\n  }\r\n}","/**\r\n * loadSingleFileComponent.ts\r\n *\r\n * 指定パスのシングルファイルコンポーネント（SFC）をfetchし、パースしてIUserComponentDataとして返すユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - fetchで指定パスのSFCファイルを取得\r\n * - テキストとして読み込み、createSingleFileComponentでパース\r\n * - パース結果（IUserComponentData）を返却\r\n *\r\n * 設計ポイント:\r\n * - import.meta.resolveを利用し、パス解決の柔軟性を確保\r\n * - 非同期処理で動的なコンポーネントロードに対応\r\n */\r\nimport { createSingleFileComponent } from \"./createSingleFileComponent.js\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nexport async function loadSingleFileComponent(path: string): Promise<IUserComponentData> {\r\n  const response = await fetch(import.meta.resolve(path));\r\n  const text = await response.text();\r\n  return createSingleFileComponent(text);\r\n}\r\n","/**\r\n * registerComponentClass.ts\r\n *\r\n * StructiveのWeb Componentsクラスを指定したタグ名でカスタム要素として登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - registerComponentClass: 渡されたcomponentClassをtagNameでdefineメソッドを使って登録\r\n *\r\n * 設計ポイント:\r\n * - Web Componentsのカスタム要素登録を簡潔にラップし、再利用性を高める設計\r\n */\r\nimport { StructiveComponentClass } from \"./types\";\r\n\r\nexport function registerComponentClass(tagName: string, componentClass: StructiveComponentClass) {\r\n  componentClass.define(tagName);\r\n}","/**\r\n * registerSingleFileComponents.ts\r\n *\r\n * 複数のシングルファイルコンポーネント（SFC）をまとめてStructiveのWeb Componentsとして登録するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - singleFileComponents（tagNameとパスのマップ）を走査し、各SFCを非同期で取得・パース\r\n * - enableRouterが有効な場合はentryRouteでルーティング情報も登録\r\n * - createComponentClassでWeb Componentsクラスを生成し、registerComponentClassでカスタム要素として登録\r\n *\r\n * 設計ポイント:\r\n * - SFCのロードからWeb Components登録、ルーティング登録までを一括で自動化\r\n * - 非同期処理で複数コンポーネントの動的登録に対応\r\n * - ルートパス\"/root\"の正規化や、@routesプレフィックスの除去など柔軟なパス処理\r\n */\r\nimport { entryRoute } from \"../Router/Router.js\";\r\nimport { createComponentClass } from \"./createComponentClass.js\";\r\nimport { config } from \"./getGlobalConfig.js\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent.js\";\r\nimport { registerComponentClass } from \"./registerComponentClass.js\";\r\nimport { IUserComponentData, SingleFileComponents } from \"./types\";\r\n\r\nexport async function registerSingleFileComponents(singleFileComponents:SingleFileComponents):Promise<void> {\r\n  for(const [ tagName, path ] of Object.entries(singleFileComponents)) {\r\n    let componentData : IUserComponentData | null = null;\r\n    if (config.enableRouter) {\r\n      const routePath = path.startsWith(\"@routes\") ? path.slice(7) : path; // remove the prefix 'routes:'\r\n      entryRoute(tagName, routePath === \"/root\" ? \"/\" : routePath); // routing\r\n    }\r\n    componentData = await loadSingleFileComponent(path);\r\n    const componentClass = createComponentClass(componentData);\r\n    registerComponentClass(tagName, componentClass);\r\n  }\r\n}","/**\r\n * MainWrapper.ts\r\n *\r\n * アプリ全体のレイアウトやルーティングを管理するカスタムエレメント MainWrapper の実装です。\r\n *\r\n * 主な役割:\r\n * - Shadow DOMの有効化やレイアウトテンプレートの動的読み込み\r\n * - レイアウトテンプレートやスタイルの適用\r\n * - ルーター要素（routerTagName）の動的追加\r\n *\r\n * 設計ポイント:\r\n * - config.enableShadowDom でShadow DOMの有効/無効を切り替え\r\n * - config.layoutPath が指定されていればfetchでレイアウトHTMLを取得し、テンプレート・スタイルを適用\r\n * - スタイルはadoptedStyleSheetsでShadowRootまたはdocumentに適用\r\n * - レイアウトが指定されていない場合はデフォルトのslotを挿入\r\n * - config.enableRouter が有効な場合はrouter要素をslotに追加\r\n */\r\nimport { raiseError } from \"../utils\";\r\nimport { config } from \"../WebComponents/getGlobalConfig\";\r\n\r\nconst SLOT_KEY = \"router\";\r\nconst DEFAULT_LAYOUT = `<slot name=\"${SLOT_KEY}\"></slot>`;\r\n\r\nexport class MainWrapper extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n    if (config.enableShadowDom) {\r\n      this.attachShadow({ mode: 'open' });\r\n    }\r\n  }\r\n\r\n  async connectedCallback() {\r\n    await this.loadLayout();\r\n    this.render();\r\n  }\r\n\r\n  get root(): ShadowRoot | HTMLElement {\r\n    return this.shadowRoot ?? this;\r\n  }\r\n\r\n  async loadLayout() {\r\n    if (config.layoutPath) {\r\n      const response = await fetch(config.layoutPath);\r\n      if (response.ok) {\r\n        const layoutText = await response.text();\r\n        const workTemplate = document.createElement(\"template\");\r\n        workTemplate.innerHTML = layoutText;\r\n      \r\n        const template = workTemplate.content.querySelector(\"template\");\r\n        const style = workTemplate.content.querySelector(\"style\") as CSSStyleSheet | null;\r\n      \r\n        this.root.appendChild(template?.content ?? document.createDocumentFragment());\r\n        if (style) {\r\n          const shadowRootOrDocument = this.shadowRoot ?? document;\r\n          const styleSheets = shadowRootOrDocument.adoptedStyleSheets;\r\n          if (!styleSheets.includes(style)) {\r\n            shadowRootOrDocument.adoptedStyleSheets = [...styleSheets, style];\r\n          }\r\n        }\r\n      } else {\r\n        raiseError(`Failed to load layout from ${config.layoutPath}`);\r\n      }\r\n    } else {\r\n      this.root.innerHTML = DEFAULT_LAYOUT;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // add router\r\n    if (config.enableRouter) {\r\n      const router = document.createElement(config.routerTagName);\r\n      router.setAttribute('slot', SLOT_KEY);\r\n      this.root.appendChild(router);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * loadImportmap.ts\r\n *\r\n * HTML内の<script type=\"importmap\">タグからimportmap情報を取得・統合するユーティリティ関数です。\r\n *\r\n * 主な役割:\r\n * - 複数のimportmapスクリプトタグを走査し、全てのimportsをマージしてIImportMap型で返却\r\n *\r\n * 設計ポイント:\r\n * - scriptタグのinnerHTMLをJSON.parseでパースし、importsプロパティを統合\r\n * - importmap.importsが複数存在する場合もObject.assignでマージ\r\n * - importmap仕様に準拠し、柔軟なimportエイリアス管理を実現\r\n */\r\nimport { IImportMap } from \"./types\";\r\n\r\nexport function loadImportmap():IImportMap {\r\n  const importmap: IImportMap = {};\r\n  document.querySelectorAll(\"script[type='importmap']\").forEach(script => {\r\n    const scriptImportmap = JSON.parse(script.innerHTML);\r\n    if (scriptImportmap.imports) {\r\n      importmap.imports = Object.assign(importmap.imports || {}, scriptImportmap.imports);\r\n    }\r\n  });\r\n  return importmap;\r\n}\r\n\r\n","/**\r\n * loadFromImportMap.ts\r\n *\r\n * importmapの情報をもとに、Structiveのルートやコンポーネントを動的にロード・登録するユーティリティです。\r\n *\r\n * 主な役割:\r\n * - importmap.imports内のエイリアスを走査し、@routes/や@components/のプレフィックスで判定\r\n * - @routes/の場合はルーティング情報をentryRouteで登録\r\n * - @components/の場合はloadSingleFileComponentでSFCをロードし、createComponentClassでクラス化してregisterComponentClassで登録\r\n *\r\n * 設計ポイント:\r\n * - importmapのエイリアスを利用して、ルーティングやコンポーネントの自動登録を実現\r\n * - パスやタグ名の正規化、パラメータ除去なども自動で処理\r\n * - 非同期でSFCをロードし、動的なWeb Components登録に対応\r\n */\r\nimport { entryRoute } from \"../Router/Router\";\r\nimport { createComponentClass } from \"./createComponentClass\";\r\nimport { loadImportmap } from \"./loadImportmap\";\r\nimport { loadSingleFileComponent } from \"./loadSingleFileComponent\";\r\nimport { registerComponentClass } from \"./registerComponentClass\";\r\nimport { IUserComponentData } from \"./types\";\r\n\r\nconst ROUTES_KEY = \"@routes/\";\r\nconst COMPONENTS_KEY = \"@components/\";\r\n\r\nexport async function loadFromImportMap(): Promise<void> {\r\n  const importmap = loadImportmap();\r\n  if (importmap.imports) {\r\n    for (const [alias, value] of Object.entries(importmap.imports)) {\r\n      let tagName;\r\n      if (alias.startsWith(ROUTES_KEY)) {\r\n        const path = alias.slice(ROUTES_KEY.length - 1); // remove the prefix '@routes'\r\n        const pathWithoutParams = path.replace(/:[^\\s/]+/g, \"\"); // remove the params\r\n        tagName = \"routes\" + pathWithoutParams.replace(/\\//g, \"-\"); // replace '/' with '-'\r\n        entryRoute(tagName, path === \"/root\" ? \"/\" : path); // routing\r\n      } if (alias.startsWith(COMPONENTS_KEY)) {\r\n        tagName = alias.slice(COMPONENTS_KEY.length - 1); // remove the prefix '@components'\r\n      }\r\n      if (!tagName) {\r\n        continue;\r\n      }\r\n\r\n      let componentData : IUserComponentData | null = null;\r\n      componentData = await loadSingleFileComponent(alias);\r\n      const componentClass = createComponentClass(componentData);\r\n      registerComponentClass(tagName, componentClass);\r\n    }\r\n  }\r\n\r\n} \r\n","/**\r\n * bootstrap.ts\r\n *\r\n * Structiveアプリケーションの初期化処理を行うエントリーポイントです。\r\n *\r\n * 主な役割:\r\n * - グローバル設定(config)に従い、必要なコンポーネントやルーター、メインラッパーを登録・初期化\r\n * - autoLoadFromImportMapが有効な場合はimportmapからルートやコンポーネントを動的ロード\r\n * - enableRouterが有効な場合はRouterコンポーネントをカスタム要素として登録\r\n * - enableMainWrapperが有効な場合はMainWrapperをカスタム要素として登録し、autoInsertMainWrapperが有効ならbodyに自動挿入\r\n *\r\n * 設計ポイント:\r\n * - 設定値に応じて初期化処理を柔軟に制御\r\n * - importmapやカスタム要素の登録、DOMへの自動挿入など、Structiveの起動に必要な処理を一元化\r\n */\r\nimport { MainWrapper } from \"./MainWrapper/MainWrapper.js\";\r\nimport { Router } from \"./Router/Router.js\";\r\nimport { config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { loadFromImportMap } from \"./WebComponents/loadFromImportMap.js\";\r\n\r\nexport async function bootstrap(): Promise<void> {\r\n  if (config.autoLoadFromImportMap) {\r\n    await loadFromImportMap();\r\n  }\r\n\r\n  if (config.enableRouter) {\r\n    customElements.define(config.routerTagName, Router);\r\n  }\r\n\r\n  if (config.enableMainWrapper) {\r\n    customElements.define(config.mainTagName, MainWrapper);\r\n    if (config.autoInsertMainWrapper) {\r\n      const mainWrapper = document.createElement(config.mainTagName);\r\n      document.body.appendChild(mainWrapper);\r\n    }\r\n  }\r\n}","/**\r\n * exports.ts\r\n *\r\n * Structiveの主要なエントリーポイント・APIを外部公開するモジュールです。\r\n *\r\n * 主な役割:\r\n * - registerSingleFileComponents, bootstrap, config などの主要APIをエクスポート\r\n * - defineComponents: SFC群をまとめて登録し、autoInitが有効なら自動で初期化\r\n * - bootstrapStructive: 初期化処理を一度だけ実行\r\n *\r\n * 設計ポイント:\r\n * - グローバル設定(config)を外部から参照・変更可能\r\n * - 初期化処理の多重実行を防止し、安全な起動を保証\r\n */\r\nimport { registerSingleFileComponents } from \"./WebComponents/registerSingleFIleComponents.js\";\r\nimport { bootstrap } from \"./bootstrap.js\";\r\nimport { config as _config } from \"./WebComponents/getGlobalConfig.js\";\r\nimport { IConfig } from \"./WebComponents/types\";\r\n\r\nexport const config: IConfig = _config;\r\n\r\nlet initialized = false;\r\nexport async function defineComponents(singleFileComponents: Record<string, string>):Promise<void> {\r\n  await registerSingleFileComponents(singleFileComponents);\r\n  if (config.autoInit) {\r\n    await bootstrapStructive();\r\n  }\r\n}\r\n\r\nexport async function bootstrapStructive():Promise<void> {\r\n  if (!initialized) {\r\n    await bootstrap();\r\n    initialized = true;\r\n  }\r\n}\r\n\r\n"],"names":["config","trim","cache","symbolName","COMMENT_TEMPLATE_MARK_LEN","_cache","BLANK_LISTINDEXES_SET","buildListIndexTree","getByRef","methodGetByRef","setCacheable","methodSetChargeable","setByRef","resolve","_resolve","setStatePropertyRef","methodSetStatePropertyRef","setLoopContext","methodSetLoopContext","getLastStatePropertyRef","methodGetLastStatePropertyRef","getContextListIndex","methodGetContextListIndex","apiGetByRef","apiSetCacheable","trapGet","StateHandler","methodSetByRef","apiSetByRef","trapSet","globalConfig","_config"],"mappings":"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"}